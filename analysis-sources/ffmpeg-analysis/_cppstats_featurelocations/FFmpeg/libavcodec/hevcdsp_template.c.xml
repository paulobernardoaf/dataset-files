<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\hevcdsp_template.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdsp.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_pcm</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pcm_bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>pcm_bit_depth</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <name>pcm_bit_depth</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name> <name>FUNC</name></type>(<name>add_residual</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>*</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>add_residual4x4</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>add_residual</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>_dst</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>add_residual8x8</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>add_residual</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>_dst</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>add_residual16x16</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>add_residual</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>_dst</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>add_residual32x32</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>add_residual</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>_dst</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>transform_rdpcm</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_coeffs</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>log2_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <name>_coeffs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>coeffs</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>coeffs</name><index>[<expr><name>x</name> <operator>-</operator> <name>size</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>coeffs</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>coeffs</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>coeffs</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>dequant</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>log2_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">15</literal> <operator>-</operator> <name>BIT_DEPTH</name> <operator>-</operator> <name>log2_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>coeffs</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>coeffs</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>coeffs</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>coeffs</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>coeffs</name> <operator>&lt;&lt;</operator> <operator>-</operator><name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>coeffs</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(dst) = (x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(dst) = av_clip_int16(((x) + add) &gt;&gt; shift)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_4x4_LUMA</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>step</name></type></parameter>, <parameter><type><name>assign</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int c0 = src[0 * step] + src[2 * step]; int c1 = src[2 * step] + src[3 * step]; int c2 = src[0 * step] - src[3 * step]; int c3 = 74 * src[1 * step]; assign(dst[2 * step], 74 * (src[0 * step] - src[2 * step] + src[3 * step])); assign(dst[0 * step], 29 * c0 + 55 * c1 + c3); assign(dst[1 * step], 55 * c2 - 29 * c1 + c3); assign(dst[3 * step], 55 * c0 + 29 * c2 - c3); } while (0)</cpp:value></cpp:define>














<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>transform_4x4_luma</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>add</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>coeffs</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>TR_4x4_LUMA</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">20</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>TR_4x4_LUMA</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coeffs</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TR_4x4_LUMA</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_4</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dstep</name></type></parameter>, <parameter><type><name>sstep</name></type></parameter>, <parameter><type><name>assign</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const int e0 = 64 * src[0 * sstep] + 64 * src[2 * sstep]; const int e1 = 64 * src[0 * sstep] - 64 * src[2 * sstep]; const int o0 = 83 * src[1 * sstep] + 36 * src[3 * sstep]; const int o1 = 36 * src[1 * sstep] - 83 * src[3 * sstep]; assign(dst[0 * dstep], e0 + o0); assign(dst[1 * dstep], e1 + o1); assign(dst[2 * dstep], e1 - o1); assign(dst[3 * dstep], e0 - o0); } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_8</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dstep</name></type></parameter>, <parameter><type><name>sstep</name></type></parameter>, <parameter><type><name>assign</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i, j; int e_8[4]; int o_8[4] = { 0 }; for (i = 0; i &lt; 4; i++) for (j = 1; j &lt; end; j += 2) o_8[i] += transform[4 * j][i] * src[j * sstep]; TR_4(e_8, src, 1, 2 * sstep, SET, 4); for (i = 0; i &lt; 4; i++) { assign(dst[i * dstep], e_8[i] + o_8[i]); assign(dst[(7 - i) * dstep], e_8[i] - o_8[i]); } } while (0)</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_16</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dstep</name></type></parameter>, <parameter><type><name>sstep</name></type></parameter>, <parameter><type><name>assign</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i, j; int e_16[8]; int o_16[8] = { 0 }; for (i = 0; i &lt; 8; i++) for (j = 1; j &lt; end; j += 2) o_16[i] += transform[2 * j][i] * src[j * sstep]; TR_8(e_16, src, 1, 2 * sstep, SET, 8); for (i = 0; i &lt; 8; i++) { assign(dst[i * dstep], e_16[i] + o_16[i]); assign(dst[(15 - i) * dstep], e_16[i] - o_16[i]); } } while (0)</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_32</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dstep</name></type></parameter>, <parameter><type><name>sstep</name></type></parameter>, <parameter><type><name>assign</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i, j; int e_32[16]; int o_32[16] = { 0 }; for (i = 0; i &lt; 16; i++) for (j = 1; j &lt; end; j += 2) o_32[i] += transform[j][i] * src[j * sstep]; TR_16(e_32, src, 1, 2 * sstep, SET, end / 2); for (i = 0; i &lt; 16; i++) { assign(dst[i * dstep], e_32[i] + o_32[i]); assign(dst[(31 - i) * dstep], e_32[i] - o_32[i]); } } while (0)</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_VAR4</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int limit2 = FFMIN(col_limit + 4, H)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_VAR8</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int limit = FFMIN(col_limit, H); int limit2 = FFMIN(col_limit + 4, H)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_VAR16</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IDCT_VAR8(H)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_VAR32</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IDCT_VAR8(H)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void FUNC(idct_ ##H ##x ##H )(int16_t *coeffs, int col_limit) { int i; int shift = 7; int add = 1 &lt;&lt; (shift - 1); int16_t *src = coeffs; IDCT_VAR ##H(H); for (i = 0; i &lt; H; i++) { TR_ ##H(src, src, H, H, SCALE, limit2); if (limit2 &lt; H &amp;&amp; i%4 == 0 &amp;&amp; !!i) limit2 -= 4; src++; } shift = 20 - BIT_DEPTH; add = 1 &lt;&lt; (shift - 1); for (i = 0; i &lt; H; i++) { TR_ ##H(coeffs, coeffs, 1, 1, SCALE, limit); coeffs += H; } }</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_DC</name><parameter_list>(<parameter><type><name>H</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void FUNC(idct_ ##H ##x ##H ##_dc)(int16_t *coeffs) { int i, j; int shift = 14 - BIT_DEPTH; int add = 1 &lt;&lt; (shift - 1); int coeff = (((coeffs[0] + 1) &gt;&gt; 1) + add) &gt;&gt; shift; for (j = 0; j &lt; H; j++) { for (i = 0; i &lt; H; i++) { coeffs[i + j * H] = coeff; } } }</cpp:value></cpp:define>














<macro><name>IDCT</name><argument_list>( <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>IDCT</name><argument_list>( <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>IDCT</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>IDCT</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<macro><name>IDCT_DC</name><argument_list>( <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>IDCT_DC</name><argument_list>( <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>IDCT_DC</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>IDCT_DC</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TR_4</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TR_8</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TR_16</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TR_32</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCALE</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>sao_band_filter</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_src</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sao_left_class</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>offset_table</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride_dst</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>stride_src</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>offset_table</name><index>[<expr><operator>(</operator><name>k</name> <operator>+</operator> <name>sao_left_class</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name><name>sao_offset_val</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>offset_table</name><index>[<expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride_dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride_src</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &gt; (b)) - ((a) &lt; (b)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>sao_edge_filter</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>eo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>edge_idx</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>pos</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_stride</name></decl>, <decl><type ref="prev"/><name>b_stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride_src</name> <init>= <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>stride_dst</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>a_stride</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>eo</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>pos</name><index>[<expr><name>eo</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>stride_src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_stride</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>eo</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>pos</name><index>[<expr><name>eo</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>stride_src</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diff0</name> <init>= <expr><call><name>CMP</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>a_stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff1</name> <init>= <expr><call><name>CMP</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>b_stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_val</name> <init>= <expr><name><name>edge_idx</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>diff0</name> <operator>+</operator> <name>diff1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>sao_offset_val</name><index>[<expr><name>offset_val</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride_src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride_dst</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>sao_edge_restore_0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_src</name></decl></parameter>, <parameter><decl><type><name>SAOParams</name> <modifier>*</modifier></type><name>sao</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>borders</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vert_edge</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>horiz_edge</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>diag_edge</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name> <init>= <expr><name><name>sao</name><operator>-&gt;</operator><name>offset_val</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sao_eo_class</name> <init>= <expr><name><name>sao</name><operator>-&gt;</operator><name>eo_class</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>init_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>width</name> <init>= <expr><name>_width</name></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><name>_height</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride_dst</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>stride_src</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sao_eo_class</name> <operator>!=</operator> <name>SAO_EO_VERT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset_val</name> <init>= <expr><name><name>sao_offset_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride_dst</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride_src</name></expr>]</index></name> <operator>+</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>init_x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>borders</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset_val</name> <init>= <expr><name><name>sao_offset_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>*</operator> <name>stride_dst</name> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <name>stride_src</name> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>+</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>width</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sao_eo_class</name> <operator>!=</operator> <name>SAO_EO_HORIZ</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>borders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset_val</name> <init>= <expr><name><name>sao_offset_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>init_x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>borders</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset_val</name> <init>= <expr><name><name>sao_offset_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>y_stride_dst</name> <init>= <expr><name>stride_dst</name> <operator>*</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>y_stride_src</name> <init>= <expr><name>stride_src</name> <operator>*</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>init_x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>y_stride_dst</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y_stride_src</name></expr>]</index></name> <operator>+</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>height</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>sao_edge_restore_1</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_src</name></decl></parameter>, <parameter><decl><type><name>SAOParams</name> <modifier>*</modifier></type><name>sao</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>borders</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vert_edge</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>horiz_edge</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>diag_edge</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sao_offset_val</name> <init>= <expr><name><name>sao</name><operator>-&gt;</operator><name>offset_val</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sao_eo_class</name> <init>= <expr><name><name>sao</name><operator>-&gt;</operator><name>eo_class</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>init_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>init_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>width</name> <init>= <expr><name>_width</name></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><name>_height</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride_dst</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>stride_src</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sao_eo_class</name> <operator>!=</operator> <name>SAO_EO_VERT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset_val</name> <init>= <expr><name><name>sao_offset_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride_dst</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride_src</name></expr>]</index></name> <operator>+</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>init_x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>borders</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset_val</name> <init>= <expr><name><name>sao_offset_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>*</operator> <name>stride_dst</name> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <name>stride_src</name> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>+</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>width</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sao_eo_class</name> <operator>!=</operator> <name>SAO_EO_HORIZ</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>borders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset_val</name> <init>= <expr><name><name>sao_offset_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>init_x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>init_y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>borders</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset_val</name> <init>= <expr><name><name>sao_offset_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>y_stride_dst</name> <init>= <expr><name>stride_dst</name> <operator>*</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>y_stride_src</name> <init>= <expr><name>stride_src</name> <operator>*</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>init_x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>y_stride_dst</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y_stride_src</name></expr>]</index></name> <operator>+</operator> <name>offset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>height</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_upper_left</name> <init>= <expr><operator>!</operator><name><name>diag_edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>==</operator> <name>SAO_EO_135D</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>borders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_upper_right</name> <init>= <expr><operator>!</operator><name><name>diag_edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>==</operator> <name>SAO_EO_45D</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>borders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>borders</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_lower_right</name> <init>= <expr><operator>!</operator><name><name>diag_edge</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>==</operator> <name>SAO_EO_135D</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>borders</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>borders</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_lower_left</name> <init>= <expr><operator>!</operator><name><name>diag_edge</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>==</operator> <name>SAO_EO_45D</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>borders</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>vert_edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>!=</operator> <name>SAO_EO_VERT</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <name>init_y</name><operator>+</operator><name>save_upper_left</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator> <name>height</name><operator>-</operator><name>save_lower_left</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name><operator>*</operator><name>stride_dst</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>y</name><operator>*</operator><name>stride_src</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>vert_edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>!=</operator> <name>SAO_EO_VERT</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <name>init_y</name><operator>+</operator><name>save_upper_right</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator> <name>height</name><operator>-</operator><name>save_lower_right</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name><operator>*</operator><name>stride_dst</name><operator>+</operator><name>width</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>y</name><operator>*</operator><name>stride_src</name><operator>+</operator><name>width</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>horiz_edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>!=</operator> <name>SAO_EO_HORIZ</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <name>init_x</name><operator>+</operator><name>save_upper_left</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name><operator>-</operator><name>save_upper_right</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>horiz_edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>!=</operator> <name>SAO_EO_HORIZ</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <name>init_x</name><operator>+</operator><name>save_lower_left</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name><operator>-</operator><name>save_lower_right</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride_dst</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><name>height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride_src</name><operator>+</operator><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>diag_edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>==</operator> <name>SAO_EO_135D</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>diag_edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>==</operator> <name>SAO_EO_45D</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>width</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>width</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>diag_edge</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>==</operator> <name>SAO_EO_135D</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>stride_dst</name><operator>*</operator><operator>(</operator><name>height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>width</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>stride_src</name><operator>*</operator><operator>(</operator><name>height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>width</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>diag_edge</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>sao_eo_class</name> <operator>==</operator> <name>SAO_EO_45D</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>stride_dst</name><operator>*</operator><operator>(</operator><name>height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>stride_src</name><operator>*</operator><operator>(</operator><name>height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CMP</name></cpp:undef>




<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_pel_pixels</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_pel_uni_pixels</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_pel_bi_pixels</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_pel_uni_w_pixels</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>denom</name> <operator>+</operator> <literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ox</name> <operator>=</operator> <name>ox</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>wx</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <name>ox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_pel_bi_w_pixels</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ox0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox1</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log2Wd</name> <init>= <expr><name>denom</name> <operator>+</operator> <name>shift</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ox0</name> <operator>=</operator> <name>ox0</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ox1</name> <operator>=</operator> <name>ox1</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>wx1</name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>wx0</name> <operator>+</operator> <operator>(</operator><name>ox0</name> <operator>+</operator> <name>ox1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2Wd</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>log2Wd</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_FILTER</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(filter[0] * src[x - 3 * stride] + filter[1] * src[x - 2 * stride] + filter[2] * src[x - stride] + filter[3] * src[x ] + filter[4] * src[x + stride] + filter[5] * src[x + 2 * stride] + filter[6] * src[x + 3 * stride] + filter[7] * src[x + 4 * stride])</cpp:value></cpp:define>









<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_h</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_qpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_v</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_qpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_hv</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>,
<parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp_array</name><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>QPEL_EXTRA</name><operator>)</operator> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>QPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_qpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <name>QPEL_EXTRA</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <name>QPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_qpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_PB_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_uni_h</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_qpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_bi_h</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_qpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_uni_v</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_qpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_bi_v</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_qpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_uni_hv</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp_array</name><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>QPEL_EXTRA</name><operator>)</operator> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>QPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_qpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <name>QPEL_EXTRA</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <name>QPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_qpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_PB_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_bi_hv</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp_array</name><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>QPEL_EXTRA</name><operator>)</operator> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>QPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_qpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <name>QPEL_EXTRA</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <name>QPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_qpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_PB_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_uni_w_h</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox</name></decl></parameter>,
<parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_qpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>denom</name> <operator>+</operator> <literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ox</name> <operator>=</operator> <name>ox</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>wx</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <name>ox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_bi_w_h</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ox0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox1</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_qpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log2Wd</name> <init>= <expr><name>denom</name> <operator>+</operator> <name>shift</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ox0</name> <operator>=</operator> <name>ox0</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ox1</name> <operator>=</operator> <name>ox1</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>wx1</name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>wx0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>ox0</name> <operator>+</operator> <name>ox1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2Wd</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>log2Wd</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_uni_w_v</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox</name></decl></parameter>,
<parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_qpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>denom</name> <operator>+</operator> <literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ox</name> <operator>=</operator> <name>ox</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>wx</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <name>ox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_bi_w_v</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ox0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox1</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_qpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log2Wd</name> <init>= <expr><name>denom</name> <operator>+</operator> <name>shift</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ox0</name> <operator>=</operator> <name>ox0</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ox1</name> <operator>=</operator> <name>ox1</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>wx1</name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>wx0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>ox0</name> <operator>+</operator> <name>ox1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2Wd</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>log2Wd</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_uni_w_hv</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox</name></decl></parameter>,
<parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp_array</name><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>QPEL_EXTRA</name><operator>)</operator> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>denom</name> <operator>+</operator> <literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>QPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_qpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <name>QPEL_EXTRA</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <name>QPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_qpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ox</name> <operator>=</operator> <name>ox</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_PB_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>*</operator> <name>wx</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <name>ox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_qpel_bi_w_hv</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ox0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox1</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp_array</name><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>QPEL_EXTRA</name><operator>)</operator> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log2Wd</name> <init>= <expr><name>denom</name> <operator>+</operator> <name>shift</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>QPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_qpel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <name>QPEL_EXTRA</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <name>QPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_qpel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ox0</name> <operator>=</operator> <name>ox0</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ox1</name> <operator>=</operator> <name>ox1</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>QPEL_FILTER</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_PB_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>*</operator> <name>wx1</name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>wx0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>ox0</name> <operator>+</operator> <name>ox1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2Wd</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>log2Wd</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPEL_FILTER</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(filter[0] * src[x - stride] + filter[1] * src[x] + filter[2] * src[x + stride] + filter[3] * src[x + 2 * stride])</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_h</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_v</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_hv</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp_array</name><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>EPEL_EXTRA</name><operator>)</operator> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>EPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <name>EPEL_EXTRA</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <name>EPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_epel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_PB_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_uni_h</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_bi_h</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_uni_v</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_bi_v</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_uni_hv</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp_array</name><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>EPEL_EXTRA</name><operator>)</operator> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>EPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <name>EPEL_EXTRA</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <name>EPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_epel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_PB_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_bi_hv</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp_array</name><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>EPEL_EXTRA</name><operator>)</operator> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>EPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <name>EPEL_EXTRA</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <name>EPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_epel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_PB_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_uni_w_h</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>denom</name> <operator>+</operator> <literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ox</name> <operator>=</operator> <name>ox</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>wx</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <name>ox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_bi_w_h</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ox0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox1</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log2Wd</name> <init>= <expr><name>denom</name> <operator>+</operator> <name>shift</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ox0</name> <operator>=</operator> <name>ox0</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ox1</name> <operator>=</operator> <name>ox1</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>wx1</name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>wx0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>ox0</name> <operator>+</operator> <name>ox1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2Wd</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>log2Wd</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_uni_w_v</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>denom</name> <operator>+</operator> <literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ox</name> <operator>=</operator> <name>ox</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>wx</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <name>ox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_bi_w_v</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ox0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox1</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log2Wd</name> <init>= <expr><name>denom</name> <operator>+</operator> <name>shift</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ox0</name> <operator>=</operator> <name>ox0</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ox1</name> <operator>=</operator> <name>ox1</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcstride</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>wx1</name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>wx0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>ox0</name> <operator>+</operator> <name>ox1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2Wd</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>log2Wd</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_uni_w_hv</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp_array</name><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>EPEL_EXTRA</name><operator>)</operator> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>denom</name> <operator>+</operator> <literal type="number">14</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&lt;</operator> <literal type="number">14</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>EPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <name>EPEL_EXTRA</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <name>EPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_epel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ox</name> <operator>=</operator> <name>ox</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_PB_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>*</operator> <name>wx</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <name>ox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>put_hevc_epel_bi_w_hv</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_dststride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_srcstride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wx1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ox0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox1</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name> <init>= <expr><name>_srcstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dststride</name> <init>= <expr><name>_dststride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>ff_hevc_epel_filters</name><index>[<expr><name>mx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp_array</name><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>EPEL_EXTRA</name><operator>)</operator> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>tmp_array</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log2Wd</name> <init>= <expr><name>denom</name> <operator>+</operator> <name>shift</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>EPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>srcstride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <name>EPEL_EXTRA</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcstride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp_array</name> <operator>+</operator> <name>EPEL_EXTRA_BEFORE</name> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>ff_hevc_epel_filters</name><index>[<expr><name>my</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ox0</name> <operator>=</operator> <name>ox0</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ox1</name> <operator>=</operator> <name>ox1</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>EPEL_FILTER</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_PB_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>*</operator> <name>wx1</name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>wx0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>ox0</name> <operator>+</operator> <name>ox1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2Wd</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>log2Wd</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dststride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>MAX_PB_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P3</name></cpp:macro> <cpp:value>pix[-4 * xstride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P2</name></cpp:macro> <cpp:value>pix[-3 * xstride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P1</name></cpp:macro> <cpp:value>pix[-2 * xstride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P0</name></cpp:macro> <cpp:value>pix[-1 * xstride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q0</name></cpp:macro> <cpp:value>pix[0 * xstride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q1</name></cpp:macro> <cpp:value>pix[1 * xstride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q2</name></cpp:macro> <cpp:value>pix[2 * xstride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q3</name></cpp:macro> <cpp:value>pix[3 * xstride]</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TP3</name></cpp:macro> <cpp:value>pix[-4 * xstride + 3 * ystride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TP2</name></cpp:macro> <cpp:value>pix[-3 * xstride + 3 * ystride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TP1</name></cpp:macro> <cpp:value>pix[-2 * xstride + 3 * ystride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TP0</name></cpp:macro> <cpp:value>pix[-1 * xstride + 3 * ystride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TQ0</name></cpp:macro> <cpp:value>pix[0 * xstride + 3 * ystride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TQ1</name></cpp:macro> <cpp:value>pix[1 * xstride + 3 * ystride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TQ2</name></cpp:macro> <cpp:value>pix[2 * xstride + 3 * ystride]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TQ3</name></cpp:macro> <cpp:value>pix[3 * xstride + 3 * ystride]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>hevc_loop_filter_luma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_pix</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>_xstride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_ystride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>_tc</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_no_p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_no_q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_pix</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>xstride</name> <init>= <expr><name>_xstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>ystride</name> <init>= <expr><name>_ystride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>beta</name> <operator>&lt;&lt;=</operator> <name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dp0</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>P2</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>P1</name> <operator>+</operator> <name>P0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dq0</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>Q2</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>Q1</name> <operator>+</operator> <name>Q0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dp3</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>TP2</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>TP1</name> <operator>+</operator> <name>TP0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dq3</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>TQ2</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>TQ1</name> <operator>+</operator> <name>TQ0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0</name> <init>= <expr><name>dp0</name> <operator>+</operator> <name>dq0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><name>dp3</name> <operator>+</operator> <name>dq3</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tc</name> <init>= <expr><name><name>_tc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>no_p</name> <init>= <expr><name><name>_no_p</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>no_q</name> <init>= <expr><name><name>_no_q</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d0</name> <operator>+</operator> <name>d3</name> <operator>&gt;=</operator> <name>beta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pix</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>ystride</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>beta_3</name> <init>= <expr><name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>beta_2</name> <init>= <expr><name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tc25</name> <init>= <expr><operator>(</operator><operator>(</operator><name>tc</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>P3</name> <operator>-</operator> <name>P0</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>Q3</name> <operator>-</operator> <name>Q0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta_3</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>P0</name> <operator>-</operator> <name>Q0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tc25</name> <operator>&amp;&amp;</operator>
<call><name>abs</name><argument_list>(<argument><expr><name>TP3</name> <operator>-</operator> <name>TP0</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>TQ3</name> <operator>-</operator> <name>TQ0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta_3</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>TP0</name> <operator>-</operator> <name>TQ0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tc25</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>d0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>beta_2</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>d3</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>beta_2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tc2</name> <init>= <expr><name>tc</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p3</name> <init>= <expr><name>P3</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p2</name> <init>= <expr><name>P2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p1</name> <init>= <expr><name>P1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p0</name> <init>= <expr><name>P0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q0</name> <init>= <expr><name>Q0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q1</name> <init>= <expr><name>Q1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q2</name> <init>= <expr><name>Q2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q3</name> <init>= <expr><name>Q3</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>P0</name> <operator>=</operator> <name>p0</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>p2</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>p1</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>p0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>p0</name></expr></argument>, <argument><expr><operator>-</operator><name>tc2</name></expr></argument>, <argument><expr><name>tc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>P1</name> <operator>=</operator> <name>p1</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>p1</name></expr></argument>, <argument><expr><operator>-</operator><name>tc2</name></expr></argument>, <argument><expr><name>tc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>P2</name> <operator>=</operator> <name>p2</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>p3</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>p2</name></expr></argument>, <argument><expr><operator>-</operator><name>tc2</name></expr></argument>, <argument><expr><name>tc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Q0</name> <operator>=</operator> <name>q0</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>p1</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>p0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>q0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>q0</name></expr></argument>, <argument><expr><operator>-</operator><name>tc2</name></expr></argument>, <argument><expr><name>tc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Q1</name> <operator>=</operator> <name>q1</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>q1</name></expr></argument>, <argument><expr><operator>-</operator><name>tc2</name></expr></argument>, <argument><expr><name>tc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Q2</name> <operator>=</operator> <name>q2</name> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>q3</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>q2</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>q2</name></expr></argument>, <argument><expr><operator>-</operator><name>tc2</name></expr></argument>, <argument><expr><name>tc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>ystride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>nd_p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nd_q</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tc_2</name> <init>= <expr><name>tc</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dp0</name> <operator>+</operator> <name>dp3</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>beta</name> <operator>+</operator> <operator>(</operator><name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nd_p</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dq0</name> <operator>+</operator> <name>dq3</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>beta</name> <operator>+</operator> <operator>(</operator><name>beta</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nd_q</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p2</name> <init>= <expr><name>P2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p1</name> <init>= <expr><name>P1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p0</name> <init>= <expr><name>P0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q0</name> <init>= <expr><name>Q0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q1</name> <init>= <expr><name>Q1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q2</name> <init>= <expr><name>Q2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta0</name> <init>= <expr><operator>(</operator><literal type="number">9</literal> <operator>*</operator> <operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>q1</name> <operator>-</operator> <name>p1</name><operator>)</operator> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal> <operator>*</operator> <name>tc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delta0</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>delta0</name></expr></argument>, <argument><expr><operator>-</operator><name>tc</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>P0</name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>p0</name> <operator>+</operator> <name>delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_q</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Q0</name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>q0</name> <operator>-</operator> <name>delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_p</name> <operator>&amp;&amp;</operator> <name>nd_p</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>deltap1</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>p2</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>p1</name> <operator>+</operator> <name>delta0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>tc_2</name></expr></argument>, <argument><expr><name>tc_2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>P1</name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <name>deltap1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_q</name> <operator>&amp;&amp;</operator> <name>nd_q</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>deltaq1</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>q2</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>q1</name> <operator>-</operator> <name>delta0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>tc_2</name></expr></argument>, <argument><expr><name>tc_2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Q1</name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>q1</name> <operator>+</operator> <name>deltaq1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>ystride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>hevc_loop_filter_chroma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_xstride</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>_ystride</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>_tc</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_no_p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_no_q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>no_p</name></decl>, <decl><type ref="prev"/><name>no_q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_pix</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>xstride</name> <init>= <expr><name>_xstride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>ystride</name> <init>= <expr><name>_ystride</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tc</name> <init>= <expr><name><name>_tc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pix</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>ystride</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>no_p</name> <operator>=</operator> <name><name>_no_p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>no_q</name> <operator>=</operator> <name><name>_no_q</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p1</name> <init>= <expr><name>P1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p0</name> <init>= <expr><name>P0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q0</name> <init>= <expr><name>Q0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q1</name> <init>= <expr><name>Q1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>delta0</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>p1</name> <operator>-</operator> <name>q1</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><name>tc</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>P0</name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>p0</name> <operator>+</operator> <name>delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_q</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Q0</name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>q0</name> <operator>-</operator> <name>delta0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>ystride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>hevc_h_loop_filter_chroma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_p</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>hevc_loop_filter_chroma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>hevc_v_loop_filter_chroma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_p</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>hevc_loop_filter_chroma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>hevc_h_loop_filter_luma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_p</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>hevc_loop_filter_luma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>hevc_v_loop_filter_luma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_p</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>no_q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>hevc_loop_filter_luma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>,
<argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P3</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Q0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Q1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Q2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Q3</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TP3</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TP2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TP1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TP0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TQ0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TQ1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TQ2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TQ3</name></cpp:undef>
</unit>
