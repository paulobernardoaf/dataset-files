<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\celp_filters.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_celp_convolve_circ</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>fc_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>fc_in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fc_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fc_in</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fc_out</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>fc_in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><name>len</name> <operator>+</operator> <name>k</name> <operator>-</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fc_out</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>fc_in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[ <expr><name>k</name> <operator>-</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_celp_circ_addf</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lagged</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lag</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>lag</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>fac</name> <operator>*</operator> <name><name>lagged</name><index>[<expr><name>n</name> <operator>+</operator> <name>k</name> <operator>-</operator> <name>lag</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>fac</name> <operator>*</operator> <name><name>lagged</name><index>[ <expr><name>k</name> <operator>-</operator> <name>lag</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_celp_lp_synthesis_filter</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter_coeffs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffer_length</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>filter_length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stop_on_overflow</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>buffer_length</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><operator>-</operator><name>rounder</name></expr></init></decl>, <decl><type ref="prev"/><name>sum1</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>filter_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>filter_coeffs</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>out</name><index>[<expr><name>n</name><operator>-</operator><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>-</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>sum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stop_on_overflow</name> <operator>&amp;&amp;</operator> <name>sum</name> <operator>!=</operator> <name>sum1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_celp_lp_synthesis_filterf</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter_coeffs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffer_length</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>filter_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
for (n = 0; n &lt; buffer_length; n++) {
out[n] = in[n];
for (i = 1; i &lt;= filter_length; i++)
out[n] -= filter_coeffs[i-1] * out[n-i];
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>float</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>old_out0</name></decl>, <decl><type ref="prev"/><name>old_out1</name></decl>, <decl><type ref="prev"/><name>old_out2</name></decl>, <decl><type ref="prev"/><name>old_out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>filter_length</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>filter_length</name><operator>&gt;=</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_out0</name> <operator>=</operator> <name><name>out</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_out1</name> <operator>=</operator> <name><name>out</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_out2</name> <operator>=</operator> <name><name>out</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_out3</name> <operator>=</operator> <name><name>out</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>buffer_length</name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>n</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>tmp0</name></decl>,<decl><type ref="prev"/><name>tmp1</name></decl>,<decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>old_out1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>old_out2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>old_out3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>old_out2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>old_out3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>old_out3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>filter_coeffs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out3</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filter_length</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>old_out3</name> <operator>=</operator> <name><name>out</name><index>[<expr><operator>-</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>filter_coeffs</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_out2</name> <operator>=</operator> <name><name>out</name><index>[<expr><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>filter_coeffs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>-=</operator> <name>val</name> <operator>*</operator> <name>old_out1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>old_out0</name></expr></argument>, <argument><expr><name>old_out2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_out1</name> <operator>=</operator> <name>old_out3</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>out0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>out1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>out2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>-=</operator> <name>a</name> <operator>*</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>-=</operator> <name>a</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>-=</operator> <name>a</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>-=</operator> <name>b</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>-=</operator> <name>b</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out3</name> <operator>-=</operator> <name>c</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>out0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>out1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>out2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>out3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_out0</name> <operator>=</operator> <name>out0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_out1</name> <operator>=</operator> <name>out1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_out2</name> <operator>=</operator> <name>out2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_out3</name> <operator>=</operator> <name>out3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>out</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>buffer_length</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>filter_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-=</operator> <name><name>filter_coeffs</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>out</name><index>[<expr><name>n</name><operator>-</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_celp_lp_zero_synthesis_filterf</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter_coeffs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffer_length</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>filter_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>buffer_length</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>filter_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+=</operator> <name><name>filter_coeffs</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><name>n</name><operator>-</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_celp_filter_init</name><parameter_list>(<parameter><decl><type><name>CELPFContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>celp_lp_synthesis_filterf</name></name> <operator>=</operator> <name>ff_celp_lp_synthesis_filterf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>celp_lp_zero_synthesis_filterf</name></name> <operator>=</operator> <name>ff_celp_lp_zero_synthesis_filterf</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>HAVE_MIPSFPU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_celp_filter_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
