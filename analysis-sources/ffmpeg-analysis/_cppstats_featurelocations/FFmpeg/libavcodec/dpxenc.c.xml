<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dpxenc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DPXContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>big_endian</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits_per_component</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_components</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>descriptor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planar</name></decl>;</decl_stmt>
}</block></struct></type> <name>DPXContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DPXContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_component</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_components</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">51</literal></expr> </then><else>: <expr><literal type="number">50</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planar</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <literal type="number">52</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GRAY16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>descriptor</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRP10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_component</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"unsupported pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>write16_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>big_endian</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>write32_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>big_endian</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write16</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write16_internal(s-&gt;big_endian, p, value)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write32_internal(s-&gt;big_endian, p, value)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_rgb48_10bit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DPXContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>big_endian</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFC0U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFC0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFC0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFC0U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFC0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFC0U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_gbrp10</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DPXContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>big_endian</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_gbrp12</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DPXContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
<expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>pad</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name>pad</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>pad</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>value</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>big_endian</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write16</name><argument_list>(<argument><expr><name>dst</name><operator>++</operator></expr></argument>, <argument><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pad</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DPXContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>need_align</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_SIZE</name></cpp:macro> <cpp:value>1664</cpp:value></cpp:define> 
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_component</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_component</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_align</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>*=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_components</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bits_per_component</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_align</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>*=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"V1.0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">160</literal></expr></argument>, <argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">660</literal></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>write16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">768</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>write16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">770</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">772</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">776</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">800</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>descriptor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">801</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">802</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">803</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bits_per_component</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">804</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bits_per_component</name></name> <operator>==</operator> <literal type="number">10</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>bits_per_component</name></name> <operator>==</operator> <literal type="number">12</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">808</literal></expr></argument>, <argument><expr><name>HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1628</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1632</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_component</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>need_align</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <name>need_align</name><operator>)</operator> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>need_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <name>need_align</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>av_image_copy_to_buffer</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>HEADER_SIZE</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>HEADER_SIZE</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>planar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>encode_gbrp10</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>encode_rgb48_10bit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><call><name>encode_gbrp12</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>HEADER_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported bit depth: %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_component</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_dpx_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dpx"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DPX (Digital Picture Exchange) image"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DPX</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DPXContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>encode_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_frame</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{
<expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_ABGR</name></expr>,
<expr><name>AV_PIX_FMT_GRAY16LE</name></expr>, <expr><name>AV_PIX_FMT_GRAY16BE</name></expr>,
<expr><name>AV_PIX_FMT_RGB48LE</name></expr>, <expr><name>AV_PIX_FMT_RGB48BE</name></expr>,
<expr><name>AV_PIX_FMT_RGBA64LE</name></expr>, <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>,
<expr><name>AV_PIX_FMT_GBRP10LE</name></expr>, <expr><name>AV_PIX_FMT_GBRP10BE</name></expr>,
<expr><name>AV_PIX_FMT_GBRP12LE</name></expr>, <expr><name>AV_PIX_FMT_GBRP12BE</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
