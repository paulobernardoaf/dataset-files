<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\arm\vp56_arith.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_ARM_VP56_ARITH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_ARM_VP56_ARITH_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_THUMB</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_THUMB</name> <operator>||</operator> <name>defined</name> <name>__clang__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ARMV6_INLINE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp56_rac_get_prob</name></cpp:macro> <cpp:value>vp56_rac_get_prob_armv6</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vp56_rac_get_prob_armv6</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>shift</name> <init>= <expr><name><name>ff_vp56_norm_shift</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>code_word</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>code_word</name></name> <operator>&lt;&lt;</operator> <name>shift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>high</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>&lt;&lt;</operator> <name>shift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bit</name></decl>;</decl_stmt>

<asm>__asm__ ("adds %3, %3, %0 \n"
"itt cs \n"
"cmpcs %7, %4 \n"
L("ldrcsh %2, [%4], #2 \n")
U("ldrhcs %2, [%4], #2 \n")
"rsb %0, %6, #256 \n"
"smlabb %0, %5, %6, %0 \n"
T("itttt cs \n")
"rev16cs %2, %2 \n"
T("lslcs %2, %2, %3 \n")
T("orrcs %1, %1, %2 \n")
A("orrcs %1, %1, %2, lsl %3 \n")
"subcs %3, %3, #16 \n"
"lsr %0, %0, #8 \n"
"cmp %1, %0, lsl #16 \n"
"ittte ge \n"
"subge %1, %1, %0, lsl #16 \n"
"subge %0, %5, %0 \n"
"movge %2, #1 \n"
"movlt %2, #0 \n"
: "=&amp;r"(c-&gt;high), "=&amp;r"(c-&gt;code_word), "=&amp;r"(bit),
"+&amp;r"(c-&gt;bits), "+&amp;r"(c-&gt;buffer)
: "r"(high), "r"(pr), "r"(c-&gt;end - 1),
"0"(shift), "1"(code_word)
: "cc");</asm>

<return>return <expr><name>bit</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp56_rac_get_prob_branchy</name></cpp:macro> <cpp:value>vp56_rac_get_prob_branchy_armv6</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vp56_rac_get_prob_branchy_armv6</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>shift</name> <init>= <expr><name><name>ff_vp56_norm_shift</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>code_word</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>code_word</name></name> <operator>&lt;&lt;</operator> <name>shift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>high</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>&lt;&lt;</operator> <name>shift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tmp</name></decl>;</decl_stmt>

<asm>__asm__ ("adds %3, %3, %0 \n"
"itt cs \n"
"cmpcs %7, %4 \n"
L("ldrcsh %2, [%4], #2 \n")
U("ldrhcs %2, [%4], #2 \n")
"rsb %0, %6, #256 \n"
"smlabb %0, %5, %6, %0 \n"
T("itttt cs \n")
"rev16cs %2, %2 \n"
T("lslcs %2, %2, %3 \n")
T("orrcs %1, %1, %2 \n")
A("orrcs %1, %1, %2, lsl %3 \n")
"subcs %3, %3, #16 \n"
"lsr %0, %0, #8 \n"
"lsl %2, %0, #16 \n"
: "=&amp;r"(low), "+&amp;r"(code_word), "=&amp;r"(tmp),
"+&amp;r"(c-&gt;bits), "+&amp;r"(c-&gt;buffer)
: "r"(high), "r"(pr), "r"(c-&gt;end - 1), "0"(shift)
: "cc");</asm>

<if_stmt><if>if <condition>(<expr><name>code_word</name> <operator>&gt;=</operator> <name>tmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>=</operator> <name>high</name> <operator>-</operator> <name>low</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>code_word</name></name> <operator>=</operator> <name>code_word</name> <operator>-</operator> <name>tmp</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>code_word</name></name> <operator>=</operator> <name>code_word</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
