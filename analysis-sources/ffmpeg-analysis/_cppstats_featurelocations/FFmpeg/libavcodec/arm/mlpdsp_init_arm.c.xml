<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\arm\mlpdsp_init_arm.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/arm/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mlpdsp.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ff_mlp_filter_channel_arm</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>coeff</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>firorder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iirorder</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>filter_shift</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>mask</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blocksize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>sample_buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_mlp_rematrix_channel_arm</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bypassed_lsbs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>noise_buffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>dest_ch</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>blockpos</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>maxchan</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>matrix_noise_shift</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>access_unit_size_pow2</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_PACK</name><parameter_list>(<parameter><type><name>order</name></type></parameter>,<parameter><type><name>channels</name></type></parameter>,<parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int32_t ff_mlp_pack_output_##order##order_##channels##ch_##shift##shift_armv6(int32_t, uint16_t, int32_t (*)[], void *, uint8_t*, int8_t *, uint8_t, int);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUMERATE_PACK</name><parameter_list>(<parameter><type><name>order</name></type></parameter>,<parameter><type><name>channels</name></type></parameter>,<parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ff_mlp_pack_output_##order##order_##channels##ch_##shift##shift_armv6,</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK_CHANNELS</name><parameter_list>(<parameter><type><name>macro</name></type></parameter>,<parameter><type><name>order</name></type></parameter>,<parameter><type><name>channels</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>macro(order,channels,0) macro(order,channels,1) macro(order,channels,2) macro(order,channels,3) macro(order,channels,4) macro(order,channels,5) macro(order,channels,mixed)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK_ORDER</name><parameter_list>(<parameter><type><name>macro</name></type></parameter>,<parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PACK_CHANNELS(macro,order,2) PACK_CHANNELS(macro,order,6) PACK_CHANNELS(macro,order,8)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK_ALL</name><parameter_list>(<parameter><type><name>macro</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PACK_ORDER(macro,outof) PACK_ORDER(macro,in)</cpp:value></cpp:define>


<macro><name>PACK_ALL</name><argument_list>(<argument>DECLARE_PACK</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_2ch_mixedshift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_6ch_mixedshift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_8ch_mixedshift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_THUMB</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_2ch_0shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_2ch_1shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_2ch_2shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_2ch_3shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_2ch_4shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_2ch_5shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_6ch_0shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_6ch_1shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_6ch_2shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_6ch_3shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_6ch_4shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_6ch_5shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_8ch_0shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_8ch_1shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_8ch_2shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_8ch_3shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_8ch_4shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mlp_pack_output_outoforder_8ch_5shift_armv6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <macro><name>int32_t</name> <argument_list>(<argument>*mlp_select_pack_output_armv6(uint8_t *ch_assign,
int8_t *output_shift,
uint8_t max_matrix_channel,
int is32)</argument>)</argument_list></macro><operator>(</operator><name>int32_t</name><operator>,</operator> <name>uint16_t</name><operator>,</operator> <call><name>int32_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[]</index><operator>,</operator> <name>void</name> <operator>*</operator><operator>,</operator> <name>uint8_t</name><operator>*</operator><operator>,</operator> <name>int8_t</name> <operator>*</operator><operator>,</operator> <name>uint8_t</name><operator>,</operator> <name>int</name><operator>)</operator>
<block>{
<expr><name>int</name> <name>ch_index</name></expr>;
<expr><name>int</name> <name>shift</name> <operator>=</operator> <ternary><condition><expr><name><name>output_shift</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>output_shift</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><name><name>output_shift</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;
<expr><name>int</name> <name>inorder</name> <operator>=</operator> <literal type="number">1</literal></expr>;
<expr><specifier>static</specifier> <call><call><name>int32_t</name> <argument_list>(<argument><expr><operator>*</operator><specifier>const</specifier> <name><name>routine</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><call><name>int32_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[]</index></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>, <argument><expr><name>int8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{
<macro><name>PACK_ALL</name><argument_list>(<argument>ENUMERATE_PACK</argument>)</argument_list></macro>
}</block></expr>;
<expr><name>int</name> <name>i</name></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is32</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>ff_mlp_pack_output</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<switch>switch <condition>(<expr><name>max_matrix_channel</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>ch_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>ch_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>ch_index</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>ff_mlp_pack_output</name></expr>;</return>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max_matrix_channel</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>!=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>output_shift</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>shift</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>ch_assign</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inorder</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_THUMB</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inorder</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ff_mlp_pack_output</name></expr>;</return></block_content></block></if></if_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>inorder</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ff_mlp_pack_output</name></expr>;</return></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name><name>routine</name><index>[<expr><operator>(</operator><name>inorder</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>ch_index</name><operator>)</operator><operator>*</operator><literal type="number">7</literal><operator>+</operator><name>shift</name></expr>]</index></name></expr>;</return>
}

av_cold <function><type><name>void</name></type> <name>ff_mlpdsp_init_arm</name><parameter_list>(<parameter><decl><type><name>MLPDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_armv5te</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mlp_filter_channel</name></name> <operator>=</operator> <name>ff_mlp_filter_channel_arm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mlp_rematrix_channel</name></name> <operator>=</operator> <name>ff_mlp_rematrix_channel_arm</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>have_armv6</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mlp_select_pack_output</name></name> <operator>=</operator> <name>mlp_select_pack_output_armv6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
