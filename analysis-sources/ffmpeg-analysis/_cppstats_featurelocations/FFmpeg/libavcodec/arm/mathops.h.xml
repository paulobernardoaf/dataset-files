<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\arm\mathops.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_ARM_MATHOPS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_ARM_MATHOPS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ARMV6_INLINE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULH</name></cpp:macro> <cpp:value>MULH</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>MULH</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<asm>__asm__ ("smmul %0, %1, %2" : "=r"(r) : "r"(a), "r"(b));</asm>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTDIV</name></cpp:macro> <cpp:value>FASTDIV</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>FASTDIV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<asm>__asm__ ("cmp %2, #2 \n\t"
"ldr %0, [%3, %2, lsl #2] \n\t"
"ite le \n\t"
"lsrle %0, %1, #1 \n\t"
"smmulgt %0, %0, %1 \n\t"
: "=&amp;r"(r) : "r"(a), "r"(b), "r"(ff_inverse) : "cc");</asm>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTDIV</name></cpp:macro> <cpp:value>FASTDIV</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>FASTDIV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<asm>__asm__ ("umull %1, %0, %2, %3"
: "=&amp;r"(r), "=&amp;r"(t) : "r"(a), "r"(ff_inverse[b]));</asm>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLS64</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MAC64(d, -(a), b)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ARMV5TE_INLINE</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC16</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>, <parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ ("smlabb %0, %1, %2, %0" : "+r"(rt) : "r"(ra), "r"(rb));</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL16</name></cpp:macro> <cpp:value>MUL16</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>MUL16</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ra</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rt</name></decl>;</decl_stmt>
<asm>__asm__ ("smulbb %0, %1, %2" : "=r"(rt) : "r"(ra), "r"(rb));</asm>
<return>return <expr><name>rt</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mid_pred</name></cpp:macro> <cpp:value>mid_pred</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>mid_pred</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
<asm>__asm__ (
"mov %0, %2 \n\t"
"cmp %1, %2 \n\t"
"itt gt \n\t"
"movgt %0, %1 \n\t"
"movgt %1, %2 \n\t"
"cmp %1, %3 \n\t"
"it le \n\t"
"movle %1, %3 \n\t"
"cmp %0, %1 \n\t"
"it gt \n\t"
"movgt %0, %1 \n\t"
: "=&amp;r"(m), "+r"(a)
: "r"(b), "r"(c)
: "cc");</asm>
<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
