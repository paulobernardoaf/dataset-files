<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vaapi_decode.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_decode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_hevc.h"</cpp:file></cpp:include>


<function><type><name>int</name></type> <name>ff_vaapi_decode_make_param_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VABufferID</name></type> <name>buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>MAX_PARAM_BUFFERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create parameter "</literal>
<literal type="string">"buffer (type %d): %d (%s).\n"</literal></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name><index>[<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Param buffer (type %d, %zu bytes) "</literal>
<literal type="string">"is %#x.\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>ff_vaapi_decode_make_slice_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>params_data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>params_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>slice_data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>slice_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>&lt;=</operator> <name><name>pic</name><operator>-&gt;</operator><name>slices_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>slices_allocated</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>slices_allocated</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>slices_allocated</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>slices_allocated</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name></name> <operator>=</operator>
<call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name></name></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>slices_allocated</name></name></expr></argument>,
<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>pic</name><operator>-&gt;</operator><name>slices_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,
<argument><expr><name>VASliceParameterBufferType</name></expr></argument>,
<argument><expr><name>params_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>params_data</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create slice "</literal>
<literal type="string">"parameter buffer: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Slice %d param buffer (%zu bytes) "</literal>
<literal type="string">"is %#x.\n"</literal></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr></argument>, <argument><expr><name>params_size</name></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,
<argument><expr><name>VASliceDataBufferType</name></expr></argument>,
<argument><expr><name>slice_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>slice_data</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create slice "</literal>
<literal type="string">"data buffer (size %zu): %d (%s).\n"</literal></expr></argument>,
<argument><expr><name>slice_size</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vaDestroyBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Slice %d data buffer (%zu bytes) "</literal>
<literal type="string">"is %#x.\n"</literal></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr></argument>, <argument><expr><name>slice_size</name></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_vaapi_decode_destroy_buffers</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDestroyBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to destroy "</literal>
<literal type="string">"parameter buffer %#x: %d (%s).\n"</literal></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDestroyBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to destroy slice "</literal>
<literal type="string">"slice buffer %#x: %d (%s).\n"</literal></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vaapi_decode_issue</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Decode to surface %#x.\n"</literal></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>output_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaBeginPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>output_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to begin picture decode "</literal>
<literal type="string">"issue: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_with_picture</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaRenderPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to upload decode "</literal>
<literal type="string">"parameters: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_with_picture</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaRenderPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,
<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to upload slices: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_with_picture</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaEndPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to end picture decode "</literal>
<literal type="string">"issue: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>CONFIG_VAAPI_1</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>&amp;</operator>
<name>AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>fail_at_end</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_VAAPI_1</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>&amp;</operator>
<name>AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vaapi_decode_destroy_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>

<label><name>fail_with_picture</name>:</label>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaEndPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to end picture decode "</literal>
<literal type="string">"after error: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_vaapi_decode_destroy_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail_at_end</name>:</label>
<label><name>exit</name>:</label>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>slices_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vaapi_decode_cancel</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_vaapi_decode_destroy_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>slices_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slice_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>
}</block> <decl><name><name>vaapi_format_map</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP</name><parameter_list>(<parameter><type><name>va</name></type></parameter>, <parameter><type><name>av</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ VA_FOURCC_ ##va, AV_PIX_FMT_ ##av }</cpp:value></cpp:define>

<expr><call><name>MAP</name><argument_list>(<argument><expr><name>Y800</name></expr></argument>, <argument><expr><name>GRAY8</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>MAP</name><argument_list>(<argument><expr><name>NV12</name></expr></argument>, <argument><expr><name>NV12</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>YV12</name></expr></argument>, <argument><expr><name>YUV420P</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>IYUV</name></expr></argument>, <argument><expr><name>YUV420P</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_I420</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>I420</name></expr></argument>, <argument><expr><name>YUV420P</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>IMC3</name></expr></argument>, <argument><expr><name>YUV420P</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>MAP</name><argument_list>(<argument><expr><literal type="number">411P</literal></expr></argument>, <argument><expr><name>YUV411P</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>MAP</name><argument_list>(<argument><expr><literal type="number">422H</literal></expr></argument>, <argument><expr><name>YUV422P</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_YV16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>YV16</name></expr></argument>, <argument><expr><name>YUV422P</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>YUY2</name></expr></argument>, <argument><expr><name>YUYV422</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_Y210</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>Y210</name></expr></argument>, <argument><expr><name>Y210</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>MAP</name><argument_list>(<argument><expr><literal type="number">422V</literal></expr></argument>, <argument><expr><name>YUV440P</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>MAP</name><argument_list>(<argument><expr><literal type="number">444P</literal></expr></argument>, <argument><expr><name>YUV444P</name></expr></argument>)</argument_list></call></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_P010</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>P010</name></expr></argument>, <argument><expr><name>P010</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_I010</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>I010</name></expr></argument>, <argument><expr><name>YUV420P10</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAP</name></cpp:undef>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_decode_find_best_format</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><name>VAConfigID</name></type> <name>config_id</name></decl></parameter>,
<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceAttrib</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>source_format</name></decl>, <decl><type ref="prev"/><name>best_format</name></decl>, <decl><type ref="prev"/><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>best_fourcc</name></decl>, <decl><type ref="prev"/><name>fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>nb_attr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>source_format</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>source_format</name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQuerySurfaceAttributes</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>config_id</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query surface attributes: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>nb_attr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>attr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQuerySurfaceAttributes</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>config_id</name></expr></argument>,
<argument><expr><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query surface attributes: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>best_format</name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_attr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>VASurfaceAttribPixelFormat</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fourcc</name> <operator>=</operator> <name><name>attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_format_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fourcc</name> <operator>==</operator> <name><name>vaapi_format_map</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fourcc</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_format_map</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Ignoring unknown format %#x.\n"</literal></expr></argument>,
<argument><expr><name>fourcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name><name>vaapi_format_map</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Considering format %#x -&gt; %s.\n"</literal></expr></argument>,
<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>best_format</name> <operator>=</operator> <call><name>av_find_best_pix_fmt_of_2</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>best_format</name></expr></argument>,
<argument><expr><name>source_format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>best_format</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>best_fourcc</name> <operator>=</operator> <name>fourcc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>best_format</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No usable formats for decoding!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Picked %s (%#x) as best match for %s.\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>best_format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>best_fourcc</name></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>source_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name>best_format</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIFramesContext</name> <modifier>*</modifier></type><name>avfc</name> <init>= <expr><name><name>frames</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pixel_format_attribute</name></name> <operator>=</operator> <operator>(</operator><name>VASurfaceAttrib</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VASurfaceAttribPixelFormat</name></expr>,
<expr><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>best_fourcc</name></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avfc</name><operator>-&gt;</operator><name>attributes</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pixel_format_attribute</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avfc</name><operator>-&gt;</operator><name>nb_attributes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codec_profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAProfile</name></type> <name>va_profile</name></decl>;</decl_stmt>
<function_decl><type><name>VAProfile</name></type> (<modifier>*</modifier><name>profile_parser</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>vaapi_profile_map</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ AV_CODEC_ID_ ##c, FF_PROFILE_ ##p, VAProfile ##v, __VA_ARGS__ }</cpp:value></cpp:define>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>MPEG2VIDEO</name></expr></argument>, <argument><expr><name>MPEG2_SIMPLE</name></expr></argument>, <argument><expr><name>MPEG2Simple</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>MPEG2VIDEO</name></expr></argument>, <argument><expr><name>MPEG2_MAIN</name></expr></argument>, <argument><expr><name>MPEG2Main</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>H263</name></expr></argument>, <argument><expr><name>UNKNOWN</name></expr></argument>, <argument><expr><name>H263Baseline</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>MPEG4</name></expr></argument>, <argument><expr><name>MPEG4_SIMPLE</name></expr></argument>, <argument><expr><name>MPEG4Simple</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>MPEG4</name></expr></argument>, <argument><expr><name>MPEG4_ADVANCED_SIMPLE</name></expr></argument>,
<argument><expr><name>MPEG4AdvancedSimple</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>MPEG4</name></expr></argument>, <argument><expr><name>MPEG4_MAIN</name></expr></argument>, <argument><expr><name>MPEG4Main</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>H264</name></expr></argument>, <argument><expr><name>H264_CONSTRAINED_BASELINE</name></expr></argument>,
<argument><expr><name>H264ConstrainedBaseline</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>H264</name></expr></argument>, <argument><expr><name>H264_MAIN</name></expr></argument>, <argument><expr><name>H264Main</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>H264</name></expr></argument>, <argument><expr><name>H264_HIGH</name></expr></argument>, <argument><expr><name>H264High</name></expr></argument> )</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">37</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>HEVC</name></expr></argument>, <argument><expr><name>HEVC_MAIN</name></expr></argument>, <argument><expr><name>HEVCMain</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>HEVC</name></expr></argument>, <argument><expr><name>HEVC_MAIN_10</name></expr></argument>, <argument><expr><name>HEVCMain10</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>HEVC</name></expr></argument>, <argument><expr><name>HEVC_MAIN_STILL_PICTURE</name></expr></argument>,
<argument><expr><name>HEVCMain</name></expr></argument> )</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>HEVC</name></expr></argument>, <argument><expr><name>HEVC_REXT</name></expr></argument>, <argument><expr><name>None</name></expr></argument>,
<argument><expr><name>ff_vaapi_parse_hevc_rext_profile</name></expr></argument> )</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>MJPEG</name></expr></argument>, <argument><expr><name>MJPEG_HUFFMAN_BASELINE_DCT</name></expr></argument>,
<argument><expr><name>JPEGBaseline</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>WMV3</name></expr></argument>, <argument><expr><name>VC1_SIMPLE</name></expr></argument>, <argument><expr><name>VC1Simple</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>WMV3</name></expr></argument>, <argument><expr><name>VC1_MAIN</name></expr></argument>, <argument><expr><name>VC1Main</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>WMV3</name></expr></argument>, <argument><expr><name>VC1_COMPLEX</name></expr></argument>, <argument><expr><name>VC1Advanced</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>WMV3</name></expr></argument>, <argument><expr><name>VC1_ADVANCED</name></expr></argument>, <argument><expr><name>VC1Advanced</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>VC1</name></expr></argument>, <argument><expr><name>VC1_SIMPLE</name></expr></argument>, <argument><expr><name>VC1Simple</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>VC1</name></expr></argument>, <argument><expr><name>VC1_MAIN</name></expr></argument>, <argument><expr><name>VC1Main</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>VC1</name></expr></argument>, <argument><expr><name>VC1_COMPLEX</name></expr></argument>, <argument><expr><name>VC1Advanced</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>VC1</name></expr></argument>, <argument><expr><name>VC1_ADVANCED</name></expr></argument>, <argument><expr><name>VC1Advanced</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>VP8</name></expr></argument>, <argument><expr><name>UNKNOWN</name></expr></argument>, <argument><expr><name>VP8Version0_3</name></expr></argument> )</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">38</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>VP9</name></expr></argument>, <argument><expr><name>VP9_0</name></expr></argument>, <argument><expr><name>VP9Profile0</name></expr></argument> )</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">39</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>VP9</name></expr></argument>, <argument><expr><name>VP9_2</name></expr></argument>, <argument><expr><name>VP9Profile2</name></expr></argument> )</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAP</name></cpp:undef>
}</block></expr></init></decl>;</struct>





<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_decode_make_config</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ref</name></decl></parameter>,
<parameter><decl><type><name>VAConfigID</name> <modifier>*</modifier></type><name>va_config</name></decl></parameter>,
<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>frames_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIHWConfig</name> <modifier>*</modifier></type><name>hwconfig</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesConstraints</name> <modifier>*</modifier></type><name>constraints</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>codec_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAProfile</name> <modifier>*</modifier></type><name>profile_list</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>matched_va_profile</name></decl>, <decl><type ref="prev"/><name>va_profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile_count</name></decl>, <decl><type ref="prev"/><name>exact_match</name></decl>, <decl><type ref="prev"/><name>matched_ff_profile</name></decl>, <decl><type ref="prev"/><name>codec_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>device_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>device</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>codec_desc</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec_desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>profile_count</name> <operator>=</operator> <call><name>vaMaxNumProfiles</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>profile_list</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>profile_count</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VAProfile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>profile_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQueryConfigProfiles</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,
<argument><expr><name>profile_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>profile_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query profiles: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>matched_va_profile</name> <operator>=</operator> <name>VAProfileNone</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exact_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_profile_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>profile_match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name><name>vaapi_profile_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_id</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name><name>vaapi_profile_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_profile</name> <operator>||</operator>
<name><name>vaapi_profile_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_profile</name> <operator>==</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>profile_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>va_profile</name> <operator>=</operator> <ternary><condition><expr><name><name>vaapi_profile_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>profile_parser</name></expr> ?</condition><then>
<expr><name><name>vaapi_profile_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>profile_parser</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><name><name>vaapi_profile_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>va_profile</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>codec_profile</name> <operator>=</operator> <name><name>vaapi_profile_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_profile</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>profile_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>va_profile</name> <operator>==</operator> <name><name>profile_list</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exact_match</name> <operator>=</operator> <name>profile_match</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>profile_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>matched_va_profile</name> <operator>=</operator> <name>va_profile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>matched_ff_profile</name> <operator>=</operator> <name>codec_profile</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exact_match</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>profile_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matched_va_profile</name> <operator>==</operator> <name>VAProfileNone</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No support for codec %s "</literal>
<literal type="string">"profile %d.\n"</literal></expr></argument>, <argument><expr><name><name>codec_desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exact_match</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_flags</name></name> <operator>&amp;</operator>
<name>AV_HWACCEL_FLAG_ALLOW_PROFILE_MISMATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Codec %s profile %d not "</literal>
<literal type="string">"supported for hardware decode.\n"</literal></expr></argument>,
<argument><expr><name><name>codec_desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Using possibly-"</literal>
<literal type="string">"incompatible profile %d instead.\n"</literal></expr></argument>,
<argument><expr><name>matched_ff_profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Codec %s profile %d not "</literal>
<literal type="string">"supported for hardware decode.\n"</literal></expr></argument>,
<argument><expr><name><name>codec_desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateConfig</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>matched_va_profile</name></expr></argument>,
<argument><expr><name>VAEntrypointVLD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>va_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create decode "</literal>
<literal type="string">"configuration: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hwconfig</name> <operator>=</operator> <call><name>av_hwdevice_hwconfig_alloc</name><argument_list>(<argument><expr><name>device_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwconfig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hwconfig</name><operator>-&gt;</operator><name>config_id</name></name> <operator>=</operator> <operator>*</operator><name>va_config</name></expr>;</expr_stmt>

<expr_stmt><expr><name>constraints</name> <operator>=</operator>
<call><name>av_hwdevice_get_hwframe_constraints</name><argument_list>(<argument><expr><name>device_ref</name></expr></argument>, <argument><expr><name>hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>constraints</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>&lt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>min_width</name></name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>&lt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>min_height</name></name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>&gt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>max_width</name></name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>&gt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>max_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Hardware does not support image "</literal>
<literal type="string">"size %dx%d (constraints: width %d-%d height %d-%d).\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>,
<argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>min_width</name></name></expr></argument>, <argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_width</name></name></expr></argument>,
<argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>min_height</name></name></expr></argument>, <argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name> <operator>||</operator>
<name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Hardware does not offer any "</literal>
<literal type="string">"usable surface formats.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frames_ref</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name> <operator>*</operator><operator>)</operator><name><name>frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frames</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frames</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frames</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_decode_find_best_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><operator>*</operator><name>va_config</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frames</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>
<expr_stmt><expr><name><name>frames</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_VP9</name></expr>:</case>
<expr_stmt><expr><name><name>frames</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_VP8</name></expr>:</case>
<expr_stmt><expr><name><name>frames</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>frames</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_hwframe_constraints_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_hwframe_constraints_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>va_config</name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vaDestroyConfig</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>*</operator><name>va_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>va_config</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>profile_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vaapi_common_frame_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hw_frames</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name> <operator>*</operator><operator>)</operator><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device_ctx</name> <init>= <expr><name><name>hw_frames</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAConfigID</name></type> <name>va_config</name> <init>= <expr><name>VA_INVALID_ID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_HWDEVICE_TYPE_VAAPI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hwctx</name> <operator>=</operator> <name><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_decode_make_config</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>hw_frames</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>va_config</name></expr></argument>,
<argument><expr><name>hw_frames_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>va_config</name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vaDestroyConfig</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>va_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vaapi_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_STRUCT_VAAPI_CONTEXT</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Using deprecated struct "</literal>
<literal type="string">"vaapi_context in decode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>have_old_context</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>old_context</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name> <operator>=</operator>
<call><name>av_hwdevice_ctx_alloc</name><argument_list>(<argument><expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>old_context</name><operator>-&gt;</operator><name>display</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>=</operator>
<name>AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_STRUCT_VAAPI_CONTEXT</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>have_old_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>old_context</name><operator>-&gt;</operator><name>config_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>old_context</name><operator>-&gt;</operator><name>context_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using user-supplied decoder "</literal>
<literal type="string">"context: %#x/%#x.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_decode_get_hw_frames_ctx</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwfc</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frames</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frames</name><operator>-&gt;</operator><name>device_ctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_decode_make_config</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frames</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateContext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>,
<argument><expr><name>VA_PROGRESSIVE</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwfc</name><operator>-&gt;</operator><name>surface_ids</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwfc</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create decode "</literal>
<literal type="string">"context: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Decode context initialised: "</literal>
<literal type="string">"%#x/%#x.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_STRUCT_VAAPI_CONTEXT</name></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_vaapi_decode_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vaapi_decode_uninit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDecodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_STRUCT_VAAPI_CONTEXT</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>have_old_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDestroyContext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to destroy decode "</literal>
<literal type="string">"context %#x: %d (%s).\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDestroyConfig</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to destroy decode "</literal>
<literal type="string">"configuration %#x: %d (%s).\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_STRUCT_VAAPI_CONTEXT</name></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
