<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vp6.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"huffman.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp6data.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP6_MAX_HUFF_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vp6_parse_coeff</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vp6_parse_coeff_huffman</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp6_parse_header</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parse_filter_info</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coeff_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vrt_shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sub_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>separated_coeff</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp56_init_dequant</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sub_version</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sub_version</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_header</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Interlacing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>separated_coeff</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>filter_header</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>coeff_offset</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rows</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>cols</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rows</name> <operator>||</operator> <operator>!</operator><name>cols</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid size %dx%d\n"</literal></expr></argument>, <argument><expr><name>cols</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>rows</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name> <operator>||</operator> 
<literal type="number">16</literal><operator>*</operator><name>cols</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>||</operator>
<literal type="number">16</literal><operator>*</operator><name>rows</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">16</literal> <operator>*</operator> <name>cols</name> <operator>&amp;&amp;</operator>
<call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">16</literal> <operator>*</operator> <name>rows</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>cols</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name>rows</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <name>cols</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>VP56_SIZE_CHANGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>buf_size</name><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parse_filter_info</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_header</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sub_version</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vrt_shift</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sub_version</name></name> <operator>=</operator> <name>sub_version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>golden_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sub_version</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>separated_coeff</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>filter_header</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>coeff_offset</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_size</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>golden_frame</name></name> <operator>=</operator> <call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter_header</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>deblock_filtering</name></name> <operator>=</operator> <call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>deblock_filtering</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sub_version</name></name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>parse_filter_info</name> <operator>=</operator> <call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parse_filter_info</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_mode</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_variance_threshold</name></name> <operator>=</operator> <call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vrt_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_vector_length</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_mode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sub_version</name></name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_selection</name></name> <operator>=</operator> <call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_selection</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_huffman</name></name> <operator>=</operator> <call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_coeff</name></name> <operator>=</operator> <name>vp6_parse_coeff</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>coeff_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>coeff_offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_huffman</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_coeff</name></name> <operator>=</operator> <name>vp6_parse_coeff_huffman</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name><operator>&lt;&lt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ccp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cc</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ccp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>VP56_SIZE_CHANGE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp6_coeff_order_table_init</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name><operator>-&gt;</operator><name>coeff_index_to_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>pos</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>pos</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name><operator>-&gt;</operator><name>coeff_reorder</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name><operator>-&gt;</operator><name>coeff_index_to_pos</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>idx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name><operator>-&gt;</operator><name>coeff_index_to_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sub_version</name></name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name><operator>-&gt;</operator><name>coeff_index_to_idct_selector</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp6_default_models_init</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_dct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xA2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_dct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xA4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_sig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_sig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name></name></expr></argument>, <argument><expr><name>ff_vp56_def_mb_types_stats</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_fdv</name></name></expr></argument>, <argument><expr><name>vp6_def_fdv_vector_model</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_fdv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdv</name></name></expr></argument>, <argument><expr><name>vp6_def_pdv_vector_model</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_runv</name></name></expr></argument>, <argument><expr><name>vp6_def_runv_coeff_model</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_runv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_reorder</name></name></expr></argument>, <argument><expr><name>vp6_def_coeff_reorder</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_reorder</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp6_coeff_order_table_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp6_parse_vector_models</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>comp</name></decl>, <decl><type ref="prev"/><name>node</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>comp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>comp</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp6_sig_dct_pct</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_dct</name><index>[<expr><name>comp</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp6_sig_dct_pct</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_sig</name><index>[<expr><name>comp</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>comp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>comp</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>node</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>node</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp6_pdv_pct</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdv</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>comp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>comp</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>node</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>node</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp6_fdv_pct</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_fdv</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vp6_huff_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Node</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>va</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name>vb</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>sym</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>sym</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp6_build_huff_tree</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>coeff_model</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Node</name></type> <name><name>nodes</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>VP6_MAX_HUFF_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>&amp;</operator><name><name>nodes</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>*</operator> <name><name>coeff_model</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>coeff_model</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name><name>map</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <name>a</name> <operator>+</operator> <operator>!</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name><name>map</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <name>b</name> <operator>+</operator> <operator>!</operator><name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_huff_build_tree</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>FF_HUFFMAN_BITS</name></expr></argument>,
<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>vp6_huff_cmp</name></expr></argument>,
<argument><expr><name>FF_HUFFMAN_FLAG_HNODE_FIRST</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp6_parse_coeff_models</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>def_prob</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>node</name></decl>, <decl><type ref="prev"/><name>cg</name></decl>, <decl><type ref="prev"/><name>ctx</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ct</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pt</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>def_prob</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>def_prob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pt</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>pt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>node</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>node</name><operator>&lt;</operator><literal type="number">11</literal></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp6_dccv_pct</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_dccv</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_dccv</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>pos</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>pos</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp6_coeff_reorder_pct</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_reorder</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>vp6_coeff_order_table_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>cg</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>cg</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>node</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>node</name><operator>&lt;</operator><literal type="number">14</literal></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp6_runv_pct</name><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_runv</name><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>ct</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ct</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>ct</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>pt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pt</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>pt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>cg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>cg</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>cg</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>node</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>node</name><operator>&lt;</operator><literal type="number">11</literal></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp6_ract_pct</name><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_ract</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_ract</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_huffman</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>pt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pt</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>pt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp6_build_huff_tree</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_dccv</name><index>[<expr><name>pt</name></expr>]</index></name></expr></argument>,
<argument><expr><name>vp6_huff_coeff_map</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dccv_vlc</name><index>[<expr><name>pt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vp6_build_huff_tree</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_runv</name><index>[<expr><name>pt</name></expr>]</index></name></expr></argument>,
<argument><expr><name>vp6_huff_run_map</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>runv_vlc</name><index>[<expr><name>pt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>ct</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ct</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>ct</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>cg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cg</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>cg</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp6_build_huff_tree</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_ract</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index></name></expr></argument>,
<argument><expr><name>vp6_huff_coeff_map</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ract_vlc</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_null</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_null</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>pt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pt</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>pt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>ctx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ctx</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>ctx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>node</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>node</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_dcct</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>model</name><operator>-&gt;</operator><name>coeff_dccv</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>*</operator> <name><name>vp6_dccv_lc</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>node</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>vp6_dccv_lc</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>node</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp6_parse_vector_adjustment</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>vect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>comp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>vect</name> <operator>=</operator> <operator>(</operator><name>VP56mv</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>vector_candidate_pos</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>vect</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vector_candidate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>comp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>comp</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_dct</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>prob_order</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>prob_order</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>prob_order</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>delta</name> <operator>|=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_fdv</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>|=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_fdv</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>|=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>vp56_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ff_vp56_pva_tree</name></expr></argument>,
<argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdv</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&amp;&amp;</operator> <call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_sig</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>-</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vect</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vect</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>vp6_get_nb_null</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>val</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">6</literal><operator>+</operator><name>val</name> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>+</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp6_parse_coeff_huffman</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>permute</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>idct_scantable</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc_coeff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coeff</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>coeff_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>cg</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vlc_coeff</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dccv_vlc</name><index>[<expr><name>pt</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>coeff_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff_idx</name><operator>&lt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_null</name><index>[<expr><name>coeff_idx</name></expr>]</index><index>[<expr><name>pt</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_null</name><index>[<expr><name>coeff_idx</name></expr>]</index><index>[<expr><name>pt</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff_idx</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>vlc_coeff</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>FF_HUFFMAN_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>coeff_idx</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pt</name> <init>= <expr><operator>(</operator><name>coeff_idx</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>run</name> <operator>+=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>runv_vlc</name><index>[<expr><name>pt</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>FF_HUFFMAN_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>run</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_null</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <call><name>vp6_get_nb_null</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>coeff</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>coeff_idx</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_null</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <call><name>vp6_get_nb_null</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>coeff2</name> <init>= <expr><name><name>ff_vp56_coeff_bias</name><index>[<expr><name>coeff</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coeff2</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>coeff</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr> ?</condition><then> <expr><name>coeff</name> <operator>-</operator> <literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">11</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>coeff2</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff2</name> <operator>=</operator> <operator>(</operator><name>coeff2</name> <operator>^</operator> <operator>-</operator><name>sign</name><operator>)</operator> <operator>+</operator> <name>sign</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff_idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coeff2</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>dequant_ac</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>model</name><operator>-&gt;</operator><name>coeff_index_to_pos</name><index>[<expr><name>coeff_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name><name>permute</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>coeff2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>coeff_idx</name><operator>+=</operator><name>run</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff_idx</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cg</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>vp6_coeff_groups</name><index>[<expr><name>coeff_idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vlc_coeff</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ract_vlc</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idct_selector</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>model</name><operator>-&gt;</operator><name>coeff_index_to_idct_selector</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>coeff_idx</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp6_parse_coeff</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ccp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>permute</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>idct_scantable</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>model1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>model2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>model3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coeff</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>coeff_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>cg</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>vpX_rac_is_end</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"End of AC stream reached in vp6_parse_coeff\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ct</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>left_block</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>not_null_dc</name>
<operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>above_blocks</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>not_null_dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>model1</name> <operator>=</operator> <name><name>model</name><operator>-&gt;</operator><name>coeff_dccv</name><index>[<expr><name>pt</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>model2</name> <operator>=</operator> <name><name>model</name><operator>-&gt;</operator><name>coeff_dcct</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ctx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>coeff_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>coeff_idx</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ct</name><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>vp56_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ff_vp56_pc_tree</name></expr></argument>, <argument><expr><name>model1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <name><name>ff_vp56_coeff_bias</name><index>[<expr><name>idx</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>ff_vp56_coeff_bit_length</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>coeff</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ff_vp56_coeff_parse_table</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff</name> <operator>=</operator> <operator>(</operator><name>coeff</name> <operator>^</operator> <operator>-</operator><name>sign</name><operator>)</operator> <operator>+</operator> <name>sign</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff_idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coeff</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>dequant_ac</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>model</name><operator>-&gt;</operator><name>coeff_index_to_pos</name><index>[<expr><name>coeff_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name><name>permute</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>coeff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>model3</name> <operator>=</operator> <name><name>model</name><operator>-&gt;</operator><name>coeff_runv</name><index>[<expr><name>coeff_idx</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>vp56_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>vp6_pcr_tree</name></expr></argument>, <argument><expr><name>model3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>run</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>run</name><operator>=</operator><literal type="number">9</literal></expr><operator>,</operator> <expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>run</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model3</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>coeff_idx</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coeff_idx</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cg</name> <operator>=</operator> <name><name>vp6_coeff_groups</name><index>[<expr><name>coeff_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>model1</name> <operator>=</operator> <name>model2</name> <operator>=</operator> <name><name>model</name><operator>-&gt;</operator><name>coeff_ract</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>left_block</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>not_null_dc</name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>above_blocks</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>not_null_dc</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idct_selector</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>model</name><operator>-&gt;</operator><name>coeff_index_to_idct_selector</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>coeff_idx</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp6_block_variance</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>square_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>square_sum</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name><operator>*</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">16</literal><operator>*</operator><name>square_sum</name> <operator>-</operator> <name>sum</name><operator>*</operator><name>sum</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp6_filter_hv4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>weights</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator> <name><name>src</name><index>[<expr><name>x</name><operator>-</operator><name>delta</name></expr> ]</index></name> <operator>*</operator> <name><name>weights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>+</operator> <name><name>src</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>*</operator> <name><name>weights</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><name>delta</name></expr> ]</index></name> <operator>*</operator> <name><name>weights</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<operator>+</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>delta</name></expr>]</index></name> <operator>*</operator> <name><name>weights</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp6_filter_diag2</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h_weight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v_weight</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name><operator>+</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>tmp</name><operator>,</operator> <name>src</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <name>h_weight</name><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>tmp</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <name>v_weight</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp6_filter</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>VP56mv</name></type> <name>mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>select</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>luma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>filter4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x8</name> <init>= <expr><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y8</name> <init>= <expr><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>luma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x8</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y8</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>filter4</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_mode</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filter4</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_vector_length</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_vector_length</name></name> <operator>||</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_vector_length</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sample_variance_threshold</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vp6_block_variance</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><name>offset1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_variance_threshold</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filter4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>offset2</name><operator>-</operator><name>offset1</name><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>flip</name></name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>y8</name> <operator>&amp;&amp;</operator> <name>offset1</name> <operator>&gt;</operator> <name>offset2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset1</name> <operator>=</operator> <name>offset2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filter4</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y8</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>vp6_filter_hv4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>offset1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>vp6_block_copy_filter</name><index>[<expr><name>select</name></expr>]</index><index>[<expr><name>x8</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>x8</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>vp6_filter_hv4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>offset1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,
<argument><expr><name><name>vp6_block_copy_filter</name><index>[<expr><name>select</name></expr>]</index><index>[<expr><name>y8</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp56dsp</name><operator>.</operator><name>vp6_filter_diag4</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>offset1</name><operator>+</operator><operator>(</operator><operator>(</operator><name><name>mv</name><operator>.</operator><name>x</name></name><operator>^</operator><name><name>mv</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>,
<argument><expr><name><name>vp6_block_copy_filter</name><index>[<expr><name>select</name></expr>]</index><index>[<expr><name>x8</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>vp6_block_copy_filter</name><index>[<expr><name>select</name></expr>]</index><index>[<expr><name>y8</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x8</name> <operator>||</operator> <operator>!</operator><name>y8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>src</name> <operator>+</operator> <name>offset1</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>,</operator> <name>x8</name><operator>,</operator> <name>y8</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>vp6_filter_diag2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>offset1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>mv</name><operator>.</operator><name>x</name></name><operator>^</operator><name><name>mv</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x8</name></expr></argument>, <argument><expr><name>y8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp6_decode_init_context</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vp6_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP6</name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP6A</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_vp6dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vp56dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp6_decode_init_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VP56Context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp56_init_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>flip</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp6dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name><operator>-&gt;</operator><name>vp56dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp6_decode_init_context</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp6_decode_init_context</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>deblock_filtering</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vp56_coord_div</name></name> <operator>=</operator> <name>vp6_coord_div</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_vector_adjustment</name></name> <operator>=</operator> <name>vp6_parse_vector_adjustment</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>vp6_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>default_models_init</name></name> <operator>=</operator> <name>vp6_default_models_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_vector_models</name></name> <operator>=</operator> <name>vp6_parse_vector_models</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_coeff_models</name></name> <operator>=</operator> <name>vp6_parse_coeff_models</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_header</name></name> <operator>=</operator> <name>vp6_parse_header</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp6_decode_free_context</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vp6_decode_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_vp56_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp6_decode_free_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_vp56_free_context</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp6_decode_free_context</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp6_decode_free_context</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pt</name></decl>, <decl><type ref="prev"/><name>ct</name></decl>, <decl><type ref="prev"/><name>cg</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pt</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>pt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dccv_vlc</name><index>[<expr><name>pt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>runv_vlc</name><index>[<expr><name>pt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ct</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ct</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>ct</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>cg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>cg</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>cg</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ract_vlc</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vp6_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp6"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"On2 VP6"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP6</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VP56Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vp6_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>vp6_decode_free</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_vp56_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vp6f_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp6f"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"On2 VP6 (Flash version)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP6F</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VP56Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vp6_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>vp6_decode_free</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_vp56_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vp6a_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp6a"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"On2 VP6 (Flash version, with alpha channel)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP6A</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VP56Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vp6_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>vp6_decode_free</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_vp56_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
