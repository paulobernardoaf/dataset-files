<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\wma.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_WMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_WMA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_MIN_BITS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_MAX_BITS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_MAX_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; BLOCK_MAX_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_NB_SIZES</name></cpp:macro> <cpp:value>(BLOCK_MAX_BITS - BLOCK_MIN_BITS + 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIGH_BAND_MAX_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_LSP_COEFS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CODED_SUPERFRAME_SIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHANNELS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOISE_TAB_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSP_POW_BITS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLCBITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLCMAX</name></cpp:macro> <cpp:value>((22 + VLCBITS - 1) / VLCBITS)</cpp:value></cpp:define>

<typedef>typedef <type><name>float</name></type> <name>WMACoef</name>;</typedef> 

<typedef>typedef <type><struct>struct <name>CoefVLCTable</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>max_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>huffcodes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>huffbits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>levels</name></decl>;</decl_stmt> 
}</block></struct></type> <name>CoefVLCTable</name>;</typedef>

<typedef>typedef <type><struct>struct <name>WMACodecContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>use_bit_reservoir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_variable_block_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_exp_vlc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>use_noise_coding</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>byte_offset_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name>exp_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>exponent_sizes</name><index>[<expr><name>BLOCK_NB_SIZES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>exponent_bands</name><index>[<expr><name>BLOCK_NB_SIZES</name></expr>]</index><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>high_band_start</name><index>[<expr><name>BLOCK_NB_SIZES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>coefs_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>coefs_end</name><index>[<expr><name>BLOCK_NB_SIZES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>exponent_high_sizes</name><index>[<expr><name>BLOCK_NB_SIZES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>exponent_high_bands</name><index>[<expr><name>BLOCK_NB_SIZES</name></expr>]</index><index>[<expr><name>HIGH_BAND_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name>hgain_vlc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>high_band_coded</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>HIGH_BAND_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>high_band_values</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>HIGH_BAND_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>VLC</name></type> <name><name>coef_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>run_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>level_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>int_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CoefVLCTable</name> <modifier>*</modifier></type><name><name>coef_vlcs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frame_len_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_block_sizes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>reset_block_lengths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_len_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>next_block_len_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>prev_block_len_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>block_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>block_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>block_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ms_stereo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>channel_coded</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>exponents_bsize</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>exponents</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>BLOCK_MAX_SIZE</name></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>max_exponent</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WMACoef</name></type> <name><name>coefs1</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>BLOCK_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>BLOCK_MAX_SIZE</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>FFTSample</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call><index>[<expr><name>BLOCK_MAX_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FFTContext</name></type> <name><name>mdct_ctx</name><index>[<expr><name>BLOCK_NB_SIZES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name><name>windows</name><index>[<expr><name>BLOCK_NB_SIZES</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>frame_out</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>BLOCK_MAX_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>last_superframe</name><index>[<expr><name>MAX_CODED_SUPERFRAME_SIZE</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>last_bitoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_superframe_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>exponents_initialized</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>noise_table</name><index>[<expr><name>NOISE_TAB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noise_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>noise_mult</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>lsp_cos_table</name><index>[<expr><name>BLOCK_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>lsp_pow_e_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>lsp_pow_m_table1</name><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LSP_POW_BITS</name><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>lsp_pow_m_table2</name><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LSP_POW_BITS</name><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>frame_count</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
}</block></struct></type> <name>WMACodecContext</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>ff_wma_hgain_huffcodes</name><index>[<expr><literal type="number">37</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_wma_hgain_huffbits</name><index>[<expr><literal type="number">37</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>ff_wma_lsp_codebook</name><index>[<expr><name>NB_LSP_COEFS</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>ff_aac_scalefactor_code</name><index>[<expr><literal type="number">121</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_aac_scalefactor_bits</name><index>[<expr><literal type="number">121</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>av_warn_unused_result</name>
<name>int</name></type> <name>ff_wma_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_wma_total_gain_to_bits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>total_gain</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_wma_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>ff_wma_get_large_val</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_wma_run_level_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>level_table</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>run_table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name>WMACoef</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_coefs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_len_bits</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>coef_nb_bits</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
