<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\pthread.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>










<function><type><specifier>static</specifier> <name>void</name></type> <name>validate_thread_parameters</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>frame_threading_supported</name> <init>= <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_TRUNCATED</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_LOW_DELAY</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_CHUNKS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>frame_threading_supported</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>=</operator> <name>FF_THREAD_FRAME</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>=</operator> <name>FF_THREAD_SLICE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>&gt;</operator> <name>MAX_AUTO_THREADS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Application has requested %d threads. Using a thread count greater than %d is not recommended.\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument>, <argument><expr><name>MAX_AUTO_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_thread_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>validate_thread_parameters</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name><operator>&amp;</operator><name>FF_THREAD_SLICE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_slice_thread_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name><operator>&amp;</operator><name>FF_THREAD_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_frame_thread_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name><operator>&amp;</operator><name>FF_THREAD_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_frame_thread_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_slice_thread_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
