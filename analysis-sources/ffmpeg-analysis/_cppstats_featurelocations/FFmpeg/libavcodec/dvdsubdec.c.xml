<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dvdsubdec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/colorspace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DVDSubContext</name>
<block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>palette_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ifo_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_palette</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>colormap</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>alpha</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">0x10000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>forced_subs_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>used_color</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>sub_id</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>DVDSubContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv_a_to_rgba</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ycbcr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>alpha</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rgba</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>cb</name></decl>, <decl><type ref="prev"/><name>cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r_add</name></decl>, <decl><type ref="prev"/><name>g_add</name></decl>, <decl><type ref="prev"/><name>b_add</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>num_values</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>ycbcr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> <operator>=</operator> <operator>*</operator><name>ycbcr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>*</operator><name>ycbcr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV_TO_RGB1_CCIR</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV_TO_RGB2_CCIR</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rgba</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>alpha</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_run_2bit</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>t</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;=</operator> <literal type="number">0x40</literal></expr>;</condition> <incr><expr><name>t</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>color</name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>INT_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_run_8bit</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_run</name> <init>= <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>color</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_run</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_rle</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>used_color</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_8bit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bit_len</name> <operator>=</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>bit_len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_8bit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>decode_run_8bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>decode_run_2bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name>w</name> <operator>-</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>used_color</name><index>[<expr><name>color</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>h</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>guess_palette</name><parameter_list>(<parameter><decl><type><name>DVDSubContext</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rgba_palette</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>subtitle_color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>level_map</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{


<expr><block>{<expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>color_used</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_opaque_colors</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>colormap</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>colormap</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>alpha</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>has_palette</name></name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rgba_palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name><name>colormap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">17U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rgba_palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>nb_opaque_colors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>color_used</name><index>[<expr><name><name>colormap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>color_used</name><index>[<expr><name><name>colormap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_opaque_colors</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>nb_opaque_colors</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>color_used</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>color_used</name><index>[<expr><name><name>colormap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>level_map</name><index>[<expr><name>nb_opaque_colors</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>subtitle_color</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <name>level</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>subtitle_color</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <name>level</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>subtitle_color</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <name>level</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgba_palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>|</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">17U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_used</name><index>[<expr><name><name>colormap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rgba_palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>rgba_palette</name><index>[<expr><name><name>color_used</name><index>[<expr><name><name>colormap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">17U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_rects</name><parameter_list>(<parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sub_header</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_OFFSET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(big_offsets ? AV_RB32(a) : AV_RB16(a))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_dvd_subtitles</name><parameter_list>(<parameter><decl><type><name>DVDSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub_header</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmd_pos</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>cmd</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>next_cmd_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>big_offsets</name></decl>, <decl><type ref="prev"/><name>offset_size</name></decl>, <decl><type ref="prev"/><name>is_8bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>yuv_palette</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>colormap</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>colormap</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>alpha</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_menu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset1</name></decl>, <decl><type ref="prev"/><name>offset2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>big_offsets</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_pos</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>big_offsets</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_pos</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>READ_OFFSET</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>big_offsets</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_pos</name> <operator>=</operator> <call><name>READ_OFFSET</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>cmd_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd_pos</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>cmd_pos</name></expr></argument> &gt;</argument_list></name> <name>buf_size</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>offset_size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd_pos</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Discarding invalid packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>cmd_pos</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cmd_pos</name> <operator>&lt;</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>offset_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>date</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>cmd_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_cmd_pos</name> <operator>=</operator> <call><name>READ_OFFSET</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>cmd_pos</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cmd_pos=0x%04x next=0x%04x date=%d\n"</literal></expr></argument>,
<argument><expr><name>cmd_pos</name></expr></argument>, <argument><expr><name>next_cmd_pos</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>cmd_pos</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>offset_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>y1</name> <operator>=</operator> <name>x2</name> <operator>=</operator> <name>y2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cmd=%02x\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>

<expr_stmt><expr><name>is_menu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x01</literal></expr>:</case>

<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>start_display_time</name></name> <operator>=</operator> <operator>(</operator><name>date</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>

<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>=</operator> <operator>(</operator><name>date</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <literal type="number">90</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <name>pos</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>colormap</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colormap</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colormap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colormap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x04</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <name>pos</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"alpha=%x%x%x%x\n"</literal></expr></argument>, <argument><expr><name><name>alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>alpha</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x05</literal></expr>:</case>
<case>case <expr><literal type="number">0x85</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <name>pos</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_8bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"x1=%d x2=%d y1=%d y2=%d\n"</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x06</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <name>pos</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset1</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset2</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"offset1=0x%04"</literal><name>PRIx64</name><literal type="string">" offset2=0x%04"</literal><name>PRIx64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x86</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <name>pos</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset1</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset2</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"offset1=0x%04"</literal><name>PRIx64</name><literal type="string">" offset2=0x%04"</literal><name>PRIx64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>offset2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x83</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <name>pos</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">768</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yuv_palette</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">768</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x84</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <name>pos</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal> <operator>-</operator> <name><name>buf</name><index>[<expr><name>pos</name><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xff</literal></expr>:</case>
<goto>goto <name>the_end</name>;</goto>
<default>default:</default>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"unrecognised subpicture command 0x%x\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>the_end</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></while>
<label><name>the_end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>offset1</name> <operator>&gt;=</operator> <name>buf_size</name> <operator>||</operator> <name>offset2</name> <operator>&gt;=</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>offset2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>


<expr_stmt><expr><name>w</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>x1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>y1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reset_rects</name><argument_list>(<argument><expr><name>sub_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>used_color</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>used_color</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVSubtitleRect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>decode_rle</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>used_color</name></name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>is_8bit</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>decode_rle</name><argument_list>(<argument><expr><name>bitmap</name> <operator>+</operator> <name>w</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>used_color</name></name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset2</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>is_8bit</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_8bit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yuv_palette</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yuv_a_to_rgba</name><argument_list>(<argument><expr><name>yuv_palette</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>guess_palette</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0xffff00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>y</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>=</operator> <name>SUBTITLE_BITMAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>=</operator> <ternary><condition><expr><name>is_menu</name></expr> ?</condition><then> <expr><name>AV_SUBTITLE_FLAG_FORCED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPICTURE</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>pict</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>pict</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sub_header</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>next_cmd_pos</name> <operator>&lt;</operator> <name>cmd_pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid command offset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>next_cmd_pos</name> <operator>==</operator> <name>cmd_pos</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmd_pos</name> <operator>=</operator> <name>next_cmd_pos</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>sub_header</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>is_menu</name></expr>;</return></block_content></block></if></if_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>reset_rects</name><argument_list>(<argument><expr><name>sub_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_transp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>transp_color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transp_color</name><index>[<expr><operator>*</operator><name>buf</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>find_smallest_bounding_rectangle</name><parameter_list>(<parameter><decl><type><name>DVDSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>transp_color</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>transparent</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rects</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>transp_color</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>used_color</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>transparent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>transparent</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>y1</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>&amp;&amp;</operator> <call><name>is_transp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y1</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>, <argument><expr><name>transp_color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>y1</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y2</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>y2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>is_transp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y2</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>, <argument><expr><name>transp_color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y2</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>x1</name> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_transp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x1</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr></argument>, <argument><expr><name>transp_color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>x2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>is_transp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x2</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr></argument>,
<argument><expr><name>transp_color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x2</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <name>x1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <name>y1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitmap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bitmap</name> <operator>+</operator> <name>w</name> <operator>*</operator> <name>y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x1</name> <operator>+</operator> <operator>(</operator><name>y1</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name> <operator>+=</operator> <name>x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>y</name> <operator>+=</operator> <name>y1</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPICTURE</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>pict</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>pict</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_MIX</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>BACK</name></type></parameter>,<parameter><type><name>FORE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((255-(A)) * (BACK) + (A) * (FORE)) / 255)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ppm_save</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rgba_palette</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>back</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"P6\n"</literal>
<literal type="string">"%d %d\n"</literal>
<literal type="string">"%d\n"</literal></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>rgba_palette</name><index>[<expr><name><name>bitmap</name><index>[<expr><name>y</name> <operator>*</operator> <name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><call><name>ALPHA_MIX</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name><name>back</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><call><name>ALPHA_MIX</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name><name>back</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><call><name>ALPHA_MIX</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name><name>back</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>append_to_cached_buf</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVDSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>buf_size</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Attempt to reconstruct "</literal>
<literal type="string">"too large SPU packets aborted.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>+=</operator> <name>buf_size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvdsub_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>data_size</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVDSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>appended</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_menu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>append_to_cached_buf</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>data_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>appended</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>is_menu</name> <operator>=</operator> <call><name>decode_dvd_subtitles</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_menu</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>data_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>appended</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>append_to_cached_buf</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_menu</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>no_subtitle</name>:</label>
<expr_stmt><expr><call><name>reset_rects</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_menu</name> <operator>&amp;&amp;</operator> <call><name>find_smallest_bounding_rectangle</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_subtitle</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>forced_subs_only</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>AV_SUBTITLE_FLAG_FORCED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_subtitle</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>ppm_name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ppm_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ppm_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/tmp/%05d.ppm"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sub_id</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"start=%d ms end =%d ms\n"</literal></expr></argument>,
<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>start_display_time</name></name></expr></argument>,
<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ppm_save</name><argument_list>(<argument><expr><name>ppm_name</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator> <name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_ifo_palette</name><parameter_list>(<parameter><decl><type><name>DVDSubContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ifo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ifostr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sp_pgci</name></decl>, <decl><type ref="prev"/><name>pgci</name></decl>, <decl><type ref="prev"/><name>off_pgc</name></decl>, <decl><type ref="prev"/><name>pgc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name><name>yuv</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>cb</name></decl>, <decl><type ref="prev"/><name>cr</name></decl>, <decl><type ref="prev"/><name>r_add</name></decl>, <decl><type ref="prev"/><name>g_add</name></decl>, <decl><type ref="prev"/><name>b_add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>has_palette</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ifo</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to open IFO file \"%s\": %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>ifostr</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ifo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>ifostr</name></expr></argument>, <argument><expr><literal type="string">"DVDVIDEO-VTS"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" is not a proper IFO file\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>ifo</name></expr></argument>, <argument><expr><literal type="number">0xCC</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sp_pgci</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ifo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pgci</name> <operator>=</operator> <call><name>av_be2ne32</name><argument_list>(<argument><expr><name>sp_pgci</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2048</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>ifo</name></expr></argument>, <argument><expr><name>pgci</name> <operator>+</operator> <literal type="number">0x0C</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>off_pgc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ifo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pgc</name> <operator>=</operator> <name>pgci</name> <operator>+</operator> <call><name>av_be2ne32</name><argument_list>(<argument><expr><name>off_pgc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>ifo</name></expr></argument>, <argument><expr><name>pgc</name> <operator>+</operator> <literal type="number">0xA4</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>yuv</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ifo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>yuv</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV_TO_RGB1_CCIR</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV_TO_RGB2_CCIR</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>has_palette</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>has_palette</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to read palette from IFO file \"%s\"\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>ifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvdsub_parse_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVDSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>DVDSubContext</name><operator>*</operator><operator>)</operator> <name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dataorig</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dataorig</name> <operator>=</operator> <name>data</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\n\r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>data</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"palette:"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>has_palette</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dvdsub_parse_palette</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"size:"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"%dx%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\n\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dataorig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dvdsub_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVDSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dvdsub_parse_extradata</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ifo_str</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_ifo_palette</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ifo_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>palette_str</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>has_palette</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dvdsub_parse_palette</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>palette_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>has_palette</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"palette:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" 0x%06"</literal><name>PRIx32</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dvdsub_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVDSubContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dvdsub_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dvdsub_flush</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DVDSubContext, field)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD</name></cpp:macro> <cpp:value>AV_OPT_FLAG_SUBTITLE_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"palette"</literal></expr>, <expr><literal type="string">"set the global palette"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>palette_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ifo_palette"</literal></expr>, <expr><literal type="string">"obtain the global palette from .IFO file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ifo_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forced_subs_only"</literal></expr>, <expr><literal type="string">"Only show forced subtitles"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>forced_subs_only</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>SD</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>dvdsub_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"dvdsubdec"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_dvdsub_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dvdsub"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DVD subtitles"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DVD_SUBTITLE</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DVDSubContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>dvdsub_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>dvdsub_decode</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>dvdsub_flush</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>dvdsub_close</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>dvdsub_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
