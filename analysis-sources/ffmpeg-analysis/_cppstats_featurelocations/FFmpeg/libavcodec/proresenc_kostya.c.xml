<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\proresenc_kostya.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proresdata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFACTOR_Y422</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFACTOR_Y444</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MBS_PER_SLICE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PLANES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>PRORES_PROFILE_AUTO</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>PRORES_PROFILE_PROXY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>PRORES_PROFILE_LT</name></decl>,
<decl><name>PRORES_PROFILE_STANDARD</name></decl>,
<decl><name>PRORES_PROFILE_HQ</name></decl>,
<decl><name>PRORES_PROFILE_4444</name></decl>,
<decl><name>PRORES_PROFILE_4444XQ</name></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>QUANT_MAT_PROXY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>QUANT_MAT_PROXY_CHROMA</name></decl>,
<decl><name>QUANT_MAT_LT</name></decl>,
<decl><name>QUANT_MAT_STANDARD</name></decl>,
<decl><name>QUANT_MAT_HQ</name></decl>,
<decl><name>QUANT_MAT_XQ_LUMA</name></decl>,
<decl><name>QUANT_MAT_DEFAULT</name></decl>,
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>prores_quant_matrices</name><index>[]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>
}</block></expr>,
<expr><block>{ 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">29</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">35</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">41</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_MB_LIMITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>prores_mb_limits</name><index>[<expr><name>NUM_MB_LIMITS</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">1620</literal></expr>, 
<expr><literal type="number">2700</literal></expr>, 
<expr><literal type="number">6075</literal></expr>, 
<expr><literal type="number">9216</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>prores_profile</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>full_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>br_tab</name><index>[<expr><name>NUM_MB_LIMITS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant_chroma</name></decl>;</decl_stmt>
}</block> <decl><name><name>prores_profile_info</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>full_name</name> <operator>=</operator> <literal type="string">"proxy"</literal></expr>,
<expr><operator>.</operator><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>min_quant</name> <operator>=</operator> <literal type="number">4</literal></expr>,
<expr><operator>.</operator><name>max_quant</name> <operator>=</operator> <literal type="number">8</literal></expr>,
<expr><operator>.</operator><name>br_tab</name> <operator>=</operator> <block>{ <expr><literal type="number">300</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">220</literal></expr>, <expr><literal type="number">194</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>quant</name> <operator>=</operator> <name>QUANT_MAT_PROXY</name></expr>,
<expr><operator>.</operator><name>quant_chroma</name> <operator>=</operator> <name>QUANT_MAT_PROXY_CHROMA</name></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>full_name</name> <operator>=</operator> <literal type="string">"LT"</literal></expr>,
<expr><operator>.</operator><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>min_quant</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>max_quant</name> <operator>=</operator> <literal type="number">9</literal></expr>,
<expr><operator>.</operator><name>br_tab</name> <operator>=</operator> <block>{ <expr><literal type="number">720</literal></expr>, <expr><literal type="number">560</literal></expr>, <expr><literal type="number">490</literal></expr>, <expr><literal type="number">440</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>quant</name> <operator>=</operator> <name>QUANT_MAT_LT</name></expr>,
<expr><operator>.</operator><name>quant_chroma</name> <operator>=</operator> <name>QUANT_MAT_LT</name></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>full_name</name> <operator>=</operator> <literal type="string">"standard"</literal></expr>,
<expr><operator>.</operator><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>min_quant</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>max_quant</name> <operator>=</operator> <literal type="number">6</literal></expr>,
<expr><operator>.</operator><name>br_tab</name> <operator>=</operator> <block>{ <expr><literal type="number">1050</literal></expr>, <expr><literal type="number">808</literal></expr>, <expr><literal type="number">710</literal></expr>, <expr><literal type="number">632</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>quant</name> <operator>=</operator> <name>QUANT_MAT_STANDARD</name></expr>,
<expr><operator>.</operator><name>quant_chroma</name> <operator>=</operator> <name>QUANT_MAT_STANDARD</name></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>full_name</name> <operator>=</operator> <literal type="string">"high quality"</literal></expr>,
<expr><operator>.</operator><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>min_quant</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>max_quant</name> <operator>=</operator> <literal type="number">6</literal></expr>,
<expr><operator>.</operator><name>br_tab</name> <operator>=</operator> <block>{ <expr><literal type="number">1566</literal></expr>, <expr><literal type="number">1216</literal></expr>, <expr><literal type="number">1070</literal></expr>, <expr><literal type="number">950</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>quant</name> <operator>=</operator> <name>QUANT_MAT_HQ</name></expr>,
<expr><operator>.</operator><name>quant_chroma</name> <operator>=</operator> <name>QUANT_MAT_HQ</name></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>full_name</name> <operator>=</operator> <literal type="string">"4444"</literal></expr>,
<expr><operator>.</operator><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>min_quant</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>max_quant</name> <operator>=</operator> <literal type="number">6</literal></expr>,
<expr><operator>.</operator><name>br_tab</name> <operator>=</operator> <block>{ <expr><literal type="number">2350</literal></expr>, <expr><literal type="number">1828</literal></expr>, <expr><literal type="number">1600</literal></expr>, <expr><literal type="number">1425</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>quant</name> <operator>=</operator> <name>QUANT_MAT_HQ</name></expr>,
<expr><operator>.</operator><name>quant_chroma</name> <operator>=</operator> <name>QUANT_MAT_HQ</name></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>full_name</name> <operator>=</operator> <literal type="string">"4444XQ"</literal></expr>,
<expr><operator>.</operator><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>min_quant</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>max_quant</name> <operator>=</operator> <literal type="number">6</literal></expr>,
<expr><operator>.</operator><name>br_tab</name> <operator>=</operator> <block>{ <expr><literal type="number">3525</literal></expr>, <expr><literal type="number">2742</literal></expr>, <expr><literal type="number">2400</literal></expr>, <expr><literal type="number">2137</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>quant</name> <operator>=</operator> <name>QUANT_MAT_HQ</name></expr>, 
<expr><operator>.</operator><name>quant_chroma</name> <operator>=</operator> <name>QUANT_MAT_HQ</name></expr>,
}</block></expr>
}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRELLIS_WIDTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCORE_LIMIT</name></cpp:macro> <cpp:value>INT_MAX / 2</cpp:value></cpp:define>

<struct>struct <name>TrellisNode</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>prev_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STORED_Q</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ProresThreadData</name> <block>{
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_PLANES</name></expr>]</index><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name>MAX_MBS_PER_SLICE</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>emu_buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>custom_q</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>custom_chroma_q</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>TrellisNode</name></name> <modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
}</block></struct></type> <name>ProresThreadData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ProresContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_PLANES</name></expr>]</index><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name>MAX_MBS_PER_SLICE</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>emu_buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal><operator>*</operator><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>quants</name><index>[<expr><name>MAX_STORED_Q</name></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>quants_chroma</name><index>[<expr><name>MAX_STORED_Q</name></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>custom_q</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>custom_chroma_q</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>quant_mat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>quant_chroma_mat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fdct</name>)<parameter_list>(<parameter><decl><type><name>FDCTDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>FDCTDSPContext</name></type> <name>fdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name></decl>, <name>mb_height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mbs_per_slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_chroma_blocks</name></decl>, <name>chroma_factor</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slices_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slices_per_picture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pictures_per_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cur_picture_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits_per_mb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alpha_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>warn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vendor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant_sel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size_upper_bound</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>prores_profile</name></name> <modifier>*</modifier></type><name>profile_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>slice_q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ProresThreadData</name> <modifier>*</modifier></type><name>tdata</name></decl>;</decl_stmt>
}</block></struct></type> <name>ProresContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_slice_data</name><parameter_list>(<parameter><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>emu_buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mbs_per_slice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocks_per_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>esrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_width</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>blocks_per_mb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>elinesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mbs_per_slice</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>src</name> <operator>+=</operator> <name>mb_width</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <operator>(</operator><name>mbs_per_slice</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name>blocks_per_mb</name>
<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>blocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>mb_width</name> <operator>&lt;=</operator> <name>w</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>+</operator> <literal type="number">16</literal> <operator>&lt;=</operator> <name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>esrc</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>elinesize</name> <operator>=</operator> <name>linesize</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bw</name></decl>, <decl><type ref="prev"/><name>bh</name></decl>, <decl><type ref="prev"/><name>pix</name></decl>;</decl_stmt>

<expr_stmt><expr><name>esrc</name> <operator>=</operator> <name>emu_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>elinesize</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>emu_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>bw</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>w</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>mb_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bh</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>h</name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bh</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>emu_buf</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>bw</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>emu_buf</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>bw</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>bw</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>mb_width</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>emu_buf</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>emu_buf</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>,
<argument><expr><name>emu_buf</name> <operator>+</operator> <operator>(</operator><name>bh</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr></argument>,
<argument><expr><name>mb_width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>emu_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_chroma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>fdct</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>esrc</name></expr></argument>, <argument><expr><name>elinesize</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blocks_per_mb</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>fdct</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>esrc</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>elinesize</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>fdct</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>esrc</name> <operator>+</operator> <name>elinesize</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>elinesize</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blocks_per_mb</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>fdct</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>esrc</name> <operator>+</operator> <name>elinesize</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>elinesize</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>fdct</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>esrc</name></expr></argument>, <argument><expr><name>elinesize</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>fdct</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>esrc</name> <operator>+</operator> <name>elinesize</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>elinesize</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blocks_per_mb</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>fdct</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>esrc</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>elinesize</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>fdct</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>esrc</name> <operator>+</operator> <name>elinesize</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>elinesize</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>mb_width</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_alpha_data</name><parameter_list>(<parameter><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mbs_per_slice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>abits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_width</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name>mbs_per_slice</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>copy_w</name></decl>, <decl><type ref="prev"/><name>copy_h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>copy_w</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>w</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>slice_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_h</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>h</name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>copy_h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>copy_w</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>abits</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>copy_w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>copy_w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>copy_w</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>slice_width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>copy_w</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name>slice_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>linesize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>blocks</name> <operator>-</operator> <name>slice_width</name></expr></argument>, <argument><expr><name>slice_width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>blocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <name>slice_width</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>encode_vlc_codeword</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>codebook</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rice_order</name></decl>, <decl><type ref="prev"/><name>exp_order</name></decl>, <decl><type ref="prev"/><name>switch_bits</name></decl>, <decl><type ref="prev"/><name>switch_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exponent</name></decl>;</decl_stmt>


<expr_stmt><expr><name>switch_bits</name> <operator>=</operator> <operator>(</operator><name>codebook</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rice_order</name> <operator>=</operator> <name>codebook</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>exp_order</name> <operator>=</operator> <operator>(</operator><name>codebook</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>switch_val</name> <operator>=</operator> <name>switch_bits</name> <operator>&lt;&lt;</operator> <name>rice_order</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>switch_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>-=</operator> <name>switch_val</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>exp_order</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>exponent</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>exponent</name> <operator>-</operator> <name>exp_order</name> <operator>+</operator> <name>switch_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>exponent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>exponent</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <name>rice_order</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exponent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>exponent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rice_order</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>rice_order</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;&gt; 31)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_CODE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x)) * 2) ^ GET_SIGN(x))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_dcs</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blocks_per_slice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codebook</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>dc</name></decl>, <decl><type ref="prev"/><name>prev_dc</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>new_sign</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev_dc</name> <operator>=</operator> <operator>(</operator><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>/</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_vlc_codeword</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>FIRST_DC_CB</name></expr></argument>, <argument><expr><call><name>MAKE_CODE</name><argument_list>(<argument><expr><name>prev_dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>codebook</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blocks_per_slice</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>/</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>dc</name> <operator>-</operator> <name>prev_dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_sign</name> <operator>=</operator> <call><name>GET_SIGN</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name>delta</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>MAKE_CODE</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_vlc_codeword</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ff_prores_dc_codebook</name><index>[<expr><name>codebook</name></expr>]</index></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>codebook</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>+</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>codebook</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>codebook</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>new_sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_dc</name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_acs</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blocks_per_slice</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>plane_size_factor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>qmat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>run_cb</name></decl>, <decl><type ref="prev"/><name>lev_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_coeffs</name></decl>, <decl><type ref="prev"/><name>abs_level</name></decl>;</decl_stmt>

<expr_stmt><expr><name>max_coeffs</name> <operator>=</operator> <name>blocks_per_slice</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>run_cb</name> <operator>=</operator> <name><name>ff_prores_run_to_cb_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lev_cb</name> <operator>=</operator> <name><name>ff_prores_lev_to_cb_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>max_coeffs</name></expr>;</condition> <incr><expr><name>idx</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>/</operator> <name><name>qmat</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>abs_level</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_vlc_codeword</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ff_prores_ac_codebook</name><index>[<expr><name>run_cb</name></expr>]</index></name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_vlc_codeword</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ff_prores_ac_codebook</name><index>[<expr><name>lev_cb</name></expr>]</index></name></expr></argument>,
<argument><expr><name>abs_level</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>GET_SIGN</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run_cb</name> <operator>=</operator> <name><name>ff_prores_run_to_cb_index</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lev_cb</name> <operator>=</operator> <name><name>ff_prores_lev_to_cb_index</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>abs_level</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_slice_plane</name><parameter_list>(<parameter><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mbs_per_slice</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blocks_per_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane_size_factor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>qmat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blocks_per_slice</name></decl>, <decl><type ref="prev"/><name>saved_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>saved_pos</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks_per_slice</name> <operator>=</operator> <name>mbs_per_slice</name> <operator>*</operator> <name>blocks_per_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_dcs</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>blocks_per_slice</name></expr></argument>, <argument><expr><name><name>qmat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_acs</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>blocks_per_slice</name></expr></argument>, <argument><expr><name>plane_size_factor</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name></name></expr></argument>, <argument><expr><name>qmat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>saved_pos</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_alpha_diff</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>abits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dbits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>abits</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">7</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dsize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>dbits</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>cur</name> <operator>-</operator> <name>prev</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>abits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>abits</name><operator>)</operator> <operator>-</operator> <name>dsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff</name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>abits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>diff</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>dsize</name> <operator>||</operator> <name>diff</name></expr></argument> &gt;</argument_list></name> <name>dsize</name> <operator>||</operator> <operator>!</operator><name>diff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>abits</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>dbits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_alpha_run</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_alpha_plane</name><parameter_list>(<parameter><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mbs_per_slice</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>quant</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>abits</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>abits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_coeffs</name> <init>= <expr><name>mbs_per_slice</name> <operator>*</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_pos</name> <init>= <expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><name>mask</name></expr></init></decl>, <decl><type ref="prev"/><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_alpha_diff</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>abits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_alpha_run</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_alpha_diff</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>abits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>num_coeffs</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_alpha_run</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>saved_pos</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>sizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quant</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mbs_per_slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>xp</name></decl>, <decl><type ref="prev"/><name>yp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_width_factor</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>mbs_per_slice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_cblocks</name></decl>, <decl><type ref="prev"/><name>pwidth</name></decl>, <decl><type ref="prev"/><name>line_add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane_factor</name></decl>, <decl><type ref="prev"/><name>is_chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>qmat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>qmat_chroma</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line_add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>line_add</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cur_picture_idx</name></name> <operator>^</operator> <operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>force_quant</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>qmat</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quants</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qmat_chroma</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quants_chroma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>quant</name> <operator>&lt;</operator> <name>MAX_STORED_Q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>qmat</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quants</name><index>[<expr><name>quant</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qmat_chroma</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quants_chroma</name><index>[<expr><name>quant</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>qmat</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>custom_q</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qmat_chroma</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>custom_chroma_q</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_mat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>quant</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qmat_chroma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_chroma_mat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>quant</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>is_chroma</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>plane_factor</name> <operator>=</operator> <name>slice_width_factor</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_chroma</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>plane_factor</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chroma_factor</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_chroma</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chroma_factor</name></name> <operator>==</operator> <name>CFACTOR_Y444</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xp</name> <operator>=</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yp</name> <operator>=</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_cblocks</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pwidth</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>xp</name> <operator>=</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yp</name> <operator>=</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_cblocks</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pwidth</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>yp</name> <operator>*</operator> <name>linesize</name> <operator>+</operator>
<name>line_add</name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>xp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_slice_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>yp</name></expr></argument>,
<argument><expr><name>pwidth</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>emu_buf</name></name></expr></argument>,
<argument><expr><name>mbs_per_slice</name></expr></argument>, <argument><expr><name>num_cblocks</name></expr></argument>, <argument><expr><name>is_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_chroma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>encode_slice_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>mbs_per_slice</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>num_cblocks</name></expr></argument>, <argument><expr><name>plane_factor</name></expr></argument>,
<argument><expr><name>qmat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>encode_slice_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>mbs_per_slice</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>num_cblocks</name></expr></argument>, <argument><expr><name>plane_factor</name></expr></argument>,
<argument><expr><name>qmat_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_alpha_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>yp</name></expr></argument>,
<argument><expr><name>pwidth</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mbs_per_slice</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>encode_alpha_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mbs_per_slice</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>quant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>total_size</name> <operator>+=</operator> <name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>put_bits_left</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Underestimated required buffer size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>total_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>estimate_vlc</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>codebook</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rice_order</name></decl>, <decl><type ref="prev"/><name>exp_order</name></decl>, <decl><type ref="prev"/><name>switch_bits</name></decl>, <decl><type ref="prev"/><name>switch_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exponent</name></decl>;</decl_stmt>


<expr_stmt><expr><name>switch_bits</name> <operator>=</operator> <operator>(</operator><name>codebook</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rice_order</name> <operator>=</operator> <name>codebook</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>exp_order</name> <operator>=</operator> <operator>(</operator><name>codebook</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>switch_val</name> <operator>=</operator> <name>switch_bits</name> <operator>&lt;&lt;</operator> <name>rice_order</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>switch_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>-=</operator> <name>switch_val</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>exp_order</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>exponent</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>exponent</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>exp_order</name> <operator>+</operator> <name>switch_bits</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <name>rice_order</name><operator>)</operator> <operator>+</operator> <name>rice_order</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_dcs</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocks_per_slice</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codebook</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>dc</name></decl>, <decl><type ref="prev"/><name>prev_dc</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>new_sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev_dc</name> <operator>=</operator> <operator>(</operator><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>/</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>estimate_vlc</name><argument_list>(<argument><expr><name>FIRST_DC_CB</name></expr></argument>, <argument><expr><call><name>MAKE_CODE</name><argument_list>(<argument><expr><name>prev_dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>codebook</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x4000</literal></expr></argument>)</argument_list></call> <operator>%</operator> <name>scale</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blocks_per_slice</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>blocks</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>/</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x4000</literal></expr></argument>)</argument_list></call> <operator>%</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>dc</name> <operator>-</operator> <name>prev_dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_sign</name> <operator>=</operator> <call><name>GET_SIGN</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name>delta</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>MAKE_CODE</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>estimate_vlc</name><argument_list>(<argument><expr><name><name>ff_prores_dc_codebook</name><index>[<expr><name>codebook</name></expr>]</index></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>codebook</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>+</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>codebook</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>codebook</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>new_sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_dc</name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_acs</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocks_per_slice</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>plane_size_factor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>qmat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>run_cb</name></decl>, <decl><type ref="prev"/><name>lev_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_coeffs</name></decl>, <decl><type ref="prev"/><name>abs_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>max_coeffs</name> <operator>=</operator> <name>blocks_per_slice</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>run_cb</name> <operator>=</operator> <name><name>ff_prores_run_to_cb_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lev_cb</name> <operator>=</operator> <name><name>ff_prores_lev_to_cb_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>max_coeffs</name></expr>;</condition> <incr><expr><name>idx</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>/</operator> <name><name>qmat</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>blocks</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>qmat</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>abs_level</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>estimate_vlc</name><argument_list>(<argument><expr><name><name>ff_prores_ac_codebook</name><index>[<expr><name>run_cb</name></expr>]</index></name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>estimate_vlc</name><argument_list>(<argument><expr><name><name>ff_prores_ac_codebook</name><index>[<expr><name>lev_cb</name></expr>]</index></name></expr></argument>,
<argument><expr><name>abs_level</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>run_cb</name> <operator>=</operator> <name><name>ff_prores_run_to_cb_index</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lev_cb</name> <operator>=</operator> <name><name>ff_prores_lev_to_cb_index</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>abs_level</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_slice_plane</name><parameter_list>(<parameter><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mbs_per_slice</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blocks_per_mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane_size_factor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>qmat</name></decl></parameter>, <parameter><decl><type><name>ProresThreadData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blocks_per_slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blocks_per_slice</name> <operator>=</operator> <name>mbs_per_slice</name> <operator>*</operator> <name>blocks_per_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>estimate_dcs</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>blocks_per_slice</name></expr></argument>, <argument><expr><name><name>qmat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>estimate_acs</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>blocks_per_slice</name></expr></argument>,
<argument><expr><name>plane_size_factor</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name></name></expr></argument>, <argument><expr><name>qmat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>est_alpha_diff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>abits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dbits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>abits</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">7</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dsize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>dbits</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>cur</name> <operator>-</operator> <name>prev</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>abits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>abits</name><operator>)</operator> <operator>-</operator> <name>dsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff</name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>abits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>diff</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>dsize</name> <operator>||</operator> <name>diff</name></expr></argument> &gt;</argument_list></name> <name>dsize</name> <operator>||</operator> <operator>!</operator><name>diff</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>abits</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>dbits</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_alpha_plane</name><parameter_list>(<parameter><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mbs_per_slice</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>abits</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>abits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_coeffs</name> <init>= <expr><name>mbs_per_slice</name> <operator>*</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><name>mask</name></expr></init></decl>, <decl><type ref="prev"/><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>est_alpha_diff</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>abits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>prev</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>run</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>run</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>est_alpha_diff</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>abits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>num_coeffs</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_slice_quant</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>trellis_node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mbs_per_slice</name></decl></parameter>,
<parameter><decl><type><name>ProresThreadData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>pq</name></decl>, <decl><type ref="prev"/><name>xp</name></decl>, <decl><type ref="prev"/><name>yp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_width_factor</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>mbs_per_slice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>num_cblocks</name><index>[<expr><name>MAX_PLANES</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>pwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>plane_factor</name><index>[<expr><name>MAX_PLANES</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>is_chroma</name><index>[<expr><name>MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>min_quant</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>profile_info</name><operator>-&gt;</operator><name>min_quant</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_quant</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>profile_info</name><operator>-&gt;</operator><name>max_quant</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>bits_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mbs</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>, <decl><type ref="prev"/><name>cur</name></decl>, <decl><type ref="prev"/><name>new_score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>slice_bits</name><index>[<expr><name>TRELLIS_WIDTH</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>slice_score</name><index>[<expr><name>TRELLIS_WIDTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>overquant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>qmat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>qmat_chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>line_add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alpha_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line_add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>line_add</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cur_picture_idx</name></name> <operator>^</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>mbs</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>mbs_per_slice</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>is_chroma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plane_factor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>slice_width_factor</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is_chroma</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>plane_factor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chroma_factor</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is_chroma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chroma_factor</name></name> <operator>==</operator> <name>CFACTOR_Y444</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xp</name> <operator>=</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yp</name> <operator>=</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>num_cblocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pwidth</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>xp</name> <operator>=</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yp</name> <operator>=</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>num_cblocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pwidth</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>yp</name> <operator>*</operator> <name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>
<name>line_add</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>xp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_slice_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>yp</name></expr></argument>,
<argument><expr><name>pwidth</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>emu_buf</name></name></expr></argument>,
<argument><expr><name>mbs_per_slice</name></expr></argument>, <argument><expr><name><name>num_cblocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>is_chroma</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_alpha_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>xp</name></expr></argument>, <argument><expr><name>yp</name></expr></argument>,
<argument><expr><name>pwidth</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mbs_per_slice</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>min_quant</name></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>max_quant</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>trellis_node</name> <operator>+</operator> <name>q</name></expr>]</index></name><operator>.</operator><name>prev_node</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>trellis_node</name> <operator>+</operator> <name>q</name></expr>]</index></name><operator>.</operator><name>quant</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alpha_bits</name> <operator>=</operator> <call><name>estimate_alpha_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>mbs_per_slice</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>min_quant</name></expr>;</init> <condition><expr><name>q</name> <operator>&lt;=</operator> <name>max_quant</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>alpha_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>estimate_slice_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>mbs_per_slice</name></expr></argument>,
<argument><expr><name><name>num_cblocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>plane_factor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quants</name><index>[<expr><name>q</name></expr>]</index></name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>-</operator> <operator>!</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>estimate_slice_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>mbs_per_slice</name></expr></argument>,
<argument><expr><name><name>num_cblocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>plane_factor</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quants_chroma</name><index>[<expr><name>q</name></expr>]</index></name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">65000</literal> <operator>*</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SCORE_LIMIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>slice_bits</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice_score</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>slice_bits</name><index>[<expr><name>max_quant</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bits_per_mb</name></name> <operator>*</operator> <name>mbs_per_slice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>slice_bits</name><index>[<expr><name>max_quant</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>slice_bits</name><index>[<expr><name>max_quant</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice_score</name><index>[<expr><name>max_quant</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>slice_score</name><index>[<expr><name>max_quant</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>overquant</name> <operator>=</operator> <name>max_quant</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>max_quant</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>alpha_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>MAX_STORED_Q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>qmat</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quants</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qmat_chroma</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quants_chroma</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>qmat</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>custom_q</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qmat_chroma</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>custom_chroma_q</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_mat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qmat_chroma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_chroma_mat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>estimate_slice_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>mbs_per_slice</name></expr></argument>,
<argument><expr><name><name>num_cblocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>plane_factor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>qmat</name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>-</operator> <operator>!</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>estimate_slice_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>mbs_per_slice</name></expr></argument>,
<argument><expr><name><name>num_cblocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>plane_factor</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>qmat_chroma</name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bits_per_mb</name></name> <operator>*</operator> <name>mbs_per_slice</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>slice_bits</name><index>[<expr><name>max_quant</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice_score</name><index>[<expr><name>max_quant</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<expr_stmt><expr><name>overquant</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>trellis_node</name> <operator>+</operator> <name>max_quant</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>quant</name> <operator>=</operator> <name>overquant</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_limit</name> <operator>=</operator> <name>mbs</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bits_per_mb</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pq</name> <operator>=</operator> <name>min_quant</name></expr>;</init> <condition><expr><name>pq</name> <operator>&lt;</operator> <name>max_quant</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>pq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>trellis_node</name> <operator>-</operator> <name>TRELLIS_WIDTH</name> <operator>+</operator> <name>pq</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>min_quant</name></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>max_quant</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>trellis_node</name> <operator>+</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>prev</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>+</operator> <name><name>slice_bits</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name><name>slice_score</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <name>bits_limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SCORE_LIMIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>prev</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>&lt;</operator> <name>SCORE_LIMIT</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>&lt;</operator> <name>SCORE_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_score</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>prev</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>+</operator> <name>error</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_score</name> <operator>=</operator> <name>SCORE_LIMIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>prev_node</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>&gt;=</operator> <name>new_score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <name>new_score</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>prev_node</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>trellis_node</name> <operator>+</operator> <name>min_quant</name></expr>]</index></name><operator>.</operator><name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pq</name> <operator>=</operator> <name>trellis_node</name> <operator>+</operator> <name>min_quant</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>min_quant</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>max_quant</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>trellis_node</name> <operator>+</operator> <name>q</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>&lt;=</operator> <name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>trellis_node</name> <operator>+</operator> <name>q</name></expr>]</index></name><operator>.</operator><name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pq</name> <operator>=</operator> <name>trellis_node</name> <operator>+</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>pq</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_quant_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ProresThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name></name> <operator>+</operator> <name>threadnr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mbs_per_slice</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>mbs_per_slice</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>jobnr</name></expr></init></decl>, <decl><type ref="prev"/><name>mb</name></decl>, <decl><type ref="prev"/><name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>mb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>mbs_per_slice</name></expr><operator>,</operator> <expr><name>mb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <name>x</name> <operator>&lt;</operator> <name>mbs_per_slice</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mbs_per_slice</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>find_slice_quant</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,
<argument><expr><operator>(</operator><name>mb</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>TRELLIS_WIDTH</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,
<argument><expr><name>mbs_per_slice</name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slices_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_q</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slices_width</name></name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>quant</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>prev_node</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>orig_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slice_hdr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slice_sizes</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>picture_size_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>mb</name></decl>, <decl><type ref="prev"/><name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_hdr_size</name> <init>= <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>, <decl><type ref="prev"/><name>picture_size</name></decl>, <decl><type ref="prev"/><name>slice_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pkt_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_slice_size</name> <init>= <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_size_upper_bound</name></name> <operator>-</operator> <literal type="number">200</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slices_per_picture</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>frame_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pkt_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_size_upper_bound</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>pkt_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>orig_buf</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>orig_buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>orig_buf</name></expr></argument>, <argument><expr><name>FRAME_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>orig_buf</name></expr>;</expr_stmt>


<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be16</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vendor</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_flags</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chroma_factor</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_flags</name> <operator>|=</operator> <ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> ?</condition><then> <expr><literal type="number">0x04</literal></expr> </then><else>: <expr><literal type="number">0x08</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>frame_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x40</literal> <operator>|</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_sel</name></name> <operator>!=</operator> <name>QUANT_MAT_DEFAULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_mat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_mat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>buf</name> <operator>-</operator> <name>orig_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_picture_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_picture_idx</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name></expr>;</condition>
<incr><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur_picture_idx</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>picture_size_pos</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be16</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slices_per_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mbs_per_slice</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>slice_sizes</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slices_per_picture</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>force_quant</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>find_quant_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pic</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mbs_per_slice</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>mbs_per_slice</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>mb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>mbs_per_slice</name></expr><operator>,</operator> <expr><name>mb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>force_quant</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>force_quant</name></name></expr>
</then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_q</name><index>[<expr><name>mb</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slices_width</name></name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <name>x</name> <operator>&lt;</operator> <name>mbs_per_slice</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mbs_per_slice</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>slice_hdr_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_hdr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>slice_hdr_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pkt_size</name> <operator>&lt;=</operator> <name>buf</name> <operator>-</operator> <name>orig_buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>max_slice_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><literal type="number">200</literal> <operator>+</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name> <operator>*</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>slices_per_picture</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<name>max_slice_size</name> <operator>-</operator> <name>pkt_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>max_slice_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_size_upper_bound</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>warn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,
<argument><expr><literal type="string">"Packet too small: is %i,"</literal>
<literal type="string">" needs %i (slice: %i). "</literal>
<literal type="string">"Correct allocation"</literal></expr></argument>,
<argument><expr><name>pkt_size</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>max_slice_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>warn</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_grow_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pkt_size</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_buf</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>orig_buf</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>buf</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>picture_size_pos</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>picture_size_pos</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_sizes</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>slice_sizes</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_hdr</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>slice_hdr</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>tmp</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>pkt_size</name> <operator>-</operator> <operator>(</operator><name>buf</name> <operator>-</operator> <name>orig_buf</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_slice</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>sizes</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>q</name></expr></argument>,
<argument><expr><name>mbs_per_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slice_hdr</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <name>slice_hdr_size</name> <operator>+</operator> <name><name>sizes</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slice_hdr</name></expr></argument>, <argument><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>+=</operator> <name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slice_sizes</name></expr></argument>, <argument><expr><name>slice_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>slice_size</name> <operator>-</operator> <name>slice_hdr_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max_slice_size</name> <operator>&lt;</operator> <name>slice_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_slice_size</name> <operator>=</operator> <name>slice_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>picture_size</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <operator>(</operator><name>picture_size_pos</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>picture_size_pos</name></expr></argument>, <argument><expr><name>picture_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>orig_buf</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <name>orig_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orig_buf</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>frame_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prores_fdct</name><parameter_list>(<parameter><decl><type><name>FDCTDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>tsrc</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>y</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>tsrc</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>tsrc</name> <operator>+=</operator> <name>linesize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>fdct</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_quant</name></decl>, <decl><type ref="prev"/><name>max_quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>interlaced</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>AV_PICTURE_TYPE_I</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>ctx</name><operator>-&gt;</operator><name>fdct</name></name> <init>= <expr><name>prores_fdct</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name></name> <operator>=</operator> <ternary><condition><expr><name>interlaced</name></expr> ?</condition><then> <expr><name>ff_prores_interlaced_scan</name></expr>
</then><else>: <expr><name>ff_prores_progressive_scan</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_fdctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mps</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mbs_per_slice</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mps</name> <operator>&amp;</operator> <operator>(</operator><name>mps</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"there should be an integer power of two MBs per slice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PRORES_PROFILE_AUTO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>+</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name><operator>)</operator><operator>)</operator></expr>
?</condition><then> <expr><name>PRORES_PROFILE_4444</name></expr> </then><else>: <expr><name>PRORES_PROFILE_HQ</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Autoselected %s. It can be overridden "</literal>
<literal type="string">"through -profile option.\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PRORES_PROFILE_4444</name></expr>
?</condition><then> <expr><literal type="string">"4:4:4:4 profile because of the used input colorspace"</literal></expr>
</then><else>: <expr><literal type="string">"HQ profile to keep best quality"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>PRORES_PROFILE_4444</name> <operator>&amp;&amp;</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>PRORES_PROFILE_4444XQ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Profile selected will not "</literal>
<literal type="string">"encode alpha. Override with -profile if needed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"alpha bits should be 0, 8 or 16\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chroma_factor</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>
?</condition><then> <expr><name>CFACTOR_Y422</name></expr>
</then><else>: <expr><name>CFACTOR_Y444</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>profile_info</name></name> <operator>=</operator> <name>prores_profile_info</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interlaced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slices_width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>/</operator> <name>mps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slices_width</name></name> <operator>+=</operator> <call><name>av_popcount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slices_width</name></name> <operator>*</operator> <name>mps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slices_per_picture</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slices_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>interlaced</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_sel</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_mat</name></name> <operator>=</operator> <name><name>prores_quant_matrices</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>profile_info</name><operator>-&gt;</operator><name>quant</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_chroma_mat</name></name> <operator>=</operator> <name><name>prores_quant_matrices</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>profile_info</name><operator>-&gt;</operator><name>quant_chroma</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_mat</name></name> <operator>=</operator> <name><name>prores_quant_matrices</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_sel</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_chroma_mat</name></name> <operator>=</operator> <name><name>prores_quant_matrices</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_sel</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vendor</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vendor ID should be 4 bytes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>force_quant</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>/</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>force_quant</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>bits_per_mb</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_MB_LIMITS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>prores_mb_limits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits_per_mb</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>profile_info</name><operator>-&gt;</operator><name>br_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits_per_mb</name></name> <operator>*=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bits_per_mb</name></name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too few bits per MB, please set at least 128\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>min_quant</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>profile_info</name><operator>-&gt;</operator><name>min_quant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_quant</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>profile_info</name><operator>-&gt;</operator><name>max_quant</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>min_quant</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_STORED_Q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quants</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_mat</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quants_chroma</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_chroma_mat</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_q</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slices_per_picture</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_q</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_q</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nodes</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>slices_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator>
<operator>*</operator> <name>TRELLIS_WIDTH</name>
<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nodes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>min_quant</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_quant</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prev_node</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tdata</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ls</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ls_chroma</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>force_quant</name></name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too large quantiser, maximum is 64\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quants</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_mat</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>force_quant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quants_chroma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quant_chroma_mat</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>force_quant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ls</name> <operator>+=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quants</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ls_chroma</name> <operator>+=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>quants_chroma</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits_per_mb</name></name> <operator>=</operator> <name>ls</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>ls_chroma</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chroma_factor</name></name> <operator>==</operator> <name>CFACTOR_Y444</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits_per_mb</name></name> <operator>+=</operator> <name>ls_chroma</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_size_upper_bound</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name> <operator>*</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>slices_per_picture</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>+</operator>
<operator>(</operator><name>mps</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bits_per_mb</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator>
<operator>+</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_size_upper_bound</name></name> <operator>+=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name> <operator>*</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>slices_per_picture</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>mbs_per_slice</name></name> <operator>*</operator> <literal type="number">256</literal> <operator>*</operator>
<operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>alpha_bits</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">7</literal> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>profile_info</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"profile %d, %d slices, interlacing: %s, %d bits per MB\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slices_per_picture</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pictures_per_frame</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>interlaced</name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits_per_mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"frame size upper bound: %d\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_size_upper_bound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ProresContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"mbs_per_slice"</literal></expr>, <expr><literal type="string">"macroblocks per slice"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mbs_per_slice</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">8</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_MBS_PER_SLICE</name></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRORES_PROFILE_AUTO</name></expr> }</block></expr>,
<expr><name>PRORES_PROFILE_AUTO</name></expr>, <expr><name>PRORES_PROFILE_4444XQ</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRORES_PROFILE_AUTO</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"proxy"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRORES_PROFILE_PROXY</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lt"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRORES_PROFILE_LT</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"standard"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRORES_PROFILE_STANDARD</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hq"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRORES_PROFILE_HQ</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"4444"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRORES_PROFILE_4444</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"4444xq"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRORES_PROFILE_4444XQ</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vendor"</literal></expr>, <expr><literal type="string">"vendor ID"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>vendor</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"Lavc"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bits_per_mb"</literal></expr>, <expr><literal type="string">"desired bits per macroblock"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bits_per_mb</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8192</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"quant_mat"</literal></expr>, <expr><literal type="string">"quantiser matrix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>quant_sel</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>QUANT_MAT_DEFAULT</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"quant_mat"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"quant_mat"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"proxy"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>QUANT_MAT_PROXY</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"quant_mat"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lt"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>QUANT_MAT_LT</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"quant_mat"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"standard"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>QUANT_MAT_STANDARD</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"quant_mat"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hq"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>QUANT_MAT_HQ</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"quant_mat"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>QUANT_MAT_DEFAULT</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"quant_mat"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"alpha_bits"</literal></expr>, <expr><literal type="string">"bits for alpha plane"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>alpha_bits</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">16</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>proresenc_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"ProRes encoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_prores_ks_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"prores_ks"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apple ProRes (iCodec Pro)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PRORES</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ProresContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>encode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>encode_close</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P10</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>proresenc_class</name></expr>,
<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_prores_profiles</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
