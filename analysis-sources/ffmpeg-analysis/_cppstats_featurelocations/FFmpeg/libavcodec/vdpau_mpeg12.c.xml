<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vdpau_mpeg12.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vdpau/vdpau.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdpau.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdpau_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_mpeg_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpPictureInfoMPEG1Or2</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>mpeg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VdpVideoSurface</name></type> <name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>forward_reference</name></name> <operator>=</operator> <name>VDP_INVALID_HANDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>backward_reference</name></name> <operator>=</operator> <name>VDP_INVALID_HANDLE</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ref</name> <operator>!=</operator> <name>VDP_INVALID_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>backward_reference</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>forward_reference</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>picture_coding_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>intra_dc_precision</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>frame_pred_frame_dct</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_pred_frame_dct</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>concealment_motion_vectors</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>concealment_motion_vectors</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>intra_vlc_format</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_vlc_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>alternate_scan</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>alternate_scan</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>q_scale_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>full_pel_forward_vector</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>full_pel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>full_pel_backward_vector</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>full_pel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mpeg_f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mpeg_f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mpeg_f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mpeg_f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>intra_quantizer_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>non_intra_quantizer_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>ff_vdpau_common_start_frame</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_mpeg_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_add_buffer</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>mpeg</name><operator>.</operator><name>slice_count</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG1_VDPAU_HWACCEL</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_mpeg1_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ff_vdpau_common_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VDP_DECODER_PROFILE_MPEG1</name></expr></argument>,
<argument><expr><name>VDP_DECODER_LEVEL_MPEG1_NA</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_mpeg1_vdpau_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg1_vdpau"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VDPAU</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>vdpau_mpeg_start_frame</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>ff_vdpau_mpeg_end_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>vdpau_mpeg_decode_slice</name></expr>,
<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vdpau_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vdpau_mpeg1_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_vdpau_common_uninit</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VDPAUContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG2_VDPAU_HWACCEL</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_mpeg2_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VdpDecoderProfile</name></type> <name>profile</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_PROFILE_MPEG2_MAIN</name></expr>:</case>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_MPEG2_MAIN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_MPEG2_SIMPLE</name></expr>:</case>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_MPEG2_SIMPLE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><call><name>ff_vdpau_common_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>, <argument><expr><name>VDP_DECODER_LEVEL_MPEG2_HL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_mpeg2_vdpau_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg2_vdpau"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VDPAU</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>vdpau_mpeg_start_frame</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>ff_vdpau_mpeg_end_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>vdpau_mpeg_decode_slice</name></expr>,
<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vdpau_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vdpau_mpeg2_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_vdpau_common_uninit</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_vdpau_common_frame_params</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VDPAUContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
