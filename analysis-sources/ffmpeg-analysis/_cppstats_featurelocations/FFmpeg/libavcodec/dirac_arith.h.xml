<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dirac_arith.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_DIRAC_ARITH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_DIRAC_ARITH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<enum>enum <name>dirac_arith_contexts</name> <block>{
<decl><name>CTX_ZPZN_F1</name></decl>,
<decl><name>CTX_ZPNN_F1</name></decl>,
<decl><name>CTX_NPZN_F1</name></decl>,
<decl><name>CTX_NPNN_F1</name></decl>,
<decl><name>CTX_ZP_F2</name></decl>,
<decl><name>CTX_ZP_F3</name></decl>,
<decl><name>CTX_ZP_F4</name></decl>,
<decl><name>CTX_ZP_F5</name></decl>,
<decl><name>CTX_ZP_F6</name></decl>,
<decl><name>CTX_NP_F2</name></decl>,
<decl><name>CTX_NP_F3</name></decl>,
<decl><name>CTX_NP_F4</name></decl>,
<decl><name>CTX_NP_F5</name></decl>,
<decl><name>CTX_NP_F6</name></decl>,
<decl><name>CTX_COEFF_DATA</name></decl>,
<decl><name>CTX_SIGN_NEG</name></decl>,
<decl><name>CTX_SIGN_ZERO</name></decl>,
<decl><name>CTX_SIGN_POS</name></decl>,
<decl><name>CTX_ZERO_BLOCK</name></decl>,
<decl><name>CTX_DELTA_Q_F</name></decl>,
<decl><name>CTX_DELTA_Q_DATA</name></decl>,
<decl><name>CTX_DELTA_Q_SIGN</name></decl>,

<decl><name>DIRAC_CTX_COUNT</name></decl>
}</block>;</enum>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX_SB_F1</name></cpp:macro> <cpp:value>CTX_ZP_F5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX_SB_DATA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX_PMODE_REF1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX_PMODE_REF2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX_GLOBAL_BLOCK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX_MV_F1</name></cpp:macro> <cpp:value>CTX_ZP_F2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX_MV_DATA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX_DC_F1</name></cpp:macro> <cpp:value>CTX_ZP_F5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX_DC_DATA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bytestream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bytestream_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>contexts</name><index>[<expr><name>DIRAC_CTX_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>overread</name></decl>;</decl_stmt>
}</block></struct></type> <name>DiracArith</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_dirac_next_ctx</name><index>[<expr><name>DIRAC_CTX_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>ff_dirac_prob</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int16_t</name></type> <name><name>ff_dirac_prob_branchless</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>renorm</name><parameter_list>(<parameter><decl><type><name>DiracArith</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_CLZ</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">14</literal> <operator>-</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>counter</name></name> <operator>+=</operator> <name>shift</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;=</operator> <literal type="number">0x4000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>counter</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>refill</name><parameter_list>(<parameter><decl><type><name>DiracArith</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>counter</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new</name> <init>= <expr><call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new</name> <operator>|=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream_end</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new</name> <operator>|=</operator> <literal type="number">0xff00</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>overread</name></name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>overread</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name>new</name> <operator>&lt;&lt;</operator> <name>counter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dirac_get_arith_bit</name><parameter_list>(<parameter><decl><type><name>DiracArith</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prob_zero</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>contexts</name><index>[<expr><name>ctx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>range_times_prob</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>low</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>range</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>range_times_prob</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>*</operator> <name>prob_zero</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name> <operator>&amp;&amp;</operator> <name>HAVE_FAST_CMOV</name> <operator>&amp;&amp;</operator> <name>HAVE_INLINE_ASM</name> <operator>&amp;&amp;</operator> <name>HAVE_6REGS</name></expr></cpp:if>
<expr_stmt><expr><name>low</name> <operator>-=</operator> <name>range_times_prob</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>-=</operator> <name>range_times_prob</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<asm>__asm__(
"cmpl %5, %4 \n\t"
"setae %b0 \n\t"
"cmovb %3, %2 \n\t"
"cmovb %5, %1 \n\t"
: "+q"(bit), "+r"(range), "+r"(low)
: "r"(c-&gt;low), "r"(c-&gt;low&gt;&gt;16),
"r"(range_times_prob)
);</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name>low</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;=</operator> <name>range_times_prob</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>low</name> <operator>-=</operator> <name>range_times_prob</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> <operator>-=</operator> <name>range_times_prob</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>range_times_prob</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>contexts</name><index>[<expr><name>ctx</name></expr>]</index></name> <operator>+=</operator> <name><name>ff_dirac_prob_branchless</name><index>[<expr><name>prob_zero</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>renorm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>refill</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dirac_get_arith_uint</name><parameter_list>(<parameter><decl><type><name>DiracArith</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>follow_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>dirac_get_arith_bit</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>follow_ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0x40000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"dirac_get_arith_uint overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>dirac_get_arith_bit</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>data_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>follow_ctx</name> <operator>=</operator> <name><name>ff_dirac_next_ctx</name><index>[<expr><name>follow_ctx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ret</name><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dirac_get_arith_int</name><parameter_list>(<parameter><decl><type><name>DiracArith</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>follow_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>dirac_get_arith_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>follow_ctx</name></expr></argument>, <argument><expr><name>data_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <call><name>dirac_get_arith_bit</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>data_ctx</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>ff_dirac_init_arith_tables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_dirac_init_arith_decoder</name><parameter_list>(<parameter><decl><type><name>DiracArith</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
