<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\pngdsp.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"png.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pngdsp.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb_7f</name></cpp:macro> <cpp:value>(~0UL / 255 * 0x7f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb_80</name></cpp:macro> <cpp:value>(~0UL / 255 * 0x80)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_bytes_l2_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>w</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>a</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src1</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src2</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <name>pb_7f</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <name>pb_7f</name><operator>)</operator><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>^</operator> <name>b</name><operator>)</operator> <operator>&amp;</operator> <name>pb_80</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>src2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_pngdsp_init</name><parameter_list>(<parameter><decl><type><name>PNGDSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>add_bytes_l2</name></name> <operator>=</operator> <name>add_bytes_l2_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>add_paeth_prediction</name></name> <operator>=</operator> <name>ff_add_png_paeth_prediction</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_pngdsp_init_x86</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
