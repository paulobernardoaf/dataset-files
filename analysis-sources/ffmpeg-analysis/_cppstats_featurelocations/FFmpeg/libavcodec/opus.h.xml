<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\opus.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_OPUS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_OPUS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/audio_fifo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/swresample.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus_rc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FRAME_SIZE</name></cpp:macro> <cpp:value>1275</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FRAMES</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PACKET_DUR</name></cpp:macro> <cpp:value>5760</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_SHORT_BLOCKSIZE</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_OVERLAP</name></cpp:macro> <cpp:value>CELT_SHORT_BLOCKSIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_MAX_LOG_BLOCKS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_MAX_FRAME_SIZE</name></cpp:macro> <cpp:value>(CELT_SHORT_BLOCKSIZE * (1 &lt;&lt; CELT_MAX_LOG_BLOCKS))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_MAX_BANDS</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SILK_HISTORY</name></cpp:macro> <cpp:value>322</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SILK_MAX_LPC</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_MULL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((MUL64(a, b) &gt;&gt; ((s) - 1)) + 1) &gt;&gt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_MUL16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((MUL16(a, b) + 16384) &gt;&gt; 15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_TS_HEADER</name></cpp:macro> <cpp:value>0x7FE0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_TS_MASK</name></cpp:macro> <cpp:value>0xFFE0</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>opus_default_extradata</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>OpusMode</name> <block>{
<decl><name>OPUS_MODE_SILK</name></decl>,
<decl><name>OPUS_MODE_HYBRID</name></decl>,
<decl><name>OPUS_MODE_CELT</name></decl>,

<decl><name>OPUS_MODE_NB</name></decl>
}</block>;</enum>

<enum>enum <name>OpusBandwidth</name> <block>{
<decl><name>OPUS_BANDWIDTH_NARROWBAND</name></decl>,
<decl><name>OPUS_BANDWIDTH_MEDIUMBAND</name></decl>,
<decl><name>OPUS_BANDWIDTH_WIDEBAND</name></decl>,
<decl><name>OPUS_BANDWIDTH_SUPERWIDEBAND</name></decl>,
<decl><name>OPUS_BANDWIDTH_FULLBAND</name></decl>,

<decl><name>OPUS_BANDWITH_NB</name></decl>
}</block>;</enum>

<typedef>typedef <type><name><name>struct</name> <name>SilkContext</name></name></type> <name>SilkContext</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>CeltFrame</name></name></type> <name>CeltFrame</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OpusPacket</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>packet_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>stereo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>vbr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>config</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>frame_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>frame_offset</name><index>[<expr><name>MAX_FRAMES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>frame_size</name><index>[<expr><name>MAX_FRAMES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frame_duration</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>OpusMode</name></name></type> <name>mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>OpusBandwidth</name></name></type> <name>bandwidth</name></decl>;</decl_stmt> 
}</block></struct></type> <name>OpusPacket</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OpusStreamContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpusRangeCoder</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpusRangeCoder</name></type> <name>redundancy_rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SilkContext</name> <modifier>*</modifier></type><name>silk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>celt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>silk_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">960</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>silk_output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>celt_buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">960</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>celt_output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>redundancy_buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">960</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>redundancy_output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out_dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_dummy_allocated_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>swr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVAudioFifo</name> <modifier>*</modifier></type><name>celt_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>silk_samplerate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delayed_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpusPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>redundancy_idx</name></decl>;</decl_stmt>
}</block></struct></type> <name>OpusStreamContext</name>;</typedef>


<typedef>typedef <type><struct>struct <name>ChannelMap</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>stream_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channel_idx</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>copy_idx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>silence</name></decl>;</decl_stmt>
}</block></struct></type> <name>ChannelMap</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OpusContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpusStreamContext</name> <modifier>*</modifier></type><name>streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apply_phase_inv</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>out_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVAudioFifo</name> <modifier>*</modifier><modifier>*</modifier></type><name>sync_buffers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>decoded_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_stereo_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>gain_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelMap</name> <modifier>*</modifier></type><name>channel_maps</name></decl>;</decl_stmt>
}</block></struct></type> <name>OpusContext</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_opus_parse_packet</name><parameter_list>(<parameter><decl><type><name>OpusPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>self_delimited</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_opus_parse_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>OpusContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_silk_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>SilkContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_channels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_silk_free</name><parameter_list>(<parameter><decl><type><name>SilkContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_silk_flush</name><parameter_list>(<parameter><decl><type><name>SilkContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>ff_silk_decode_superframe</name><parameter_list>(<parameter><decl><type><name>SilkContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>OpusBandwidth</name></name></type> <name>bandwidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coded_channels</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>duration_ms</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ff_celt_quant_bands</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ff_celt_bitalloc</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encode</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
