<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\libfdk-aacdec.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fdk-aac/aacdecoder_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AACDECODER_LIB_VL0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDKDEC_VER_AT_LEAST</name><parameter_list>(<parameter><type><name>vl0</name></type></parameter>, <parameter><type><name>vl1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((AACDECODER_LIB_VL0 &gt; vl0) || (AACDECODER_LIB_VL0 == vl0 &amp;&amp; AACDECODER_LIB_VL1 &gt;= vl1))</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDKDEC_VER_AT_LEAST</name><parameter_list>(<parameter><type><name>vl0</name></type></parameter>, <parameter><type><name>vl1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>FDKDEC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AAC_PCM_MAX_OUTPUT_CHANNELS</name></cpp:macro> <cpp:value>AAC_PCM_OUTPUT_CHANNELS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>ConcealMethod</name> <block>{
<decl><name>CONCEAL_METHOD_SPECTRAL_MUTING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CONCEAL_METHOD_NOISE_SUBSTITUTION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CONCEAL_METHOD_ENERGY_INTERPOLATION</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CONCEAL_METHOD_NB</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>FDKAACDecContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE_AACDECODER</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>decoder_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decoder_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>anc_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>conceal_method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drc_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drc_boost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drc_heavy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drc_effect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drc_cut</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_delay</name></decl>;</decl_stmt>
}</block></struct></type> <name>FDKAACDecContext</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMX_ANC_BUFFSIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_MAX_CHANNELS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_BUFFSIZE</name></cpp:macro> <cpp:value>2048 * sizeof(INT_PCM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(FDKAACDecContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AD</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>fdk_aac_dec_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"conceal"</literal></expr>, <expr><literal type="string">"Error concealment method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>conceal_method</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CONCEAL_METHOD_NOISE_SUBSTITUTION</name></expr> }</block></expr>, <expr><name>CONCEAL_METHOD_SPECTRAL_MUTING</name></expr>, <expr><name>CONCEAL_METHOD_NB</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>AD</name></expr>, <expr><literal type="string">"conceal"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"spectral"</literal></expr>, <expr><literal type="string">"Spectral muting"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CONCEAL_METHOD_SPECTRAL_MUTING</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AD</name></expr>, <expr><literal type="string">"conceal"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"noise"</literal></expr>, <expr><literal type="string">"Noise Substitution"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CONCEAL_METHOD_NOISE_SUBSTITUTION</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AD</name></expr>, <expr><literal type="string">"conceal"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"energy"</literal></expr>, <expr><literal type="string">"Energy Interpolation"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CONCEAL_METHOD_ENERGY_INTERPOLATION</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AD</name></expr>, <expr><literal type="string">"conceal"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"drc_boost"</literal></expr>, <expr><literal type="string">"Dynamic Range Control: boost, where [0] is none and [127] is max boost"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>drc_boost</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><name>AD</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"drc_cut"</literal></expr>, <expr><literal type="string">"Dynamic Range Control: attenuation factor, where [0] is none and [127] is max compression"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>drc_cut</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><name>AD</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"drc_level"</literal></expr>, <expr><literal type="string">"Dynamic Range Control: reference level, quantized to 0.25dB steps where [0] is 0dB and [127] is -31.75dB, -1 for auto, and -2 for disabled"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>drc_level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><name>AD</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"drc_heavy"</literal></expr>, <expr><literal type="string">"Dynamic Range Control: heavy compression, where [1] is on (RF mode) and [0] is off"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>drc_heavy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AD</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>FDKDEC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if> 
<expr><block>{ <expr><literal type="string">"level_limit"</literal></expr>, <expr><literal type="string">"Signal level limiting"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level_limit</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AD</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>FDKDEC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if> 
<expr><block>{ <expr><literal type="string">"drc_effect"</literal></expr>,<expr><literal type="string">"Dynamic Range Control: effect type, where e.g. [0] is none and [6] is general"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>drc_effect</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>AD</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>fdk_aac_dec_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libfdk-aac decoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>fdk_aac_dec_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_stream_info</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FDKAACDecContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CStreamInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>aacDecoder_GetStreamInfo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>channel_counts</name><index>[<expr><literal type="number">0x24</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ch_layout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get stream info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stream info not initialized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>frameSize</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>FDKDEC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_delay</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>outputDelay</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>numChannels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AUDIO_CHANNEL_TYPE</name></type> <name>ctype</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>pChannelType</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&lt;=</operator> <name>ACT_NONE</name> <operator>||</operator> <name>ctype</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>channel_counts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unknown channel type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>channel_counts</name><index>[<expr><name>ctype</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"%d channels - front:%d side:%d back:%d lfe:%d top:%d\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>numChannels</name></name></expr></argument>,
<argument><expr><name><name>channel_counts</name><index>[<expr><name>ACT_FRONT</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>channel_counts</name><index>[<expr><name>ACT_SIDE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>channel_counts</name><index>[<expr><name>ACT_BACK</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>channel_counts</name><index>[<expr><name>ACT_LFE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>channel_counts</name><index>[<expr><name>ACT_FRONT_TOP</name></expr>]</index></name> <operator>+</operator> <name><name>channel_counts</name><index>[<expr><name>ACT_SIDE_TOP</name></expr>]</index></name> <operator>+</operator>
<name><name>channel_counts</name><index>[<expr><name>ACT_BACK_TOP</name></expr>]</index></name> <operator>+</operator> <name><name>channel_counts</name><index>[<expr><name>ACT_TOP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>channel_counts</name><index>[<expr><name>ACT_FRONT</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>ch_layout</name> <operator>|=</operator> <name>AV_CH_LAYOUT_STEREO</name> <operator>|</operator> <name>AV_CH_FRONT_LEFT_OF_CENTER</name> <operator>|</operator>
<name>AV_CH_FRONT_RIGHT_OF_CENTER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>ch_layout</name> <operator>|=</operator> <name>AV_CH_LAYOUT_STEREO</name> <operator>|</operator> <name>AV_CH_FRONT_CENTER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>ch_layout</name> <operator>|=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>ch_layout</name> <operator>|=</operator> <name>AV_CH_FRONT_CENTER</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"unsupported number of front channels: %d\n"</literal></expr></argument>,
<argument><expr><name><name>channel_counts</name><index>[<expr><name>ACT_FRONT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>channel_counts</name><index>[<expr><name>ACT_SIDE</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>channel_counts</name><index>[<expr><name>ACT_SIDE</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch_layout</name> <operator>|=</operator> <name>AV_CH_SIDE_LEFT</name> <operator>|</operator> <name>AV_CH_SIDE_RIGHT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"unsupported number of side channels: %d\n"</literal></expr></argument>,
<argument><expr><name><name>channel_counts</name><index>[<expr><name>ACT_SIDE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>channel_counts</name><index>[<expr><name>ACT_BACK</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>channel_counts</name><index>[<expr><name>ACT_BACK</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>ch_layout</name> <operator>|=</operator> <name>AV_CH_BACK_LEFT</name> <operator>|</operator> <name>AV_CH_BACK_RIGHT</name> <operator>|</operator> <name>AV_CH_BACK_CENTER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>ch_layout</name> <operator>|=</operator> <name>AV_CH_BACK_LEFT</name> <operator>|</operator> <name>AV_CH_BACK_RIGHT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>ch_layout</name> <operator>|=</operator> <name>AV_CH_BACK_CENTER</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"unsupported number of back channels: %d\n"</literal></expr></argument>,
<argument><expr><name><name>channel_counts</name><index>[<expr><name>ACT_BACK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>channel_counts</name><index>[<expr><name>ACT_LFE</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>channel_counts</name><index>[<expr><name>ACT_LFE</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch_layout</name> <operator>|=</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"unsupported number of LFE channels: %d\n"</literal></expr></argument>,
<argument><expr><name><name>channel_counts</name><index>[<expr><name>ACT_LFE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch_error</name> <operator>&amp;&amp;</operator>
<call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>ch_layout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>info</name><operator>-&gt;</operator><name>numChannels</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unsupported channel configuration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>ch_layout</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>numChannels</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>fdk_aac_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FDKAACDecContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aacDecoder_Close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decoder_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>anc_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>fdk_aac_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FDKAACDecContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AAC_DECODER_ERROR</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>aacDecoder_Open</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr> ?</condition><then> <expr><name>TT_MP4_RAW</name></expr> </then><else>: <expr><name>TT_MP4_ADTS</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error opening decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacDecoder_ConfigRaw</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacDecoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AAC_CONCEAL_METHOD</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conceal_method</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set error concealment method\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>request_channel_layout</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>request_channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_NATIVE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>downmix_channels</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>request_channel_layout</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CH_LAYOUT_STEREO</name></expr>:</case>
<case>case <expr><name>AV_CH_LAYOUT_STEREO_DOWNMIX</name></expr>:</case>
<expr_stmt><expr><name>downmix_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CH_LAYOUT_MONO</name></expr>:</case>
<expr_stmt><expr><name>downmix_channels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid request_channel_layout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>downmix_channels</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>aacDecoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AAC_PCM_MAX_OUTPUT_CHANNELS</name></expr></argument>,
<argument><expr><name>downmix_channels</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to set output channels in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>anc_buffer</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>DMX_ANC_BUFFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>anc_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate ancillary buffer for the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>aacDecoder_AncDataInit</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>anc_buffer</name></name></expr></argument>, <argument><expr><name>DMX_ANC_BUFFSIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to register downmix ancillary buffer in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>drc_boost</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>aacDecoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AAC_DRC_BOOST_FACTOR</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>drc_boost</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set DRC boost factor in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>drc_cut</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>aacDecoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AAC_DRC_ATTENUATION_FACTOR</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>drc_cut</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set DRC attenuation factor in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>drc_level</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>aacDecoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AAC_DRC_REFERENCE_LEVEL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>drc_level</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set DRC reference level in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>drc_heavy</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>aacDecoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AAC_DRC_HEAVY_COMPRESSION</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>drc_heavy</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set DRC heavy compression in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>FDKDEC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if> 

<if_stmt><if>if <condition>(<expr><call><name>aacDecoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AAC_PCM_LIMITER_ENABLE</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>level_limit</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set in signal level limiting in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>FDKDEC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if> 
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>drc_effect</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>aacDecoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>AAC_UNIDRC_SET_EFFECT</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>drc_effect</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set DRC effect type in the decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decoder_buffer_size</name></name> <operator>=</operator> <name>DECODER_BUFFSIZE</name> <operator>*</operator> <name>DECODER_MAX_CHANNELS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decoder_buffer</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>decoder_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fdk_aac_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FDKAACDecContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AAC_DECODER_ERROR</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>valid</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>aacDecoder_Fill</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"aacDecoder_Fill() failed: %x\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>aacDecoder_DecodeFrame</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>INT_PCM</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>decoder_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder_buffer_size</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INT_PCM</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>AAC_DEC_NOT_ENOUGH_BITS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>valid</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"aacDecoder_DecodeFrame() failed: %x\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_stream_info</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>-=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>s-&gt;output_delay</argument>,
<argument>(AVRational){<literal type="number">1</literal></argument>, <argument>avctx-&gt;sample_rate}</argument>,
<argument>avctx-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoder_buffer</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator>
<call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>valid</name></expr>;</expr_stmt>

<label><name>end</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>fdk_aac_decode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FDKAACDecContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AAC_DECODER_ERROR</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aacDecoder_SetParam</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>AAC_TPDEC_CLEAR_BUFFER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AAC_DEC_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"failed to clear buffer when flushing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libfdk_aac_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libfdk_aac"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Fraunhofer FDK AAC"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FDKAACDecContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>fdk_aac_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>fdk_aac_decode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>fdk_aac_decode_close</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>fdk_aac_decode_flush</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_CHANNEL_CONF</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>fdk_aac_dec_class</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>
<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libfdk"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
