<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\libxavs2.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xavs2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xavs2_opt_set2</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{ char opt_str[16] = {0}; int err; av_strlcatf(opt_str, sizeof(opt_str), format, __VA_ARGS__); err = cae-&gt;api-&gt;opt_set2(cae-&gt;param, name, opt_str); if (err &lt; 0) {av_log(avctx, AV_LOG_WARNING, "Invalid value for %s: %s\n", name, opt_str);}} while(0);</cpp:value></cpp:define>









<typedef>typedef <type><struct>struct <name>XAVS2EContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lcu_row_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>initial_qp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_qp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_qp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>preset_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>encoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>xavs2_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xavs2_outpacket_t</name></type> <name>packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xavs2_param_t</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xavs2_api_t</name> <modifier>*</modifier></type><name>api</name></decl>;</decl_stmt>

}</block></struct></type> <name>XAVS2EContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xavs2_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XAVS2EContext</name> <modifier>*</modifier></type><name>cae</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bit_depth</name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cae</name><operator>-&gt;</operator><name>api</name></name> <operator>=</operator> <call><name>xavs2_api_get</name><argument_list>(<argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cae</name><operator>-&gt;</operator><name>api</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get xavs2 api context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cae</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <call><name><name>cae</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>opt_alloc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cae</name><operator>-&gt;</operator><name>param</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to alloc xavs2 parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"Width"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"Height"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"BFrames"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"BitDepth"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"Log"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>cae</name><operator>-&gt;</operator><name>log_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"Preset"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>cae</name><operator>-&gt;</operator><name>preset_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"IntraPeriodMax"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"IntraPeriodMin"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"ThreadFrames"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"ThreadRows"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>cae</name><operator>-&gt;</operator><name>lcu_row_threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"OpenGOP"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_CLOSED_GOP</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>en</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>en</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>cae</name><operator>-&gt;</operator><name>xavs2_opts</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>en</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"RateControl"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"TargetBitRate"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"InitialQP"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>cae</name><operator>-&gt;</operator><name>initial_qp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"MaxQP"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr> </then><else>: <expr><name><name>cae</name><operator>-&gt;</operator><name>max_qp</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"MinQP"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr> </then><else>: <expr><name><name>cae</name><operator>-&gt;</operator><name>min_qp</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"InitialQP"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>cae</name><operator>-&gt;</operator><name>qp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_mpeg12_find_best_frame_rate</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xavs2_opt_set2</name><argument_list>(<argument><expr><literal type="string">"FrameRate"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cae</name><operator>-&gt;</operator><name>encoder</name></name> <operator>=</operator> <call><name><name>cae</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>encoder_create</name></name><argument_list>(<argument><expr><name><name>cae</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cae</name><operator>-&gt;</operator><name>encoder</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create xavs2 encoder instance.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xavs2_copy_frame_with_shift</name><parameter_list>(<parameter><decl><type><name>xavs2_picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hIdx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wIdx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p_plane</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>img_planes</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hIdx</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_lines</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>hIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p_plane</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_stride</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>wIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>wIdx</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_width</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>wIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p_plane</name><index>[<expr><name>wIdx</name></expr>]</index></name> <operator>=</operator> <name><name>p_buffer</name><index>[<expr><name>wIdx</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift_in</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p_plane</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_stride</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xavs2_copy_frame</name><parameter_list>(<parameter><decl><type><name>xavs2_picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hIdx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p_plane</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>img_planes</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stride</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_width</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>in_sample_size</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hIdx</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_lines</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>hIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_plane</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_plane</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>img</name><operator>.</operator><name>i_stride</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_buffer</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xavs2_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XAVS2EContext</name> <modifier>*</modifier></type><name>cae</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xavs2_picture_t</name></type> <name>pic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name><name>cae</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>encoder_get_buffer</name></name><argument_list>(<argument><expr><name><name>cae</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get xavs2 frame buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>in_sample_size</name></name> <operator>==</operator> <name><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>enc_sample_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xavs2_copy_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pic</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift_in</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><call><name><name>cae</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>opt_get</name></name><argument_list>(<argument><expr><name><name>cae</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><literal type="string">"SampleShift"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xavs2_copy_frame_with_shift</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pic</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>shift_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV420P10</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>in_sample_size</name></name> <operator>==</operator> <name><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>enc_sample_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xavs2_copy_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pic</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>pic</name><operator>.</operator><name>i_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>.</operator><name>i_pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>XAVS2_TYPE_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>cae</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>encoder_encode</name></name><argument_list>(<argument><expr><name><name>cae</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cae</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Encoding error occured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>cae</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>encoder_encode</name></name><argument_list>(<argument><expr><name><name>cae</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cae</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cae</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>len</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cae</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>XAVS2_STATE_FLUSH_END</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>cae</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to alloc xavs2 packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>cae</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>encoder_packet_unref</name></name><argument_list>(<argument><expr><name><name>cae</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cae</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>cae</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>cae</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cae</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>cae</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>cae</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cae</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>encoder_packet_unref</name></name><argument_list>(<argument><expr><name><name>cae</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cae</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xavs2_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XAVS2EContext</name> <modifier>*</modifier></type><name>cae</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cae</name><operator>-&gt;</operator><name>api</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>cae</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>encoder_destroy</name></name><argument_list>(<argument><expr><name><name>cae</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cae</name><operator>-&gt;</operator><name>param</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>cae</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>opt_destroy</name></name><argument_list>(<argument><expr><name><name>cae</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(XAVS2EContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"lcu_row_threads"</literal></expr> , <expr><literal type="string">"number of parallel threads for rows"</literal></expr> , <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lcu_row_threads</name></expr></argument>)</argument_list></call></expr> , <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"initial_qp"</literal></expr> , <expr><literal type="string">"Quantization initial parameter"</literal></expr> , <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>initial_qp</name></expr></argument>)</argument_list></call></expr> , <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">34</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qp"</literal></expr> , <expr><literal type="string">"Quantization parameter"</literal></expr> , <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qp</name></expr></argument>)</argument_list></call></expr> , <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">34</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"max_qp"</literal></expr> , <expr><literal type="string">"max qp for rate control"</literal></expr> , <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_qp</name></expr></argument>)</argument_list></call></expr> , <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">55</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"min_qp"</literal></expr> , <expr><literal type="string">"min qp for rate control"</literal></expr> , <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>min_qp</name></expr></argument>)</argument_list></call></expr> , <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">20</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"speed_level"</literal></expr> , <expr><literal type="string">"Speed level, higher is better but slower"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>preset_level</name></expr></argument>)</argument_list></call></expr> , <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"log_level"</literal></expr> , <expr><literal type="string">"log level: -1: none, 0: error, 1: warning, 2: info, 3: debug"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>log_level</name></expr></argument>)</argument_list></call></expr> , <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xavs2-params"</literal></expr> , <expr><literal type="string">"set the xavs2 configuration using a :-separated list of key=value parameters"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>xavs2_opts</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DICT</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>libxavs2</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"XAVS2EContext"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>xavs2_defaults</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"48"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"7"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libxavs2_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libxavs2"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libxavs2 AVS2-P2/IEEE1857.4"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AVS2</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XAVS2EContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>xavs2_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>xavs2_encode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>xavs2_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>libxavs2</name></expr>,
<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>xavs2_defaults</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libxavs2"</literal></expr>,
}</block></expr></init></decl> ;</decl_stmt>
</unit>
