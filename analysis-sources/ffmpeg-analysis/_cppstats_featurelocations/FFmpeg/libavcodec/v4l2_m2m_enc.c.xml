<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\v4l2_m2m_enc.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/videodev2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;search.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_m2m.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_fmt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPEG_CID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V4L2_CID_MPEG_VIDEO_##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPEG_VIDEO</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V4L2_MPEG_VIDEO_##x</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>v4l2_set_timeperframe</name><parameter_list>(<parameter><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>den</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_streamparm</name></name></type> <name>parm</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>parm</name><operator>.</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE</name></expr> </then><else>: <expr><name>V4L2_BUF_TYPE_VIDEO_OUTPUT</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parm</name><operator>.</operator><name>parm</name><operator>.</operator><name>output</name><operator>.</operator><name>timeperframe</name><operator>.</operator><name>denominator</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parm</name><operator>.</operator><name>parm</name><operator>.</operator><name>output</name><operator>.</operator><name>timeperframe</name><operator>.</operator><name>numerator</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_S_PARM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to set timeperframe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>v4l2_set_ext_ctrl</name><parameter_list>(<parameter><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>signed</name> <name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_ext_controls</name></name></type> <name>ctrls</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_ext_control</name></name></type> <name>ctrl</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>ctrls</name><operator>.</operator><name>ctrl_class</name></name> <operator>=</operator> <name>V4L2_CTRL_CLASS_MPEG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrls</name><operator>.</operator><name>controls</name></name> <operator>=</operator> <operator>&amp;</operator><name>ctrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrls</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_S_EXT_CTRLS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctrls</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to set %s: %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Encoder: %s = %d\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>v4l2_get_ext_ctrl</name><parameter_list>(<parameter><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>signed</name> <name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_ext_controls</name></name></type> <name>ctrls</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_ext_control</name></name></type> <name>ctrl</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>ctrls</name><operator>.</operator><name>ctrl_class</name></name> <operator>=</operator> <name>V4L2_CTRL_CLASS_MPEG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrls</name><operator>.</operator><name>controls</name></name> <operator>=</operator> <operator>&amp;</operator><name>ctrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrls</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr> ;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_G_EXT_CTRLS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctrls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to get %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ctrl</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>v4l2_h264_profile_from_ff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>h264_profile</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ffmpeg_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v4l2_val</name></decl>;</decl_stmt>
}</block> <decl><name><name>profile</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>FF_PROFILE_H264_CONSTRAINED_BASELINE</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>H264_PROFILE_CONSTRAINED_BASELINE</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>H264_PROFILE_HIGH_444_PREDICTIVE</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_HIGH_422_INTRA</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>H264_PROFILE_HIGH_422_INTRA</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_HIGH_444_INTRA</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>H264_PROFILE_HIGH_444_INTRA</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_HIGH_10_INTRA</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>H264_PROFILE_HIGH_10_INTRA</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_HIGH_422</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>H264_PROFILE_HIGH_422</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_BASELINE</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>H264_PROFILE_BASELINE</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_EXTENDED</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>H264_PROFILE_EXTENDED</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_HIGH_10</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>H264_PROFILE_HIGH_10</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_MAIN</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>H264_PROFILE_MAIN</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_HIGH</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>H264_PROFILE_HIGH</argument>)</argument_list></macro> }</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>profile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ffmpeg_val</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>profile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v4l2_val</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>v4l2_mpeg4_profile_from_ff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>mpeg4_profile</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ffmpeg_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v4l2_val</name></decl>;</decl_stmt>
}</block> <decl><name><name>profile</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>FF_PROFILE_MPEG4_ADVANCED_CODING</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_MPEG4_ADVANCED_SIMPLE</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>MPEG4_PROFILE_ADVANCED_SIMPLE</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_MPEG4_SIMPLE_SCALABLE</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>MPEG4_PROFILE_SIMPLE_SCALABLE</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_MPEG4_SIMPLE</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>MPEG4_PROFILE_SIMPLE</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_MPEG4_CORE</name></expr>, <macro><name>MPEG_VIDEO</name><argument_list>(<argument>MPEG4_PROFILE_CORE</argument>)</argument_list></macro> }</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>profile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ffmpeg_val</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>profile</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v4l2_val</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_check_b_frame_support</name><parameter_list>(<parameter><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Encoder does not support b-frames yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>v4l2_set_ext_ctrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>MPEG_CID</name><argument_list>(<argument><expr><name>B_FRAMES</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"number of B-frames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>v4l2_get_ext_ctrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>MPEG_CID</name><argument_list>(<argument><expr><name>B_FRAMES</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr></argument>, <argument><expr><literal type="string">"number of B-frames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"DTS/PTS calculation for V4L2 encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_prepare_encoder</name><parameter_list>(<parameter><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qmin_cid</name></decl>, <decl><type ref="prev"/><name>qmax_cid</name></decl>, <decl><type ref="prev"/><name>qmin</name></decl>, <decl><type ref="prev"/><name>qmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_check_b_frame_support</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>v4l2_set_timeperframe</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>v4l2_set_ext_ctrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>MPEG_CID</name><argument_list>(<argument><expr><name>HEADER_MODE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MPEG_VIDEO</name><argument_list>(<argument><expr><name>HEADER_MODE_SEPARATE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"header mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>v4l2_set_ext_ctrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>MPEG_CID</name><argument_list>(<argument><expr><name>BITRATE</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><literal type="string">"bit rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>v4l2_set_ext_ctrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>MPEG_CID</name><argument_list>(<argument><expr><name>GOP_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr></argument>,<argument><expr><literal type="string">"gop size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Encoder Context: id (%d), profile (%d), frame rate(%d/%d), number b-frames (%d), "</literal>
<literal type="string">"gop size (%d), bit rate (%"</literal><name>PRId64</name><literal type="string">"), qmin (%d), qmax (%d)\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>v4l2_h264_profile_from_ff</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"h264 profile not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>v4l2_set_ext_ctrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>MPEG_CID</name><argument_list>(<argument><expr><name>H264_PROFILE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"h264 profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>qmin_cid</name> <operator>=</operator> <call><name>MPEG_CID</name><argument_list>(<argument><expr><name>H264_MIN_QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qmax_cid</name> <operator>=</operator> <call><name>MPEG_CID</name><argument_list>(<argument><expr><name>H264_MAX_QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qmin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qmax</name> <operator>=</operator> <literal type="number">51</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>v4l2_mpeg4_profile_from_ff</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"mpeg4 profile not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>v4l2_set_ext_ctrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>MPEG_CID</name><argument_list>(<argument><expr><name>MPEG4_PROFILE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"mpeg4 profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>qmin_cid</name> <operator>=</operator> <call><name>MPEG_CID</name><argument_list>(<argument><expr><name>MPEG4_MIN_QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qmax_cid</name> <operator>=</operator> <call><name>MPEG_CID</name><argument_list>(<argument><expr><name>MPEG4_MAX_QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QPEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>v4l2_set_ext_ctrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>MPEG_CID</name><argument_list>(<argument><expr><name>MPEG4_QPEL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"qpel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>qmin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qmax</name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_H263</name></expr>:</case>
<expr_stmt><expr><name>qmin_cid</name> <operator>=</operator> <call><name>MPEG_CID</name><argument_list>(<argument><expr><name>H263_MIN_QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qmax_cid</name> <operator>=</operator> <call><name>MPEG_CID</name><argument_list>(<argument><expr><name>H263_MAX_QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qmin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qmax</name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_VP8</name></expr>:</case>
<expr_stmt><expr><name>qmin_cid</name> <operator>=</operator> <call><name>MPEG_CID</name><argument_list>(<argument><expr><name>VPX_MIN_QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qmax_cid</name> <operator>=</operator> <call><name>MPEG_CID</name><argument_list>(<argument><expr><name>VPX_MAX_QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qmin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qmax</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_VP9</name></expr>:</case>
<expr_stmt><expr><name>qmin_cid</name> <operator>=</operator> <call><name>MPEG_CID</name><argument_list>(<argument><expr><name>VPX_MIN_QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qmax_cid</name> <operator>=</operator> <call><name>MPEG_CID</name><argument_list>(<argument><expr><name>VPX_MAX_QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qmin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qmax</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>qmin</name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>||</operator> <name>qmax</name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Encoder adjusted: qmin (%d), qmax (%d)\n"</literal></expr></argument>, <argument><expr><name>qmin</name></expr></argument>, <argument><expr><name>qmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>v4l2_set_ext_ctrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>qmin_cid</name></expr></argument>, <argument><expr><name>qmin</name></expr></argument>, <argument><expr><literal type="string">"minimum video quantizer scale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>v4l2_set_ext_ctrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>qmax_cid</name></expr></argument>, <argument><expr><name>qmax</name></expr></argument>, <argument><expr><literal type="string">"maximum video quantizer scale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_send_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name>V4L2m2mPriv</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name><operator>)</operator><operator>-&gt;</operator><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>V4L2Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>output</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>v4l2_set_ext_ctrl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>MPEG_CID</name><argument_list>(<argument><expr><name>FORCE_KEY_FRAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"force key frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>ff_v4l2_context_enqueue_frame</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_receive_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name>V4L2m2mPriv</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name><operator>)</operator><operator>-&gt;</operator><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>V4L2Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>capture</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>capture</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>V4L2Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>output</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draining</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>dequeue</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>streamon</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_context_set_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>VIDIOC_STREAMON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"VIDIOC_STREAMON failed on output context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>capture</name><operator>-&gt;</operator><name>streamon</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_context_set_status</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>VIDIOC_STREAMON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"VIDIOC_STREAMON failed on capture context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>dequeue</name>:</label>
<return>return <expr><call><name>ff_v4l2_context_dequeue_packet</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>v4l2_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>capture</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>V4L2m2mPriv</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v4l2_fmt_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_m2m_create_context</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>capture</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>capture</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>capture</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>capture</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>av_codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>av_pix_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>av_codec_id</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>av_pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_m2m_codec_init</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"can't configure encoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v4l2_fmt_output</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>pixelformat</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>v4l2_fmt_output</name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>pixelformat</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pix_fmt_output</name> <operator>=</operator> <call><name>ff_v4l2_format_v4l2_to_avfmt</name><argument_list>(<argument><expr><name>v4l2_fmt_output</name></expr></argument>, <argument><expr><name>AV_CODEC_ID_RAWVIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pix_fmt_output</name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt_output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Encoder requires %s pixel format.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>v4l2_prepare_encoder</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>v4l2_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ff_v4l2_m2m_codec_end</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(V4L2m2mPriv, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>V4L_M2M_DEFAULT_OPTS</name></expr>,
<expr><block>{ <expr><literal type="string">"num_capture_buffers"</literal></expr>, <expr><literal type="string">"Number of buffers in the capture context"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>num_capture_buffers</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">4</literal></expr> }</block></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M2MENC_CLASS</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVClass v4l2_m2m_ ##NAME ##_enc_class = { .class_name = #NAME "_v4l2m2m_encoder", .item_name = av_default_item_name, .option = options, .version = LIBAVUTIL_VERSION_INT, };</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M2MENC</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>LONGNAME</name></type></parameter>, <parameter><type><name>CODEC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>M2MENC_CLASS(NAME) AVCodec ff_ ##NAME ##_v4l2m2m_encoder = { .name = #NAME "_v4l2m2m" , .long_name = NULL_IF_CONFIG_SMALL("V4L2 mem2mem " LONGNAME " encoder wrapper"), .type = AVMEDIA_TYPE_VIDEO, .id = CODEC , .priv_data_size = sizeof(V4L2m2mPriv), .priv_class = &amp;v4l2_m2m_ ##NAME ##_enc_class, .init = v4l2_encode_init, .send_frame = v4l2_send_frame, .receive_packet = v4l2_receive_packet, .close = v4l2_encode_close, .capabilities = AV_CODEC_CAP_HARDWARE | AV_CODEC_CAP_DELAY, .wrapper_name = "v4l2m2m", };</cpp:value></cpp:define>
















<expr_stmt><expr><call><name>M2MENC</name><argument_list>(<argument><expr><name>mpeg4</name></expr></argument>,<argument><expr><literal type="string">"MPEG4"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_MPEG4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M2MENC</name><argument_list>(<argument><expr><name>h263</name></expr></argument>, <argument><expr><literal type="string">"H.263"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_H263</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M2MENC</name><argument_list>(<argument><expr><name>h264</name></expr></argument>, <argument><expr><literal type="string">"H.264"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_H264</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M2MENC</name><argument_list>(<argument><expr><name>hevc</name></expr></argument>, <argument><expr><literal type="string">"HEVC"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_HEVC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M2MENC</name><argument_list>(<argument><expr><name>vp8</name></expr></argument>, <argument><expr><literal type="string">"VP8"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_VP8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
