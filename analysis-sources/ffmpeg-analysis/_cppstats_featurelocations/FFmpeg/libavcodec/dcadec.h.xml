<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dcadec.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_DCADEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_DCADEC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcadsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca_exss.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca_xll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca_lbr.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_PACKET_CORE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_PACKET_EXSS</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_PACKET_XLL</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_PACKET_LBR</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_PACKET_MASK</name></cpp:macro> <cpp:value>0x0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_PACKET_RECOVERY</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_PACKET_RESIDUAL</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>DCAContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DCACoreDecoder</name></type> <name>core</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>DCAExssParser</name></type> <name>exss</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>DCAXllDecoder</name></type> <name>xll</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>DCALbrDecoder</name></type> <name>lbr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DCADSPContext</name></type> <name>dcadsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>crctab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>request_channel_layout</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>core_only</name></decl>;</decl_stmt> 
}</block></struct></type> <name>DCAContext</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_dca_set_channel_layout</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ch_remap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dca_mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_dca_downmix_to_stereo_fixed</name><parameter_list>(<parameter><decl><type><name>DCADSPContext</name> <modifier>*</modifier></type><name>dcadsp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>coeff_l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch_mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_dca_downmix_to_stereo_float</name><parameter_list>(<parameter><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>coeff_l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch_mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_dca_check_crc</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DCAContext</name> <modifier>*</modifier></type><name>dca</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_EF_CRCCHECK</name> <operator>|</operator> <name>AV_EF_CAREFUL</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>p1</name> <operator>|</operator> <name>p2</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <name><name>p1</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>p2</name></expr></argument> &gt;</argument_list></name> <name><name>s</name><operator>-&gt;</operator><name>size_in_bits</name></name> <operator>||</operator> <name>p2</name> <operator>-</operator> <name>p1</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_crc</name><argument_list>(<argument><expr><name><name>dca</name><operator>-&gt;</operator><name>crctab</name></name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>p1</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>p2</name> <operator>-</operator> <name>p1</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_dca_seek_bits</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name> <argument_list type="generic">&lt; <argument><expr><name>get_bits_count</name><operator>(</operator><name>s</name><operator>)</operator> <operator>||</operator> <name>p</name></expr></argument> &gt;</argument_list></name> <name><name>s</name><operator>-&gt;</operator><name>size_in_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
