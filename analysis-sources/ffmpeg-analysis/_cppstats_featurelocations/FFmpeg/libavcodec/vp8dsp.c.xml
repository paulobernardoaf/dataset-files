<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vp8dsp.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp8dsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MK_IDCT_DC_ADD4_C</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void name ##_idct_dc_add4uv_c(uint8_t *dst, int16_t block[4][16], ptrdiff_t stride) { name ##_idct_dc_add_c(dst + stride * 0 + 0, block[0], stride); name ##_idct_dc_add_c(dst + stride * 0 + 4, block[1], stride); name ##_idct_dc_add_c(dst + stride * 4 + 0, block[2], stride); name ##_idct_dc_add_c(dst + stride * 4 + 4, block[3], stride); } static void name ##_idct_dc_add4y_c(uint8_t *dst, int16_t block[4][16], ptrdiff_t stride) { name ##_idct_dc_add_c(dst + 0, block[0], stride); name ##_idct_dc_add_c(dst + 4, block[1], stride); name ##_idct_dc_add_c(dst + 8, block[2], stride); name ##_idct_dc_add_c(dst + 12, block[3], stride); }</cpp:value></cpp:define>


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP7_DECODER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vp7_luma_dc_wht_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>dc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">23170</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">23170</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">12540</literal> <operator>-</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">30274</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">30274</literal> <operator>+</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">12540</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>+</operator> <name>d1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>-</operator> <name>d1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b1</name> <operator>+</operator> <name>c1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b1</name> <operator>-</operator> <name>c1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">23170</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">23170</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <literal type="number">12540</literal> <operator>-</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <literal type="number">30274</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <literal type="number">30274</literal> <operator>+</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <literal type="number">12540</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_ZERO64</name><argument_list>(<argument><expr><name>dc</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>+</operator> <name>d1</name> <operator>+</operator> <literal type="number">0x20000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>-</operator> <name>d1</name> <operator>+</operator> <literal type="number">0x20000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b1</name> <operator>+</operator> <name>c1</name> <operator>+</operator> <literal type="number">0x20000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b1</name> <operator>-</operator> <name>c1</name> <operator>+</operator> <literal type="number">0x20000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp7_luma_dc_wht_dc_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>dc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><operator>(</operator><literal type="number">23170</literal> <operator>*</operator> <operator>(</operator><literal type="number">23170</literal> <operator>*</operator> <name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x20000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp7_idct_add_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">23170</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>block</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">23170</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">12540</literal> <operator>-</operator> <name><name>block</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">30274</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">30274</literal> <operator>+</operator> <name><name>block</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">12540</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_ZERO64</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>+</operator> <name>d1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>-</operator> <name>d1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b1</name> <operator>+</operator> <name>c1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b1</name> <operator>-</operator> <name>c1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">23170</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">23170</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <literal type="number">12540</literal> <operator>-</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <literal type="number">30274</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <literal type="number">30274</literal> <operator>+</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <literal type="number">12540</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>+</operator> <name>d1</name> <operator>+</operator> <literal type="number">0x20000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>-</operator> <name>d1</name> <operator>+</operator> <literal type="number">0x20000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b1</name> <operator>+</operator> <name>c1</name> <operator>+</operator> <literal type="number">0x20000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b1</name> <operator>-</operator> <name>c1</name> <operator>+</operator> <literal type="number">0x20000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp7_idct_dc_add_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dc</name> <init>= <expr><operator>(</operator><literal type="number">23170</literal> <operator>*</operator> <operator>(</operator><literal type="number">23170</literal> <operator>*</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x20000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<macro><name>MK_IDCT_DC_ADD4_C</name><argument_list>(<argument>vp7</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP8_DECODER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vp8_luma_dc_wht_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>dc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>AV_ZERO64</name><argument_list>(<argument><expr><name>dc</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t0</name> <operator>+</operator> <name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t3</name> <operator>+</operator> <name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t0</name> <operator>-</operator> <name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t3</name> <operator>-</operator> <name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp8_luma_dc_wht_dc_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>dc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><operator>(</operator><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_20091</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((a) * 20091) &gt;&gt; 16) + (a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_35468</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) * 35468) &gt;&gt; 16)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp8_idct_add_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name><name>block</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>MUL_35468</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>MUL_20091</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>MUL_20091</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>MUL_35468</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t3</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name><name>tmp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name><name>tmp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>MUL_35468</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>MUL_20091</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>MUL_20091</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>MUL_35468</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t0</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>-</operator> <name>t2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t0</name> <operator>-</operator> <name>t3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp8_idct_dc_add_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dc</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<macro><name>MK_IDCT_DC_ADD4_C</name><argument_list>(<argument>vp8</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_PIXELS</name></cpp:macro> <cpp:value>int av_unused p3 = p[-4 * stride]; int av_unused p2 = p[-3 * stride]; int av_unused p1 = p[-2 * stride]; int av_unused p0 = p[-1 * stride]; int av_unused q0 = p[ 0 * stride]; int av_unused q1 = p[ 1 * stride]; int av_unused q2 = p[ 2 * stride]; int av_unused q3 = p[ 3 * stride];</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clip_int8</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cm[(n) + 0x80] - 0x80)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_common</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is4tap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_vp7</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LOAD_PIXELS</name>
<name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is4tap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <call><name>clip_int8</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>clip_int8</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_vp7</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <name>f1</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>p0</name> <operator>+</operator> <name>f2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>q0</name> <operator>-</operator> <name>f1</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is4tap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>f1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>p1</name> <operator>+</operator> <name>a</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>q1</name> <operator>-</operator> <name>a</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vp7_filter_common</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is4tap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>filter_common</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>is4tap</name></expr></argument>, <argument><expr><name>IS_VP7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vp8_filter_common</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is4tap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>filter_common</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>is4tap</name></expr></argument>, <argument><expr><name>IS_VP8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vp7_simple_limit</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>LOAD_PIXELS</name></macro>
<return>return <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>p0</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>flim</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vp8_simple_limit</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>LOAD_PIXELS</name></macro>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>p0</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>q1</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>flim</name></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORMAL_LIMIT</name><parameter_list>(<parameter><type><name>vpn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_always_inline int vp ##vpn ##_normal_limit(uint8_t *p, ptrdiff_t stride, int E, int I) { LOAD_PIXELS return vp ##vpn ##_simple_limit(p, stride, E) &amp;&amp; FFABS(p3 - p2) &lt;= I &amp;&amp; FFABS(p2 - p1) &lt;= I &amp;&amp; FFABS(p1 - p0) &lt;= I &amp;&amp; FFABS(q3 - q2) &lt;= I &amp;&amp; FFABS(q2 - q1) &lt;= I &amp;&amp; FFABS(q1 - q0) &lt;= I; }</cpp:value></cpp:define>











<macro><name>NORMAL_LIMIT</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>
<macro><name>NORMAL_LIMIT</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>hev</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>LOAD_PIXELS</name></macro>
<return>return <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>thresh</name> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>q1</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>thresh</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_mbedge</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOAD_PIXELS</name></type>

<name>w</name> <init>= <expr><call><name>clip_int8</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>q1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>clip_int8</name><argument_list>(<argument><expr><name>w</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><literal type="number">27</literal> <operator>*</operator> <name>w</name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><literal type="number">18</literal> <operator>*</operator> <name>w</name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>(</operator><literal type="number">9</literal> <operator>*</operator> <name>w</name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>p2</name> <operator>+</operator> <name>a2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>p1</name> <operator>+</operator> <name>a1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>p0</name> <operator>+</operator> <name>a0</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>q0</name> <operator>-</operator> <name>a0</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>q1</name> <operator>-</operator> <name>a1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[ <expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name>q2</name> <operator>-</operator> <name>a2</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOP_FILTER</name><parameter_list>(<parameter><type><name>vpn</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>stridea</name></type></parameter>, <parameter><type><name>strideb</name></type></parameter>, <parameter><type><name>maybe_inline</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static maybe_inline void vpn ##_ ##dir ##_loop_filter ##size ##_c(uint8_t *dst, ptrdiff_t stride, int flim_E, int flim_I, int hev_thresh) { int i; for (i = 0; i &lt; size; i++) if (vpn ##_normal_limit(dst + i * stridea, strideb, flim_E, flim_I)) { if (hev(dst + i * stridea, strideb, hev_thresh)) vpn ##_filter_common(dst + i * stridea, strideb, 1); else filter_mbedge(dst + i * stridea, strideb); } } static maybe_inline void vpn ##_ ##dir ##_loop_filter ##size ##_inner_c(uint8_t *dst, ptrdiff_t stride, int flim_E, int flim_I, int hev_thresh) { int i; for (i = 0; i &lt; size; i++) if (vpn ##_normal_limit(dst + i * stridea, strideb, flim_E, flim_I)) { int hv = hev(dst + i * stridea, strideb, hev_thresh); if (hv) vpn ##_filter_common(dst + i * stridea, strideb, 1); else vpn ##_filter_common(dst + i * stridea, strideb, 0); } }</cpp:value></cpp:define>




































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UV_LOOP_FILTER</name><parameter_list>(<parameter><type><name>vpn</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>stridea</name></type></parameter>, <parameter><type><name>strideb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LOOP_FILTER(vpn, dir, 8, stridea, strideb, av_always_inline) static void vpn ##_ ##dir ##_loop_filter8uv_c(uint8_t *dstU, uint8_t *dstV, ptrdiff_t stride, int fE, int fI, int hev_thresh) { vpn ##_ ##dir ##_loop_filter8_c(dstU, stride, fE, fI, hev_thresh); vpn ##_ ##dir ##_loop_filter8_c(dstV, stride, fE, fI, hev_thresh); } static void vpn ##_ ##dir ##_loop_filter8uv_inner_c(uint8_t *dstU, uint8_t *dstV, ptrdiff_t stride, int fE, int fI, int hev_thresh) { vpn ##_ ##dir ##_loop_filter8_inner_c(dstU, stride, fE, fI, hev_thresh); vpn ##_ ##dir ##_loop_filter8_inner_c(dstV, stride, fE, fI, hev_thresh); }</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOP_FILTER_SIMPLE</name><parameter_list>(<parameter><type><name>vpn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void vpn ##_v_loop_filter_simple_c(uint8_t *dst, ptrdiff_t stride, int flim) { int i; for (i = 0; i &lt; 16; i++) if (vpn ##_simple_limit(dst + i, stride, flim)) vpn ##_filter_common(dst + i, stride, 1); } static void vpn ##_h_loop_filter_simple_c(uint8_t *dst, ptrdiff_t stride, int flim) { int i; for (i = 0; i &lt; 16; i++) if (vpn ##_simple_limit(dst + i * stride, 1, flim)) vpn ##_filter_common(dst + i * stride, 1, 1); }</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOP_FILTERS</name><parameter_list>(<parameter><type><name>vpn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LOOP_FILTER(vpn, v, 16, 1, stride, ) LOOP_FILTER(vpn, h, 16, stride, 1, ) UV_LOOP_FILTER(vpn, v, 1, stride) UV_LOOP_FILTER(vpn, h, stride, 1) LOOP_FILTER_SIMPLE(vpn)</cpp:value></cpp:define> 






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>subpel_filters</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_PIXELS</name><parameter_list>(<parameter><type><name>WIDTH</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void put_vp8_pixels ##WIDTH ##_c(uint8_t *dst, ptrdiff_t dststride, uint8_t *src, ptrdiff_t srcstride, int h, int x, int y) { int i; for (i = 0; i &lt; h; i++, dst += dststride, src += srcstride) memcpy(dst, src, WIDTH); }</cpp:value></cpp:define>









<macro><name>PUT_PIXELS</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>PUT_PIXELS</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>PUT_PIXELS</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_6TAP</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>F</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cm[(F[2] * src[x + 0 * stride] - F[1] * src[x - 1 * stride] + F[0] * src[x - 2 * stride] + F[3] * src[x + 1 * stride] - F[4] * src[x + 2 * stride] + F[5] * src[x + 3 * stride] + 64) &gt;&gt; 7]</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_4TAP</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>F</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cm[(F[2] * src[x + 0 * stride] - F[1] * src[x - 1 * stride] + F[3] * src[x + 1 * stride] - F[4] * src[x + 2 * stride] + 64) &gt;&gt; 7]</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_EPEL_H</name><parameter_list>(<parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>TAPS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void put_vp8_epel ##SIZE ##_h ##TAPS ##_c(uint8_t *dst, ptrdiff_t dststride, uint8_t *src, ptrdiff_t srcstride, int h, int mx, int my) { const uint8_t *filter = subpel_filters[mx - 1]; const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP; int x, y; for (y = 0; y &lt; h; y++) { for (x = 0; x &lt; SIZE; x++) dst[x] = FILTER_ ##TAPS ##TAP(src, filter, 1); dst += dststride; src += srcstride; } }</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_EPEL_V</name><parameter_list>(<parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>TAPS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void put_vp8_epel ##SIZE ##_v ##TAPS ##_c(uint8_t *dst, ptrdiff_t dststride, uint8_t *src, ptrdiff_t srcstride, int h, int mx, int my) { const uint8_t *filter = subpel_filters[my - 1]; const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP; int x, y; for (y = 0; y &lt; h; y++) { for (x = 0; x &lt; SIZE; x++) dst[x] = FILTER_ ##TAPS ##TAP(src, filter, srcstride); dst += dststride; src += srcstride; } }</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_EPEL_HV</name><parameter_list>(<parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>HTAPS</name></type></parameter>, <parameter><type><name>VTAPS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void put_vp8_epel ##SIZE ##_h ##HTAPS ##v ##VTAPS ##_c(uint8_t *dst, ptrdiff_t dststride, uint8_t *src, ptrdiff_t srcstride, int h, int mx, int my) { const uint8_t *filter = subpel_filters[mx - 1]; const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP; int x, y; uint8_t tmp_array[(2 * SIZE + VTAPS - 1) * SIZE]; uint8_t *tmp = tmp_array; src -= (2 - (VTAPS == 4)) * srcstride; for (y = 0; y &lt; h + VTAPS - 1; y++) { for (x = 0; x &lt; SIZE; x++) tmp[x] = FILTER_ ##HTAPS ##TAP(src, filter, 1); tmp += SIZE; src += srcstride; } tmp = tmp_array + (2 - (VTAPS == 4)) * SIZE; filter = subpel_filters[my - 1]; for (y = 0; y &lt; h; y++) { for (x = 0; x &lt; SIZE; x++) dst[x] = FILTER_ ##VTAPS ##TAP(tmp, filter, SIZE); dst += dststride; tmp += SIZE; } }</cpp:value></cpp:define>
































<macro><name>VP8_EPEL_H</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_H</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_H</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_H</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_H</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_H</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_V</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_V</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_V</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_V</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_V</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_V</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>VP8_EPEL_HV</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_BILINEAR</name><parameter_list>(<parameter><type><name>SIZE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void put_vp8_bilinear ##SIZE ##_h_c(uint8_t *dst, ptrdiff_t dstride, uint8_t *src, ptrdiff_t sstride, int h, int mx, int my) { int a = 8 - mx, b = mx; int x, y; for (y = 0; y &lt; h; y++) { for (x = 0; x &lt; SIZE; x++) dst[x] = (a * src[x] + b * src[x + 1] + 4) &gt;&gt; 3; dst += dstride; src += sstride; } } static void put_vp8_bilinear ##SIZE ##_v_c(uint8_t *dst, ptrdiff_t dstride, uint8_t *src, ptrdiff_t sstride, int h, int mx, int my) { int c = 8 - my, d = my; int x, y; for (y = 0; y &lt; h; y++) { for (x = 0; x &lt; SIZE; x++) dst[x] = (c * src[x] + d * src[x + sstride] + 4) &gt;&gt; 3; dst += dstride; src += sstride; } } static void put_vp8_bilinear ##SIZE ##_hv_c(uint8_t *dst, ptrdiff_t dstride, uint8_t *src, ptrdiff_t sstride, int h, int mx, int my) { int a = 8 - mx, b = mx; int c = 8 - my, d = my; int x, y; uint8_t tmp_array[(2 * SIZE + 1) * SIZE]; uint8_t *tmp = tmp_array; for (y = 0; y &lt; h + 1; y++) { for (x = 0; x &lt; SIZE; x++) tmp[x] = (a * src[x] + b * src[x + 1] + 4) &gt;&gt; 3; tmp += SIZE; src += sstride; } tmp = tmp_array; for (y = 0; y &lt; h; y++) { for (x = 0; x &lt; SIZE; x++) dst[x] = (c * tmp[x] + d * tmp[x + SIZE] + 4) &gt;&gt; 3; dst += dstride; tmp += SIZE; } }</cpp:value></cpp:define>






















































<macro><name>VP8_BILINEAR</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>VP8_BILINEAR</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>VP8_BILINEAR</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP78_MC_FUNC</name><parameter_list>(<parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;put_vp8_epel_pixels_tab[IDX][0][0] = put_vp8_pixels ##SIZE ##_c; dsp-&gt;put_vp8_epel_pixels_tab[IDX][0][1] = put_vp8_epel ##SIZE ##_h4_c; dsp-&gt;put_vp8_epel_pixels_tab[IDX][0][2] = put_vp8_epel ##SIZE ##_h6_c; dsp-&gt;put_vp8_epel_pixels_tab[IDX][1][0] = put_vp8_epel ##SIZE ##_v4_c; dsp-&gt;put_vp8_epel_pixels_tab[IDX][1][1] = put_vp8_epel ##SIZE ##_h4v4_c; dsp-&gt;put_vp8_epel_pixels_tab[IDX][1][2] = put_vp8_epel ##SIZE ##_h6v4_c; dsp-&gt;put_vp8_epel_pixels_tab[IDX][2][0] = put_vp8_epel ##SIZE ##_v6_c; dsp-&gt;put_vp8_epel_pixels_tab[IDX][2][1] = put_vp8_epel ##SIZE ##_h4v6_c; dsp-&gt;put_vp8_epel_pixels_tab[IDX][2][2] = put_vp8_epel ##SIZE ##_h6v6_c</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP78_BILINEAR_MC_FUNC</name><parameter_list>(<parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;put_vp8_bilinear_pixels_tab[IDX][0][0] = put_vp8_pixels ##SIZE ##_c; dsp-&gt;put_vp8_bilinear_pixels_tab[IDX][0][1] = put_vp8_bilinear ##SIZE ##_h_c; dsp-&gt;put_vp8_bilinear_pixels_tab[IDX][0][2] = put_vp8_bilinear ##SIZE ##_h_c; dsp-&gt;put_vp8_bilinear_pixels_tab[IDX][1][0] = put_vp8_bilinear ##SIZE ##_v_c; dsp-&gt;put_vp8_bilinear_pixels_tab[IDX][1][1] = put_vp8_bilinear ##SIZE ##_hv_c; dsp-&gt;put_vp8_bilinear_pixels_tab[IDX][1][2] = put_vp8_bilinear ##SIZE ##_hv_c; dsp-&gt;put_vp8_bilinear_pixels_tab[IDX][2][0] = put_vp8_bilinear ##SIZE ##_v_c; dsp-&gt;put_vp8_bilinear_pixels_tab[IDX][2][1] = put_vp8_bilinear ##SIZE ##_hv_c; dsp-&gt;put_vp8_bilinear_pixels_tab[IDX][2][2] = put_vp8_bilinear ##SIZE ##_hv_c</cpp:value></cpp:define>










<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vp78dsp_init</name><parameter_list>(<parameter><decl><type><name>VP8DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VP78_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP78_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP78_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP78_BILINEAR_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP78_BILINEAR_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP78_BILINEAR_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp78dsp_init_aarch64</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp78dsp_init_arm</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp78dsp_init_ppc</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp78dsp_init_x86</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP7_DECODER</name></expr></cpp:if>
<macro><name>LOOP_FILTERS</name><argument_list>(<argument>vp7</argument>)</argument_list></macro>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vp7dsp_init</name><parameter_list>(<parameter><decl><type><name>VP8DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_luma_dc_wht</name></name> <operator>=</operator> <name>vp7_luma_dc_wht_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_luma_dc_wht_dc</name></name> <operator>=</operator> <name>vp7_luma_dc_wht_dc_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_idct_add</name></name> <operator>=</operator> <name>vp7_idct_add_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_idct_dc_add</name></name> <operator>=</operator> <name>vp7_idct_dc_add_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_idct_dc_add4y</name></name> <operator>=</operator> <name>vp7_idct_dc_add4y_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_idct_dc_add4uv</name></name> <operator>=</operator> <name>vp7_idct_dc_add4uv_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y</name></name> <operator>=</operator> <name>vp7_v_loop_filter16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y</name></name> <operator>=</operator> <name>vp7_h_loop_filter16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv</name></name> <operator>=</operator> <name>vp7_v_loop_filter8uv_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv</name></name> <operator>=</operator> <name>vp7_h_loop_filter8uv_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y_inner</name></name> <operator>=</operator> <name>vp7_v_loop_filter16_inner_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y_inner</name></name> <operator>=</operator> <name>vp7_h_loop_filter16_inner_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv_inner</name></name> <operator>=</operator> <name>vp7_v_loop_filter8uv_inner_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv_inner</name></name> <operator>=</operator> <name>vp7_h_loop_filter8uv_inner_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_v_loop_filter_simple</name></name> <operator>=</operator> <name>vp7_v_loop_filter_simple_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_h_loop_filter_simple</name></name> <operator>=</operator> <name>vp7_h_loop_filter_simple_c</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP8_DECODER</name></expr></cpp:if>
<macro><name>LOOP_FILTERS</name><argument_list>(<argument>vp8</argument>)</argument_list></macro>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vp8dsp_init</name><parameter_list>(<parameter><decl><type><name>VP8DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_luma_dc_wht</name></name> <operator>=</operator> <name>vp8_luma_dc_wht_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_luma_dc_wht_dc</name></name> <operator>=</operator> <name>vp8_luma_dc_wht_dc_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_idct_add</name></name> <operator>=</operator> <name>vp8_idct_add_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_idct_dc_add</name></name> <operator>=</operator> <name>vp8_idct_dc_add_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_idct_dc_add4y</name></name> <operator>=</operator> <name>vp8_idct_dc_add4y_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_idct_dc_add4uv</name></name> <operator>=</operator> <name>vp8_idct_dc_add4uv_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y</name></name> <operator>=</operator> <name>vp8_v_loop_filter16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y</name></name> <operator>=</operator> <name>vp8_h_loop_filter16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv</name></name> <operator>=</operator> <name>vp8_v_loop_filter8uv_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv</name></name> <operator>=</operator> <name>vp8_h_loop_filter8uv_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y_inner</name></name> <operator>=</operator> <name>vp8_v_loop_filter16_inner_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y_inner</name></name> <operator>=</operator> <name>vp8_h_loop_filter16_inner_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv_inner</name></name> <operator>=</operator> <name>vp8_v_loop_filter8uv_inner_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv_inner</name></name> <operator>=</operator> <name>vp8_h_loop_filter8uv_inner_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_v_loop_filter_simple</name></name> <operator>=</operator> <name>vp8_v_loop_filter_simple_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vp8_h_loop_filter_simple</name></name> <operator>=</operator> <name>vp8_h_loop_filter_simple_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp8dsp_init_aarch64</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp8dsp_init_arm</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp8dsp_init_x86</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp8dsp_init_mips</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
