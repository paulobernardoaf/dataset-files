<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\indeo4.c">




























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indeo4data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ivi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ivi_dsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI4_PIC_SIZE_ESC</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>


<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>InvTransformPtr</name> <modifier>*</modifier></type><name>inv_trans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DCTransformPtr</name> <modifier>*</modifier></type><name>dc_trans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_2d_trans</name></decl>;</decl_stmt>
}</block> <decl><name><name>transforms</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ff_ivi_inverse_haar_8x8</name></expr>, <expr><name>ff_ivi_dc_haar_2d</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ff_ivi_row_haar8</name></expr>, <expr><name>ff_ivi_dc_haar_2d</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ff_ivi_col_haar8</name></expr>, <expr><name>ff_ivi_dc_haar_2d</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ff_ivi_put_pixels_8x8</name></expr>, <expr><name>ff_ivi_put_dc_pixel_8x8</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ff_ivi_inverse_slant_8x8</name></expr>, <expr><name>ff_ivi_dc_slant_2d</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ff_ivi_row_slant8</name></expr>, <expr><name>ff_ivi_dc_row_slant</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ff_ivi_col_slant8</name></expr>, <expr><name>ff_ivi_dc_col_slant</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>ff_ivi_inverse_haar_4x4</name></expr>, <expr><name>ff_ivi_dc_haar_2d</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ff_ivi_inverse_slant_4x4</name></expr>, <expr><name>ff_ivi_dc_slant_2d</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><name>ff_ivi_row_haar4</name></expr>, <expr><name>ff_ivi_dc_haar_2d</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ff_ivi_col_haar4</name></expr>, <expr><name>ff_ivi_dc_haar_2d</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ff_ivi_row_slant4</name></expr>, <expr><name>ff_ivi_dc_row_slant</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>ff_ivi_col_slant4</name></expr>, <expr><name>ff_ivi_dc_col_slant</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</struct>











<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_plane_subdivision</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>scale_tile_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>def_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size_factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>size_factor</name> <operator>==</operator> <literal type="number">15</literal></expr> ?</condition><then> <expr><name>def_size</name></expr> </then><else>: <expr><operator>(</operator><name>size_factor</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_pic_hdr</name><parameter_list>(<parameter><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pic_size_indx</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IVIPicConfig</name></type> <name>pic_conf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x3FFF8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid picture start code!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_frame_type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame type: %d\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>IVI4_FRAMETYPE_BIDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>has_transp</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sync bit is set!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&gt;=</operator> <name>IVI4_FRAMETYPE_NULL_FIRST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Null frame encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Password-protected clip!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pic_size_indx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pic_size_indx</name> <operator>==</operator> <name>IVI4_PIC_SIZE_ESC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>pic_height</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>pic_width</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>pic_height</name></name> <operator>=</operator> <name><name>ivi4_common_pic_sizes</name><index>[<expr><name>pic_size_indx</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>pic_width</name></name> <operator>=</operator> <name><name>ivi4_common_pic_sizes</name><index>[<expr><name>pic_size_indx</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>uses_tiling</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>uses_tiling</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>tile_height</name></name> <operator>=</operator> <call><name>scale_tile_size</name><argument_list>(<argument><expr><name><name>pic_conf</name><operator>.</operator><name>pic_height</name></name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>tile_width</name></name> <operator>=</operator> <call><name>scale_tile_size</name><argument_list>(<argument><expr><name><name>pic_conf</name><operator>.</operator><name>pic_width</name></name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>tile_height</name></name> <operator>=</operator> <name><name>pic_conf</name><operator>.</operator><name>pic_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>tile_width</name></name> <operator>=</operator> <name><name>pic_conf</name><operator>.</operator><name>pic_width</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only YVU9 picture format is supported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>chroma_height</name></name> <operator>=</operator> <operator>(</operator><name><name>pic_conf</name><operator>.</operator><name>pic_height</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>chroma_width</name></name> <operator>=</operator> <operator>(</operator><name><name>pic_conf</name><operator>.</operator><name>pic_width</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name> <operator>=</operator> <call><name>decode_plane_subdivision</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name> <operator>=</operator> <call><name>decode_plane_subdivision</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size2</name><argument_list>(<argument><expr><name><name>pic_conf</name><operator>.</operator><name>pic_width</name></name></expr></argument>, <argument><expr><name><name>pic_conf</name><operator>.</operator><name>pic_height</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_pixels</name></name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV410P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"picture dimensions %d %d cannot be decoded\n"</literal></expr></argument>,
<argument><expr><name><name>pic_conf</name><operator>.</operator><name>pic_width</name></name></expr></argument>, <argument><expr><name><name>pic_conf</name><operator>.</operator><name>pic_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_scalable</name></name> <operator>=</operator> <name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_scalable</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Scalability: unsupported subdivision! Luma bands: %d, chroma bands: %d\n"</literal></expr></argument>,
<argument><expr><name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name></expr></argument>, <argument><expr><name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ivi_pic_config_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pic_conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_ivi_init_planes</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_conf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't reallocate color planes!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name></name> <operator>=</operator> <name>pic_conf</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>!</operator><name>p</name></expr> ?</condition><then> <expr><name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name></expr> </then><else>: <expr><name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mb_size</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>p</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_scalable</name></name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>blk_size</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>p</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>ff_ivi_init_tiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>tile_width</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>tile_height</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Couldn't reallocate internal structures!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ff_ivi_dec_huff_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IVI_MB_HUFF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>ff_ivi_dec_huff_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>IVI_BLK_HUFF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>blk_vlc</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rvmap_sel</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_imf</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_q</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_glob_quant</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>unknown1</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Pic hdr extension encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bad blocks bits encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_band_hdr</name><parameter_list>(<parameter><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IVIBandDesc</name> <modifier>*</modifier></type><name>arg_band</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>band_num</name></decl>, <decl><type ref="prev"/><name>indx</name></decl>, <decl><type ref="prev"/><name>transform_id</name></decl>, <decl><type ref="prev"/><name>scan_indx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant_mat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IVIBandDesc</name></type> <name>temp_band</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name>temp_band</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp_band</name></expr></argument>, <argument><expr><name>arg_band</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp_band</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>plane</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>band_num</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>plane</name></name> <operator>!=</operator> <name>plane</name> <operator>||</operator> <name><name>band</name><operator>-&gt;</operator><name>band_num</name></name> <operator>!=</operator> <name>band_num</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid band header sequence!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>is_empty</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>is_empty</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_blk_size</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>is_halfpel</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>is_halfpel</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid/unsupported mv resolution: %d!\n"</literal></expr></argument>,
<argument><expr><name><name>band</name><operator>-&gt;</operator><name>is_halfpel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>is_halfpel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>uses_fullpel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>checksum_present</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>checksum_present</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>indx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>indx</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid block size!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>&gt;&gt;</operator> <name>indx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>indx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inherit_mv</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inherit_qdelta</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>glob_quant</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>IVI4_FRAMETYPE_INTRA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>transform_id</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>transform_id</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>transforms</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><name><name>transforms</name><index>[<expr><name>transform_id</name></expr>]</index></name><operator>.</operator><name>inv_trans</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Transform %d"</literal></expr></argument>, <argument><expr><name>transform_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>transform_id</name> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>transform_id</name> <operator>&lt;=</operator> <literal type="number">9</literal><operator>)</operator> <operator>||</operator>
<name>transform_id</name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"DCT transform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>transform_id</name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"wrong transform size!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>transform_id</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>transform_id</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <name>transform_id</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>uses_haar</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inv_transform</name></name> <operator>=</operator> <name><name>transforms</name><index>[<expr><name>transform_id</name></expr>]</index></name><operator>.</operator><name>inv_trans</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>dc_transform</name></name> <operator>=</operator> <name><name>transforms</name><index>[<expr><name>transform_id</name></expr>]</index></name><operator>.</operator><name>dc_trans</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>is_2d_trans</name></name> <operator>=</operator> <name><name>transforms</name><index>[<expr><name>transform_id</name></expr>]</index></name><operator>.</operator><name>is_2d_trans</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>transform_id</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>!=</operator> <name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"transform and block size mismatch (%d != %d)\n"</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>scan_indx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scan_indx</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Custom scan pattern encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>scan_indx</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>scan_indx</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mismatching scan table!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mismatching scan table!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <name><name>scan_index_to_tab</name><index>[<expr><name>scan_indx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>scan_size</name></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>quant_mat</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quant_mat</name> <operator>==</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Custom quant matrix encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quant_mat</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>quant_index_to_tab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Quantization matrix %d"</literal></expr></argument>,
<argument><expr><name>quant_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>quant_mat</name></name> <operator>=</operator> <name>quant_mat</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>old_blk_size</name> <operator>!=</operator> <name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"The band block size does not match the configuration "</literal>
<literal type="string">"inherited\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>quant_index_to_tab</name><index>[<expr><name><name>band</name><operator>-&gt;</operator><name>quant_mat</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid quant matrix for 4x4 block encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>quant_mat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>scan_size</name></name> <operator>!=</operator> <name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mismatching scan table!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mismatching transform_size!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>arg_band</name><operator>-&gt;</operator><name>blk_vlc</name><operator>.</operator><name>tab</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>blk_vlc</name><operator>.</operator><name>tab</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><call><name>ff_ivi_dec_huff_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>IVI_BLK_HUFF</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>arg_band</name><operator>-&gt;</operator><name>blk_vlc</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>rvmap_sel</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>num_corr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>num_corr</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>num_corr</name></name> <operator>&gt;</operator> <literal type="number">61</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many corrections: %d\n"</literal></expr></argument>,
<argument><expr><name><name>band</name><operator>-&gt;</operator><name>num_corr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>num_corr</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>corr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>intra_base</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ivi4_quant_8x8_intra</name><index>[<expr><name><name>quant_index_to_tab</name><index>[<expr><name><name>band</name><operator>-&gt;</operator><name>quant_mat</name></name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inter_base</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ivi4_quant_8x8_inter</name><index>[<expr><name><name>quant_index_to_tab</name><index>[<expr><name><name>band</name><operator>-&gt;</operator><name>quant_mat</name></name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>intra_base</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ivi4_quant_4x4_intra</name><index>[<expr><name><name>quant_index_to_tab</name><index>[<expr><name><name>band</name><operator>-&gt;</operator><name>quant_mat</name></name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inter_base</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ivi4_quant_4x4_inter</name><index>[<expr><name><name>quant_index_to_tab</name><index>[<expr><name><name>band</name><operator>-&gt;</operator><name>quant_mat</name></name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>intra_scale</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inter_scale</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>scan</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"band-&gt;scan not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>blk_vlc</name></name> <operator>=</operator> <name><name>arg_band</name><operator>-&gt;</operator><name>blk_vlc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>arg_band</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>arg_band</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_mb_info</name><parameter_list>(<parameter><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IVIBandDesc</name> <modifier>*</modifier></type><name>band</name></decl></parameter>,
<parameter><decl><type><name>IVITile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>mv_x</name></decl>, <decl><type ref="prev"/><name>mv_y</name></decl>, <decl><type ref="prev"/><name>mv_delta</name></decl>, <decl><type ref="prev"/><name>offs</name></decl>, <decl><type ref="prev"/><name>mb_offset</name></decl>, <decl><type ref="prev"/><name>blks_per_mb</name></decl>,
<decl><type ref="prev"/><name>mv_scale</name></decl>, <decl><type ref="prev"/><name>mb_type_bits</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IVIMbInfo</name> <modifier>*</modifier></type><name>mb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_mb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row_offset</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>*</operator> <name><name>band</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>mbs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_mb</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>ref_mbs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offs</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>ypos</name></name> <operator>*</operator> <name><name>band</name><operator>-&gt;</operator><name>pitch</name></name> <operator>+</operator> <name><name>tile</name><operator>-&gt;</operator><name>xpos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>blks_per_mb</name> <operator>=</operator> <ternary><condition><expr><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>!=</operator> <name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_type_bits</name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>IVI4_FRAMETYPE_BIDIR</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name>mv_scale</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>bands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mb_size</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mv_x</name> <operator>=</operator> <name>mv_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>tile</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>tile</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name><operator>)</operator> <operator>!=</operator> <name><name>tile</name><operator>-&gt;</operator><name>num_MBs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"num_MBs mismatch %d %d %d %d\n"</literal></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>num_MBs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>ypos</name></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>ypos</name></name> <operator>+</operator> <name><name>tile</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>mb_offset</name> <operator>=</operator> <name>offs</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>xpos</name></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>xpos</name></name> <operator>+</operator> <name><name>tile</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>ypos</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>buf_offs</name></name> <operator>=</operator> <name>mb_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>b_mv_x</name></name> <operator>=</operator>
<name><name>mb</name><operator>-&gt;</operator><name>b_mv_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient input for mb info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>IVI4_FRAMETYPE_INTRA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Empty macroblock in an INTRA picture!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>cbp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>plane</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>band_num</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>in_q</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name><operator>.</operator><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
<argument><expr><name>IVI_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <call><name>IVI_TOSIGNED</name><argument_list>(<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>inherit_mv</name></name> <operator>&amp;&amp;</operator> <name>ref_mb</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mv_scale</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <call><name>ivi_scale_mv</name><argument_list>(<argument><expr><name><name>ref_mb</name><operator>-&gt;</operator><name>mv_x</name></name></expr></argument>, <argument><expr><name>mv_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <call><name>ivi_scale_mv</name><argument_list>(<argument><expr><name><name>ref_mb</name><operator>-&gt;</operator><name>mv_y</name></name></expr></argument>, <argument><expr><name>mv_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>mv_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>mv_y</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>inherit_mv</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref_mb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ref_mb unavailable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>IVI4_FRAMETYPE_INTRA</name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>IVI4_FRAMETYPE_INTRA1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>mb_type_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>cbp</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>blks_per_mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>inherit_qdelta</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ref_mb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>q_delta</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>cbp</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>plane</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>band_num</name></name> <operator>&amp;&amp;</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>in_q</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name><operator>.</operator><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
<argument><expr><name>IVI_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <call><name>IVI_TOSIGNED</name><argument_list>(<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mb</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>inherit_mv</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ref_mb</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>mv_scale</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <call><name>ivi_scale_mv</name><argument_list>(<argument><expr><name><name>ref_mb</name><operator>-&gt;</operator><name>mv_x</name></name></expr></argument>, <argument><expr><name>mv_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <call><name>ivi_scale_mv</name><argument_list>(<argument><expr><name><name>ref_mb</name><operator>-&gt;</operator><name>mv_y</name></name></expr></argument>, <argument><expr><name>mv_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>mv_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>mv_y</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mv_delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name><operator>.</operator><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
<argument><expr><name>IVI_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mv_y</name> <operator>+=</operator> <call><name>IVI_TOSIGNED</name><argument_list>(<argument><expr><name>mv_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mv_delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name><operator>.</operator><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
<argument><expr><name>IVI_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mv_x</name> <operator>+=</operator> <call><name>IVI_TOSIGNED</name><argument_list>(<argument><expr><name>mv_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <name>mv_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <name>mv_y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mv_delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name><operator>.</operator><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
<argument><expr><name>IVI_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mv_y</name> <operator>+=</operator> <call><name>IVI_TOSIGNED</name><argument_list>(<argument><expr><name>mv_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mv_delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name><operator>.</operator><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
<argument><expr><name>IVI_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mv_x</name> <operator>+=</operator> <call><name>IVI_TOSIGNED</name><argument_list>(<argument><expr><name>mv_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>b_mv_x</name></name> <operator>=</operator> <operator>-</operator><name>mv_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>b_mv_y</name></name> <operator>=</operator> <operator>-</operator><name>mv_y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>b_mv_x</name></name> <operator>=</operator> <operator>-</operator><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>b_mv_y</name></name> <operator>=</operator> <operator>-</operator><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s</name><operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>is_halfpel</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name>x</name> <operator>+</operator> <operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>&gt;&gt;</operator><name>s</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator> <operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>&gt;&gt;</operator><name>s</name><operator>)</operator><operator>)</operator><operator>*</operator><name><name>band</name><operator>-&gt;</operator><name>pitch</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name>x</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name><operator>+</operator><name>s</name><operator>)</operator><operator>&gt;&gt;</operator><name>s</name><operator>)</operator> <operator>+</operator> <name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>-</operator> <literal type="number">1</literal>
<operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator><operator>(</operator><operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name><operator>+</operator><name>s</name><operator>)</operator><operator>&gt;&gt;</operator><name>s</name><operator>)</operator><operator>)</operator><operator>*</operator><name><name>band</name><operator>-&gt;</operator><name>pitch</name></name> <operator>&gt;</operator> <name><name>band</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"motion vector %d %d outside reference\n"</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><name>s</name> <operator>+</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name></expr></argument>, <argument><expr><name>y</name><operator>*</operator><name>s</name> <operator>+</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mb</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ref_mb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ref_mb</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mb_offset</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>offs</name> <operator>+=</operator> <name>row_offset</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>switch_buffers</name><parameter_list>(<parameter><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_prev_ref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_ref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_frame_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>IVI4_FRAMETYPE_INTRA</name></expr>:</case>
<case>case <expr><name>IVI4_FRAMETYPE_INTRA1</name></expr>:</case>
<case>case <expr><name>IVI4_FRAMETYPE_INTER</name></expr>:</case>
<expr_stmt><expr><name>is_prev_ref</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>IVI4_FRAMETYPE_INTRA</name></expr>:</case>
<case>case <expr><name>IVI4_FRAMETYPE_INTRA1</name></expr>:</case>
<case>case <expr><name>IVI4_FRAMETYPE_INTER</name></expr>:</case>
<expr_stmt><expr><name>is_ref</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>is_prev_ref</name> <operator>&amp;&amp;</operator> <name>is_ref</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dst_buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ref_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_prev_ref</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ref_buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>b_ref_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dst_buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ref_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>is_nonnull_frame</name><parameter_list>(<parameter><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&lt;</operator> <name>IVI4_FRAMETYPE_NULL_FIRST</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_ivi_init_static_vlc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rvmap_tabs</name></name></expr></argument>, <argument><expr><name>ff_ivi_rvmap_tabs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_ivi_rvmap_tabs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>pic_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>pic_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV410P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_pic_hdr</name></name> <operator>=</operator> <name>decode_pic_hdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_band_hdr</name></name> <operator>=</operator> <name>decode_band_hdr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_mb_info</name></name> <operator>=</operator> <name>decode_mb_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>switch_buffers</name></name> <operator>=</operator> <name>switch_buffers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_nonnull_frame</name></name> <operator>=</operator> <name>is_nonnull_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_indeo4</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>show_indeo4_info</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dst_buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ref_buf</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>b_ref_buf</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>p_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_indeo4_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"indeo4"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Intel Indeo Video Interactive 4"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_INDEO4</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IVI45DecContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_ivi_decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_ivi_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
