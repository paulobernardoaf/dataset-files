<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\lzwenc.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZW_MAXBITS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZW_SIZTABLE</name></cpp:macro> <cpp:value>(1&lt;&lt;LZW_MAXBITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZW_HASH_SIZE</name></cpp:macro> <cpp:value>16411</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZW_HASH_SHIFT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZW_PREFIX_EMPTY</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZW_PREFIX_FREE</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>Code</name><block>{

<decl_stmt><decl><type><name>int</name></type> <name>hash_prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>suffix</name></decl>;</decl_stmt> 
}</block></struct></type><name>Code</name>;</typedef>


<typedef>typedef <type><struct>struct <name>LZWEncodeState</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>clear_code</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>end_code</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Code</name></type> <name><name>tab</name><index>[<expr><name>LZW_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tabsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bufsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>maxbits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>maxcode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>output_bytes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>last_code</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>FF_LZW_MODES</name></name></type> <name>mode</name></decl>;</decl_stmt> 
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>put_bits</name>)<parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl> 
}</block></struct></type><name>LZWEncodeState</name>;</typedef>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ff_lzw_encode_state_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>LZWEncodeState</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>head</name> <operator>^=</operator> <operator>(</operator><name>add</name> <operator>&lt;&lt;</operator> <name>LZW_HASH_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>head</name> <operator>&gt;=</operator> <name>LZW_HASH_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>head</name> <operator>-=</operator> <name>LZW_HASH_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>head</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>head</name> <operator>&lt;</operator> <name>LZW_HASH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>head</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hashNext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>head</name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>head</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>head</name> <operator>+=</operator> <name>LZW_HASH_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>head</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hashOffset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>head</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>head</name></expr> ?</condition><then> <expr><name>LZW_HASH_SIZE</name> <operator>-</operator> <name>head</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>writeCode</name><parameter_list>(<parameter><decl><type><name>LZWEncodeState</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>put_bits</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>findCode</name><parameter_list>(<parameter><decl><type><name>LZWEncodeState</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>hash</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>hash_prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash_offset</name> <init>= <expr><call><name>hashOffset</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>hash_prefix</name> <operator>!=</operator> <name>LZW_PREFIX_FREE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>suffix</name> <operator>==</operator> <name>c</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>hash_prefix</name> <operator>==</operator> <name>hash_prefix</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>h</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>hashNext</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>hash_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>addCode</name><parameter_list>(<parameter><decl><type><name>LZWEncodeState</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>hash_code</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>hash_code</name></expr>]</index></name><operator>.</operator><name>suffix</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>hash_code</name></expr>]</index></name><operator>.</operator><name>hash_prefix</name> <operator>=</operator> <name>hash_prefix</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bits</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>FF_LZW_GIF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>clearTable</name><parameter_list>(<parameter><decl><type><name>LZWEncodeState</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writeCode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>clear_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LZW_HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash_prefix</name> <operator>=</operator> <name>LZW_PREFIX_FREE</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>hash</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>suffix</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>hash_prefix</name> <operator>=</operator> <name>LZW_PREFIX_EMPTY</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name> <operator>=</operator> <literal type="number">258</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>writtenBytes</name><parameter_list>(<parameter><decl><type><name>LZWEncodeState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_bytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_bytes</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>ff_lzw_encode_init</name><parameter_list>(<parameter><decl><type><name>LZWEncodeState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outsize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxbits</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>FF_LZW_MODES</name></name></type> <name>mode</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lzw_put_bits</name>)<parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>clear_code</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_code</name></name> <operator>=</operator> <literal type="number">257</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>maxbits</name></name> <operator>=</operator> <name>maxbits</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>outsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>outsize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxbits</name></name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>maxbits</name></name> <operator>&lt;=</operator> <name>LZW_MAXBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>maxcode</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>maxbits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_code</name></name> <operator>=</operator> <name>LZW_PREFIX_EMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>put_bits</name></name> <operator>=</operator> <name>lzw_put_bits</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>ff_lzw_encode</name><parameter_list>(<parameter><decl><type><name>LZWEncodeState</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>inbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>insize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>insize</name> <operator>*</operator> <literal type="number">3</literal> <operator>&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>output_bytes</name></name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_code</name></name> <operator>==</operator> <name>LZW_PREFIX_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearTable</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>insize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>inbuf</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>findCode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_code</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>code</name></expr>]</index></name><operator>.</operator><name>hash_prefix</name> <operator>==</operator> <name>LZW_PREFIX_FREE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writeCode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addCode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_code</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name><operator>=</operator> <call><name>hash</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_code</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>code</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>maxcode</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clearTable</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>writtenBytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>ff_lzw_encode_flush</name><parameter_list>(<parameter><decl><type><name>LZWEncodeState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lzw_flush_put_bits</name>)<parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_code</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>writeCode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>writeCode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>end_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>FF_LZW_GIF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>put_bits</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lzw_flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_code</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>writtenBytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
