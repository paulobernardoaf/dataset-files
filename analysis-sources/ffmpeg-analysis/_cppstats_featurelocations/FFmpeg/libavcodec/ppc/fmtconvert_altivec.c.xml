<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\fmtconvert_altivec.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/fmtconvert.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>int32_to_float_fmul_scalar_altivec</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>mul</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{
<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>mul_u</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>mul_v</name></decl>, <decl><type ref="prev"/><name>zero</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zero</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mul_u</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mul</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mul_v</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name><name>mul_u</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>vec_ctf</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>vec_ctf</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>mul_v</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mul_v</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_fmt_convert_init_ppc</name><parameter_list>(<parameter><decl><type><name>FmtConvertContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>int32_to_float_fmul_scalar</name></name> <operator>=</operator> <name>int32_to_float_fmul_scalar_altivec</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
