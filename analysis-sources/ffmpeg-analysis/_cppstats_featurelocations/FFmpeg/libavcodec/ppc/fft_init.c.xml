<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\fft_init.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/fft.h"</cpp:file></cpp:include>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VSX</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft_vsx.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>ff_fft_calc_altivec</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_fft_calc_interleave_altivec</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GNU_AS</name> <operator>&amp;&amp;</operator> <name>HAVE_ALTIVEC</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>HAVE_BIGENDIAN</name> <operator>||</operator> <name>HAVE_VSX</name><operator>)</operator></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_half_altivec</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mdct_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n4</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n8</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n32</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>revtabj</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>revtabk</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name><operator>+</operator><name>n4</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_f</name> <modifier>*</modifier></type><name>tcos</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vec_f</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tcos</name></name><operator>+</operator><name>n8</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_f</name> <modifier>*</modifier></type><name>tsin</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vec_f</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tsin</name></name><operator>+</operator><name>n8</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_f</name> <modifier>*</modifier></type><name>pin</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vec_f</name><operator>*</operator><operator>)</operator><operator>(</operator><name>input</name><operator>+</operator><name>n4</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_f</name> <modifier>*</modifier></type><name>pout</name> <init>= <expr><operator>(</operator><name>vec_f</name><operator>*</operator><operator>)</operator><operator>(</operator><name>output</name><operator>+</operator><name>n4</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>k</name> <operator>=</operator> <name>n32</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>vec_f</name></type> <name>cos</name></decl>,<decl><type ref="prev"/><name>sin</name></decl>,<decl><type ref="prev"/><name>cos0</name></decl>,<decl><type ref="prev"/><name>sin0</name></decl>,<decl><type ref="prev"/><name>cos1</name></decl>,<decl><type ref="prev"/><name>sin1</name></decl>,<decl><type ref="prev"/><name>re</name></decl>,<decl><type ref="prev"/><name>im</name></decl>,<decl><type ref="prev"/><name>r0</name></decl>,<decl><type ref="prev"/><name>i0</name></decl>,<decl><type ref="prev"/><name>r1</name></decl>,<decl><type ref="prev"/><name>i1</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMULA</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>o0</name></type></parameter>,<parameter><type><name>o1</name></type></parameter>,<parameter><type><name>o2</name></type></parameter>,<parameter><type><name>o3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>a = pin[ k*2+p]; b = pin[-k*2-p-1]; re = vec_perm(a, b, vcprm(0,2,s0,s2)); im = vec_perm(a, b, vcprm(s3,s1,3,1)); cos = vec_perm(cos0, cos1, vcprm(o0,o1,s##o2,s##o3)); sin = vec_perm(sin0, sin1, vcprm(o0,o1,s##o2,s##o3));r##p = im*cos - re*sin;i##p = re*cos + im*sin;</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>j = dst;vec_ste(v, 0, output+j*2);vec_ste(v, 4, output+j*2);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE8</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>a = vec_perm(r##p, i##p, vcprm(0,s0,0,s0));b = vec_perm(r##p, i##p, vcprm(1,s1,1,s1));c = vec_perm(r##p, i##p, vcprm(2,s2,2,s2));d = vec_perm(r##p, i##p, vcprm(3,s3,3,s3));STORE2(a, revtabk[ p*2-4]);STORE2(b, revtabk[ p*2-3]);STORE2(c, revtabj[-p*2+2]);STORE2(d, revtabj[-p*2+3]);</cpp:value></cpp:define>









<expr_stmt><expr><name>cos0</name> <operator>=</operator> <name><name>tcos</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sin0</name> <operator>=</operator> <name><name>tsin</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cos1</name> <operator>=</operator> <name><name>tcos</name><index>[<expr><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sin1</name> <operator>=</operator> <name><name>tsin</name><index>[<expr><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMULA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMULA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revtabj</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>revtabk</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VSX</name></expr></cpp:if>
<expr_stmt><expr><call><name>ff_fft_calc_vsx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ff_fft_calc_altivec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><name>n32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>n32</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>vec_f</name></type> <name>cos</name></decl>,<decl><type ref="prev"/><name>sin</name></decl>,<decl><type ref="prev"/><name>re</name></decl>,<decl><type ref="prev"/><name>im</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMULB</name><parameter_list>(<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>re = pout[o*2];im = pout[o*2+1];cos = tcos[o];sin = tsin[o];d0 = im*sin - re*cos;d1 = re*sin + im*cos;</cpp:value></cpp:define>







<expr_stmt><expr><call><name>CMULB</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMULB</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pout</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>s3</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pout</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>s1</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pout</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>s3</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pout</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>s1</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_calc_altivec</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mdct_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n4</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n16</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u32</name></type> <name>sign</name> <init>= <expr><block>{<expr><literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal></expr>,<expr><literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal></expr>,<expr><literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal></expr>,<expr><literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u32</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>*</operator><operator>)</operator><operator>(</operator><name>output</name><operator>+</operator><name>n4</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u32</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>*</operator><operator>)</operator><operator>(</operator><name>output</name><operator>+</operator><name>n4</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>imdct_half_altivec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>output</name> <operator>+</operator> <name>n4</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n16</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vec_u32</name></type> <name>a</name> <init>= <expr><name><name>p0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>^</operator> <name>sign</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u32</name></type> <name>b</name> <init>= <expr><name><name>p1</name><index>[<expr><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p0</name><index>[<expr><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p1</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_fft_init_ppc</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GNU_AS</name> <operator>&amp;&amp;</operator> <name>HAVE_ALTIVEC</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>HAVE_BIGENDIAN</name> <operator>||</operator> <name>HAVE_VSX</name><operator>)</operator></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VSX</name></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_calc</name></name> <operator>=</operator> <name>ff_fft_calc_interleave_vsx</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_calc</name></name> <operator>=</operator> <name>ff_fft_calc_interleave_altivec</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mdct_bits</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct_calc</name></name> <operator>=</operator> <name>imdct_calc_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct_half</name></name> <operator>=</operator> <name>imdct_half_altivec</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
