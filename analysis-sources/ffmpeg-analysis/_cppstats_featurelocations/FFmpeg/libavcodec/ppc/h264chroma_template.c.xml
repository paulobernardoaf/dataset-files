<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\h264chroma_template.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_MC8_ALTIVEC_CORE</name><parameter_list>(<parameter><type><name>BIAS1</name></type></parameter>, <parameter><type><name>BIAS2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vsrc2ssH = (vec_s16)VEC_MERGEH(zero_u8v,(vec_u8)vsrc2uc);vsrc3ssH = (vec_s16)VEC_MERGEH(zero_u8v,(vec_u8)vsrc3uc);psum = vec_mladd(vA, vsrc0ssH, BIAS1);psum = vec_mladd(vB, vsrc1ssH, psum);psum = vec_mladd(vC, vsrc2ssH, psum);psum = vec_mladd(vD, vsrc3ssH, psum);psum = BIAS2(psum);psum = vec_sr(psum, v6us);vdst = vec_ld(0, dst);ppsum = (vec_u8)vec_pack(psum, psum);vfdst = vec_perm(vdst, ppsum, fperm);OP_U8_ALTIVEC(fsum, vfdst, vdst);vec_st(fsum, 0, dst);vsrc0ssH = vsrc2ssH;vsrc1ssH = vsrc3ssH;dst += stride;src += stride;</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_MC8_ALTIVEC_CORE_SIMPLE</name></cpp:macro> <cpp:value>vsrc0ssH = (vec_s16)VEC_MERGEH(zero_u8v,(vec_u8)vsrc0uc);vsrc1ssH = (vec_s16)VEC_MERGEH(zero_u8v,(vec_u8)vsrc1uc);psum = vec_mladd(vA, vsrc0ssH, v32ss);psum = vec_mladd(vE, vsrc1ssH, psum);psum = vec_sr(psum, v6us);vdst = vec_ld(0, dst);ppsum = (vec_u8)vec_pack(psum, psum);vfdst = vec_perm(vdst, ppsum, fperm);OP_U8_ALTIVEC(fsum, vfdst, vdst);vec_st(fsum, 0, dst);dst += stride;src += stride;</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>noop</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add28</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_add(v28ss, a)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VSRC1</name><parameter_list>(<parameter><type><name>vs0</name></type></parameter>, <parameter><type><name>off</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>perm0</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ vec_u8 vsrcCuc, vsrcDuc; vsrcCuc = vec_ld(off, s); if (loadSecond){ vsrcDuc = vec_ld(off + b, s); } else vsrcDuc = vsrcCuc; vs0 = vec_perm(vsrcCuc, vsrcDuc, perm0); }</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VSRC</name><parameter_list>(<parameter><type><name>vs0</name></type></parameter>, <parameter><type><name>vs1</name></type></parameter>, <parameter><type><name>off</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>perm0</name></type></parameter>, <parameter><type><name>perm1</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ vec_u8 vsrcCuc, vsrcDuc; vsrcCuc = vec_ld(off, s); if (loadSecond){ vsrcDuc = vec_ld(off + b, s); } else vsrcDuc = vsrcCuc; vs0 = vec_perm(vsrcCuc, vsrcDuc, perm0); if (reallyBadAlign){ vs1 = vsrcDuc; } else vs1 = vec_perm(vsrcCuc, vsrcDuc, perm1); }</cpp:value></cpp:define>














<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VSRC1</name><parameter_list>(<parameter><type><name>vs0</name></type></parameter>, <parameter><type><name>off</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>perm0</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ vs0 = vec_vsx_ld(off, s); }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VSRC</name><parameter_list>(<parameter><type><name>vs0</name></type></parameter>, <parameter><type><name>vs1</name></type></parameter>, <parameter><type><name>off</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>perm0</name></type></parameter>, <parameter><type><name>perm1</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ vs0 = vec_vsx_ld(off, s); vs1 = vec_vsx_ld(off + 1, s); }</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PREFIX_h264_chroma_mc8_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PREFIX_h264_chroma_mc8_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DECLARE_ALIGNED</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>signed int</argument>, <argument>ABCD</argument>)</argument_list></macro><expr_stmt><expr><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator>
<block>{<expr><operator>(</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator><operator>)</operator></expr>,
<expr><operator>(</operator><operator>(</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator><operator>)</operator></expr>,
<expr><operator>(</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <name>y</name><operator>)</operator><operator>)</operator></expr>,
<expr><operator>(</operator><operator>(</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <name>y</name><operator>)</operator><operator>)</operator></expr>}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>fperm</name></decl>;</decl_stmt>
<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>vABCD</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ABCD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vA</name> <init>= <expr><call><name>VEC_SPLAT16</name><argument_list>(<argument><expr><name>vABCD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vB</name> <init>= <expr><call><name>VEC_SPLAT16</name><argument_list>(<argument><expr><name>vABCD</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vC</name> <init>= <expr><call><name>VEC_SPLAT16</name><argument_list>(<argument><expr><name>vABCD</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vD</name> <init>= <expr><call><name>VEC_SPLAT16</name><argument_list>(<argument><expr><name>vABCD</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>v32ss</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>v6us</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>vsrcperm0</name></decl>, <decl><type ref="prev"/><name>vsrcperm1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>vsrc0uc</name></decl>, <decl><type ref="prev"/><name>vsrc1uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>vsrc0ssH</name></decl>, <decl><type ref="prev"/><name>vsrc1ssH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>vsrc2uc</name></decl>, <decl><type ref="prev"/><name>vsrc3uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>vsrc2ssH</name></decl>, <decl><type ref="prev"/><name>vsrc3ssH</name></decl>, <decl><type ref="prev"/><name>psum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>vdst</name></decl>, <decl><type ref="prev"/><name>ppsum</name></decl>, <decl><type ref="prev"/><name>vfdst</name></decl>, <decl><type ref="prev"/><name>fsum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>loadSecond</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>src</name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>reallyBadAlign</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>src</name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal><operator>)</operator> <operator>==</operator> <literal type="number">15</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>vsrcperm0</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsrcperm1</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>dst</name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fperm</name> <operator>=</operator> <operator>(</operator><name>vec_u8</name><operator>)</operator><block>{<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
<expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fperm</name> <operator>=</operator> <operator>(</operator><name>vec_u8</name><operator>)</operator><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>,
<expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GET_VSRC</name><argument_list>(<argument><expr><name>vsrc0uc</name></expr></argument>, <argument><expr><name>vsrc1uc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>vsrcperm0</name></expr></argument>, <argument><expr><name>vsrcperm1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsrc0ssH</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>,<argument><expr><operator>(</operator><name>vec_u8</name><operator>)</operator><name>vsrc0uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsrc1ssH</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>,<argument><expr><operator>(</operator><name>vec_u8</name><operator>)</operator><name>vsrc1uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ABCD</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_VSRC</name><argument_list>(<argument><expr><name>vsrc2uc</name></expr></argument>, <argument><expr><name>vsrc3uc</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>vsrcperm0</name></expr></argument>, <argument><expr><name>vsrcperm1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_MC8_ALTIVEC_CORE</name><argument_list>(<argument><expr><name>v32ss</name></expr></argument>, <argument><expr><name>noop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vE</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>vB</name></expr></argument>, <argument><expr><name>vC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ABCD</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_VSRC1</name><argument_list>(<argument><expr><name>vsrc1uc</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>vsrcperm0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CHROMA_MC8_ALTIVEC_CORE_SIMPLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vsrc0uc</name> <operator>=</operator> <name>vsrc1uc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_VSRC</name><argument_list>(<argument><expr><name>vsrc0uc</name></expr></argument>, <argument><expr><name>vsrc1uc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>vsrcperm0</name></expr></argument>, <argument><expr><name>vsrcperm1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CHROMA_MC8_ALTIVEC_CORE_SIMPLE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PREFIX_no_rnd_vc1_chroma_mc8_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PREFIX_no_rnd_vc1_chroma_mc8_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>DECLARE_ALIGNED</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>signed int</argument>, <argument>ABCD</argument>)</argument_list></macro><expr_stmt><expr><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator>
<block>{<expr><operator>(</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator><operator>)</operator></expr>,
<expr><operator>(</operator><operator>(</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator><operator>)</operator></expr>,
<expr><operator>(</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <name>y</name><operator>)</operator><operator>)</operator></expr>,
<expr><operator>(</operator><operator>(</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <name>y</name><operator>)</operator><operator>)</operator></expr>}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>fperm</name></decl>;</decl_stmt>
<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>vABCD</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ABCD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vA</name> <init>= <expr><call><name>VEC_SPLAT16</name><argument_list>(<argument><expr><name>vABCD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vB</name> <init>= <expr><call><name>VEC_SPLAT16</name><argument_list>(<argument><expr><name>vABCD</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vC</name> <init>= <expr><call><name>VEC_SPLAT16</name><argument_list>(<argument><expr><name>vABCD</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vD</name> <init>= <expr><call><name>VEC_SPLAT16</name><argument_list>(<argument><expr><name>vABCD</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>v28ss</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>v6us</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>vsrcperm0</name></decl>, <decl><type ref="prev"/><name>vsrcperm1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>vsrc0uc</name></decl>, <decl><type ref="prev"/><name>vsrc1uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>vsrc0ssH</name></decl>, <decl><type ref="prev"/><name>vsrc1ssH</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>vsrc2uc</name></decl>, <decl><type ref="prev"/><name>vsrc3uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>vsrc2ssH</name></decl>, <decl><type ref="prev"/><name>vsrc3ssH</name></decl>, <decl><type ref="prev"/><name>psum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>vdst</name></decl>, <decl><type ref="prev"/><name>ppsum</name></decl>, <decl><type ref="prev"/><name>vfdst</name></decl>, <decl><type ref="prev"/><name>fsum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>loadSecond</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>src</name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>reallyBadAlign</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>src</name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal><operator>)</operator> <operator>==</operator> <literal type="number">15</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>vsrcperm0</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsrcperm1</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>dst</name><operator>)</operator> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fperm</name> <operator>=</operator> <operator>(</operator><name>vec_u8</name><operator>)</operator><block>{<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
<expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fperm</name> <operator>=</operator> <operator>(</operator><name>vec_u8</name><operator>)</operator><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>,
<expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GET_VSRC</name><argument_list>(<argument><expr><name>vsrc0uc</name></expr></argument>, <argument><expr><name>vsrc1uc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>vsrcperm0</name></expr></argument>, <argument><expr><name>vsrcperm1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsrc0ssH</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_u8</name><operator>)</operator><name>vsrc0uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsrc1ssH</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_u8</name><operator>)</operator><name>vsrc1uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_VSRC</name><argument_list>(<argument><expr><name>vsrc2uc</name></expr></argument>, <argument><expr><name>vsrc3uc</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>vsrcperm0</name></expr></argument>, <argument><expr><name>vsrcperm1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHROMA_MC8_ALTIVEC_CORE</name><argument_list>(<argument><expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>add28</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>noop</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>add28</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHROMA_MC8_ALTIVEC_CORE</name></cpp:undef>
</unit>
