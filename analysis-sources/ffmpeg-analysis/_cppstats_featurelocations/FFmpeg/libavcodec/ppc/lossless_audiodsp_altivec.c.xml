<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\lossless_audiodsp_altivec.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/lossless_audiodsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_T</name><parameter_list>(<parameter><type><name>tt0</name></type></parameter>,<parameter><type><name>tt1</name></type></parameter>,<parameter><type><name>src</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ a = vec_ld(16, src); tt0 = vec_perm(b, a, align); b = vec_ld(32, src); tt1 = vec_perm(a, b, align); }</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_T</name><parameter_list>(<parameter><type><name>tt0</name></type></parameter>,<parameter><type><name>tt1</name></type></parameter>,<parameter><type><name>src</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ tt0 = vec_vsx_ld(0, src); tt1 = vec_vsx_ld(16, src); }</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scalarproduct_and_madd_int16_altivec</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>v3</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mul</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vec_s16</name> <modifier>*</modifier></type><name>pv1</name> <init>= <expr><operator>(</operator><name>vec_s16</name> <operator>*</operator><operator>)</operator> <name>v1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_s16</name></type> <name>muls</name> <init>= <expr><block>{ <expr><name>mul</name></expr>, <expr><name>mul</name></expr>, <expr><name>mul</name></expr>, <expr><name>mul</name></expr>, <expr><name>mul</name></expr>, <expr><name>mul</name></expr>, <expr><name>mul</name></expr>, <expr><name>mul</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_s16</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>i0</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>, <decl><type ref="prev"/><name>i4</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>, <decl><type ref="prev"/><name>i3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_s32</name></type> <name>res</name> <init>= <expr><name>zero_s32v</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>align</name> <init>= <expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i3</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ires</name></decl>;</decl_stmt>

<expr_stmt><expr><name>order</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>GET_T</name><argument_list>(<argument><expr><name>t0</name></expr></argument>,<argument><expr><name>t1</name></expr></argument>,<argument><expr><name>v2</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i0</name> <operator>=</operator> <name><name>pv1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>pv1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vec_msum</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>i0</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vec_msum</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_T</name><argument_list>(<argument><expr><name>t0</name></expr></argument>,<argument><expr><name>t1</name></expr></argument>,<argument><expr><name>v3</name></expr></argument>,<argument><expr><name>i4</name></expr></argument>,<argument><expr><name>i3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pv1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>muls</name></expr></argument>, <argument><expr><name>i0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pv1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>muls</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pv1</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>order</name></expr>)</condition>;</do>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><call><name>vec_sums</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>zero_s32v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ires</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_llauddsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>LLAudDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scalarproduct_and_madd_int16</name></name> <operator>=</operator> <name>scalarproduct_and_madd_int16_altivec</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
