<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\vp8dsp_altivec.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp8dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp_altivec.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPT4</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ __VA_ARGS__, __VA_ARGS__, __VA_ARGS__, __VA_ARGS__ }</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vec_s8</name></type> <name><name>h_subpel_filters_inner</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><call><name>REPT4</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>REPT4</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">108</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>REPT4</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">93</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>REPT4</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">77</literal></expr></argument>, <argument><expr><literal type="number">77</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>REPT4</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">93</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>REPT4</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">108</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>REPT4</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vec_s8</name></type> <name><name>h_subpel_filters_outer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><call><name>REPT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>REPT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>REPT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_H_SUBPEL_FILTER</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_s8 filter_inner = h_subpel_filters_inner[i]; vec_s8 filter_outerh = h_subpel_filters_outer[(i)&gt;&gt;1]; vec_s8 filter_outerl = vec_sld(filter_outerh, filter_outerh, 2)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PIXHL</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = vec_ld((offset)-is6tap-1, src); b = vec_ld((offset)-is6tap-1+15, src); pixh = vec_perm(a, b, permh##offset); pixl = vec_perm(a, b, perml##offset)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OUTER</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>outer = vec_perm(a, b, perm_6tap##offset)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PIXHL</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = vec_vsx_ld((offset)-is6tap-1, src); pixh = vec_perm(a, a, perm_inner); pixl = vec_perm(a, a, vec_add(perm_inner, vec_splat_u8(4)))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OUTER</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>outer = vec_perm(a, a, perm_outer)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_H</name><parameter_list>(<parameter><type><name>dstv</name></type></parameter>, <parameter><type><name>off</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_PIXHL(off); filth = vec_msum(filter_inner, pixh, c64); filtl = vec_msum(filter_inner, pixl, c64); if (is6tap) { GET_OUTER(off); filth = vec_msum(filter_outerh, outer, filth); filtl = vec_msum(filter_outerl, outer, filtl); } if (w == 4) filtl = filth; dstv = vec_packs(filth, filtl); dstv = vec_sra(dstv, c7)</cpp:value></cpp:define>














<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>put_vp8_epel_h_altivec_core</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is6tap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOAD_H_SUBPEL_FILTER</name><argument_list>(<argument><expr><name>mx</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>align_vec0</name></decl>, <decl><type ref="prev"/><name>align_vec8</name></decl>, <decl><type ref="prev"/><name>permh0</name></decl>, <decl><type ref="prev"/><name>permh8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>perm_6tap0</name></decl>, <decl><type ref="prev"/><name>perm_6tap8</name></decl>, <decl><type ref="prev"/><name>perml0</name></decl>, <decl><type ref="prev"/><name>perml8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>b</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>filt</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>pixh</name></decl>, <decl><type ref="prev"/><name>pixl</name></decl>, <decl><type ref="prev"/><name>outer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>f16h</name></decl>, <decl><type ref="prev"/><name>f16l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s32</name></type> <name>filth</name></decl>, <decl><type ref="prev"/><name>filtl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>perm_inner6</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>perm_inner4</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>perm_inner</name> <init>= <expr><ternary><condition><expr><name>is6tap</name></expr> ?</condition><then> <expr><name>perm_inner6</name></expr> </then><else>: <expr><name>perm_inner4</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>perm_outer</name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s32</name></type> <name>c64</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u16</name></type> <name>c7</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>align_vec0</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>( <argument><expr><operator>-</operator><name>is6tap</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>align_vec8</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>-</operator><name>is6tap</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>permh0</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>align_vec0</name></expr></argument>, <argument><expr><name>align_vec0</name></expr></argument>, <argument><expr><name>perm_inner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>permh8</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>align_vec8</name></expr></argument>, <argument><expr><name>align_vec8</name></expr></argument>, <argument><expr><name>perm_inner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perm_inner</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>perm_inner</name></expr></argument>, <argument><expr><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perml0</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>align_vec0</name></expr></argument>, <argument><expr><name>align_vec0</name></expr></argument>, <argument><expr><name>perm_inner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perml8</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>align_vec8</name></expr></argument>, <argument><expr><name>align_vec8</name></expr></argument>, <argument><expr><name>perm_inner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perm_6tap0</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>align_vec0</name></expr></argument>, <argument><expr><name>align_vec0</name></expr></argument>, <argument><expr><name>perm_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perm_6tap8</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>align_vec8</name></expr></argument>, <argument><expr><name>align_vec8</name></expr></argument>, <argument><expr><name>perm_outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>h</name> <operator>--</operator><operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FILTER_H</name><argument_list>(<argument><expr><name>f16h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FILTER_H</name><argument_list>(<argument><expr><name>f16l</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filt</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>f16h</name></expr></argument>, <argument><expr><name>f16l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>filt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>filt</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>f16h</name></expr></argument>, <argument><expr><name>f16h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u32</name><operator>)</operator><name>filt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u32</name><operator>)</operator><name>filt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vec_u8</name></type> <name><name>v_subpel_filters</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_V_SUBPEL_FILTER</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_u8 subpel_filter = v_subpel_filters[i]; vec_u8 f0 = vec_splat(subpel_filter, 0); vec_u8 f1 = vec_splat(subpel_filter, 1); vec_u8 f2 = vec_splat(subpel_filter, 2); vec_u8 f3 = vec_splat(subpel_filter, 3); vec_u8 f4 = vec_splat(subpel_filter, 4); vec_u8 f5 = vec_splat(subpel_filter, 5)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_V</name><parameter_list>(<parameter><type><name>dstv</name></type></parameter>, <parameter><type><name>vec_mul</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s1f = (vec_s16)vec_mul(s1, f1); s2f = (vec_s16)vec_mul(s2, f2); s3f = (vec_s16)vec_mul(s3, f3); s4f = (vec_s16)vec_mul(s4, f4); s2f = vec_subs(s2f, s1f); s3f = vec_subs(s3f, s4f); if (is6tap) { s0f = (vec_s16)vec_mul(s0, f0); s5f = (vec_s16)vec_mul(s5, f5); s2f = vec_adds(s2f, s0f); s3f = vec_adds(s3f, s5f); } dstv = vec_adds(s2f, s3f); dstv = vec_adds(dstv, c64); dstv = vec_sra(dstv, c7)</cpp:value></cpp:define>
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_HL</name><parameter_list>(<parameter><type><name>off</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>perm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>load_with_perm_vec(off, s, perm)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_HL</name><parameter_list>(<parameter><type><name>off</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>perm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_mergeh(vec_vsx_ld(off,s), vec_vsx_ld(off+8,s))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>put_vp8_epel_v_altivec_core</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is6tap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOAD_V_SUBPEL_FILTER</name><argument_list>(<argument><expr><name>my</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>s4</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>, <decl><type ref="prev"/><name>filt</name></decl>, <decl><type ref="prev"/><name>align_vech</name></decl>, <decl><type ref="prev"/><name>perm_vec</name></decl>, <decl><type ref="prev"/><name>align_vecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>s0f</name></decl>, <decl><type ref="prev"/><name>s1f</name></decl>, <decl><type ref="prev"/><name>s2f</name></decl>, <decl><type ref="prev"/><name>s3f</name></decl>, <decl><type ref="prev"/><name>s4f</name></decl>, <decl><type ref="prev"/><name>s5f</name></decl>, <decl><type ref="prev"/><name>f16h</name></decl>, <decl><type ref="prev"/><name>f16l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>c64</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u16</name></type> <name>c7</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>


<expr_stmt><expr><name>align_vech</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>align_vecl</name> <operator>=</operator> <call><name>vec_sld</name><argument_list>(<argument><expr><name>align_vech</name></expr></argument>, <argument><expr><name>align_vech</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator><literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>perm_vec</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>align_vech</name></expr></argument>, <argument><expr><name>align_vecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>perm_vec</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>align_vech</name></expr></argument>, <argument><expr><name>align_vech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>is6tap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>LOAD_HL</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>src_stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>LOAD_HL</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>src_stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>LOAD_HL</name><argument_list>( <argument><expr><literal type="number">0</literal><operator>*</operator><name>src_stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>LOAD_HL</name><argument_list>( <argument><expr><literal type="number">1</literal><operator>*</operator><name>src_stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is6tap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s4</name> <operator>=</operator> <call><name>LOAD_HL</name><argument_list>( <argument><expr><literal type="number">2</literal><operator>*</operator><name>src_stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal><operator>+</operator><name>is6tap</name><operator>)</operator><operator>*</operator><name>src_stride</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>h</name> <operator>--</operator><operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is6tap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <call><name>LOAD_HL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s4</name> <operator>=</operator> <call><name>LOAD_HL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>FILTER_V</name><argument_list>(<argument><expr><name>f16h</name></expr></argument>, <argument><expr><name>vec_mule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FILTER_V</name><argument_list>(<argument><expr><name>f16l</name></expr></argument>, <argument><expr><name>vec_mulo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filt</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>f16h</name></expr></argument>, <argument><expr><name>f16l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>filt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>filt</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>f16h</name></expr></argument>, <argument><expr><name>f16h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filt</name> <operator>=</operator> <operator>(</operator><name>vec_u8</name><operator>)</operator><call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u32</name><operator>)</operator><name>filt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u32</name><operator>)</operator><name>filt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u32</name><operator>)</operator><name>filt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is6tap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>s3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <name>s4</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is6tap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s4</name> <operator>=</operator> <name>s5</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPEL_FUNCS</name><parameter_list>(<parameter><type><name>WIDTH</name></type></parameter>, <parameter><type><name>TAPS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_noinline void put_vp8_epel ##WIDTH ##_h ##TAPS ##_altivec(uint8_t *dst, ptrdiff_t dst_stride, uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my) { put_vp8_epel_h_altivec_core(dst, dst_stride, src, src_stride, h, mx, WIDTH, TAPS == 6); } static av_noinline void put_vp8_epel ##WIDTH ##_v ##TAPS ##_altivec(uint8_t *dst, ptrdiff_t dst_stride, uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my) { put_vp8_epel_v_altivec_core(dst, dst_stride, src, src_stride, h, my, WIDTH, TAPS == 6); }</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPEL_HV</name><parameter_list>(<parameter><type><name>WIDTH</name></type></parameter>, <parameter><type><name>HTAPS</name></type></parameter>, <parameter><type><name>VTAPS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void put_vp8_epel ##WIDTH ##_h ##HTAPS ##v ##VTAPS ##_altivec(uint8_t *dst, ptrdiff_t dstride, uint8_t *src, ptrdiff_t sstride, int h, int mx, int my) { DECLARE_ALIGNED(16, uint8_t, tmp)[(2*WIDTH+5)*16]; if (VTAPS == 6) { put_vp8_epel ##WIDTH ##_h ##HTAPS ##_altivec(tmp, 16, src-2*sstride, sstride, h+5, mx, my); put_vp8_epel ##WIDTH ##_v ##VTAPS ##_altivec(dst, dstride, tmp+2*16, 16, h, mx, my); } else { put_vp8_epel ##WIDTH ##_h ##HTAPS ##_altivec(tmp, 16, src-sstride, sstride, h+4, mx, my); put_vp8_epel ##WIDTH ##_v ##VTAPS ##_altivec(dst, dstride, tmp+16, 16, h, mx, my); } }</cpp:value></cpp:define>












<macro><name>EPEL_FUNCS</name><argument_list>(<argument><literal type="number">16</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>EPEL_FUNCS</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>EPEL_FUNCS</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>EPEL_FUNCS</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>EPEL_FUNCS</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>EPEL_HV</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">6</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>EPEL_HV</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">6</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>EPEL_HV</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>EPEL_HV</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">6</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>EPEL_HV</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>EPEL_HV</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>EPEL_HV</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>EPEL_HV</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>EPEL_HV</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_vp8_pixels16_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>ptrdiff_t</name></type> <name>dstride2</name> <init>= <expr><name>dstride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>sstride2</name> <init>= <expr><name>sstride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>ptrdiff_t</name></type> <name>dstride3</name> <init>= <expr><name>dstride2</name> <operator>+</operator> <name>dstride</name></expr></init></decl>, <decl><type ref="prev"/><name>sstride3</name> <init>= <expr><name>sstride</name> <operator>+</operator> <name>sstride2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>ptrdiff_t</name></type> <name>dstride4</name> <init>= <expr><name>dstride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>sstride4</name> <init>= <expr><name>sstride</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>load_with_perm_vec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>load_with_perm_vec</name><argument_list>(<argument><expr><name>sstride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dstride</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>load_with_perm_vec</name><argument_list>(<argument><expr><name>sstride2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dstride2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>load_with_perm_vec</name><argument_list>(<argument><expr><name>sstride3</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dstride3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>sstride4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstride4</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vp78dsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>VP8DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_pixels16_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel16_h6_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel16_v6_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel16_h6v6_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel8_h6_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel8_v6_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel8_h4_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel8_v4_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel8_h6v6_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel8_h4v4_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel8_h6v4_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel8_h4v6_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel4_h6_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel4_v6_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel4_h4_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel4_v4_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel4_h6v6_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel4_h4v4_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel4_h6v4_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_vp8_epel4_h4v6_altivec</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
