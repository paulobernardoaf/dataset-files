<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\pixblockdsp.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/pixblockdsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VSX</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>get_pixels_altivec</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x13</literal></expr>,\
<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x17</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>zero</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>bytes</name> <init>= <expr><call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>shorts</name> <init>= <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vec_vsx_st</name><argument_list>(<argument><expr><name>shorts</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name> <operator>*</operator><operator>)</operator> <name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>get_pixels_altivec</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>zero</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vec_u8</name><operator>)</operator><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>perm</name> <init>= <expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>vec_u8</name></type> <name>pixl</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>pixr</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>bytes</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>pixl</name></expr></argument>, <argument><expr><name>pixr</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>vec_s16</name></type> <name>shorts</name> <init>= <expr><operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>shorts</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name> <operator>*</operator><operator>)</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VSX</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_pixels_altivec</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>zero</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>shorts1</name></decl>, <decl><type ref="prev"/><name>shorts2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>bytes</name> <init>= <expr><call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>shorts1</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bytes</name> <operator>=</operator><call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shorts2</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shorts1</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>shorts1</name></expr></argument>, <argument><expr><name>shorts2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vec_vsx_st</name><argument_list>(<argument><expr><name>shorts1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name> <operator>*</operator><operator>)</operator> <name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>







<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shorts1</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shorts2</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shorts1</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>shorts1</name></expr></argument>, <argument><expr><name>shorts2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vec_vsx_st</name><argument_list>(<argument><expr><name>shorts1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name> <operator>*</operator><operator>)</operator> <name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_pixels_altivec</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>zero</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vec_u8</name><operator>)</operator><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>shorts1</name></decl>, <decl><type ref="prev"/><name>shorts2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>pixl</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>pixr</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>bytes</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>pixl</name></expr></argument>, <argument><expr><name>pixr</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>shorts1</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixl</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixr</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>pixl</name></expr></argument>, <argument><expr><name>pixr</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shorts2</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shorts1</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>shorts1</name></expr></argument>, <argument><expr><name>shorts2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>shorts1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name> <operator>*</operator><operator>)</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>







<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixl</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixr</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>pixl</name></expr></argument>, <argument><expr><name>pixr</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shorts1</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixl</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixr</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>pixl</name></expr></argument>, <argument><expr><name>pixr</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shorts2</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>shorts1</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>shorts1</name></expr></argument>, <argument><expr><name>shorts2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>shorts1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name> <operator>*</operator><operator>)</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VSX</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>get_pixels_vsx</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>shorts</name> <init>= <expr><call><name>vsx_ld_u8_s16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec_vsx_st</name><argument_list>(<argument><expr><name>shorts</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_pixels_vsx</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>shorts1</name></decl>, <decl><type ref="prev"/><name>shorts2</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>shorts1</name> <operator>=</operator> <call><name>vsx_ld_u8_s16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shorts2</name> <operator>=</operator> <call><name>vsx_ld_u8_s16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shorts1</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>shorts1</name></expr></argument>, <argument><expr><name>shorts2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_vsx_st</name><argument_list>(<argument><expr><name>shorts1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_pixblockdsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>PixblockDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>high_bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>diff_pixels</name></name> <operator>=</operator> <name>diff_pixels_altivec</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>get_pixels</name></name> <operator>=</operator> <name>get_pixels_altivec</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VSX</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_VSX</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>diff_pixels</name></name> <operator>=</operator> <name>diff_pixels_vsx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_bit_depth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>get_pixels</name></name> <operator>=</operator> <name>get_pixels_vsx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
