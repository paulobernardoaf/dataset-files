<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\idctdsp.c">































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/idctdsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_HALF</name></cpp:macro> <cpp:value>t1 = vec_mradds(a1, vx7, vx1); t8 = vec_mradds(a1, vx1, vec_subs(zero, vx7)); t7 = vec_mradds(a2, vx5, vx3); t3 = vec_mradds(ma2, vx3, vx5); t5 = vec_adds(vx0, vx4); t0 = vec_subs(vx0, vx4); t2 = vec_mradds(a0, vx6, vx2); t4 = vec_mradds(a0, vx2, vec_subs(zero, vx6)); t6 = vec_adds(t8, t3); t3 = vec_subs(t8, t3); t8 = vec_subs(t1, t7); t1 = vec_adds(t1, t7); t7 = vec_adds(t5, t2); t2 = vec_subs(t5, t2); t5 = vec_adds(t0, t4); t0 = vec_subs(t0, t4); t4 = vec_subs(t8, t3); t3 = vec_adds(t8, t3); vy0 = vec_adds(t7, t1); vy7 = vec_subs(t7, t1); vy1 = vec_mradds(c4, t3, t5); vy6 = vec_mradds(mc4, t3, t5); vy2 = vec_mradds(c4, t4, t0); vy5 = vec_mradds(mc4, t4, t0); vy3 = vec_adds(t2, t6); vy4 = vec_subs(t2, t6)</cpp:value></cpp:define>


































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT</name></cpp:macro> <cpp:value>vec_s16 vy0, vy1, vy2, vy3, vy4, vy5, vy6, vy7; vec_s16 t0, t1, t2, t3, t4, t5, t6, t7, t8; vec_s16 c4 = vec_splat(constants[0], 0); vec_s16 a0 = vec_splat(constants[0], 1); vec_s16 a1 = vec_splat(constants[0], 2); vec_s16 a2 = vec_splat(constants[0], 3); vec_s16 mc4 = vec_splat(constants[0], 4); vec_s16 ma2 = vec_splat(constants[0], 5); vec_s16 bias = (vec_s16) vec_splat((vec_s32) constants[0], 3); vec_s16 zero = vec_splat_s16(0); vec_u16 shift = vec_splat_u16(4); vec_s16 vx0 = vec_mradds(vec_sl(block[0], shift), constants[1], zero); vec_s16 vx1 = vec_mradds(vec_sl(block[1], shift), constants[2], zero); vec_s16 vx2 = vec_mradds(vec_sl(block[2], shift), constants[3], zero); vec_s16 vx3 = vec_mradds(vec_sl(block[3], shift), constants[4], zero); vec_s16 vx4 = vec_mradds(vec_sl(block[4], shift), constants[1], zero); vec_s16 vx5 = vec_mradds(vec_sl(block[5], shift), constants[4], zero); vec_s16 vx6 = vec_mradds(vec_sl(block[6], shift), constants[3], zero); vec_s16 vx7 = vec_mradds(vec_sl(block[7], shift), constants[2], zero); IDCT_HALF; vx0 = vec_mergeh(vy0, vy4); vx1 = vec_mergel(vy0, vy4); vx2 = vec_mergeh(vy1, vy5); vx3 = vec_mergel(vy1, vy5); vx4 = vec_mergeh(vy2, vy6); vx5 = vec_mergel(vy2, vy6); vx6 = vec_mergeh(vy3, vy7); vx7 = vec_mergel(vy3, vy7); vy0 = vec_mergeh(vx0, vx4); vy1 = vec_mergel(vx0, vx4); vy2 = vec_mergeh(vx1, vx5); vy3 = vec_mergel(vx1, vx5); vy4 = vec_mergeh(vx2, vx6); vy5 = vec_mergel(vx2, vx6); vy6 = vec_mergeh(vx3, vx7); vy7 = vec_mergel(vx3, vx7); vx0 = vec_adds(vec_mergeh(vy0, vy4), bias); vx1 = vec_mergel(vy0, vy4); vx2 = vec_mergeh(vy1, vy5); vx3 = vec_mergel(vy1, vy5); vx4 = vec_mergeh(vy2, vy6); vx5 = vec_mergel(vy2, vy6); vx6 = vec_mergeh(vy3, vy7); vx7 = vec_mergel(vy3, vy7); IDCT_HALF; shift = vec_splat_u16(6); vx0 = vec_sra(vy0, shift); vx1 = vec_sra(vy1, shift); vx2 = vec_sra(vy2, shift); vx3 = vec_sra(vy3, shift); vx4 = vec_sra(vy4, shift); vx5 = vec_sra(vy5, shift); vx6 = vec_sra(vy6, shift); vx7 = vec_sra(vy7, shift)</cpp:value></cpp:define>
































































<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vec_s16</name></type> <name><name>constants</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">23170</literal></expr>, <expr><literal type="number">13573</literal></expr>, <expr><literal type="number">6518</literal></expr>, <expr><literal type="number">21895</literal></expr>, <expr><operator>-</operator><literal type="number">23170</literal></expr>, <expr><operator>-</operator><literal type="number">21895</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">16384</literal></expr>, <expr><literal type="number">22725</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">16384</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">22725</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">22725</literal></expr>, <expr><literal type="number">31521</literal></expr>, <expr><literal type="number">29692</literal></expr>, <expr><literal type="number">26722</literal></expr>, <expr><literal type="number">22725</literal></expr>, <expr><literal type="number">26722</literal></expr>, <expr><literal type="number">29692</literal></expr>, <expr><literal type="number">31521</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">29692</literal></expr>, <expr><literal type="number">27969</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><literal type="number">27969</literal></expr>, <expr><literal type="number">29692</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">26722</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><literal type="number">22654</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">22654</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><literal type="number">26722</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idct_altivec</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vec_s16</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>vec_s16</name> <operator>*</operator><operator>)</operator> <name>blk</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>IDCT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vx0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vx1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>vx2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>vx3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>vx4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>vx5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>vx6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>vx7</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idct_put_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vec_s16</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>vec_s16</name> <operator>*</operator><operator>)</operator> <name>blk</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>IDCT</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tmp = vec_packsu(src, src); vec_ste((vec_u32) tmp, 0, (unsigned int *) dest); vec_ste((vec_u32) tmp, 4, (unsigned int *) dest)</cpp:value></cpp:define>




<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idct_add_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vec_s16</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>vec_s16</name> <operator>*</operator><operator>)</operator> <name>blk</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>perm0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>perm1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>p0</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>IDCT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vec_splat_u8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perm0</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perm1</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_TMP2</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>, <parameter><type><name>prm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tmp = vec_ld(0, dest); tmp2 = (vec_s16) vec_perm(tmp, (vec_u8) zero, prm);</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_TMP2</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>, <parameter><type><name>prm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tmp = vec_vsx_ld(0, dest); tmp2 = (vec_s16) vec_mergeh(tmp, (vec_u8) zero)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>perm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_TMP2(dest, perm); tmp3 = vec_adds(tmp2, src); tmp = vec_packsu(tmp3, tmp3); vec_ste((vec_u32) tmp, 0, (unsigned int *) dest); vec_ste((vec_u32) tmp, 4, (unsigned int *) dest)</cpp:value></cpp:define>






<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx0</name></expr></argument>, <argument><expr><name>perm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx1</name></expr></argument>, <argument><expr><name>perm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx2</name></expr></argument>, <argument><expr><name>perm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx3</name></expr></argument>, <argument><expr><name>perm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx4</name></expr></argument>, <argument><expr><name>perm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx5</name></expr></argument>, <argument><expr><name>perm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx6</name></expr></argument>, <argument><expr><name>perm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>vx7</name></expr></argument>, <argument><expr><name>perm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_idctdsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>IDCTDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>high_bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_bit_depth</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_AUTO</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_ALTIVEC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct</name></name> <operator>=</operator> <name>idct_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>idct_add_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>idct_put_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>perm_type</name></name> <operator>=</operator> <name>FF_IDCT_PERM_TRANSPOSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
