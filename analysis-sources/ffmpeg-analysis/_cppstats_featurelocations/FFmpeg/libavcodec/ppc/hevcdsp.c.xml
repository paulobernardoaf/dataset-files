<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\hevcdsp.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/hevcdsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vec_s16</name></type> <name><name>trans4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">83</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">36</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><operator>-</operator><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><operator>-</operator><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><operator>-</operator><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><operator>-</operator><literal type="number">64</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">83</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">83</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">83</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">83</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vec_u8</name></type> <name><name>mask</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>transform4x4</name><parameter_list>(<parameter><decl><type><name>vec_s16</name></type> <name>src_01</name></decl></parameter>, <parameter><decl><type><name>vec_s16</name></type> <name>src_23</name></decl></parameter>,
<parameter><decl><type><name>vec_s32</name></type> <name><name>res</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>src_02</name></decl>, <decl><type ref="prev"/><name>src_13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s32</name></type> <name>zero</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s32</name></type> <name>e0</name></decl>, <decl><type ref="prev"/><name>o0</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>, <decl><type ref="prev"/><name>o1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s32</name></type> <name>add</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_13</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>src_01</name></expr></argument>, <argument><expr><name>src_23</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_02</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src_01</name></expr></argument>, <argument><expr><name>src_23</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e0</name> <operator>=</operator> <call><name>vec_msums</name><argument_list>(<argument><expr><name>src_02</name></expr></argument>, <argument><expr><name><name>trans4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o0</name> <operator>=</operator> <call><name>vec_msums</name><argument_list>(<argument><expr><name>src_13</name></expr></argument>, <argument><expr><name><name>trans4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>vec_msums</name><argument_list>(<argument><expr><name>src_02</name></expr></argument>, <argument><expr><name><name>trans4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o1</name> <operator>=</operator> <call><name>vec_msums</name><argument_list>(<argument><expr><name>src_13</name></expr></argument>, <argument><expr><name><name>trans4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_u32</name><argument_list>( <argument><expr><literal type="number">7</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">10</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">12</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>e0</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>o0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>o0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>scale</name><parameter_list>(<parameter><decl><type><name>vec_s32</name></type> <name><name>res</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>vec_s16</name></type> <name><name>res_packed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u32</name></type> <name>v_shift</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>v_shift</name> <operator>=</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>v_shift</name> <operator>=</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name>v_shift</name> <operator>=</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>v_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>res_packed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res_packed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>res</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCDECL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_ ##depth ##_altivec</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNCDECL(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdsp_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdsp_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_hevc_dsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>HEVCDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_hevc_idct_4x4_8_altivec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_hevc_idct_4x4_10_altivec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
