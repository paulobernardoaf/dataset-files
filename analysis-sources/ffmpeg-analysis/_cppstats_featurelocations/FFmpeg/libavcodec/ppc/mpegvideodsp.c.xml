<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\mpegvideodsp.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegvideodsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>


<function><type><specifier>static</specifier> <name>void</name></type> <name>gmc1_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter> , <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> ,
<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x16</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y16</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>unsigned short</argument>, <argument>rounder_a</argument>)</argument_list></macro> <operator>=</operator> <name>rounder</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>unsigned short</argument>, <argument>ABCD</argument>)</argument_list></macro><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{
<expr><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>x16</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>y16</name><operator>)</operator></expr>, 
<expr><operator>(</operator><name>x16</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>y16</name><operator>)</operator></expr>, 
<expr><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>x16</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y16</name><operator>)</operator></expr>, 
<expr><operator>(</operator><name>x16</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y16</name><operator>)</operator></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> 
}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vczero</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>vcsr8</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>dstv</name></decl>, <decl><type ref="prev"/><name>dstv2</name></decl>, <decl><type ref="prev"/><name>srcvB</name></decl>, <decl><type ref="prev"/><name>srcvC</name></decl>, <decl><type ref="prev"/><name>srcvD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>tempB</name></decl>, <decl><type ref="prev"/><name>tempC</name></decl>, <decl><type ref="prev"/><name>tempD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dst_odd</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>dst</name> <operator>&amp;</operator> <literal type="number">0x0000000F</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>src_really_odd</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>src</name> <operator>&amp;</operator> <literal type="number">0x0000000F</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>tempA</name> <init>=
<expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator> <name>ABCD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>Av</name> <init>= <expr><call><name>vec_splat</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>Bv</name> <init>= <expr><call><name>vec_splat</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>Cv</name> <init>= <expr><call><name>vec_splat</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>Dv</name> <init>= <expr><call><name>vec_splat</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>rounderV</name> <init>=
<expr><call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <call><name>vec_lde</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rounder_a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>src_0</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>src_1</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>srcvA</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>src_0</name></expr></argument>, <argument><expr><name>src_1</name></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src_really_odd</name> <operator>!=</operator> <literal type="number">0x0000000F</literal></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>srcvB</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>src_0</name></expr></argument>, <argument><expr><name>src_1</name></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>srcvB</name> <operator>=</operator> <name>src_1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>srcvA</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>srcvA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcvB</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>srcvB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst_odd</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>dst</name> <operator>&amp;</operator> <literal type="number">0x0000000F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src_really_odd</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>src</name><operator>)</operator> <operator>+</operator> <name>stride</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000000F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dstv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>src_0</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><name>stride</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_1</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><name>stride</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcvC</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>src_0</name></expr></argument>, <argument><expr><name>src_1</name></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>stride</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_really_odd</name> <operator>!=</operator> <literal type="number">0x0000000F</literal></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>srcvD</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>src_0</name></expr></argument>, <argument><expr><name>src_1</name></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>srcvD</name> <operator>=</operator> <name>src_1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>srcvC</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>srcvC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcvD</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>srcvD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>tempA</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <name>srcvA</name></expr></argument>, <argument><expr><name>Av</name></expr></argument>, <argument><expr><name>rounderV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tempB</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <name>srcvB</name></expr></argument>, <argument><expr><name>Bv</name></expr></argument>, <argument><expr><name>tempA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tempC</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <name>srcvC</name></expr></argument>, <argument><expr><name>Cv</name></expr></argument>, <argument><expr><name>tempB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tempD</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <name>srcvD</name></expr></argument>, <argument><expr><name>Dv</name></expr></argument>, <argument><expr><name>tempC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcvA</name> <operator>=</operator> <name>srcvC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcvB</name> <operator>=</operator> <name>srcvD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tempD</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name>tempD</name></expr></argument>, <argument><expr><name>vcsr8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dstv2</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>tempD</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <name>vczero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_odd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dstv2</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>dstv</name></expr></argument>, <argument><expr><name>dstv2</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dstv2</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>dstv</name></expr></argument>, <argument><expr><name>dstv2</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>dstv2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpegvideodsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>MpegVideoDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>gmc1</name></name> <operator>=</operator> <name>gmc1_altivec</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
