<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\h264dsp.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h264dec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h264dsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_1D_DCT</name><parameter_list>(<parameter><type><name>vb0</name></type></parameter>,<parameter><type><name>vb1</name></type></parameter>,<parameter><type><name>vb2</name></type></parameter>,<parameter><type><name>vb3</name></type></parameter>,<parameter><type><name>va0</name></type></parameter>,<parameter><type><name>va1</name></type></parameter>,<parameter><type><name>va2</name></type></parameter>,<parameter><type><name>va3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vz0 = vec_add(vb0,vb2); vz1 = vec_sub(vb0,vb2); vz2 = vec_sra(vb1,vec_splat_u16(1)); vz2 = vec_sub(vz2,vb3); vz3 = vec_sra(vb3,vec_splat_u16(1)); vz3 = vec_add(vb1,vz3); va0 = vec_add(vz0,vz3); va1 = vec_add(vz1,vz2); va2 = vec_sub(vz1,vz2); va3 = vec_sub(vz0,vz3)</cpp:value></cpp:define> 













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_TRANSPOSE_4</name><parameter_list>(<parameter><type><name>a0</name></type></parameter>,<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>,<parameter><type><name>a3</name></type></parameter>,<parameter><type><name>b0</name></type></parameter>,<parameter><type><name>b1</name></type></parameter>,<parameter><type><name>b2</name></type></parameter>,<parameter><type><name>b3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>b0 = vec_mergeh( a0, a0 ); b1 = vec_mergeh( a1, a0 ); b2 = vec_mergeh( a2, a0 ); b3 = vec_mergeh( a3, a0 ); a0 = vec_mergeh( b0, b2 ); a1 = vec_mergel( b0, b2 ); a2 = vec_mergeh( b1, b3 ); a3 = vec_mergel( b1, b3 ); b0 = vec_mergeh( a0, a2 ); b1 = vec_mergel( a0, a2 ); b2 = vec_mergeh( a1, a3 ); b3 = vec_mergel( a1, a3 )</cpp:value></cpp:define>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vdst_load</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vdst_orig = vec_ld(0, dst); vdst = vec_perm(vdst_orig, zero_u8v, vdst_mask);</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vdst_load</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vdst = vec_vsx_ld(0, dst)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_LOAD_U8_ADD_S16_STORE_U8</name><parameter_list>(<parameter><type><name>va</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vdst_load(); vdst_ss = (vec_s16) VEC_MERGEH(zero_u8v, vdst); va = vec_add(va, vdst_ss); va_u8 = vec_packsu(va, zero_s16v); va_u32 = vec_splat((vec_u32)va_u8, 0); vec_ste(va_u32, element, (uint32_t*)dst);</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_idct_add_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>va0</name></decl>, <decl><type ref="prev"/><name>va1</name></decl>, <decl><type ref="prev"/><name>va2</name></decl>, <decl><type ref="prev"/><name>va3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>vz0</name></decl>, <decl><type ref="prev"/><name>vz1</name></decl>, <decl><type ref="prev"/><name>vz2</name></decl>, <decl><type ref="prev"/><name>vz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>vtmp0</name></decl>, <decl><type ref="prev"/><name>vtmp1</name></decl>, <decl><type ref="prev"/><name>vtmp2</name></decl>, <decl><type ref="prev"/><name>vtmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>va_u8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u32</name></type> <name>va_u32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>vdst_ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>v6us</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>vdst</name></decl>, <decl><type ref="prev"/><name>vdst_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>vdst_mask</name> <init>= <expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>element</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>dst</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>vtmp0</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vtmp1</name> <operator>=</operator> <call><name>vec_sld</name><argument_list>(<argument><expr><name>vtmp0</name></expr></argument>, <argument><expr><name>vtmp0</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vtmp2</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vtmp3</name> <operator>=</operator> <call><name>vec_sld</name><argument_list>(<argument><expr><name>vtmp2</name></expr></argument>, <argument><expr><name>vtmp2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_1D_DCT</name><argument_list>(<argument><expr><name>vtmp0</name></expr></argument>,<argument><expr><name>vtmp1</name></expr></argument>,<argument><expr><name>vtmp2</name></expr></argument>,<argument><expr><name>vtmp3</name></expr></argument>,<argument><expr><name>va0</name></expr></argument>,<argument><expr><name>va1</name></expr></argument>,<argument><expr><name>va2</name></expr></argument>,<argument><expr><name>va3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_TRANSPOSE_4</name><argument_list>(<argument><expr><name>va0</name></expr></argument>,<argument><expr><name>va1</name></expr></argument>,<argument><expr><name>va2</name></expr></argument>,<argument><expr><name>va3</name></expr></argument>,<argument><expr><name>vtmp0</name></expr></argument>,<argument><expr><name>vtmp1</name></expr></argument>,<argument><expr><name>vtmp2</name></expr></argument>,<argument><expr><name>vtmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_1D_DCT</name><argument_list>(<argument><expr><name>vtmp0</name></expr></argument>,<argument><expr><name>vtmp1</name></expr></argument>,<argument><expr><name>vtmp2</name></expr></argument>,<argument><expr><name>vtmp3</name></expr></argument>,<argument><expr><name>va0</name></expr></argument>,<argument><expr><name>va1</name></expr></argument>,<argument><expr><name>va2</name></expr></argument>,<argument><expr><name>va3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>va0</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>va0</name></expr></argument>,<argument><expr><name>v6us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>va1</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>va1</name></expr></argument>,<argument><expr><name>v6us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>va2</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>va2</name></expr></argument>,<argument><expr><name>v6us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>va3</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>va3</name></expr></argument>,<argument><expr><name>v6us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_LOAD_U8_ADD_S16_STORE_U8</name><argument_list>(<argument><expr><name>va0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_LOAD_U8_ADD_S16_STORE_U8</name><argument_list>(<argument><expr><name>va1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_LOAD_U8_ADD_S16_STORE_U8</name><argument_list>(<argument><expr><name>va2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_LOAD_U8_ADD_S16_STORE_U8</name><argument_list>(<argument><expr><name>va3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT8_1D_ALTIVEC</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s6</name></type></parameter>, <parameter><type><name>s7</name></type></parameter>, <parameter><type><name>d0</name></type></parameter>, <parameter><type><name>d1</name></type></parameter>, <parameter><type><name>d2</name></type></parameter>, <parameter><type><name>d3</name></type></parameter>, <parameter><type><name>d4</name></type></parameter>, <parameter><type><name>d5</name></type></parameter>, <parameter><type><name>d6</name></type></parameter>, <parameter><type><name>d7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ vec_s16 a0v = vec_add(s0, s4); vec_s16 a2v = vec_sub(s0, s4); vec_s16 a4v = vec_sub(vec_sra(s2, onev), s6); vec_s16 a6v = vec_add(vec_sra(s6, onev), s2); vec_s16 b0v = vec_add(a0v, a6v); vec_s16 b2v = vec_add(a2v, a4v); vec_s16 b4v = vec_sub(a2v, a4v); vec_s16 b6v = vec_sub(a0v, a6v); vec_s16 a1v = vec_sub( vec_sub(s5, s3), vec_add(s7, vec_sra(s7, onev)) ); vec_s16 a3v = vec_sub( vec_add(s7, s1), vec_add(s3, vec_sra(s3, onev)) ); vec_s16 a5v = vec_add( vec_sub(s7, s1), vec_add(s5, vec_sra(s5, onev)) ); vec_s16 a7v = vec_add( vec_add(s5, s3), vec_add(s1, vec_sra(s1, onev)) ); vec_s16 b1v = vec_add( vec_sra(a7v, twov), a1v); vec_s16 b3v = vec_add(a3v, vec_sra(a5v, twov)); vec_s16 b5v = vec_sub( vec_sra(a3v, twov), a5v); vec_s16 b7v = vec_sub( a7v, vec_sra(a1v, twov)); d0 = vec_add(b0v, b7v); d1 = vec_add(b2v, b5v); d2 = vec_add(b4v, b3v); d3 = vec_add(b6v, b1v); d4 = vec_sub(b6v, b1v); d5 = vec_sub(b4v, b3v); d6 = vec_sub(b2v, b5v); d7 = vec_sub(b0v, b7v); }</cpp:value></cpp:define>





















































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_2PERM</name><parameter_list>(<parameter><type><name>ldv</name></type></parameter>, <parameter><type><name>stv</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ldv = vec_lvsl(0, d); stv = vec_lvsr(8, d);</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dstv_load</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_u8 hv = vec_ld( 0, d ); vec_u8 lv = vec_ld( 7, d); vec_u8 dstv = vec_perm( hv, lv, (vec_u8)perm_ldv );</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dest_unligned_store</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_u8 edgehv; vec_u8 bodyv = vec_perm( idstsum8, idstsum8, perm_stv ); vec_u8 edgelv = vec_perm( sel, zero_u8v, perm_stv ); lv = vec_sel( lv, bodyv, edgelv ); vec_st( lv, 7, d ); hv = vec_ld( 0, d ); edgehv = vec_perm( zero_u8v, sel, perm_stv ); hv = vec_sel( hv, bodyv, edgehv ); vec_st( hv, 0, d );</cpp:value></cpp:define>









<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_2PERM</name><parameter_list>(<parameter><type><name>ldv</name></type></parameter>, <parameter><type><name>stv</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dstv_load</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_u8 dstv = vec_vsx_ld(0, d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dest_unligned_store</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>vec_u8 dst8 = vec_perm((vec_u8)idstsum8, dstv, vcprm(2,3,s2,s3));vec_vsx_st(dst8, 0, d)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALTIVEC_STORE_SUM_CLIP</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>, <parameter><type><name>idctv</name></type></parameter>, <parameter><type><name>perm_ldv</name></type></parameter>, <parameter><type><name>perm_stv</name></type></parameter>, <parameter><type><name>sel</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ dstv_load(dest); vec_s16 idct_sh6 = vec_sra(idctv, sixv); vec_u16 dst16 = (vec_u16)VEC_MERGEH(zero_u8v, dstv); vec_s16 idstsum = vec_adds(idct_sh6, (vec_s16)dst16); vec_u8 idstsum8 = vec_packsu(zero_s16v, idstsum); dest_unligned_store(dest);}</cpp:value></cpp:define>










<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_idct8_add_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>s4</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>, <decl><type ref="prev"/><name>s6</name></decl>, <decl><type ref="prev"/><name>s7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d5</name></decl>, <decl><type ref="prev"/><name>d6</name></decl>, <decl><type ref="prev"/><name>d7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>idct0</name></decl>, <decl><type ref="prev"/><name>idct1</name></decl>, <decl><type ref="prev"/><name>idct2</name></decl>, <decl><type ref="prev"/><name>idct3</name></decl>, <decl><type ref="prev"/><name>idct4</name></decl>, <decl><type ref="prev"/><name>idct5</name></decl>, <decl><type ref="prev"/><name>idct6</name></decl>, <decl><type ref="prev"/><name>idct7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>perm_ldv</name></decl>, <decl><type ref="prev"/><name>perm_stv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GET_2PERM</name><argument_list>(<argument><expr><name>perm_ldv</name></expr></argument>, <argument><expr><name>perm_stv</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>onev</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>twov</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>sixv</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>sel</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>dct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>dct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>dct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>dct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s4</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>dct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>dct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s6</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0x60</literal></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>dct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s7</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0x70</literal></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>dct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dct</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDCT8_1D_ALTIVEC</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>, <argument><expr><name>s6</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>,
<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8</name><argument_list>( <argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDCT8_1D_ALTIVEC</name><argument_list>(<argument><expr><name>d0</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>,
<argument><expr><name>idct0</name></expr></argument>, <argument><expr><name>idct1</name></expr></argument>, <argument><expr><name>idct2</name></expr></argument>, <argument><expr><name>idct3</name></expr></argument>, <argument><expr><name>idct4</name></expr></argument>, <argument><expr><name>idct5</name></expr></argument>, <argument><expr><name>idct6</name></expr></argument>, <argument><expr><name>idct7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALTIVEC_STORE_SUM_CLIP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>idct0</name></expr></argument>, <argument><expr><name>perm_ldv</name></expr></argument>, <argument><expr><name>perm_stv</name></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALTIVEC_STORE_SUM_CLIP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>idct1</name></expr></argument>, <argument><expr><name>perm_ldv</name></expr></argument>, <argument><expr><name>perm_stv</name></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALTIVEC_STORE_SUM_CLIP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>idct2</name></expr></argument>, <argument><expr><name>perm_ldv</name></expr></argument>, <argument><expr><name>perm_stv</name></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALTIVEC_STORE_SUM_CLIP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>idct3</name></expr></argument>, <argument><expr><name>perm_ldv</name></expr></argument>, <argument><expr><name>perm_stv</name></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALTIVEC_STORE_SUM_CLIP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>idct4</name></expr></argument>, <argument><expr><name>perm_ldv</name></expr></argument>, <argument><expr><name>perm_stv</name></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALTIVEC_STORE_SUM_CLIP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>idct5</name></expr></argument>, <argument><expr><name>perm_ldv</name></expr></argument>, <argument><expr><name>perm_stv</name></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALTIVEC_STORE_SUM_CLIP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>idct6</name></expr></argument>, <argument><expr><name>perm_ldv</name></expr></argument>, <argument><expr><name>perm_stv</name></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALTIVEC_STORE_SUM_CLIP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name>idct7</name></expr></argument>, <argument><expr><name>perm_ldv</name></expr></argument>, <argument><expr><name>perm_stv</name></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST_LD</name></cpp:macro> <cpp:value>vec_ld</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST_LD</name></cpp:macro> <cpp:value>vec_vsx_ld</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>h264_idct_dc_add_internal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>dc16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>dcplus</name></decl>, <decl><type ref="prev"/><name>dcminus</name></decl>, <decl><type ref="prev"/><name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v3</name></decl>, <decl><type ref="prev"/><name>aligner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s32</name></type> <name>v_dc32</name></decl>;</decl_stmt>
<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v_dc32</name> <operator>=</operator> <call><name>vec_lde</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dc16</name> <operator>=</operator> <call><name>VEC_SPLAT16</name><argument_list>(<argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator><name>v_dc32</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc16</name> <operator>=</operator> <call><name>VEC_SLD16</name><argument_list>(<argument><expr><name>dc16</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dcplus</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>dc16</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dcminus</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>zero_s16v</name></expr></argument>, <argument><expr><name>dc16</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>aligner</name> <operator>=</operator> <call><name>vec_lvsr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dcplus</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>dcplus</name></expr></argument>, <argument><expr><name>dcplus</name></expr></argument>, <argument><expr><name>aligner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dcminus</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>dcminus</name></expr></argument>, <argument><expr><name>dcminus</name></expr></argument>, <argument><expr><name>aligner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>DST_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>DST_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>DST_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>DST_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>dcplus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>dcplus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>dcplus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><name>dcplus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>vec_subs</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>dcminus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>vec_subs</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>dcminus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>vec_subs</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>dcminus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>vec_subs</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><name>dcminus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_idct_dc_add_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>h264_idct_dc_add_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_idct8_dc_add_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>h264_idct_dc_add_internal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_idct_add16_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nnzc</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nnz</name> <init>= <expr><name><name>nnzc</name><index>[ <expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>nnz</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>nnz</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>block</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">16</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>h264_idct_dc_add_altivec</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>h264_idct_add_altivec</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_idct_add16intra_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nnzc</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>nnzc</name><index>[ <expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>h264_idct_add_altivec</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>block</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">16</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>h264_idct_dc_add_altivec</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_idct8_add4_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nnzc</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nnz</name> <init>= <expr><name><name>nnzc</name><index>[ <expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>nnz</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>nnz</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>block</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">16</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>h264_idct8_dc_add_altivec</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>h264_idct8_add_altivec</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_idct_add8_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nnzc</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>*</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>nnzc</name><index>[ <expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>h264_idct_add_altivec</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>block</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">16</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>h264_idct_dc_add_altivec</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>transpose4x16</name><parameter_list>(<parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ register vec_u8 r4; register vec_u8 r5; register vec_u8 r6; register vec_u8 r7; r4 = vec_mergeh(r0, r2); r5 = vec_mergel(r0, r2); r6 = vec_mergeh(r1, r3); r7 = vec_mergel(r1, r3); r0 = vec_mergeh(r4, r6); r1 = vec_mergel(r4, r6); r2 = vec_mergeh(r5, r7); r3 = vec_mergel(r5, r7); }</cpp:value></cpp:define>
















<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>write16x4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>r0</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>r1</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>r2</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>r3</name></decl></parameter>)</parameter_list> <block>{<block_content>
<macro><name>DECLARE_ALIGNED</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>unsigned char</argument>, <argument>result</argument>)</argument_list></macro><expr_stmt><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>src_int</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>result</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_int</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>int_dst_stride</name> <init>= <expr><name>dst_stride</name><operator>/</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>r2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>r3</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_int</name> <operator>=</operator> <operator>*</operator><name>src_int</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator> <name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator> <literal type="number">5</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator> <literal type="number">7</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator> <literal type="number">9</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator><literal type="number">10</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator><literal type="number">11</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator><literal type="number">12</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator><literal type="number">13</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">13</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator><literal type="number">14</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst_int</name><operator>+</operator><literal type="number">15</literal><operator>*</operator><name>int_dst_stride</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src_int</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>readAndTranspose16x6</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>src_stride</name></type></parameter>, <parameter><type><name>r8</name></type></parameter>, <parameter><type><name>r9</name></type></parameter>, <parameter><type><name>r10</name></type></parameter>, <parameter><type><name>r11</name></type></parameter>, <parameter><type><name>r12</name></type></parameter>, <parameter><type><name>r13</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{register vec_u8 r0 = unaligned_load(0, src); register vec_u8 r1 = unaligned_load( src_stride, src); register vec_u8 r2 = unaligned_load(2* src_stride, src); register vec_u8 r3 = unaligned_load(3* src_stride, src); register vec_u8 r4 = unaligned_load(4* src_stride, src); register vec_u8 r5 = unaligned_load(5* src_stride, src); register vec_u8 r6 = unaligned_load(6* src_stride, src); register vec_u8 r7 = unaligned_load(7* src_stride, src); register vec_u8 r14 = unaligned_load(14*src_stride, src); register vec_u8 r15 = unaligned_load(15*src_stride, src); r8 = unaligned_load( 8*src_stride, src); r9 = unaligned_load( 9*src_stride, src); r10 = unaligned_load(10*src_stride, src); r11 = unaligned_load(11*src_stride, src); r12 = unaligned_load(12*src_stride, src); r13 = unaligned_load(13*src_stride, src); r0 = vec_mergeh(r0, r8); r1 = vec_mergeh(r1, r9); r2 = vec_mergeh(r2, r10); r3 = vec_mergeh(r3, r11); r4 = vec_mergeh(r4, r12); r5 = vec_mergeh(r5, r13); r6 = vec_mergeh(r6, r14); r7 = vec_mergeh(r7, r15); r8 = vec_mergeh(r0, r4); r9 = vec_mergel(r0, r4); r10 = vec_mergeh(r1, r5); r11 = vec_mergel(r1, r5); r12 = vec_mergeh(r2, r6); r13 = vec_mergel(r2, r6); r14 = vec_mergeh(r3, r7); r15 = vec_mergel(r3, r7); r0 = vec_mergeh(r8, r12); r1 = vec_mergel(r8, r12); r2 = vec_mergeh(r9, r13); r4 = vec_mergeh(r10, r14); r5 = vec_mergel(r10, r14); r6 = vec_mergeh(r11, r15); r8 = vec_mergeh(r0, r4); r9 = vec_mergel(r0, r4); r10 = vec_mergeh(r1, r5); r11 = vec_mergel(r1, r5); r12 = vec_mergeh(r2, r6); r13 = vec_mergel(r2, r6); }</cpp:value></cpp:define>



























































<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vec_u8</name></type> <name>diff_lt_altivec</name> <parameter_list>( <parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>x</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>diff</name> <init>= <expr><call><name>vec_subs</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>diffneg</name> <init>= <expr><call><name>vec_subs</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>o</name> <init>= <expr><call><name>vec_or</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>diffneg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name>o</name> <operator>=</operator> <operator>(</operator><name>vec_u8</name><operator>)</operator><call><name>vec_cmplt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vec_u8</name></type> <name>h264_deblock_mask</name> <parameter_list>( <parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>p0</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>p1</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>q0</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>q1</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>alpha</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>beta</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>tempmask</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>diff_lt_altivec</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tempmask</name> <operator>=</operator> <call><name>diff_lt_altivec</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>vec_and</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>tempmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tempmask</name> <operator>=</operator> <call><name>diff_lt_altivec</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>vec_and</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>tempmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mask</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vec_u8</name></type> <name>h264_deblock_q1</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>p0</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>p1</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>p2</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>q0</name></decl></parameter>,
<parameter><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>tc0</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>average</name> <init>= <expr><call><name>vec_avg</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>unclipped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>ones</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>newp1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>average</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>average</name> <operator>=</operator> <call><name>vec_avg</name><argument_list>(<argument><expr><name>average</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ones</name> <operator>=</operator> <call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>vec_and</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>unclipped</name> <operator>=</operator> <call><name>vec_subs</name><argument_list>(<argument><expr><name>average</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>vec_subs</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newp1</name> <operator>=</operator> <call><name>vec_max</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>unclipped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newp1</name> <operator>=</operator> <call><name>vec_min</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>newp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>newp1</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>h264_deblock_p0_q0</name><parameter_list>(<parameter><type><name>p0</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>q0</name></type></parameter>, <parameter><type><name>q1</name></type></parameter>, <parameter><type><name>tc0masked</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ const vec_u8 A0v = vec_sl(vec_splat_u8(10), vec_splat_u8(4)); register vec_u8 pq0bit = vec_xor(p0,q0); register vec_u8 q1minus; register vec_u8 p0minus; register vec_u8 stage1; register vec_u8 stage2; register vec_u8 vec160; register vec_u8 delta; register vec_u8 deltaneg; q1minus = vec_nor(q1, q1); stage1 = vec_avg(p1, q1minus); stage2 = vec_sr(stage1, vec_splat_u8(1)); p0minus = vec_nor(p0, p0); stage1 = vec_avg(q0, p0minus); pq0bit = vec_and(pq0bit, vec_splat_u8(1)); stage2 = vec_avg(stage2, pq0bit); stage2 = vec_adds(stage2, stage1); vec160 = vec_ld(0, &amp;A0v); deltaneg = vec_subs(vec160, stage2); delta = vec_subs(stage2, vec160); deltaneg = vec_min(tc0masked, deltaneg); delta = vec_min(tc0masked, delta); p0 = vec_subs(p0, deltaneg); q0 = vec_subs(q0, delta); p0 = vec_adds(p0, delta); q0 = vec_adds(q0, deltaneg); }</cpp:value></cpp:define>































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>h264_loop_filter_luma_altivec</name><parameter_list>(<parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p0</name></type></parameter>, <parameter><type><name>q0</name></type></parameter>, <parameter><type><name>q1</name></type></parameter>, <parameter><type><name>q2</name></type></parameter>, <parameter><type><name>alpha</name></type></parameter>, <parameter><type><name>beta</name></type></parameter>, <parameter><type><name>tc0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ DECLARE_ALIGNED(16, unsigned char, temp)[16]; register vec_u8 alphavec; register vec_u8 betavec; register vec_u8 mask; register vec_u8 p1mask; register vec_u8 q1mask; register vector signed char tc0vec; register vec_u8 finaltc0; register vec_u8 tc0masked; register vec_u8 newp1; register vec_u8 newq1; temp[0] = alpha; temp[1] = beta; alphavec = vec_ld(0, temp); betavec = vec_splat(alphavec, 0x1); alphavec = vec_splat(alphavec, 0x0); mask = h264_deblock_mask(p0, p1, q0, q1, alphavec, betavec); AV_COPY32(temp, tc0); tc0vec = vec_ld(0, (signed char*)temp); tc0vec = vec_mergeh(tc0vec, tc0vec); tc0vec = vec_mergeh(tc0vec, tc0vec); mask = vec_and(mask, vec_cmpgt(tc0vec, vec_splat_s8(-1))); finaltc0 = vec_and((vec_u8)tc0vec, mask); p1mask = diff_lt_altivec(p2, p0, betavec); p1mask = vec_and(p1mask, mask); tc0masked = vec_and(p1mask, (vec_u8)tc0vec); finaltc0 = vec_sub(finaltc0, p1mask); newp1 = h264_deblock_q1(p0, p1, p2, q0, tc0masked); q1mask = diff_lt_altivec(q2, q0, betavec); q1mask = vec_and(q1mask, mask); tc0masked = vec_and(q1mask, (vec_u8)tc0vec); finaltc0 = vec_sub(finaltc0, q1mask); newq1 = h264_deblock_q1(p0, q1, q2, q0, tc0masked); h264_deblock_p0_q0(p0, p1, q0, q1, finaltc0); p1 = newp1; q1 = newq1; }</cpp:value></cpp:define>













































<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_v_loop_filter_luma_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tc0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>tc0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>tc0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>tc0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>p2</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>p1</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>p0</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>q0</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>q1</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>q2</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>h264_loop_filter_luma_altivec</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>q0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_h_loop_filter_luma_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>vec_u8</name></type> <name>line0</name></decl>, <decl><type ref="prev"/><name>line1</name></decl>, <decl><type ref="prev"/><name>line2</name></decl>, <decl><type ref="prev"/><name>line3</name></decl>, <decl><type ref="prev"/><name>line4</name></decl>, <decl><type ref="prev"/><name>line5</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tc0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>tc0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>tc0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>tc0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>readAndTranspose16x6</name><argument_list>(<argument><expr><name>pix</name><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>line0</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>line3</name></expr></argument>, <argument><expr><name>line4</name></expr></argument>, <argument><expr><name>line5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h264_loop_filter_luma_altivec</name><argument_list>(<argument><expr><name>line0</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>line3</name></expr></argument>, <argument><expr><name>line4</name></expr></argument>, <argument><expr><name>line5</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transpose4x16</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>line3</name></expr></argument>, <argument><expr><name>line4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write16x4</name><argument_list>(<argument><expr><name>pix</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>line3</name></expr></argument>, <argument><expr><name>line4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>weight_h264_W_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>aligned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>vblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>vtemp</name></decl>, <decl><type ref="prev"/><name>vweight</name></decl>, <decl><type ref="prev"/><name>voffset</name></decl>, <decl><type ref="prev"/><name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u16</name></type> <name>vlog2_denom</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>&lt;&lt;=</operator> <name>log2_denom</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>log2_denom</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>log2_denom</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>log2_denom</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>weight</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vtemp</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>vtemp</name> <operator>=</operator><operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_perm</name><argument_list>(<argument><expr><name>vtemp</name></expr></argument>, <argument><expr><name>vtemp</name></expr></argument>, <argument><expr><call><name>vcswapi2s</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>vlog2_denom</name> <operator>=</operator> <operator>(</operator><name>vec_u16</name><operator>)</operator><call><name>vec_splat</name><argument_list>(<argument><expr><name>vtemp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vweight</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>vtemp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>voffset</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>vtemp</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aligned</name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>block</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>vblock</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>vblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>vblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>aligned</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>vweight</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>voffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>vlog2_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <operator>!</operator><name>aligned</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>vweight</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>voffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>vlog2_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vblock</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>vblock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>
<name>void</name></type> <name>biweight_h264_W_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>log2_denom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>weightd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>weights</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>dst_aligned</name></decl>, <decl><type ref="prev"/><name>src_aligned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>vsrc</name></decl>, <decl><type ref="prev"/><name>vdst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>vtemp</name></decl>, <decl><type ref="prev"/><name>vweights</name></decl>, <decl><type ref="prev"/><name>vweightd</name></decl>, <decl><type ref="prev"/><name>voffset</name></decl>, <decl><type ref="prev"/><name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u16</name></type> <name>vlog2_denom</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>log2_denom</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>log2_denom</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>weights</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>weightd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vtemp</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>vtemp</name> <operator>=</operator><operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_perm</name><argument_list>(<argument><expr><name>vtemp</name></expr></argument>, <argument><expr><name>vtemp</name></expr></argument>, <argument><expr><call><name>vcswapi2s</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>vlog2_denom</name> <operator>=</operator> <operator>(</operator><name>vec_u16</name><operator>)</operator><call><name>vec_splat</name><argument_list>(<argument><expr><name>vtemp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vweights</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>vtemp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vweightd</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>vtemp</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>voffset</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>vtemp</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_aligned</name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>dst</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_aligned</name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>src</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>vdst</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsrc</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>vdst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>vdst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src_aligned</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v3</name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>dst_aligned</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>vweightd</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>vweights</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>voffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>vlog2_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <operator>!</operator><name>dst_aligned</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>vweightd</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><name>vweights</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>voffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>vlog2_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vdst</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>vdst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_WEIGHT</name><parameter_list>(<parameter><type><name>W</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void weight_h264_pixels ##W ##_altivec(uint8_t *block, ptrdiff_t stride, int height, int log2_denom, int weight, int offset) { weight_h264_W_altivec(block, stride, height, log2_denom, weight, offset, W); }static void biweight_h264_pixels ##W ##_altivec(uint8_t *dst, uint8_t *src, ptrdiff_t stride, int height, int log2_denom, int weightd, int weights, int offset) { biweight_h264_W_altivec(dst, src, stride, height, log2_denom, weightd, weights, offset, W); }</cpp:value></cpp:define>











<macro><name>H264_WEIGHT</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>H264_WEIGHT</name><argument_list>( <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264dsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>H264DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add</name></name> <operator>=</operator> <name>h264_idct_add_altivec</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>h264_idct_add8_altivec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16</name></name> <operator>=</operator> <name>h264_idct_add16_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16intra</name></name> <operator>=</operator> <name>h264_idct_add16intra_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_dc_add</name></name><operator>=</operator> <name>h264_idct_dc_add_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_dc_add</name></name> <operator>=</operator> <name>h264_idct8_dc_add_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add</name></name> <operator>=</operator> <name>h264_idct8_add_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add4</name></name> <operator>=</operator> <name>h264_idct8_add4_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma</name></name><operator>=</operator> <name>h264_v_loop_filter_luma_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma</name></name><operator>=</operator> <name>h264_h_loop_filter_luma_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>weight_h264_pixels16_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>weight_h264_pixels8_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>biweight_h264_pixels16_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>biweight_h264_pixels8_altivec</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
