<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\vc1dsp_altivec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vc1dsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEP8</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s6</name></type></parameter>, <parameter><type><name>s7</name></type></parameter>, <parameter><type><name>vec_rnd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { t0 = vec_sl(vec_add(s0, s4), vec_2); t0 = vec_add(vec_sl(t0, vec_1), t0); t0 = vec_add(t0, vec_rnd); t1 = vec_sl(vec_sub(s0, s4), vec_2); t1 = vec_add(vec_sl(t1, vec_1), t1); t1 = vec_add(t1, vec_rnd); t2 = vec_add(vec_sl(s6, vec_2), vec_sl(s6, vec_1)); t2 = vec_add(t2, vec_sl(s2, vec_4)); t3 = vec_add(vec_sl(s2, vec_2), vec_sl(s2, vec_1)); t3 = vec_sub(t3, vec_sl(s6, vec_4)); t4 = vec_add(t0, t2); t5 = vec_add(t1, t3); t6 = vec_sub(t1, t3); t7 = vec_sub(t0, t2); t0 = vec_sl(vec_add(s1, s3), vec_4); t0 = vec_add(t0, vec_sl(s5, vec_3)); t0 = vec_add(t0, vec_sl(s7, vec_2)); t0 = vec_add(t0, vec_sub(s5, s3)); t1 = vec_sl(vec_sub(s1, s5), vec_4); t1 = vec_sub(t1, vec_sl(s7, vec_3)); t1 = vec_sub(t1, vec_sl(s3, vec_2)); t1 = vec_sub(t1, vec_add(s1, s7)); t2 = vec_sl(vec_sub(s7, s3), vec_4); t2 = vec_add(t2, vec_sl(s1, vec_3)); t2 = vec_add(t2, vec_sl(s5, vec_2)); t2 = vec_add(t2, vec_sub(s1, s7)); t3 = vec_sl(vec_sub(s5, s7), vec_4); t3 = vec_sub(t3, vec_sl(s3, vec_3)); t3 = vec_add(t3, vec_sl(s1, vec_2)); t3 = vec_sub(t3, vec_add(s3, s5)); s0 = vec_add(t4, t0); s1 = vec_add(t5, t1); s2 = vec_add(t6, t2); s3 = vec_add(t7, t3); s4 = vec_sub(t7, t3); s5 = vec_sub(t6, t2); s6 = vec_sub(t5, t1); s7 = vec_sub(t4, t0); }while(0)</cpp:value></cpp:define>














































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_HOR8</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s6</name></type></parameter>, <parameter><type><name>s7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { s0 = vec_sra(s0, vec_3); s1 = vec_sra(s1, vec_3); s2 = vec_sra(s2, vec_3); s3 = vec_sra(s3, vec_3); s4 = vec_sra(s4, vec_3); s5 = vec_sra(s5, vec_3); s6 = vec_sra(s6, vec_3); s7 = vec_sra(s7, vec_3); }while(0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_VERT8</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s6</name></type></parameter>, <parameter><type><name>s7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { s0 = vec_sra(s0, vec_7); s1 = vec_sra(s1, vec_7); s2 = vec_sra(s2, vec_7); s3 = vec_sra(s3, vec_7); s4 = vec_sra(vec_add(s4, vec_1s), vec_7); s5 = vec_sra(vec_add(s5, vec_1s), vec_7); s6 = vec_sra(vec_add(s6, vec_1s), vec_7); s7 = vec_sra(vec_add(s7, vec_1s), vec_7); }while(0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEP4</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>vec_rnd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { t1 = vec_add(vec_sl(s0, vec_4), s0); t1 = vec_add(t1, vec_rnd); t2 = vec_add(vec_sl(s2, vec_4), s2); t0 = vec_add(t1, t2); t1 = vec_sub(t1, t2); t3 = vec_sl(vec_sub(s3, s1), vec_1); t3 = vec_add(t3, vec_sl(t3, vec_2)); t2 = vec_add(t3, vec_sl(s1, vec_5)); t3 = vec_add(t3, vec_sl(s3, vec_3)); t3 = vec_add(t3, vec_sl(s3, vec_2)); s0 = vec_add(t0, t2); s1 = vec_sub(t1, t3); s2 = vec_add(t1, t3); s3 = vec_sub(t0, t2); }while (0)</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_HOR4</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s0 = vec_sra(s0, vec_3); s1 = vec_sra(s1, vec_3); s2 = vec_sra(s2, vec_3); s3 = vec_sra(s3, vec_3);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_VERT4</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s0 = vec_sra(s0, vec_7); s1 = vec_sra(s1, vec_7); s2 = vec_sra(s2, vec_7); s3 = vec_sra(s3, vec_7);</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_inv_trans_8x8_altivec</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>s4</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>, <decl><type ref="prev"/><name>s6</name></decl>, <decl><type ref="prev"/><name>s7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>s8</name></decl>, <decl><type ref="prev"/><name>s9</name></decl>, <decl><type ref="prev"/><name>sA</name></decl>, <decl><type ref="prev"/><name>sB</name></decl>, <decl><type ref="prev"/><name>sC</name></decl>, <decl><type ref="prev"/><name>sD</name></decl>, <decl><type ref="prev"/><name>sE</name></decl>, <decl><type ref="prev"/><name>sF</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>vec_64</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_7</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_4</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>vec_4s</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_3</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_2</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>vec_1s</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_1</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src3</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src4</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src5</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src6</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">96</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src7</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">112</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s4</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s6</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s7</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s8</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s9</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sA</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sB</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sC</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sD</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sE</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sF</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STEP8</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>, <argument><expr><name>s6</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>, <argument><expr><name>vec_4s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHIFT_HOR8</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>, <argument><expr><name>s6</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STEP8</name><argument_list>(<argument><expr><name>s8</name></expr></argument>, <argument><expr><name>s9</name></expr></argument>, <argument><expr><name>sA</name></expr></argument>, <argument><expr><name>sB</name></expr></argument>, <argument><expr><name>sC</name></expr></argument>, <argument><expr><name>sD</name></expr></argument>, <argument><expr><name>sE</name></expr></argument>, <argument><expr><name>sF</name></expr></argument>, <argument><expr><name>vec_4s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHIFT_HOR8</name><argument_list>(<argument><expr><name>s8</name></expr></argument>, <argument><expr><name>s9</name></expr></argument>, <argument><expr><name>sA</name></expr></argument>, <argument><expr><name>sB</name></expr></argument>, <argument><expr><name>sC</name></expr></argument>, <argument><expr><name>sD</name></expr></argument>, <argument><expr><name>sE</name></expr></argument>, <argument><expr><name>sF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>s8</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>s9</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sA</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src3</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sB</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src4</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sC</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src5</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sD</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src6</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sE</name></expr></argument>, <argument><expr><name>s6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src7</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sF</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSPOSE8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s4</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s6</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s7</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s8</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s9</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sA</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sB</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sC</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sD</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sE</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sF</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STEP8</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>, <argument><expr><name>s6</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>, <argument><expr><name>vec_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHIFT_VERT8</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>, <argument><expr><name>s6</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STEP8</name><argument_list>(<argument><expr><name>s8</name></expr></argument>, <argument><expr><name>s9</name></expr></argument>, <argument><expr><name>sA</name></expr></argument>, <argument><expr><name>sB</name></expr></argument>, <argument><expr><name>sC</name></expr></argument>, <argument><expr><name>sD</name></expr></argument>, <argument><expr><name>sE</name></expr></argument>, <argument><expr><name>sF</name></expr></argument>, <argument><expr><name>vec_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHIFT_VERT8</name><argument_list>(<argument><expr><name>s8</name></expr></argument>, <argument><expr><name>s9</name></expr></argument>, <argument><expr><name>sA</name></expr></argument>, <argument><expr><name>sB</name></expr></argument>, <argument><expr><name>sC</name></expr></argument>, <argument><expr><name>sD</name></expr></argument>, <argument><expr><name>sE</name></expr></argument>, <argument><expr><name>sF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>s8</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>s9</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sA</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src3</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sB</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src4</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sC</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src5</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sD</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src6</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sE</name></expr></argument>, <argument><expr><name>s6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src7</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sF</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>src6</name></expr></argument>, <argument><expr><literal type="number">96</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>src7</name></expr></argument>,<argument><expr><literal type="number">112</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_inv_trans_8x4_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>s4</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>, <decl><type ref="prev"/><name>s6</name></decl>, <decl><type ref="prev"/><name>s7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>s8</name></decl>, <decl><type ref="prev"/><name>s9</name></decl>, <decl><type ref="prev"/><name>sA</name></decl>, <decl><type ref="prev"/><name>sB</name></decl>, <decl><type ref="prev"/><name>sC</name></decl>, <decl><type ref="prev"/><name>sD</name></decl>, <decl><type ref="prev"/><name>sE</name></decl>, <decl><type ref="prev"/><name>sF</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>vec_64</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_7</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_5</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_4</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>vec_4s</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_3</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_2</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vec_1</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm0</name></decl>, <decl><type ref="prev"/><name>perm1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src3</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src4</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src5</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src6</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">96</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src7</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">112</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s4</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s6</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s7</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s8</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s9</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sA</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sB</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sC</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sD</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sE</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sF</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STEP8</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>, <argument><expr><name>s6</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>, <argument><expr><name>vec_4s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHIFT_HOR8</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>, <argument><expr><name>s6</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STEP8</name><argument_list>(<argument><expr><name>s8</name></expr></argument>, <argument><expr><name>s9</name></expr></argument>, <argument><expr><name>sA</name></expr></argument>, <argument><expr><name>sB</name></expr></argument>, <argument><expr><name>sC</name></expr></argument>, <argument><expr><name>sD</name></expr></argument>, <argument><expr><name>sE</name></expr></argument>, <argument><expr><name>sF</name></expr></argument>, <argument><expr><name>vec_4s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHIFT_HOR8</name><argument_list>(<argument><expr><name>s8</name></expr></argument>, <argument><expr><name>s9</name></expr></argument>, <argument><expr><name>sA</name></expr></argument>, <argument><expr><name>sB</name></expr></argument>, <argument><expr><name>sC</name></expr></argument>, <argument><expr><name>sD</name></expr></argument>, <argument><expr><name>sE</name></expr></argument>, <argument><expr><name>sF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>s8</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>s9</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sA</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src3</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sB</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src4</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sC</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src5</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sD</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src6</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sE</name></expr></argument>, <argument><expr><name>s6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src7</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>sF</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSPOSE8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s8</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s9</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sA</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sB</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STEP4</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>vec_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHIFT_VERT4</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STEP4</name><argument_list>(<argument><expr><name>s8</name></expr></argument>, <argument><expr><name>s9</name></expr></argument>, <argument><expr><name>sA</name></expr></argument>, <argument><expr><name>sB</name></expr></argument>, <argument><expr><name>vec_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHIFT_VERT4</name><argument_list>(<argument><expr><name>s8</name></expr></argument>, <argument><expr><name>s9</name></expr></argument>, <argument><expr><name>sA</name></expr></argument>, <argument><expr><name>sB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>sA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src3</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>sB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <call><name>vec_lvsl</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>vec_lvsl</name> <argument_list>(<argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vec_splat_u8</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perm0</name> <operator>=</operator> <call><name>vec_mergeh</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>perm1</name> <operator>=</operator> <call><name>vec_mergeh</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_TMP2</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tmp = vec_ld (0, dest); tmp2 = (vector signed short)vec_perm (tmp, vec_splat_u8(0), p);</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_TMP2</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tmp = vec_vsx_ld (0, dst); tmp2 = (vector signed short)vec_mergeh (tmp, vec_splat_u8(0));</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>,<parameter><type><name>src</name></type></parameter>,<parameter><type><name>perm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_TMP2(dest, perm); tmp3 = vec_adds (tmp2, src); tmp = vec_packsu (tmp3, tmp3); vec_ste ((vector unsigned int)tmp, 0, (unsigned int *)dest); vec_ste ((vector unsigned int)tmp, 4, (unsigned int *)dest);</cpp:value></cpp:define>






<macro><name>ADD</name> <argument_list>(<argument>dest</argument>, <argument>src0</argument>, <argument>perm0</argument>)</argument_list></macro> <expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>ADD</name> <argument_list>(<argument>dest</argument>, <argument>src1</argument>, <argument>perm1</argument>)</argument_list></macro> <expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>ADD</name> <argument_list>(<argument>dest</argument>, <argument>src2</argument>, <argument>perm0</argument>)</argument_list></macro> <expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>ADD</name> <argument_list>(<argument>dest</argument>, <argument>src3</argument>, <argument>perm1</argument>)</argument_list></macro>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_OP_U8_ALTIVEC</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = s</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG_OP_U8_ALTIVEC</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = vec_avg(dst, s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_U8_ALTIVEC</name></cpp:macro> <cpp:value>PUT_OP_U8_ALTIVEC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_no_rnd_vc1_chroma_mc8_altivec</name></cpp:macro> <cpp:value>put_no_rnd_vc1_chroma_mc8_altivec</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP_U8_ALTIVEC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_no_rnd_vc1_chroma_mc8_altivec</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_U8_ALTIVEC</name></cpp:macro> <cpp:value>AVG_OP_U8_ALTIVEC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_no_rnd_vc1_chroma_mc8_altivec</name></cpp:macro> <cpp:value>avg_no_rnd_vc1_chroma_mc8_altivec</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP_U8_ALTIVEC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_no_rnd_vc1_chroma_mc8_altivec</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vc1dsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>VC1DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_8x8</name></name> <operator>=</operator> <name>vc1_inv_trans_8x8_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_8x4</name></name> <operator>=</operator> <name>vc1_inv_trans_8x4_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>put_no_rnd_vc1_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_no_rnd_vc1_chroma_mc8_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_no_rnd_vc1_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_no_rnd_vc1_chroma_mc8_altivec</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
