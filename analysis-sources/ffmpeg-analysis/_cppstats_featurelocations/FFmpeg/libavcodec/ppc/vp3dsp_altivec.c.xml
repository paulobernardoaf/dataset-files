<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ppc\vp3dsp_altivec.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp3dsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vec_s16</name></type> <name>constants</name> <init>=
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">64277</literal></expr>, <expr><literal type="number">60547</literal></expr>, <expr><literal type="number">54491</literal></expr>, <expr><literal type="number">46341</literal></expr>, <expr><literal type="number">36410</literal></expr>, <expr><literal type="number">25080</literal></expr>, <expr><literal type="number">12785</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vec_u8</name></type> <name>interleave_high</name> <init>=
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vec_u8</name></type> <name>interleave_high</name> <init>=
<expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_START</name></cpp:macro> <cpp:value>vec_s16 A, B, C, D, Ad, Bd, Cd, Dd, E, F, G, H;vec_s16 Ed, Gd, Add, Bdd, Fd, Hd;vec_s16 eight = vec_splat_s16(8);vec_u16 four = vec_splat_u16(4);vec_s16 C1 = vec_splat(constants, 1);vec_s16 C2 = vec_splat(constants, 2);vec_s16 C3 = vec_splat(constants, 3);vec_s16 C4 = vec_splat(constants, 4);vec_s16 C5 = vec_splat(constants, 5);vec_s16 C6 = vec_splat(constants, 6);vec_s16 C7 = vec_splat(constants, 7);vec_s16 b0 = vec_ld(0x00, block);vec_s16 b1 = vec_ld(0x10, block);vec_s16 b2 = vec_ld(0x20, block);vec_s16 b3 = vec_ld(0x30, block);vec_s16 b4 = vec_ld(0x40, block);vec_s16 b5 = vec_ld(0x50, block);vec_s16 b6 = vec_ld(0x60, block);vec_s16 b7 = vec_ld(0x70, block);</cpp:value></cpp:define>


























<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vec_s16</name></type> <name>M15</name><parameter_list>(<parameter><decl><type><name>vec_s16</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>vec_s16</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_mule</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_mulo</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>interleave_high</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vec_s16</name></type> <name>M16</name><parameter_list>(<parameter><decl><type><name>vec_s16</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>vec_s16</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>M15</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_1D</name><parameter_list>(<parameter><type><name>ADD</name></type></parameter>, <parameter><type><name>SHIFT</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>A = vec_add(M16(b1, C1), M15(b7, C7));B = vec_sub(M15(b1, C7), M16(b7, C1));C = vec_add(M16(b3, C3), M16(b5, C5));D = vec_sub(M16(b5, C3), M16(b3, C5));Ad = M16(vec_sub(A, C), C4);Bd = M16(vec_sub(B, D), C4);Cd = vec_add(A, C);Dd = vec_add(B, D);E = ADD(M16(vec_add(b0, b4), C4));F = ADD(M16(vec_sub(b0, b4), C4));G = vec_add(M16(b2, C2), M15(b6, C6));H = vec_sub(M15(b2, C6), M16(b6, C2));Ed = vec_sub(E, G);Gd = vec_add(E, G);Add = vec_add(F, Ad);Bdd = vec_sub(Bd, H);Fd = vec_sub(F, Ad);Hd = vec_add(Bd, H);b0 = SHIFT(vec_add(Gd, Cd));b7 = SHIFT(vec_sub(Gd, Cd));b1 = SHIFT(vec_add(Add, Hd));b2 = SHIFT(vec_sub(Add, Hd));b3 = SHIFT(vec_add(Ed, Dd));b4 = SHIFT(vec_sub(Ed, Dd));b5 = SHIFT(vec_add(Fd, Bdd));b6 = SHIFT(vec_sub(Fd, Bdd));</cpp:value></cpp:define>






































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD8</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_add(a, eight)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_sra(a, four)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp3_idct_put_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDCT_START</name>


<name>vec_s16</name></type> <name>v2048</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>eight</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>eight</name></expr></argument>, <argument><expr><name>v2048</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>IDCT_1D</name><argument_list>(<argument>NOP</argument>, <argument>NOP</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>TRANSPOSE8</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>b5</name></expr></argument>, <argument><expr><name>b6</name></expr></argument>, <argument><expr><name>b7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>IDCT_1D</name><argument_list>(<argument>ADD8</argument>, <argument>SHIFT4</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>t = vec_packsu(a, a);vec_ste((vec_u32)t, 0, (unsigned int *)dst);vec_ste((vec_u32)t, 4, (unsigned int *)dst);</cpp:value></cpp:define>




<macro><name>PUT</name><argument_list>(<argument>b0</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>PUT</name><argument_list>(<argument>b1</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>PUT</name><argument_list>(<argument>b2</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>PUT</name><argument_list>(<argument>b3</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>PUT</name><argument_list>(<argument>b4</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>PUT</name><argument_list>(<argument>b5</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>PUT</name><argument_list>(<argument>b6</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>PUT</name><argument_list>(<argument>b7</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp3_idct_add_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>vdst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_s16</name></type> <name>vdst_16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec_u8</name></type> <name>vdst_mask</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><call><name>vec_splat_u8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDCT_START</name></type>

<name>IDCT_1D</name><argument_list>(<argument><expr><name>NOP</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>)</argument_list>
<name>TRANSPOSE8</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>b5</name></expr></argument>, <argument><expr><name>b6</name></expr></argument>, <argument><expr><name>b7</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<macro><name>IDCT_1D</name><argument_list>(<argument>ADD8</argument>, <argument>SHIFT4</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VDST16vdst</name></cpp:macro> <cpp:value>= vec_ld(0, dst);vdst_16 = (vec_s16)vec_perm(vdst, zero_u8v, vdst_mask);</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VDST16vdst</name></cpp:macro> <cpp:value>= vec_vsx_ld(0,dst);vdst_16 = (vec_s16)vec_mergeh(vdst, zero_u8v);</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>GET_VDST16;vdst_16 = vec_adds(a, vdst_16);t = vec_packsu(vdst_16, vdst_16);vec_ste((vec_u32)t, 0, (unsigned int *)dst);vec_ste((vec_u32)t, 4, (unsigned int *)dst);</cpp:value></cpp:define>






<macro><name>ADD</name><argument_list>(<argument>b0</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>ADD</name><argument_list>(<argument>b1</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>ADD</name><argument_list>(<argument>b2</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>ADD</name><argument_list>(<argument>b3</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>ADD</name><argument_list>(<argument>b4</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>ADD</name><argument_list>(<argument>b5</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>ADD</name><argument_list>(<argument>b6</argument>)</argument_list></macro> <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<macro><name>ADD</name><argument_list>(<argument>b7</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vp3dsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>VP3DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>vp3_idct_put_altivec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>vp3_idct_add_altivec</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
