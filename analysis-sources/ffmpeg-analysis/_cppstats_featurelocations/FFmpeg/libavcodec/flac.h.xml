<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\flac.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_FLAC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_FLAC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_STREAMINFO_SIZE</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_MAX_CHANNELS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_MIN_BLOCKSIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_MAX_BLOCKSIZE</name></cpp:macro> <cpp:value>65535</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_MIN_FRAME_SIZE</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>FLAC_CHMODE_INDEPENDENT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FLAC_CHMODE_LEFT_SIDE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>FLAC_CHMODE_RIGHT_SIDE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>FLAC_CHMODE_MID_SIDE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <block>{
<decl><name>FLAC_METADATA_TYPE_STREAMINFO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FLAC_METADATA_TYPE_PADDING</name></decl>,
<decl><name>FLAC_METADATA_TYPE_APPLICATION</name></decl>,
<decl><name>FLAC_METADATA_TYPE_SEEKTABLE</name></decl>,
<decl><name>FLAC_METADATA_TYPE_VORBIS_COMMENT</name></decl>,
<decl><name>FLAC_METADATA_TYPE_CUESHEET</name></decl>,
<decl><name>FLAC_METADATA_TYPE_PICTURE</name></decl>,
<decl><name>FLAC_METADATA_TYPE_INVALID</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>FLACExtradataFormat</name> <block>{
<decl><name>FLAC_EXTRADATA_FORMAT_STREAMINFO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FLAC_EXTRADATA_FORMAT_FULL_HEADER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLACCOMMONINFO</name></cpp:macro> <cpp:value>int samplerate; int channels; int bps;</cpp:value></cpp:define> 








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLACSTREAMINFO</name></cpp:macro> <cpp:value>FLACCOMMONINFO int max_blocksize; int max_framesize; int64_t samples;</cpp:value></cpp:define> 





<typedef>typedef <type><struct>struct <name>FLACStreaminfo</name> <block>{
<expr_stmt><expr><name>FLACSTREAMINFO</name></expr></expr_stmt>
}</block></struct></type> <name>FLACStreaminfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FLACFrameInfo</name> <block>{
<decl_stmt><decl><type><name>FLACCOMMONINFO</name>
<name>int</name></type> <name>blocksize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ch_mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>frame_or_sample_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_var_size</name></decl>;</decl_stmt> 



}</block></struct></type> <name>FLACFrameInfo</name>;</typedef>









<function_decl><type><name>int</name></type> <name>ff_flac_parse_streaminfo</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>FLACStreaminfo</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>ff_flac_is_extradata_valid</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>FLACExtradataFormat</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>streaminfo_start</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>ff_flac_get_max_frame_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>blocksize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bps</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> <name>ff_flac_decode_frame_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>FLACFrameInfo</name> <modifier>*</modifier></type><name>fi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_level_offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_flac_set_channel_layout</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>








<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>flac_parse_block_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block_header</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><call><name>bytestream_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block_header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>bytestream_get_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
