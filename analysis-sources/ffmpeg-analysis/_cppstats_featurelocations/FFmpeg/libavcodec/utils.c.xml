<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\utils.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"frame_thread_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ICONV</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iconv.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffversion.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>av_codec_ffversion</name><index>[]</index></name> <init>= <expr><literal type="string">"FFmpeg version "</literal> <name>FFMPEG_VERSION</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>AVMutex</name></type> <name>codec_mutex</name> <init>= <expr><name>AV_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>av_fast_padded_malloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>min_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>min_size</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_fast_malloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>min_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>*</operator><name>p</name> <operator>+</operator> <name>min_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_fast_padded_mallocz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>min_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>min_size</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_fast_malloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>min_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>min_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_codec_is_encoder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>codec</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>encode_sub</name></name> <operator>||</operator> <name><name>codec</name><operator>-&gt;</operator><name>encode2</name></name> <operator>||</operator><name><name>codec</name><operator>-&gt;</operator><name>send_frame</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_codec_is_decoder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>codec</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>decode</name></name> <operator>||</operator> <name><name>codec</name><operator>-&gt;</operator><name>receive_frame</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_set_dimensions</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_image_check_size2</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_pixels</name></name></expr></argument>, <argument><expr><name>AV_PIX_FMT_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lowres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_set_sar</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>sar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_image_check_sar</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>sar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ignoring invalid SAR: %d/%d\n"</literal></expr></argument>,
<argument><expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name>sar</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_side_data_update_matrix_encoding</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVMatrixEncoding</name></name></type> <name>matrix_encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>side_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVMatrixEncoding</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_MATRIXENCODING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_frame_new_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_MATRIXENCODING</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>enum <name>AVMatrixEncoding</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator>enum <name>AVMatrixEncoding</name><operator>*</operator><operator>)</operator><name><name>side_data</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>matrix_encoding</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avcodec_align_dimensions2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>linesize_align</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w_align</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h_align</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPixFmtDescriptor</name> <specifier>const</specifier> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w_align</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h_align</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YVYU422</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP16BE</name></expr>:</case>
<expr_stmt><expr><name>w_align</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>h_align</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV411P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVJ411P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_UYYVYY411</name></expr>:</case>
<expr_stmt><expr><name>w_align</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h_align</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV410P</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SVQ1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w_align</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h_align</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB555</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RPZA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w_align</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h_align</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_INTERPLAY_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w_align</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h_align</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_PAL8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB8</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SMC</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_CINEPAK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w_align</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h_align</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_JV</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_INTERPLAY_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w_align</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h_align</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MSZH</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ZLIB</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w_align</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h_align</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_CINEPAK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w_align</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h_align</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_IFF_ILBM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w_align</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>w_align</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><operator>*</operator><name>width</name></expr></argument>, <argument><expr><name>w_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><operator>*</operator><name>height</name></expr></argument>, <argument><expr><name>h_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>lowres</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP5</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP6</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP6F</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP6A</name></expr>
)</condition> <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>height</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>





<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>*</operator><name>width</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>linesize_align</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>STRIDE_ALIGN</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avcodec_align_dimensions</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chroma_shift</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>linesize_align</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>align</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avcodec_align_dimensions2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>linesize_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>linesize_align</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>linesize_align</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linesize_align</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>chroma_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linesize_align</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>chroma_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <call><name>FFMAX3</name><argument_list>(<argument><expr><name>align</name></expr></argument>, <argument><expr><name><name>linesize_align</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>linesize_align</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><operator>*</operator><name>width</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avcodec_enum_to_chroma_pos</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ypos</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <name>AVCHROMA_LOC_UNSPECIFIED</name> <operator>||</operator> <name>pos</name> <operator>&gt;=</operator> <name>AVCHROMA_LOC_NB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xpos</name> <operator>=</operator> <operator>(</operator><name>pos</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ypos</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pos</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><operator>(</operator><name>pos</name><operator>&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>avcodec_chroma_pos_to_enum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>xpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ypos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>xout</name></decl>, <decl><type ref="prev"/><name>yout</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <name>AVCHROMA_LOC_UNSPECIFIED</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>AVCHROMA_LOC_NB</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>avcodec_enum_to_chroma_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yout</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>xout</name> <operator>==</operator> <name>xpos</name> <operator>&amp;&amp;</operator> <name>yout</name> <operator>==</operator> <name>ypos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>AVCHROMA_LOC_UNSPECIFIED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avcodec_fill_audio_frame</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>planar</name></decl>, <decl><type ref="prev"/><name>needed_size</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>needed_size</name> <operator>=</operator> <call><name>av_samples_get_buffer_size</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name>sample_fmt</name></expr></argument>,
<argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>needed_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>planar</name> <operator>=</operator> <call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>planar</name> <operator>&amp;&amp;</operator> <name>nb_channels</name> <operator>&gt;</operator> <name>AV_NUM_DATA_POINTERS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>nb_channels</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_samples_fill_arrays</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>,
<argument><expr><name>sample_fmt</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>AV_NUM_DATA_POINTERS</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_color_frame</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name><operator>&lt;</operator><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_chroma</name> <init>= <expr><name>p</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>p</name> <operator>==</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name><name>c</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_memcpy_backptr</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bytes</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avcodec_default_execute</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avcodec_default_execute2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>avpriv_find_pix_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PixelFormatTag</name> <modifier>*</modifier></type><name>tags</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>tags</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tags</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>==</operator> <name>fourcc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>tags</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tags</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODEC_GET_SET</name></expr></cpp:if>
<macro><name>MAKE_ACCESSORS</name><argument_list>(<argument>AVCodecContext</argument>, <argument>codec</argument>, <argument>AVRational</argument>, <argument>pkt_timebase</argument>)</argument_list></macro>
<macro><name>MAKE_ACCESSORS</name><argument_list>(<argument>AVCodecContext</argument>, <argument>codec</argument>, <argument>const AVCodecDescriptor *</argument>, <argument>codec_descriptor</argument>)</argument_list></macro>
<macro><name>MAKE_ACCESSORS</name><argument_list>(<argument>AVCodecContext</argument>, <argument>codec</argument>, <argument>int</argument>, <argument>lowres</argument>)</argument_list></macro>
<macro><name>MAKE_ACCESSORS</name><argument_list>(<argument>AVCodecContext</argument>, <argument>codec</argument>, <argument>int</argument>, <argument>seek_preroll</argument>)</argument_list></macro>
<macro><name>MAKE_ACCESSORS</name><argument_list>(<argument>AVCodecContext</argument>, <argument>codec</argument>, <argument>uint16_t*</argument>, <argument>chroma_intra_matrix</argument>)</argument_list></macro>

<function><type><name>unsigned</name></type> <name>av_codec_get_codec_properties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>codec</name><operator>-&gt;</operator><name>properties</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_codec_get_max_lowres</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>codec</name><operator>-&gt;</operator><name>max_lowres</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>avpriv_codec_get_cap_skip_frame_fill_param</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list><block>{<block_content>
<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>caps_internal</name></name> <operator>&amp;</operator> <name>FF_CODEC_CAP_SKIP_FRAME_FILL_PARAM</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_bit_rate</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bit_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits_per_sample</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<case>case <expr><name>AVMEDIA_TYPE_DATA</name></expr>:</case>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<case>case <expr><name>AVMEDIA_TYPE_ATTACHMENT</name></expr>:</case>
<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name>bits_per_sample</name> <operator>=</operator> <call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <ternary><condition><expr><name>bits_per_sample</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>bits_per_sample</name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>bit_rate</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_lock_avcodec</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>caps_internal</name></name> <operator>&amp;</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>codec</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codec_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_unlock_avcodec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>caps_internal</name></name> <operator>&amp;</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>codec</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codec_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name> <name>attribute_align_arg</name></type> <name>ff_codec_open2_recursive</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_unlock_avcodec</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_lock_avcodec</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>attribute_align_arg</name></type> <name>avcodec_open2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codec_init_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pixdesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecInternal</name> <modifier>*</modifier></type><name>avci</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avcodec_is_open</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No codec provided to avcodec_open2()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <name>codec</name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"This AVCodecContext was allocated for %s, "</literal>
<literal type="string">"but %s passed to avcodec_open2()\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codec</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <name>FF_MAX_EXTRADATA_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_lock_avcodec</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>avci</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>avci</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avci</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <name>avci</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>avci</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>to_free</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>to_free</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>buffer_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_pkt</name></name> <operator>=</operator> <call><name>av_packet_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>ds</name><operator>.</operator><name>in_pkt</name></name> <operator>=</operator> <call><name>av_packet_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>ds</name><operator>.</operator><name>in_pkt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>last_pkt_props</name></name> <operator>=</operator> <call><name>av_packet_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>last_pkt_props</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples_multiplier</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>priv_data_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>priv_class</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_dict</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_and_end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_dict</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_and_end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_whitelist</name></name> <operator>&amp;&amp;</operator> <call><name>av_match_list</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_whitelist</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codec (%s) not on whitelist \'%s\'\n"</literal></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_whitelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP6F</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DXV</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_and_end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator> <call><name>av_image_check_size2</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_pixels</name></name></expr></argument>, <argument><expr><name>AV_PIX_FMT_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>av_image_check_size2</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_pixels</name></name></expr></argument>, <argument><expr><name>AV_PIX_FMT_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ignoring invalid width/height values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_image_check_sar</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ignoring invalid SAR: %u/%u\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>av_codec_is_decoder</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>FF_SANE_NB_CHANNELS</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many or invalid channels: %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample rate: %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid block align: %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>codec</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_UNKNOWN</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name><name>codec</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name><name>codec</name><operator>-&gt;</operator><name>type</name></name>
<operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_ATTACHMENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codec type or id mismatches\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_descriptor</name></name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_EXPERIMENTAL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codec_string</name> <init>= <expr><ternary><condition><expr><call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"encoder"</literal></expr> </then><else>: <expr><literal type="string">"decoder"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"The %s '%s' is experimental but experimental codecs are not enabled, "</literal>
<literal type="string">"add '-strict %d' if you want to use it.\n"</literal></expr></argument>,
<argument><expr><name>codec_string</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>FF_COMPLIANCE_EXPERIMENTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>codec2</name> <operator>=</operator> <ternary><condition><expr><call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>codec2</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_EXPERIMENTAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Alternatively use the non experimental %s '%s'.\n"</literal></expr></argument>,
<argument><expr><name>codec_string</name></expr></argument>, <argument><expr><name><name>codec2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXPERIMENTAL</name></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HAVE_THREADS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Warning: not compiled with thread support, using thread emulation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_FRAME_THREAD_ENCODER</name> <operator>&amp;&amp;</operator> <call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_unlock_avcodec</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_frame_thread_encoder_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><operator>*</operator><name>options</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_lock_avcodec</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_and_end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_codec_is_decoder</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_decode_bsfs_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_and_end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_THREADS</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>avci</name><operator>-&gt;</operator><name>frame_thread_encoder</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name><operator>&amp;</operator><name>FF_THREAD_FRAME</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>max_lowres</name></name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The maximum value for lowres supported by the decoder is %d\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>max_lowres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>max_lowres</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name></name> <init>= <expr><call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The encoder timebase is not set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>av_get_planar_sample_fmt</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>==</operator>
<call><name>av_get_planar_sample_fmt</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>AV_SAMPLE_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Specified sample format %s is invalid or not supported\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MJPEG</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_LJPEG</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&lt;=</operator> <name>FF_COMPLIANCE_UNOFFICIAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Specified pixel format %s is invalid or not supported\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ420P</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ411P</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ422P</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ440P</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ444P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>supported_samplerates</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>supported_samplerates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>supported_samplerates</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>supported_samplerates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Specified sample rate %d is not supported\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Specified sample rate %d is not supported\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Channel layout not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>channel_layouts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Specified channel layout '%s' is not supported\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Channel layout '%s' with %d channels does not match number of specified channels %d\n"</literal></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Specified number of channels %d is not supported\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pixdesc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&lt;=</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Specified bit depth %d not possible with the specified pixel formats depth %d\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>, <argument><expr><name><name>pixdesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"dimensions not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name><operator>&lt;</operator><literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Bitrate %"</literal><name>PRId64</name><literal type="string">" is extremely low, maybe you mean %"</literal><name>PRId64</name><literal type="string">"k\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>*</operator> <literal type="number">3LL</literal> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"ticks_per_frame %d too large for the timebase %d/%d."</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Mismatching AVCodecContext.pix_fmt and AVHWFramesContext.format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name> <operator>!=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Mismatching AVCodecContext.sw_pix_fmt (%s) "</literal>
<literal type="string">"and AVHWFramesContext.sw_format (%s)\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pts_correction_num_faulty_pts</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>pts_correction_num_faulty_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pts_correction_last_pts</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>pts_correction_last_dts</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name>
<operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_descriptor</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"gray decoding requested but not enabled at configuration time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_EXPORT_MVS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>export_side_data</name></name> <operator>|=</operator> <name>AV_CODEC_EXPORT_DATA_MVS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>init</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name><operator>&amp;</operator><name>FF_THREAD_FRAME</name><operator>)</operator>
<operator>||</operator> <name><name>avci</name><operator>-&gt;</operator><name>frame_thread_encoder</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>codec_init_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_codec_is_decoder</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <call><name>get_bit_rate</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>channels</name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Channel layout '%s' with %d channels does not match specified number of channels %d: "</literal>
<literal type="string">"ignoring specified channel layout\n"</literal></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>FF_SANE_NB_CHANNELS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_charenc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Character encoding is only "</literal>
<literal type="string">"supported with subtitles codecs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_descriptor</name><operator>-&gt;</operator><name>props</name></name> <operator>&amp;</operator> <name>AV_CODEC_PROP_BITMAP_SUB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Codec '%s' is bitmap-based, "</literal>
<literal type="string">"subtitles character encoding will be ignored\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_descriptor</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_charenc_mode</name></name> <operator>=</operator> <name>FF_SUB_CHARENC_MODE_DO_NOTHING</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_charenc_mode</name></name> <operator>==</operator> <name>FF_SUB_CHARENC_MODE_AUTOMATIC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_charenc_mode</name></name> <operator>=</operator> <name>FF_SUB_CHARENC_MODE_PRE_DECODER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_charenc_mode</name></name> <operator>==</operator> <name>FF_SUB_CHARENC_MODE_PRE_DECODER</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ICONV</name></expr></cpp:if>
<decl_stmt><decl><type><name>iconv_t</name></type> <name>cd</name> <init>= <expr><call><name>iconv_open</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_charenc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to open iconv context "</literal>
<literal type="string">"with input character encoding \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_charenc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Character encoding subtitles "</literal>
<literal type="string">"conversion needs a libavcodec built with iconv support "</literal>
<literal type="string">"for this codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>free_and_end</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVCTX_TIMEBASE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <macro><name>av_inv_q</name><argument_list>(<argument>av_mul_q(avctx-&gt;framerate, (AVRational){avctx-&gt;ticks_per_frame, <literal type="number">1</literal>})</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>priv_data_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>&amp;&amp;</operator> <name><name>codec</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>==</operator> <name><name>codec</name><operator>-&gt;</operator><name>priv_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>ff_unlock_avcodec</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>options</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
<label><name>free_and_end</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>close</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>codec_init_ok</name> <operator>||</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>caps_internal</name></name> <operator>&amp;</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator> <name><name>avci</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>&amp;&amp;</operator> <name><name>codec</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avci</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avci</name><operator>-&gt;</operator><name>to_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avci</name><operator>-&gt;</operator><name>buffer_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avci</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avci</name><operator>-&gt;</operator><name>last_pkt_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avci</name><operator>-&gt;</operator><name>ds</name><operator>.</operator><name>in_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_decode_bsfs_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avci</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avsubtitle_free</name><parameter_list>(<parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sub</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>avcodec_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avcodec_is_open</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FramePool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>CONFIG_FRAME_THREAD_ENCODER</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>frame_thread_encoder</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_frame_thread_encoder_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>to_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>compat_decode_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>buffer_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>last_pkt_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>ds</name><operator>.</operator><name>in_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pools</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>uninit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>uninit</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_decode_bsfs_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>nb_coded_side_data</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_side_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>nb_coded_side_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avcodec_get_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"none"</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>cd</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Codec 0x%x is not in the full list.\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codec</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codec</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">"unknown_codec"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>av_get_codec_tag_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>codec_tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAG_PRINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;= '0' &amp;&amp; (x) &lt;= '9') || ((x) &gt;= 'a' &amp;&amp; (x) &lt;= 'z') || ((x) &gt;= 'A' &amp;&amp; (x) &lt;= 'Z') || ((x) == '.' || (x) == ' ' || (x) == '-' || (x) == '_'))</cpp:value></cpp:define>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>TAG_PRINT</name><argument_list>(<argument><expr><name>codec_tag</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"%c"</literal></expr> </then><else>: <expr><literal type="string">"[%d]"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>codec_tag</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <ternary><condition><expr><name>buf_size</name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>buf_size</name> <operator>-</operator> <name>len</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>codec_tag</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avcodec_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codec_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codec_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>display_aspect_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>separator</name> <init>= <expr><ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>dump_separator</name></name></expr> ?</condition><then> <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>enc</name><operator>-&gt;</operator><name>dump_separator</name></name></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <name>buf_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>codec_type</name> <operator>=</operator> <call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>codec_name</name> <operator>=</operator> <call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <call><name>avcodec_profile_name</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>codec_type</name></expr> ?</condition><then> <expr><name>codec_type</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>codec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="char">'a'</literal> <operator>^</operator> <literal type="char">'A'</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>profile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>enc</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name>
<operator>&amp;&amp;</operator> <call><name>av_log_get_level</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>AV_LOG_VERBOSE</name>
<operator>&amp;&amp;</operator> <name><name>enc</name><operator>-&gt;</operator><name>refs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", %d reference frame%s"</literal></expr></argument>,
<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>refs</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" (%s / 0x%04X)"</literal></expr></argument>,
<argument><expr><call><name>av_fourcc2str</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>detail</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">"("</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>enc</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr> ?</condition><then> <expr><literal type="string">"none"</literal></expr> </then><else>:
<expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&amp;&amp;</operator> <name><name>enc</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name> <operator>&amp;&amp;</operator>
<name><name>enc</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>detail</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d bpc, "</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>color_range</name></name> <operator>!=</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>detail</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>,
<argument><expr><call><name>av_color_range_name</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name>AVCOL_SPC_UNSPECIFIED</name> <operator>||</operator>
<name><name>enc</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name>AVCOL_PRI_UNSPECIFIED</name> <operator>||</operator>
<name><name>enc</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>enc</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>||</operator>
<name><name>enc</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>enc</name><operator>-&gt;</operator><name>color_trc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>detail</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s/%s, "</literal></expr></argument>,
<argument><expr><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_color_primaries_name</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_color_transfer_name</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>detail</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>,
<argument><expr><call><name>av_get_colorspace_name</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>field_order</name></name> <operator>!=</operator> <name>AV_FIELD_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field_order</name> <init>= <expr><literal type="string">"progressive"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_TT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>field_order</name> <operator>=</operator> <literal type="string">"top first"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_BB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>field_order</name> <operator>=</operator> <literal type="string">"bottom first"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_TB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>field_order</name> <operator>=</operator> <literal type="string">"top coded first (swapped)"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_BT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>field_order</name> <operator>=</operator> <literal type="string">"bottom coded first (swapped)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>detail</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name>field_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>AV_LOG_VERBOSE</name> <operator>&amp;&amp;</operator>
<name><name>enc</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>!=</operator> <name>AVCHROMA_LOC_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>detail</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>,
<argument><expr><call><name>av_chroma_location_name</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>chroma_sample_location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>detail</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%s)"</literal></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>new_line</name></expr> ?</condition><then> <expr><name>separator</name></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%dx%d"</literal></expr></argument>,
<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>AV_LOG_VERBOSE</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>enc</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>enc</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>||</operator>
<name><name>enc</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>enc</name><operator>-&gt;</operator><name>coded_height</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">" (%dx%d)"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>display_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>enc</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>enc</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">" [SAR %d:%d DAR %d:%d]"</literal></expr></argument>,
<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>display_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>display_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>AV_LOG_DEBUG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>av_gcd</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", %d/%d"</literal></expr></argument>,
<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name>g</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>/</operator> <name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>encode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", q=%d-%d"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>qmin</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>qmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>properties</name></name> <operator>&amp;</operator> <name>FF_CODEC_PROPERTY_CLOSED_CAPTIONS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", Closed Captions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>properties</name></name> <operator>&amp;</operator> <name>FF_CODEC_PROPERTY_LOSSLESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", lossless"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"%d Hz, "</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>enc</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>enc</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>!=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">" (%d bit)"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>AV_LOG_VERBOSE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>initial_padding</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", delay %d"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>initial_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>trailing_padding</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", padding %d"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>trailing_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>AV_LOG_DEBUG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>av_gcd</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", %d/%d"</literal></expr></argument>,
<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name>g</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>/</operator> <name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", %dx%d"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>encode</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", pass 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", pass 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <call><name>get_bit_rate</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bitrate</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", %"</literal><name>PRId64</name><literal type="string">" kb/s"</literal></expr></argument>, <argument><expr><name>bitrate</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">", max. %"</literal><name>PRId64</name><literal type="string">" kb/s"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_get_profile_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVProfile</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>==</operator> <name>FF_PROFILE_UNKNOWN</name> <operator>||</operator> <operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>profiles</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>profiles</name></name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_UNKNOWN</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>profile</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avcodec_profile_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVProfile</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>==</operator> <name>FF_PROFILE_UNKNOWN</name> <operator>||</operator> <operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>profiles</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>profiles</name></name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_UNKNOWN</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>profile</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>avcodec_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>AV_CODEC_ID_PCM_S8_PLANAR</name><operator>==</operator><literal type="number">65563</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_G722</name><operator>==</operator><literal type="number">69660</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>AV_CODEC_ID_SRT</name><operator>==</operator><literal type="number">94216</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>LIBAVCODEC_VERSION_MICRO</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LIBAVCODEC_VERSION_INT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avcodec_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>FFMPEG_CONFIGURATION</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avcodec_license</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LICENSE_PREFIX</name></cpp:macro> <cpp:value>"libavcodec license: "</cpp:value></cpp:define>
<return>return <expr><operator>&amp;</operator><name>LICENSE_PREFIX</name> <name><name>FFMPEG_LICENSE</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LICENSE_PREFIX</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_get_exact_bits_per_sample</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>codec_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_8SVX_EXP</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_8SVX_FIB</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_CT</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_APC</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_OKI</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_G722</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_AICA</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_DSD_LSBF</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_DSD_MSBF</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_DSD_LSBF_PLANAR</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_DSD_MSBF_PLANAR</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_ALAW</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_MULAW</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_VIDC</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S8</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S8_PLANAR</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_U8</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_SDX2_DPCM</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_DERF_DPCM</name></expr>:</case>
<return>return <expr><literal type="number">8</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S16BE_PLANAR</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S16LE_PLANAR</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_U16BE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_U16LE</name></expr>:</case>
<return>return <expr><literal type="number">16</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_PCM_S24DAUD</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S24BE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S24LE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S24LE_PLANAR</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_U24BE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_U24LE</name></expr>:</case>
<return>return <expr><literal type="number">24</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S32LE_PLANAR</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_U32BE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_U32LE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_F32BE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_F32LE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_F24LE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_F16LE</name></expr>:</case>
<return>return <expr><literal type="number">32</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_PCM_F64BE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_F64LE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S64BE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_PCM_S64LE</name></expr>:</case>
<return>return <expr><literal type="number">64</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>av_get_pcm_codec</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>be</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name><name>map</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AV_SAMPLE_FMT_U8</name></expr> ]</index> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PCM_U8</name></expr>, <expr><name>AV_CODEC_ID_PCM_U8</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_S16</name></expr> ]</index> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>, <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_S32</name></expr> ]</index> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>, <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_FLT</name></expr> ]</index> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PCM_F32LE</name></expr>, <expr><name>AV_CODEC_ID_PCM_F32BE</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_DBL</name></expr> ]</index> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PCM_F64LE</name></expr>, <expr><name>AV_CODEC_ID_PCM_F64BE</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_U8P</name></expr> ]</index> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PCM_U8</name></expr>, <expr><name>AV_CODEC_ID_PCM_U8</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_S16P</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>, <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_S32P</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>, <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_S64P</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PCM_S64LE</name></expr>, <expr><name>AV_CODEC_ID_PCM_S64BE</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PCM_F32LE</name></expr>, <expr><name>AV_CODEC_ID_PCM_F32BE</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_DBLP</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PCM_F64LE</name></expr>, <expr><name>AV_CODEC_ID_PCM_F64BE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fmt</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_CODEC_ID_NONE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>be</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>be</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>be</name> <operator>=</operator> <call><name>AV_NE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>map</name><index>[<expr><name>fmt</name></expr>]</index><index>[<expr><name>be</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_get_bits_per_sample</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>codec_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case>
<return>return <expr><literal type="number">3</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SWF</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MS</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<default>default:</default>
<return>return <expr><call><name>av_get_exact_bits_per_sample</name><argument_list>(<argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_audio_frame_duration</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ba</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits_per_coded_sample</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>bitrate</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>extradata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bps</name> <init>= <expr><call><name>av_get_exact_bits_per_sample</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>framecount</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ba</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>frame_bytes</name> <operator>/</operator> <name>ba</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>frame_bytes</name> <operator>/</operator> <name>ba</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>bps</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>frame_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;</operator> <literal type="number">32768</literal> <operator>&amp;&amp;</operator> <name>bps</name> <operator>&lt;</operator> <literal type="number">32768</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>frame_bytes</name> <operator>*</operator> <literal type="number">8LL</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>bps</name> <operator>*</operator> <name>ch</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bps</name> <operator>=</operator> <name>bits_per_coded_sample</name></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_ADX</name></expr>:</case> <return>return <expr><literal type="number">32</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case> <return>return <expr><literal type="number">64</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_XAS</name></expr>:</case> <return>return <expr><literal type="number">128</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_AMR_NB</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_EVRC</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_GSM</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_QCELP</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_RA_288</name></expr>:</case> <return>return <expr><literal type="number">160</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_AMR_WB</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_GSM_MS</name></expr>:</case> <return>return <expr><literal type="number">320</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_MP1</name></expr>:</case> <return>return <expr><literal type="number">384</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ATRAC1</name></expr>:</case> <return>return <expr><literal type="number">512</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ATRAC9</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ATRAC3</name></expr>:</case> <return>return <expr><literal type="number">1024</literal> <operator>*</operator> <name>framecount</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ATRAC3P</name></expr>:</case> <return>return <expr><literal type="number">2048</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_MP2</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_MUSEPACK7</name></expr>:</case> <return>return <expr><literal type="number">1152</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_AC3</name></expr>:</case> <return>return <expr><literal type="number">1536</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>sr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_TTA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">256</literal> <operator>*</operator> <name>sr</name> <operator>/</operator> <literal type="number">245</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_DST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">588</literal> <operator>*</operator> <name>sr</name> <operator>/</operator> <literal type="number">44100</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_BINKAUDIO_DCT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">480</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>sr</name> <operator>/</operator> <literal type="number">22050</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>ch</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_MP3</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>sr</name> <operator>&lt;=</operator> <literal type="number">24000</literal></expr> ?</condition><then> <expr><literal type="number">576</literal></expr> </then><else>: <expr><literal type="number">1152</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ba</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_SIPR</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ba</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">20</literal></expr>:</case> <return>return <expr><literal type="number">160</literal></expr>;</return>
<case>case <expr><literal type="number">19</literal></expr>:</case> <return>return <expr><literal type="number">144</literal></expr>;</return>
<case>case <expr><literal type="number">29</literal></expr>:</case> <return>return <expr><literal type="number">288</literal></expr>;</return>
<case>case <expr><literal type="number">37</literal></expr>:</case> <return>return <expr><literal type="number">480</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_ILBC</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>ba</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">38</literal></expr>:</case> <return>return <expr><literal type="number">160</literal></expr>;</return>
<case>case <expr><literal type="number">50</literal></expr>:</case> <return>return <expr><literal type="number">240</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_TRUESPEECH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">240</literal> <operator>*</operator> <operator>(</operator><name>frame_bytes</name> <operator>/</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_NELLYMOSER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">256</literal> <operator>*</operator> <operator>(</operator><name>frame_bytes</name> <operator>/</operator> <literal type="number">64</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_RA_144</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">160</literal> <operator>*</operator> <operator>(</operator><name>frame_bytes</name> <operator>/</operator> <literal type="number">20</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bps</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_G726</name> <operator>||</operator> <name>id</name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_G726LE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>frame_bytes</name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <name>bps</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_AFC</name></expr>:</case>
<return>return <expr><name>frame_bytes</name> <operator>/</operator> <operator>(</operator><literal type="number">9</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_PSX</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_DTK</name></expr>:</case>
<return>return <expr><name>frame_bytes</name> <operator>/</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">28</literal></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_4XM</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_DAT4</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_ISS</name></expr>:</case>
<return>return <expr><operator>(</operator><name>frame_bytes</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_SMJPEG</name></expr>:</case>
<return>return <expr><operator>(</operator><name>frame_bytes</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_AMV</name></expr>:</case>
<return>return <expr><operator>(</operator><name>frame_bytes</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_THP</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_THP_LE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>extradata</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>frame_bytes</name> <operator>*</operator> <literal type="number">14</literal> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>ch</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_XA</name></expr>:</case>
<return>return <expr><operator>(</operator><name>frame_bytes</name> <operator>/</operator> <literal type="number">128</literal><operator>)</operator> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <name>ch</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_INTERPLAY_DPCM</name></expr>:</case>
<return>return <expr><operator>(</operator><name>frame_bytes</name> <operator>-</operator> <literal type="number">6</literal> <operator>-</operator> <name>ch</name><operator>)</operator> <operator>/</operator> <name>ch</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ROQ_DPCM</name></expr>:</case>
<return>return <expr><operator>(</operator><name>frame_bytes</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <name>ch</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_XAN_DPCM</name></expr>:</case>
<return>return <expr><operator>(</operator><name>frame_bytes</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>/</operator> <name>ch</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_MACE3</name></expr>:</case>
<return>return <expr><literal type="number">3</literal> <operator>*</operator> <name>frame_bytes</name> <operator>/</operator> <name>ch</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_MACE6</name></expr>:</case>
<return>return <expr><literal type="number">6</literal> <operator>*</operator> <name>frame_bytes</name> <operator>/</operator> <name>ch</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_PCM_LXF</name></expr>:</case>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>frame_bytes</name> <operator>/</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>ch</name><operator>)</operator><operator>)</operator></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_IAC</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_IMC</name></expr>:</case>
<return>return <expr><literal type="number">4</literal> <operator>*</operator> <name>frame_bytes</name> <operator>/</operator> <name>ch</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_SOL_DPCM</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>frame_bytes</name> <operator>/</operator> <name>ch</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>frame_bytes</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ba</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>blocks</name> <init>= <expr><name>frame_bytes</name> <operator>/</operator> <name>ba</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>bps</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>bps</name></expr></argument> &gt;</argument_list></name> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>blocks</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>ba</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>bps</name> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_DK3</name></expr>:</case>
<return>return <expr><name>blocks</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ba</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <name>ch</name><operator>)</operator></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_DK4</name></expr>:</case>
<return>return <expr><name>blocks</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>ba</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name><operator>)</operator></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_RAD</name></expr>:</case>
<return>return <expr><name>blocks</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>ba</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name><operator>)</operator></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MS</name></expr>:</case>
<return>return <expr><name>blocks</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>ba</name> <operator>-</operator> <literal type="number">7</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name><operator>)</operator></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MTAF</name></expr>:</case>
<return>return <expr><name>blocks</name> <operator>*</operator> <operator>(</operator><name>ba</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bps</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_PCM_DVD</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>bps</name><operator>&lt;</operator><literal type="number">4</literal> <operator>||</operator> <name>frame_bytes</name><operator>&lt;</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>frame_bytes</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>bps</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>ch</name><operator>)</operator><operator>)</operator></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_PCM_BLURAY</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>bps</name><operator>&lt;</operator><literal type="number">4</literal> <operator>||</operator> <name>frame_bytes</name><operator>&lt;</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>frame_bytes</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>bps</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_S302M</name></expr>:</case>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>frame_bytes</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>bps</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>ch</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>frame_bytes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>frame_size</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>bitrate</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>frame_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ba</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_WMAV1</name> <operator>||</operator> <name>id</name> <operator>==</operator> <name>AV_CODEC_ID_WMAV2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>frame_bytes</name> <operator>*</operator> <literal type="number">8LL</literal> <operator>*</operator> <name>sr</name><operator>)</operator> <operator>/</operator> <name>bitrate</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_get_audio_frame_duration</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_audio_frame_duration</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>,
<argument><expr><name>frame_bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_get_audio_frame_duration2</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_audio_frame_duration</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>,
<argument><expr><name>frame_bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_THREADS</name></expr></cpp:if>
<function><type><name>int</name></type> <name>ff_thread_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>unsigned</name> <name>int</name></type> <name>av_xiphlacing</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>-=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>ff_match_2uint16</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>uint16_t</name><argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>size</name></expr></argument>, <argument><expr><name>int</name> <name>a</name></expr></argument>, <argument><expr><name>int</name> <name>b</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>a</name> <operator>&amp;&amp;</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>b</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>const</specifier> <name>AVCodecHWConfig</name> <modifier>*</modifier></type><name>avcodec_get_hw_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>hw_configs</name></name> <operator>||</operator> <name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>hw_configs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>&amp;</operator><name><name>codec</name><operator>-&gt;</operator><name>hw_configs</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>public</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_USER_VISIBLE_AVHWACCEL</name></expr></cpp:if>
<function><type><name>AVHWAccel</name> <modifier>*</modifier></type><name>av_hwaccel_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVHWAccel</name> <modifier>*</modifier></type><name>hwaccel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_register_hwaccel</name><parameter_list>(<parameter><decl><type><name>AVHWAccel</name> <modifier>*</modifier></type><name>hwaccel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LOCKMGR</name></expr></cpp:if>
<function><type><name>int</name></type> <name>av_lockmgr_register</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>mutex</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVLockOp</name></name></type> <name>op</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>unsigned</name> <name>int</name></type> <name>avpriv_toupper4</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_toupper</name><argument_list>(<argument><expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<operator>(</operator><call><name>av_toupper</name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><call><name>av_toupper</name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>av_toupper</name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_thread_ref_frame</name><parameter_list>(<parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>owner</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>owner</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>owner</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>owner</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>progress</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>owner</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_THREADS</name></expr></cpp:if>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>ff_thread_get_format</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ff_get_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_thread_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>owner</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>owner</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<return>return <expr><call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_release_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_finish_setup</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_report_progress</name><parameter_list>(<parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_await_progress</name><parameter_list>(<parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_thread_can_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_alloc_entries</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_reset_entries</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_await_progress2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_report_progress2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>avcodec_is_open</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>internal</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avpriv_bprint_to_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>AVBPrint</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bprint_finalize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>





<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>avpriv_find_start_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>p</name> <operator>&lt;=</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>end</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>state</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">0x100</literal> <operator>||</operator> <name>p</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>|</operator><operator>(</operator><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>av_cpb_properties_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVCPBProperties</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>props</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>vbv_delay</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>ff_add_cpb_side_data</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVPacketSideData</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>nb_coded_side_data</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>AV_PKT_DATA_CPB_PROPERTIES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>AVCPBProperties</name> <operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>av_cpb_properties_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_side_data</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>nb_coded_side_data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_side_data</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>nb_coded_side_data</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_side_data</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>nb_coded_side_data</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>AV_PKT_DATA_CPB_PROPERTIES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_side_data</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>nb_coded_side_data</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>props</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_side_data</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>nb_coded_side_data</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>props</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>codec_parameters_reset</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>par</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <name>AV_FIELD_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>color_space</name></name> <operator>=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_UNSPECIFIED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>FF_LEVEL_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>avcodec_parameters_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>par</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>par</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>codec_parameters_reset</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>par</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avcodec_parameters_free</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><operator>*</operator><name>ppar</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>par</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>codec_parameters_reset</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>ppar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avcodec_parameters_copy</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodecParameters</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>codec_parameters_reset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avcodec_parameters_from_context</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>codec_parameters_reset</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>codec_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>codec_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>field_order</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>color_space</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>chroma_sample_location</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>video_delay</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>initial_padding</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>initial_padding</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>trailing_padding</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>trailing_padding</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>seek_preroll</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>seek_preroll</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avcodec_parameters_to_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>field_order</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>color_space</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>chroma_location</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>video_delay</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator>
<name><name>codec</name><operator>-&gt;</operator><name>initial_padding</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>initial_padding</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>trailing_padding</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>trailing_padding</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>seek_preroll</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>seek_preroll</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>codec</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_alloc_a53_sei</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>prefix_len</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sei_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>side_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sei_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_A53_CC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sei_size</name> <operator>=</operator> <name><name>side_data</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><operator>*</operator><name>sei_size</name> <operator>+</operator> <name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sei_data</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>*</operator><name>data</name> <operator>+</operator> <name>prefix_len</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>sei_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">181</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">49</literal></expr>;</expr_stmt>







<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>sei_data</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'9'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei_data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei_data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>side_data</name><operator>-&gt;</operator><name>size</name></name><operator>/</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei_data</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sei_data</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>side_data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>side_data</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><index>[<expr><name><name>side_data</name><operator>-&gt;</operator><name>size</name></name><operator>+</operator><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>ff_guess_coded_bitrate</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>framerate</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits_per_coded_sample</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bitrate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>framerate</name><operator>.</operator><name>den</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>framerate</name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>framerate</name><operator>.</operator><name>den</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bits_per_coded_sample</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bits_per_coded_sample</name> <operator>=</operator> <call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>bits_per_coded_sample</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator>
<name><name>framerate</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>framerate</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<return>return <expr><name>bitrate</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_int_from_list_or_default</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>val_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type> <name>array_valid_values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ref_val</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ref_val</name> <operator>=</operator> <name><name>array_valid_values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ref_val</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>ref_val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"%s %d are not supported. Set to default value : %d\n"</literal></expr></argument>, <argument><expr><name>val_name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>default_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>default_value</name></expr>;</return>
</block_content>}</block></function>
</unit>
