<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aic.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unary.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AIC_HDR_SIZE</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AIC_BAND_COEFFS</name></cpp:macro> <cpp:value>(64 + 32 + 192 + 96)</cpp:value></cpp:define>

<enum>enum <name>AICBands</name> <block>{
<decl><name>COEFF_LUMA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>COEFF_CHROMA</name></decl>,
<decl><name>COEFF_LUMA_EXT</name></decl>,
<decl><name>COEFF_CHROMA_EXT</name></decl>,
<decl><name>NUM_BANDS</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>aic_num_band_coeffs</name><index>[<expr><name>NUM_BANDS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">96</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>aic_band_off</name><index>[<expr><name>NUM_BANDS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">288</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>aic_quant_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">35</literal></expr>,
<expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">38</literal></expr>,
<expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">46</literal></expr>,
<expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">56</literal></expr>,
<expr><literal type="number">29</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">69</literal></expr>,
<expr><literal type="number">34</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">83</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>aic_y_scan</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">47</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">38</literal></expr>,
<expr><literal type="number">41</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">32</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">25</literal></expr>,
<expr><literal type="number">22</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">31</literal></expr>,
<expr><literal type="number">63</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">54</literal></expr>,
<expr><literal type="number">57</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">48</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>aic_y_ext_scan</name><index>[<expr><literal type="number">192</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">64</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">81</literal></expr>,
<expr><literal type="number">74</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">91</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">25</literal></expr>,
<expr><literal type="number">22</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">31</literal></expr>,
<expr><literal type="number">155</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">138</literal></expr>,
<expr><literal type="number">145</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">128</literal></expr>,
<expr><literal type="number">47</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">38</literal></expr>,
<expr><literal type="number">41</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">32</literal></expr>,
<expr><literal type="number">63</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">54</literal></expr>,
<expr><literal type="number">57</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">48</literal></expr>,
<expr><literal type="number">96</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">113</literal></expr>,
<expr><literal type="number">106</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">123</literal></expr>,
<expr><literal type="number">68</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">85</literal></expr>,
<expr><literal type="number">78</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">95</literal></expr>,
<expr><literal type="number">100</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">117</literal></expr>,
<expr><literal type="number">110</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">127</literal></expr>,
<expr><literal type="number">187</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">178</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">170</literal></expr>,
<expr><literal type="number">177</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">161</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">160</literal></expr>,
<expr><literal type="number">159</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">142</literal></expr>,
<expr><literal type="number">149</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">132</literal></expr>,
<expr><literal type="number">191</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">174</literal></expr>,
<expr><literal type="number">181</literal></expr>, <expr><literal type="number">188</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">164</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>aic_c_scan</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">31</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>,
<expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">41</literal></expr>,
<expr><literal type="number">38</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">47</literal></expr>,
<expr><literal type="number">63</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">54</literal></expr>,
<expr><literal type="number">57</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">48</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>aic_c_ext_scan</name><index>[<expr><literal type="number">192</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr>,
<expr><literal type="number">26</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">43</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">37</literal></expr>,
<expr><literal type="number">30</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">47</literal></expr>,
<expr><literal type="number">95</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">78</literal></expr>,
<expr><literal type="number">85</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">68</literal></expr>,
<expr><literal type="number">63</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">54</literal></expr>,
<expr><literal type="number">57</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">48</literal></expr>,
<expr><literal type="number">91</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">74</literal></expr>,
<expr><literal type="number">81</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">64</literal></expr>,
<expr><literal type="number">112</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">129</literal></expr>,
<expr><literal type="number">122</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">139</literal></expr>,
<expr><literal type="number">96</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">105</literal></expr>,
<expr><literal type="number">102</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">111</literal></expr>,
<expr><literal type="number">116</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">133</literal></expr>,
<expr><literal type="number">126</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">143</literal></expr>,
<expr><literal type="number">191</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">174</literal></expr>,
<expr><literal type="number">181</literal></expr>, <expr><literal type="number">188</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">164</literal></expr>,
<expr><literal type="number">159</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">150</literal></expr>,
<expr><literal type="number">153</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">144</literal></expr>,
<expr><literal type="number">187</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">178</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">170</literal></expr>,
<expr><literal type="number">177</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">161</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">160</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>aic_scan</name><index>[<expr><name>NUM_BANDS</name></expr>]</index></name> <init>= <expr><block>{
<expr><name>aic_y_scan</name></expr>, <expr><name>aic_c_scan</name></expr>, <expr><name>aic_y_ext_scan</name></expr>, <expr><name>aic_c_ext_scan</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>AICContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDCTDSPContext</name></type> <name>idsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScanTable</name></type> <name>scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_x_slices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name></decl>, <name>mb_height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>interlaced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>slice_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>data_ptr</name><index>[<expr><name>NUM_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>quant_matrix</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
}</block></struct></type> <name>AICContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aic_decode_header</name><parameter_list>(<parameter><decl><type><name>AICContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid version %d\n"</literal></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>AIC_HDR_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid header size %d\n"</literal></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame size should be %"</literal><name>PRIu32</name><literal type="string">" got %d\n"</literal></expr></argument>,
<argument><expr><name>frame_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>height</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Picture dimension changed: old: %d x %d, new: %d x %d\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant</name></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CODE</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>add_bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (type) val = get_ue_golomb(gb); else val = get_unary(gb, 1, 31); if (add_bits) val = (val &lt;&lt; add_bits) + get_bits(gb, add_bits); } while (0)</cpp:value></cpp:define>









<function><type><specifier>static</specifier> <name>int</name></type> <name>aic_decode_coeffs</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>has_skips</name></decl>, <decl><type ref="prev"/><name>coeff_type</name></decl>, <decl><type ref="prev"/><name>coeff_bits</name></decl>, <decl><type ref="prev"/><name>skip_type</name></decl>, <decl><type ref="prev"/><name>skip_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_coeffs</name> <init>= <expr><name><name>aic_num_band_coeffs</name><index>[<expr><name>band</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name> <init>= <expr><name><name>aic_scan</name><index>[<expr><name>band</name> <operator>|</operator> <name>force_chroma</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>has_skips</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff_type</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_skips</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip_type</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skip_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb</name> <operator>&lt;</operator> <name>slice_width</name></expr>;</condition> <incr><expr><name>mb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>GET_CODE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>skip_type</name></expr></argument>, <argument><expr><name>skip_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>val</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name>num_coeffs</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GET_CODE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>coeff_type</name></expr></argument>, <argument><expr><name>coeff_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>scan</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>num_coeffs</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>;</do>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>num_coeffs</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>mb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb</name> <operator>&lt;</operator> <name>slice_width</name></expr>;</condition> <incr><expr><name>mb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>num_coeffs</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>GET_CODE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>coeff_type</name></expr></argument>, <argument><expr><name>coeff_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>scan</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>num_coeffs</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recombine_block</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>base</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ext</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>base</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ext</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ext</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>ext</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recombine_block_il</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ext</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_no</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block_no</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>base</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ext</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>base</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ext</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ext</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>ext</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unquant_block</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><name>val</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>-</operator><name>sign</name><operator>)</operator> <operator>*</operator> <name>q</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator>
<operator>+</operator> <name>sign</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aic_decode_slice</name><parameter_list>(<parameter><decl><type><name>AICContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>mb</name></decl>, <decl><type ref="prev"/><name>blk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_width</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <name>mb_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_row</name> <init>= <expr><name>mb_y</name> <operator>&amp;&amp;</operator> <name>mb_y</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_pos</name></decl>, <decl><type ref="prev"/><name>c_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>base_y</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>data_ptr</name><index>[<expr><name>COEFF_LUMA</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>base_c</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>data_ptr</name><index>[<expr><name>COEFF_CHROMA</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ext_y</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>data_ptr</name><index>[<expr><name>COEFF_LUMA_EXT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ext_c</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>data_ptr</name><index>[<expr><name>COEFF_CHROMA_EXT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ystride</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last_row</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y_pos</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c_pos</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>y_pos</name> <operator>=</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_pos</name> <operator>=</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>y_pos</name> <operator>*</operator> <name>ystride</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name> <operator>*</operator> <literal type="number">8</literal>
<operator>+</operator> <name>c_pos</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_data</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>slice_width</name> <operator>*</operator> <name>AIC_BAND_COEFFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>aic_decode_coeffs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>slice_width</name></expr></argument>,
<argument><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>mb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb</name> <operator>&lt;</operator> <name>slice_width</name></expr>;</condition> <incr><expr><name>mb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>recombine_block</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name><operator>.</operator><name>permutated</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>base_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ext_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>recombine_block_il</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name><operator>.</operator><name>permutated</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>base_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ext_y</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>unquant_block</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>Y</name> <operator>+</operator> <operator>(</operator><name>blk</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>ystride</name> <operator>+</operator> <operator>(</operator><name>blk</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>put_signed_pixels_clamped</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ystride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>Y</name> <operator>+</operator> <operator>(</operator><name>blk</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>blk</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>ystride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>put_signed_pixels_clamped</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>,
<argument><expr><name>ystride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>recombine_block</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name><operator>.</operator><name>permutated</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>base_c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ext_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unquant_block</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>put_signed_pixels_clamped</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>blk</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>blk</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>C</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aic_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AICContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>frame</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>AIC_HDR_SIZE</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_x_slices</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too small frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>aic_decode_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>AIC_HDR_SIZE</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_x_slices</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_width</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slice_size</name> <operator>+</operator> <name>off</name> <operator>&gt;</operator> <name>buf_size</name> <operator>||</operator> <operator>!</operator><name>slice_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Incorrect slice size %d at %d.%d\n"</literal></expr></argument>, <argument><expr><name>slice_size</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>aic_decode_slice</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>slice_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error decoding slice at %d.%d\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>slice_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aic_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AICContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>scan</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_idctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name></name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quant_matrix</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>aic_quant_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_x_slices</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>%</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>/</operator> <name>i</name> <operator>&lt;=</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>/</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_x_slices</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_data</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_width</name></name></expr></argument>, <argument><expr><name>AIC_BAND_COEFFS</name>
<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating slice buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_data</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_width</name></name>
<operator>*</operator> <name><name>aic_band_off</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aic_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AICContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_aic_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aic"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apple Intermediate Codec"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AIC</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AICContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>aic_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>aic_decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>aic_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>aic_decode_init</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
