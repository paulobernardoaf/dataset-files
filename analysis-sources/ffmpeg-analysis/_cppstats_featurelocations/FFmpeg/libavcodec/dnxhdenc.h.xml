<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dnxhdenc.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_DNXHDENC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_DNXHDENC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnxhddata.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>RCCMPEntry</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>mb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>RCCMPEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RCEntry</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ssd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
}</block></struct></type> <name>RCEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DNXHDEncContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlockDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegEncContext</name></type> <name>m</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_444</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CIDEntry</name> <modifier>*</modifier></type><name>cid_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>msip</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>slice_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>slice_offs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>DNXHDEncContext</name></name> <modifier>*</modifier></type><name><name>thread</name><index>[<expr><name>MAX_THREADS</name></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>dct_y_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dct_uv_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>block_width_l2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coding_unit_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interlaced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_field</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nitris_compat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>min_padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intra_quant_bias</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>edge_buf_y</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">512</literal></expr>]</index></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>edge_buf_uv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">512</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>qmatrix_c</name></expr></argument>)</argument_list></call> <index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>qmatrix_l</name></expr></argument>)</argument_list></call> <index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>qmatrix_l16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>qmatrix_c16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>orig_vlc_codes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>orig_vlc_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>vlc_codes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vlc_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>run_codes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>run_bits</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>slice_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>qscale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lambda</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>mb_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mb_qscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RCCMPEntry</name> <modifier>*</modifier></type><name>mb_cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCCMPEntry</name> <modifier>*</modifier></type><name>mb_cmp_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RCEntry</name> <modifier>*</modifier></type><name>mb_rc</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>get_pixels_8x4_sym</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>block</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>DNXHDEncContext</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ff_dnxhdenc_init_x86</name><parameter_list>(<parameter><decl><type><name>DNXHDEncContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
