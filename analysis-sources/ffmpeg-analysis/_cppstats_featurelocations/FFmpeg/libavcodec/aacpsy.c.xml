<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aacpsy.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aactab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psymodel.h"</cpp:file></cpp:include>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_THR_SPREAD_HI</name></cpp:macro> <cpp:value>1.5f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_THR_SPREAD_LOW</name></cpp:macro> <cpp:value>3.0f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_EN_SPREAD_HI_L1</name></cpp:macro> <cpp:value>2.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_EN_SPREAD_HI_L2</name></cpp:macro> <cpp:value>1.5f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_EN_SPREAD_HI_S</name></cpp:macro> <cpp:value>1.5f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_EN_SPREAD_LOW_L</name></cpp:macro> <cpp:value>3.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_EN_SPREAD_LOW_S</name></cpp:macro> <cpp:value>2.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_RPEMIN</name></cpp:macro> <cpp:value>0.01f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_RPELEV</name></cpp:macro> <cpp:value>2.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_C1</name></cpp:macro> <cpp:value>3.0f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_C2</name></cpp:macro> <cpp:value>1.3219281f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_C3</name></cpp:macro> <cpp:value>0.55935729f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_SNR_1DB</name></cpp:macro> <cpp:value>7.9432821e-1f</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_SNR_25DB</name></cpp:macro> <cpp:value>3.1622776e-3f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_SAVE_SLOPE_L</name></cpp:macro> <cpp:value>-0.46666667f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_SAVE_SLOPE_S</name></cpp:macro> <cpp:value>-0.36363637f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_SAVE_ADD_L</name></cpp:macro> <cpp:value>-0.84285712f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_SAVE_ADD_S</name></cpp:macro> <cpp:value>-0.75f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_SPEND_SLOPE_L</name></cpp:macro> <cpp:value>0.66666669f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_SPEND_SLOPE_S</name></cpp:macro> <cpp:value>0.81818181f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_SPEND_ADD_L</name></cpp:macro> <cpp:value>-0.35f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_SPEND_ADD_S</name></cpp:macro> <cpp:value>-0.26111111f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_CLIP_LO_L</name></cpp:macro> <cpp:value>0.2f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_CLIP_LO_S</name></cpp:macro> <cpp:value>0.2f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_CLIP_HI_L</name></cpp:macro> <cpp:value>0.95f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_CLIP_HI_S</name></cpp:macro> <cpp:value>0.75f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_AH_THR_LONG</name></cpp:macro> <cpp:value>0.5f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_AH_THR_SHORT</name></cpp:macro> <cpp:value>0.63f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_PE_FORGET_SLOPE</name></cpp:macro> <cpp:value>511</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>PSY_3GPP_AH_NONE</name></decl>,
<decl><name>PSY_3GPP_AH_INACTIVE</name></decl>,
<decl><name>PSY_3GPP_AH_ACTIVE</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_BITS_TO_PE</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) * 1.18f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_3GPP_PE_TO_BITS</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) / 1.18f)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_LAME_FIR_LEN</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AAC_BLOCK_SIZE_LONG</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AAC_BLOCK_SIZE_SHORT</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AAC_NUM_BLOCKS_SHORT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSY_LAME_NUM_SUBBLOCKS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 








<typedef>typedef <type><struct>struct <name>AacPsyBand</name><block>{
<decl_stmt><decl><type><name>float</name></type> <name>energy</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>thr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>thr_quiet</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>nz_lines</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>active_lines</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>pe</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>pe_const</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>norm_fac</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>avoid_holes</name></decl>;</decl_stmt> 
}</block></struct></type><name>AacPsyBand</name>;</typedef>




<typedef>typedef <type><struct>struct <name>AacPsyChannel</name><block>{
<decl_stmt><decl><type><name>AacPsyBand</name></type> <name><name>band</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AacPsyBand</name></type> <name><name>prev_band</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>win_energy</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>iir_state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>next_grouping</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>WindowSequence</name></name></type> <name>next_window_seq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>attack_threshold</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>prev_energy_subshort</name><index>[<expr><name>AAC_NUM_BLOCKS_SHORT</name> <operator>*</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_attack</name></decl>;</decl_stmt> 
}</block></struct></type><name>AacPsyChannel</name>;</typedef>




<typedef>typedef <type><struct>struct <name>AacPsyCoeffs</name><block>{
<decl_stmt><decl><type><name>float</name></type> <name>ath</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>barks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>spread_low</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>spread_hi</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>min_snr</name></decl>;</decl_stmt> 
}</block></struct></type><name>AacPsyCoeffs</name>;</typedef>




<typedef>typedef <type><struct>struct <name>AacPsyContext</name><block>{
<decl_stmt><decl><type><name>int</name></type> <name>chan_bitrate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frame_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fill_level</name></decl>;</decl_stmt> 
<struct>struct <block>{
<decl_stmt><decl><type><name>float</name></type> <name>min</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>max</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>previous</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>correction</name></decl>;</decl_stmt> 
}</block> <decl><name>pe</name></decl>;</struct>
<decl_stmt><decl><type><name>AacPsyCoeffs</name></type> <name><name>psy_coef</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AacPsyChannel</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>global_quality</name></decl>;</decl_stmt> 
}</block></struct></type><name>AacPsyContext</name>;</typedef>




<typedef>typedef <type><struct>struct <name>PsyLamePreset</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>quality</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>float</name></type> <name>st_lrm</name></decl>;</decl_stmt> 
}</block></struct></type> <name>PsyLamePreset</name>;</typedef>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PsyLamePreset</name></type> <name><name>psy_abr_map</name><index>[]</index></name> <init>= <expr><block>{


<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6.60</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">6.60</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">6.60</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">6.60</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">6.60</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">6.60</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">56</literal></expr>, <expr><literal type="number">6.60</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">6.40</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">6.00</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">96</literal></expr>, <expr><literal type="number">5.60</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">112</literal></expr>, <expr><literal type="number">5.20</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">128</literal></expr>, <expr><literal type="number">5.20</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">160</literal></expr>, <expr><literal type="number">5.20</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PsyLamePreset</name></type> <name><name>psy_vbr_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4.20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4.20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4.20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4.20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4.20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4.20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4.20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4.20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4.20</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4.20</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">4.20</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>psy_fir_coeffs</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">8.65163e-18</literal> <operator>*</operator> <literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">0.00851586</literal> <operator>*</operator> <literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">6.74764e-18</literal> <operator>*</operator> <literal type="number">2</literal></expr>, <expr><literal type="number">0.0209036</literal> <operator>*</operator> <literal type="number">2</literal></expr>,
<expr><operator>-</operator><literal type="number">3.36639e-17</literal> <operator>*</operator> <literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">0.0438162</literal> <operator>*</operator> <literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1.54175e-17</literal> <operator>*</operator> <literal type="number">2</literal></expr>, <expr><literal type="number">0.0931738</literal> <operator>*</operator> <literal type="number">2</literal></expr>,
<expr><operator>-</operator><literal type="number">5.52212e-17</literal> <operator>*</operator> <literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">0.313819</literal> <operator>*</operator> <literal type="number">2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_MIPS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mips/aacpsy_mips.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<function><type><specifier>static</specifier> <name>float</name></type> <name>lame_calc_attack_threshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bitrate</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lower_range</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>, <decl><type ref="prev"/><name>upper_range</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lower_range_kbps</name> <init>= <expr><name><name>psy_abr_map</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>quality</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>upper_range_kbps</name> <init>= <expr><name><name>psy_abr_map</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>quality</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>bitrate</name></expr></argument>, <argument><expr><name><name>psy_abr_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>quality</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>bitrate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>upper_range</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>upper_range_kbps</name> <operator>=</operator> <name><name>psy_abr_map</name><index>[<expr><name>i</name></expr> ]</index></name><operator>.</operator><name>quality</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lower_range</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lower_range_kbps</name> <operator>=</operator> <name><name>psy_abr_map</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>quality</name></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>upper_range_kbps</name> <operator>-</operator> <name>bitrate</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>bitrate</name> <operator>-</operator> <name>lower_range_kbps</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>psy_abr_map</name><index>[<expr><name>lower_range</name></expr>]</index></name><operator>.</operator><name>st_lrm</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>psy_abr_map</name><index>[<expr><name>upper_range</name></expr>]</index></name><operator>.</operator><name>st_lrm</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>lame_window_init</name><parameter_list>(<parameter><decl><type><name>AacPsyContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyChannel</name> <modifier>*</modifier></type><name>pch</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pch</name><operator>-&gt;</operator><name>attack_threshold</name></name> <operator>=</operator> <name><name>psy_vbr_map</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>/</operator> <name>FF_QP2LAMBDA</name></expr>]</index></name><operator>.</operator><name>st_lrm</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pch</name><operator>-&gt;</operator><name>attack_threshold</name></name> <operator>=</operator> <call><name>lame_calc_attack_threshold</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>AAC_NUM_BLOCKS_SHORT</name> <operator>*</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pch</name><operator>-&gt;</operator><name>prev_energy_subshort</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">10.0f</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_cold</name> <name>float</name></type> <name>calc_bark</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">13.3f</literal> <operator>*</operator> <call><name>atanf</name><argument_list>(<argument><expr><literal type="number">0.00076f</literal> <operator>*</operator> <name>f</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3.5f</literal> <operator>*</operator> <call><name>atanf</name><argument_list>(<argument><expr><operator>(</operator><name>f</name> <operator>/</operator> <literal type="number">7500.0f</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>f</name> <operator>/</operator> <literal type="number">7500.0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATH_ADD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>av_cold</name> <name>float</name></type> <name>ath</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>/=</operator> <literal type="number">1000.0f</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">3.64</literal> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.8</literal></expr></argument>)</argument_list></call>
<operator>-</operator> <literal type="number">6.8</literal> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.6</literal> <operator>*</operator> <operator>(</operator><name>f</name> <operator>-</operator> <literal type="number">3.4</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>f</name> <operator>-</operator> <literal type="number">3.4</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator> <literal type="number">6.0</literal> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.15</literal> <operator>*</operator> <operator>(</operator><name>f</name> <operator>-</operator> <literal type="number">8.7</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>f</name> <operator>-</operator> <literal type="number">8.7</literal><operator>)</operator></expr></argument>)</argument_list></call>
<operator>+</operator> <operator>(</operator><literal type="number">0.6</literal> <operator>+</operator> <literal type="number">0.04</literal> <operator>*</operator> <name>add</name><operator>)</operator> <operator>*</operator> <literal type="number">0.001</literal> <operator>*</operator> <name>f</name> <operator>*</operator> <name>f</name> <operator>*</operator> <name>f</name> <operator>*</operator> <name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>psy_3gpp_init</name><parameter_list>(<parameter><decl><type><name>FFPsyContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyContext</name> <modifier>*</modifier></type><name>pctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>prev</name></decl>, <decl><type ref="prev"/><name>minscale</name></decl>, <decl><type ref="prev"/><name>minath</name></decl>, <decl><type ref="prev"/><name>minsnr</name></decl>, <decl><type ref="prev"/><name>pe_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chan_bitrate</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2.0f</literal></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bandwidth</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>cutoff</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>cutoff</name></name></expr> </then><else>: <expr><call><name>AAC_CUTOFF</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>num_bark</name> <init>= <expr><call><name>calc_bark</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>bandwidth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>model_priv_data</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AacPsyContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>model_priv_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pctx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>model_priv_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr> </then><else>: <expr><literal type="number">120</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <literal type="number">0.01f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chan_bitrate</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>chan_bitrate</name> <operator>/</operator> <literal type="number">120.0</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr> </then><else>: <expr><literal type="number">120</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>chan_bitrate</name></name> <operator>=</operator> <name>chan_bitrate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2560</literal></expr></argument>, <argument><expr><name>chan_bitrate</name> <operator>*</operator> <name>AAC_BLOCK_SIZE_LONG</name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>min</name></name> <operator>=</operator> <literal type="number">8.0f</literal> <operator>*</operator> <name>AAC_BLOCK_SIZE_LONG</name> <operator>*</operator> <name>bandwidth</name> <operator>/</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <literal type="number">2.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>max</name></name> <operator>=</operator> <literal type="number">12.0f</literal> <operator>*</operator> <name>AAC_BLOCK_SIZE_LONG</name> <operator>*</operator> <name>bandwidth</name> <operator>/</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <literal type="number">2.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitres</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">6144</literal> <operator>-</operator> <name><name>pctx</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitres</name><operator>.</operator><name>size</name></name> <operator>-=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bitres</name><operator>.</operator><name>size</name></name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>fill_level</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bitres</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>minath</name> <operator>=</operator> <call><name>ath</name><argument_list>(<argument><expr><literal type="number">3410</literal> <operator>-</operator> <literal type="number">0.733</literal> <operator>*</operator> <name>ATH_ADD</name></expr></argument>, <argument><expr><name>ATH_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyCoeffs</name> <modifier>*</modifier></type><name>coeffs</name> <init>= <expr><name><name>pctx</name><operator>-&gt;</operator><name>psy_coef</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>band_sizes</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>bands</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>line_to_frequency</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>j</name></expr> ?</condition><then> <expr><literal type="number">256.f</literal></expr> </then><else>: <expr><literal type="number">2048.0f</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>avg_chan_bits</name> <init>= <expr><name>chan_bitrate</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>j</name></expr> ?</condition><then> <expr><literal type="number">128.0f</literal></expr> </then><else>: <expr><literal type="number">1024.0f</literal></expr></else></ternary><operator>)</operator> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bark_pe</name> <init>= <expr><literal type="number">0.024f</literal> <operator>*</operator> <call><name>PSY_3GPP_BITS_TO_PE</name><argument_list>(<argument><expr><name>avg_chan_bits</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>num_bark</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>en_spread_low</name> <init>= <expr><ternary><condition><expr><name>j</name></expr> ?</condition><then> <expr><name>PSY_3GPP_EN_SPREAD_LOW_S</name></expr> </then><else>: <expr><name>PSY_3GPP_EN_SPREAD_LOW_L</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>en_spread_hi</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>j</name> <operator>||</operator> <operator>(</operator><name>chan_bitrate</name> <operator>&lt;=</operator> <literal type="number">22.0f</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>PSY_3GPP_EN_SPREAD_HI_S</name></expr> </then><else>: <expr><name>PSY_3GPP_EN_SPREAD_HI_L1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_bands</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>band_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bark</name> <operator>=</operator> <call><name>calc_bark</name><argument_list>(<argument><expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>line_to_frequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>barks</name> <operator>=</operator> <operator>(</operator><name>bark</name> <operator>+</operator> <name>prev</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>bark</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_bands</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyCoeffs</name> <modifier>*</modifier></type><name>coeff</name> <init>= <expr><operator>&amp;</operator><name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bark_width</name> <init>= <expr><name><name>coeffs</name><index>[<expr><name>g</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>barks</name> <operator>-</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>barks</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>coeff</name><operator>-&gt;</operator><name>spread_low</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>-</operator><name>bark_width</name> <operator>*</operator> <name>PSY_3GPP_THR_SPREAD_LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coeff</name><operator>-&gt;</operator><name>spread_hi</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>-</operator><name>bark_width</name> <operator>*</operator> <name>PSY_3GPP_THR_SPREAD_HI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coeff</name><operator>-&gt;</operator><name>spread_low</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>-</operator><name>bark_width</name> <operator>*</operator> <name>en_spread_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coeff</name><operator>-&gt;</operator><name>spread_hi</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>-</operator><name>bark_width</name> <operator>*</operator> <name>en_spread_hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pe_min</name> <operator>=</operator> <name>bark_pe</name> <operator>*</operator> <name>bark_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>minsnr</name> <operator>=</operator> <call><name>exp2</name><argument_list>(<argument><expr><name>pe_min</name> <operator>/</operator> <name><name>band_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coeff</name><operator>-&gt;</operator><name>min_snr</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name>minsnr</name></expr></argument>, <argument><expr><name>PSY_SNR_25DB</name></expr></argument>, <argument><expr><name>PSY_SNR_1DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_bands</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>minscale</name> <operator>=</operator> <call><name>ath</name><argument_list>(<argument><expr><name>start</name> <operator>*</operator> <name>line_to_frequency</name></expr></argument>, <argument><expr><name>ATH_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>band_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>minscale</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>minscale</name></expr></argument>, <argument><expr><call><name>ath</name><argument_list>(<argument><expr><operator>(</operator><name>start</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name>line_to_frequency</name></expr></argument>, <argument><expr><name>ATH_ADD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>ath</name> <operator>=</operator> <name>minscale</name> <operator>-</operator> <name>minath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>band_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>ch</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AacPsyChannel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pctx</name><operator>-&gt;</operator><name>ch</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>model_priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lame_window_init</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>float</name></type> <name>iir_filter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0.7548f</literal> <operator>*</operator> <operator>(</operator><name>in</name> <operator>-</operator> <name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5095f</literal> <operator>*</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>window_grouping</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x36</literal></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>av_unused</name> <name>FFPsyWindowInfo</name></type> <name>psy_3gpp_window</name><parameter_list>(<parameter><decl><type><name>FFPsyContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>la</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>br</name> <init>= <expr><operator>(</operator><operator>(</operator><name>AacPsyContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>model_priv_data</name></name><operator>)</operator><operator>-&gt;</operator><name>chan_bitrate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attack_ratio</name> <init>= <expr><ternary><condition><expr><name>br</name> <operator>&lt;=</operator> <literal type="number">16000</literal></expr> ?</condition><then> <expr><literal type="number">18</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AacPsyContext</name> <modifier>*</modifier></type><name>pctx</name> <init>= <expr><operator>(</operator><name>AacPsyContext</name><operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>model_priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AacPsyChannel</name> <modifier>*</modifier></type><name>pch</name> <init>= <expr><operator>&amp;</operator><name><name>pctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>grouping</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_type</name> <init>= <expr><name><name>pch</name><operator>-&gt;</operator><name>next_window_seq</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFPsyWindowInfo</name></type> <name>wi</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>la</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>switch_to_eight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum2</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attack_n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stay_short</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>iir_filter</name><argument_list>(<argument><expr><name><name>la</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pch</name><operator>-&gt;</operator><name>iir_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>v</name><operator>*</operator><name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum2</name> <operator>+=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pch</name><operator>-&gt;</operator><name>win_energy</name></name> <operator>*</operator> <name>attack_ratio</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attack_n</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>switch_to_eight</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pch</name><operator>-&gt;</operator><name>win_energy</name></name> <operator>=</operator> <name><name>pch</name><operator>-&gt;</operator><name>win_energy</name></name><operator>*</operator><literal type="number">7</literal><operator>/</operator><literal type="number">8</literal> <operator>+</operator> <name>sum2</name><operator>/</operator><literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>window_type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>prev_type</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>prev_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ONLY_LONG_SEQUENCE</name></expr>:</case>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>switch_to_eight</name></expr> ?</condition><then> <expr><name>LONG_START_SEQUENCE</name></expr> </then><else>: <expr><name>ONLY_LONG_SEQUENCE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>next_type</name> <operator>=</operator> <ternary><condition><expr><name>switch_to_eight</name></expr> ?</condition><then> <expr><name>EIGHT_SHORT_SEQUENCE</name></expr> </then><else>: <expr><name>ONLY_LONG_SEQUENCE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LONG_START_SEQUENCE</name></expr>:</case>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grouping</name> <operator>=</operator> <name><name>pch</name><operator>-&gt;</operator><name>next_grouping</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_type</name> <operator>=</operator> <ternary><condition><expr><name>switch_to_eight</name></expr> ?</condition><then> <expr><name>EIGHT_SHORT_SEQUENCE</name></expr> </then><else>: <expr><name>LONG_STOP_SEQUENCE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LONG_STOP_SEQUENCE</name></expr>:</case>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>switch_to_eight</name></expr> ?</condition><then> <expr><name>LONG_START_SEQUENCE</name></expr> </then><else>: <expr><name>ONLY_LONG_SEQUENCE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>next_type</name> <operator>=</operator> <ternary><condition><expr><name>switch_to_eight</name></expr> ?</condition><then> <expr><name>EIGHT_SHORT_SEQUENCE</name></expr> </then><else>: <expr><name>ONLY_LONG_SEQUENCE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EIGHT_SHORT_SEQUENCE</name></expr>:</case>
<expr_stmt><expr><name>stay_short</name> <operator>=</operator> <name>next_type</name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name> <operator>||</operator> <name>switch_to_eight</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>stay_short</name></expr> ?</condition><then> <expr><name>EIGHT_SHORT_SEQUENCE</name></expr> </then><else>: <expr><name>LONG_STOP_SEQUENCE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>grouping</name> <operator>=</operator> <ternary><condition><expr><name>next_type</name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr> ?</condition><then> <expr><name><name>pch</name><operator>-&gt;</operator><name>next_grouping</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>next_type</name> <operator>=</operator> <ternary><condition><expr><name>switch_to_eight</name></expr> ?</condition><then> <expr><name>EIGHT_SHORT_SEQUENCE</name></expr> </then><else>: <expr><name>LONG_STOP_SEQUENCE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>pch</name><operator>-&gt;</operator><name>next_grouping</name></name> <operator>=</operator> <name><name>window_grouping</name><index>[<expr><name>attack_n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pch</name><operator>-&gt;</operator><name>next_window_seq</name></name> <operator>=</operator> <name>next_type</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>window_type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>prev_type</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>grouping</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>prev_type</name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>window_grouping</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>window_shape</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wi</name><operator>.</operator><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>num_windows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>grouping</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lastgrp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>num_windows</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>grouping</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lastgrp</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>grouping</name><index>[<expr><name>lastgrp</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>wi</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>calc_bit_demand</name><parameter_list>(<parameter><decl><type><name>AacPsyContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>short_window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>bitsave_slope</name> <init>= <expr><ternary><condition><expr><name>short_window</name></expr> ?</condition><then> <expr><name>PSY_3GPP_SAVE_SLOPE_S</name></expr> </then><else>: <expr><name>PSY_3GPP_SAVE_SLOPE_L</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>bitsave_add</name> <init>= <expr><ternary><condition><expr><name>short_window</name></expr> ?</condition><then> <expr><name>PSY_3GPP_SAVE_ADD_S</name></expr> </then><else>: <expr><name>PSY_3GPP_SAVE_ADD_L</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>bitspend_slope</name> <init>= <expr><ternary><condition><expr><name>short_window</name></expr> ?</condition><then> <expr><name>PSY_3GPP_SPEND_SLOPE_S</name></expr> </then><else>: <expr><name>PSY_3GPP_SPEND_SLOPE_L</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>bitspend_add</name> <init>= <expr><ternary><condition><expr><name>short_window</name></expr> ?</condition><then> <expr><name>PSY_3GPP_SPEND_ADD_S</name></expr> </then><else>: <expr><name>PSY_3GPP_SPEND_ADD_L</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>clip_low</name> <init>= <expr><ternary><condition><expr><name>short_window</name></expr> ?</condition><then> <expr><name>PSY_3GPP_CLIP_LO_S</name></expr> </then><else>: <expr><name>PSY_3GPP_CLIP_LO_L</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>clip_high</name> <init>= <expr><ternary><condition><expr><name>short_window</name></expr> ?</condition><then> <expr><name>PSY_3GPP_CLIP_HI_S</name></expr> </then><else>: <expr><name>PSY_3GPP_CLIP_HI_L</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>clipped_pe</name></decl>, <decl><type ref="prev"/><name>bit_save</name></decl>, <decl><type ref="prev"/><name>bit_spend</name></decl>, <decl><type ref="prev"/><name>bit_factor</name></decl>, <decl><type ref="prev"/><name>fill_level</name></decl>, <decl><type ref="prev"/><name>forgetful_min_pe</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_level</name></name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>-</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_level</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_level</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fill_level</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>fill_level</name></name> <operator>/</operator> <name>size</name></expr></argument>, <argument><expr><name>clip_low</name></expr></argument>, <argument><expr><name>clip_high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clipped_pe</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_save</name> <operator>=</operator> <operator>(</operator><name>fill_level</name> <operator>+</operator> <name>bitsave_add</name><operator>)</operator> <operator>*</operator> <name>bitsave_slope</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bit_save</name> <operator>&lt;=</operator> <literal type="number">0.3f</literal> <operator>&amp;&amp;</operator> <name>bit_save</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0.05000001f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_spend</name> <operator>=</operator> <operator>(</operator><name>fill_level</name> <operator>+</operator> <name>bitspend_add</name><operator>)</operator> <operator>*</operator> <name>bitspend_slope</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bit_spend</name> <operator>&lt;=</operator> <literal type="number">0.5f</literal> <operator>&amp;&amp;</operator> <name>bit_spend</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0.1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>bit_factor</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name>bit_save</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>bit_spend</name> <operator>-</operator> <name>bit_save</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>max</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>min</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><name>clipped_pe</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>min</name></name><operator>)</operator></expr>;</expr_stmt>




<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>max</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>forgetful_min_pe</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>min</name></name> <operator>*</operator> <name>PSY_PE_FORGET_SLOPE</name><operator>)</operator>
<operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><name>pe</name> <operator>*</operator> <operator>(</operator><name>pe</name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>max</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <operator>(</operator><name>PSY_PE_FORGET_SLOPE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>min</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>forgetful_min_pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<return>return <expr><call><name>FFMIN</name><argument_list>(
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>*</operator> <name>bit_factor</name></expr></argument>,
<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>bits</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>calc_pe_3gpp</name><parameter_list>(<parameter><decl><type><name>AacPsyBand</name> <modifier>*</modifier></type><name>band</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>pe</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>pe</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>pe_const</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>active_lines</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>&gt;</operator> <name><name>band</name><operator>-&gt;</operator><name>thr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>log2f</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pe</name> <operator>=</operator> <name>a</name> <operator>-</operator> <call><name>log2f</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>active_lines</name></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>nz_lines</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>&lt;</operator> <name>PSY_3GPP_C1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pe</name> <operator>=</operator> <name>pe</name> <operator>*</operator> <name>PSY_3GPP_C3</name> <operator>+</operator> <name>PSY_3GPP_C2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>PSY_3GPP_C3</name> <operator>+</operator> <name>PSY_3GPP_C2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>active_lines</name></name> <operator>*=</operator> <name>PSY_3GPP_C3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>pe</name></name> <operator>=</operator> <name>pe</name> <operator>*</operator> <name><name>band</name><operator>-&gt;</operator><name>nz_lines</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>pe_const</name></name> <operator>=</operator> <name>a</name> <operator>*</operator> <name><name>band</name><operator>-&gt;</operator><name>nz_lines</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>band</name><operator>-&gt;</operator><name>pe</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>calc_reduction_3gpp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>desired_pe</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pe</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>active_lines</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>thr_avg</name></decl>, <decl><type ref="prev"/><name>reduction</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>active_lines</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>thr_avg</name> <operator>=</operator> <call><name>exp2f</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>-</operator> <name>pe</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">4.0f</literal> <operator>*</operator> <name>active_lines</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reduction</name> <operator>=</operator> <call><name>exp2f</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>-</operator> <name>desired_pe</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">4.0f</literal> <operator>*</operator> <name>active_lines</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <name>thr_avg</name></expr>;</expr_stmt>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>reduction</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>calc_reduced_thr_3gpp</name><parameter_list>(<parameter><decl><type><name>AacPsyBand</name> <modifier>*</modifier></type><name>band</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>min_snr</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>reduction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>thr</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>&gt;</operator> <name>thr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>thr</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>thr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>thr</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>thr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>reduction</name></expr>;</expr_stmt>
<expr_stmt><expr><name>thr</name> <operator>*=</operator> <name>thr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>thr</name> <operator>*=</operator> <name>thr</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>thr</name> <operator>&gt;</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>*</operator> <name>min_snr</name> <operator>&amp;&amp;</operator> <name><name>band</name><operator>-&gt;</operator><name>avoid_holes</name></name> <operator>!=</operator> <name>PSY_3GPP_AH_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>thr</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>*</operator> <name>min_snr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>avoid_holes</name></name> <operator>=</operator> <name>PSY_3GPP_AH_ACTIVE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>thr</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>calc_thr_3gpp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_thr_3gpp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FFPsyWindowInfo</name> <modifier>*</modifier></type><name>wi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_bands</name></decl></parameter>, <parameter><decl><type><name>AacPsyChannel</name> <modifier>*</modifier></type><name>pch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>band_sizes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coefs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>cutoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>wstart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name><operator>*</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>wstart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>num_bands</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>pch</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>form_factor</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>Temp</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wstart</name> <operator>&lt;</operator> <name>cutoff</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>band_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>+=</operator> <name><name>coefs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>coefs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>form_factor</name> <operator>+=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>coefs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>Temp</name> <operator>=</operator> <ternary><condition><expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>band_sizes</name><index>[<expr><name>g</name></expr>]</index></name> <operator>/</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>*</operator> <literal type="number">0.001258925f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>nz_lines</name></name> <operator>=</operator> <name>form_factor</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>Temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>band_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wstart</name> <operator>+=</operator> <name><name>band_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>psy_hp_filter</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>psy_hp_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>firbuf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hpfsmpl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>psy_fir_coeffs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AAC_BLOCK_SIZE_LONG</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>sum1</name></decl>, <decl><type ref="prev"/><name>sum2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sum1</name> <operator>=</operator> <name><name>firbuf</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>PSY_LAME_FIR_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum2</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>PSY_LAME_FIR_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum1</name> <operator>+=</operator> <name><name>psy_fir_coeffs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>firbuf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+</operator> <name><name>firbuf</name><index>[<expr><name>i</name> <operator>+</operator> <name>PSY_LAME_FIR_LEN</name> <operator>-</operator> <name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sum2</name> <operator>+=</operator> <name><name>psy_fir_coeffs</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>firbuf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>firbuf</name><index>[<expr><name>i</name> <operator>+</operator> <name>PSY_LAME_FIR_LEN</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>hpfsmpl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sum1</name> <operator>+</operator> <name>sum2</name><operator>)</operator> <operator>*</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<function><type><specifier>static</specifier> <name>void</name></type> <name>psy_3gpp_analyze_channel</name><parameter_list>(<parameter><decl><type><name>FFPsyContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coefs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFPsyWindowInfo</name> <modifier>*</modifier></type><name>wi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AacPsyContext</name> <modifier>*</modifier></type><name>pctx</name> <init>= <expr><operator>(</operator><name>AacPsyContext</name><operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>model_priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AacPsyChannel</name> <modifier>*</modifier></type><name>pch</name> <init>= <expr><operator>&amp;</operator><name><name>pctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>desired_bits</name></decl>, <decl><type ref="prev"/><name>desired_pe</name></decl>, <decl><type ref="prev"/><name>delta_pe</name></decl>, <decl><type ref="prev"/><name>reduction</name><init>= <expr><name>NAN</name></expr></init></decl>, <decl><type ref="prev"/><name><name>spread_en</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>active_lines</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>norm_fac</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pe</name> <init>= <expr><ternary><condition><expr><name><name>pctx</name><operator>-&gt;</operator><name>chan_bitrate</name></name> <operator>&gt;</operator> <literal type="number">32000</literal></expr> ?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>: <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">50.0f</literal></expr></argument>, <argument><expr><literal type="number">100.0f</literal> <operator>-</operator> <name><name>pctx</name><operator>-&gt;</operator><name>chan_bitrate</name></name> <operator>*</operator> <literal type="number">100.0f</literal> <operator>/</operator> <literal type="number">32000.0f</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_bands</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>num_bands</name><index>[<expr><name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>band_sizes</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>bands</name><index>[<expr><name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AacPsyCoeffs</name> <modifier>*</modifier></type><name>coeffs</name> <init>= <expr><name><name>pctx</name><operator>-&gt;</operator><name>psy_coef</name><index>[<expr><name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>avoid_hole_thr</name> <init>= <expr><ternary><condition><expr><name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>PSY_3GPP_AH_THR_SHORT</name></expr> </then><else>: <expr><name>PSY_3GPP_AH_THR_LONG</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bandwidth</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>cutoff</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>cutoff</name></name></expr> </then><else>: <expr><call><name>AAC_CUTOFF</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cutoff</name> <init>= <expr><name>bandwidth</name> <operator>*</operator> <literal type="number">2048</literal> <operator>/</operator> <name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>calc_thr_3gpp</name><argument_list>(<argument><expr><name>wi</name></expr></argument>, <argument><expr><name>num_bands</name></expr></argument>, <argument><expr><name>pch</name></expr></argument>, <argument><expr><name>band_sizes</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>cutoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name><operator>*</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyBand</name> <modifier>*</modifier></type><name>bands</name> <init>= <expr><operator>&amp;</operator><name><name>pch</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>spread_en</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>energy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>num_bands</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bands</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>thr</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bands</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>thr</name></expr></argument>, <argument><expr><name><name>bands</name><index>[<expr><name>g</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>thr</name> <operator>*</operator> <name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name><name>spread_hi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spread_en</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bands</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>energy</name></expr></argument>, <argument><expr><name><name>spread_en</name><index>[<expr><name>w</name><operator>+</operator><name>g</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name><name>spread_hi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <name>num_bands</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>g</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>g</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bands</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>thr</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bands</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>thr</name></expr></argument>, <argument><expr><name><name>bands</name><index>[<expr><name>g</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>thr</name> <operator>*</operator> <name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name><name>spread_low</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spread_en</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>spread_en</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>spread_en</name><index>[<expr><name>w</name><operator>+</operator><name>g</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name><name>spread_low</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>num_bands</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>bands</name><index>[<expr><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>thr_quiet</name></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>thr</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name></expr></argument>, <argument><expr><name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>ath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>wi</name><operator>-&gt;</operator><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_STOP_SEQUENCE</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>w</name> <operator>&amp;&amp;</operator> <name><name>wi</name><operator>-&gt;</operator><name>window_type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>LONG_START_SEQUENCE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>PSY_3GPP_RPEMIN</name><operator>*</operator><name><name>band</name><operator>-&gt;</operator><name>thr</name></name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name></expr></argument>,
<argument><expr><name>PSY_3GPP_RPELEV</name><operator>*</operator><name><name>pch</name><operator>-&gt;</operator><name>prev_band</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name><operator>.</operator><name>thr_quiet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>pe</name> <operator>+=</operator> <call><name>calc_pe_3gpp</name><argument_list>(<argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>pe_const</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>active_lines</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>active_lines</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>spread_en</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name> <operator>*</operator> <name>avoid_hole_thr</name> <operator>&gt;</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>||</operator> <name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>min_snr</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>avoid_holes</name></name> <operator>=</operator> <name>PSY_3GPP_AH_NONE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>avoid_holes</name></name> <operator>=</operator> <name>PSY_3GPP_AH_INACTIVE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>entropy</name> <operator>=</operator> <name>pe</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>desired_pe</name> <operator>=</operator> <name>pe</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr> </then><else>: <expr><literal type="number">120</literal></expr></else></ternary><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">2.5f</literal> <operator>*</operator> <literal type="number">120.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>desired_bits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2560</literal></expr></argument>, <argument><expr><call><name>PSY_3GPP_PE_TO_BITS</name><argument_list>(<argument><expr><name>desired_pe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desired_pe</name> <operator>=</operator> <call><name>PSY_3GPP_BITS_TO_PE</name><argument_list>(<argument><expr><name>desired_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bitres</name><operator>.</operator><name>bits</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desired_bits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2560</literal></expr></argument>, <argument><expr><call><name>PSY_3GPP_PE_TO_BITS</name><argument_list>(<argument><expr><name>desired_pe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desired_pe</name> <operator>=</operator> <call><name>PSY_3GPP_BITS_TO_PE</name><argument_list>(<argument><expr><name>desired_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>max</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>pctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>min</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>pctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>desired_bits</name> <operator>=</operator> <call><name>calc_bit_demand</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitres</name><operator>.</operator><name>bits</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitres</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desired_pe</name> <operator>=</operator> <call><name>PSY_3GPP_BITS_TO_PE</name><argument_list>(<argument><expr><name>desired_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bitres</name><operator>.</operator><name>bits</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>desired_pe</name> <operator>*=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>pctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>previous</name></name> <operator>/</operator> <call><name>PSY_3GPP_BITS_TO_PE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitres</name><operator>.</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0.85f</literal></expr></argument>, <argument><expr><literal type="number">1.15f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>pe</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <call><name>PSY_3GPP_BITS_TO_PE</name><argument_list>(<argument><expr><name>desired_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitres</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <name>desired_bits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>desired_pe</name> <operator>&lt;</operator> <name>pe</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name><operator>*</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>reduction</name> <operator>=</operator> <call><name>calc_reduction_3gpp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>desired_pe</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>, <argument><expr><name>active_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pe</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>active_lines</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>num_bands</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>pch</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name> <operator>=</operator> <call><name>calc_reduced_thr_3gpp</name><argument_list>(<argument><expr><name>band</name></expr></argument>, <argument><expr><name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>min_snr</name></expr></argument>, <argument><expr><name>reduction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pe</name> <operator>+=</operator> <call><name>calc_pe_3gpp</name><argument_list>(<argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>pe_const</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>active_lines</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>active_lines</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>pe_no_ah</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>desired_pe_no_ah</name></decl>;</decl_stmt>
<expr_stmt><expr><name>active_lines</name> <operator>=</operator> <name>a</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name><operator>*</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>num_bands</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>pch</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>avoid_holes</name></name> <operator>!=</operator> <name>PSY_3GPP_AH_ACTIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pe_no_ah</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>pe</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>pe_const</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>active_lines</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>active_lines</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>desired_pe_no_ah</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>desired_pe</name> <operator>-</operator> <operator>(</operator><name>pe</name> <operator>-</operator> <name>pe_no_ah</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>active_lines</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reduction</name> <operator>=</operator> <call><name>calc_reduction_3gpp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>desired_pe_no_ah</name></expr></argument>, <argument><expr><name>pe_no_ah</name></expr></argument>, <argument><expr><name>active_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pe</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name><operator>*</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>num_bands</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>pch</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>active_lines</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name> <operator>=</operator> <call><name>calc_reduced_thr_3gpp</name><argument_list>(<argument><expr><name>band</name></expr></argument>, <argument><expr><name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>min_snr</name></expr></argument>, <argument><expr><name>reduction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pe</name> <operator>+=</operator> <call><name>calc_pe_3gpp</name><argument_list>(<argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>norm_fac</name></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>active_lines</name></name> <operator>/</operator> <name><name>band</name><operator>-&gt;</operator><name>thr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>norm_fac</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>norm_fac</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>norm_fac</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>delta_pe</name> <operator>=</operator> <name>desired_pe</name> <operator>-</operator> <name>pe</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>delta_pe</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.05f</literal> <operator>*</operator> <name>desired_pe</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pe</name> <operator>&lt;</operator> <literal type="number">1.15f</literal> <operator>*</operator> <name>desired_pe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>norm_fac</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name>norm_fac</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name><operator>*</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>num_bands</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>pch</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>active_lines</name></name> <operator>&gt;</operator> <literal type="number">0.5f</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>delta_sfb_pe</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>norm_fac</name></name> <operator>*</operator> <name>norm_fac</name> <operator>*</operator> <name>delta_pe</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>thr</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>thr</name> <operator>*=</operator> <call><name>exp2f</name><argument_list>(<argument><expr><name>delta_sfb_pe</name> <operator>/</operator> <name><name>band</name><operator>-&gt;</operator><name>active_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>thr</name> <operator>&gt;</operator> <name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>min_snr</name> <operator>*</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>&amp;&amp;</operator> <name><name>band</name><operator>-&gt;</operator><name>avoid_holes</name></name> <operator>==</operator> <name>PSY_3GPP_AH_INACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>thr</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name></expr></argument>, <argument><expr><name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>min_snr</name> <operator>*</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name> <operator>=</operator> <name>thr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>num_bands</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pe</name> <operator>&gt;</operator> <name>desired_pe</name> <operator>&amp;&amp;</operator> <name>g</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name><operator>*</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>w</name><operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>pch</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>avoid_holes</name></name> <operator>!=</operator> <name>PSY_3GPP_AH_NONE</name> <operator>&amp;&amp;</operator> <name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>min_snr</name> <operator>&lt;</operator> <name>PSY_SNR_1DB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>g</name></expr>]</index></name><operator>.</operator><name>min_snr</name> <operator>=</operator> <name>PSY_SNR_1DB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>thr</name></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>*</operator> <name>PSY_SNR_1DB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pe</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>active_lines</name></name> <operator>*</operator> <literal type="number">1.5f</literal> <operator>-</operator> <name><name>band</name><operator>-&gt;</operator><name>pe</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>

</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>wi</name><operator>-&gt;</operator><name>num_windows</name></name><operator>*</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>num_bands</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AacPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>pch</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>psy_band</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><name>w</name><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>psy_band</name><operator>-&gt;</operator><name>threshold</name></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>thr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psy_band</name><operator>-&gt;</operator><name>energy</name></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psy_band</name><operator>-&gt;</operator><name>spread</name></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>active_lines</name></name> <operator>*</operator> <literal type="number">2.0f</literal> <operator>/</operator> <name><name>band_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psy_band</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <call><name>PSY_3GPP_PE_TO_BITS</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>pe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pch</name><operator>-&gt;</operator><name>prev_band</name></name></expr></argument>, <argument><expr><name><name>pch</name><operator>-&gt;</operator><name>band</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pch</name><operator>-&gt;</operator><name>band</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>psy_3gpp_analyze</name><parameter_list>(<parameter><decl><type><name>FFPsyContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFPsyWindowInfo</name> <modifier>*</modifier></type><name>wi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFPsyChannelGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>ff_psy_find_group</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>group</name><operator>-&gt;</operator><name>num_ch</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>psy_3gpp_analyze_channel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>channel</name> <operator>+</operator> <name>ch</name></expr></argument>, <argument><expr><name><name>coeffs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>psy_3gpp_end</name><parameter_list>(<parameter><decl><type><name>FFPsyContext</name> <modifier>*</modifier></type><name>apc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AacPsyContext</name> <modifier>*</modifier></type><name>pctx</name> <init>= <expr><operator>(</operator><name>AacPsyContext</name><operator>*</operator><operator>)</operator> <name><name>apc</name><operator>-&gt;</operator><name>model_priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pctx</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>apc</name><operator>-&gt;</operator><name>model_priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lame_apply_block_type</name><parameter_list>(<parameter><decl><type><name>AacPsyChannel</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>FFPsyWindowInfo</name> <modifier>*</modifier></type><name>wi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uselongblock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blocktype</name> <init>= <expr><name>ONLY_LONG_SEQUENCE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>uselongblock</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>next_window_seq</name></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blocktype</name> <operator>=</operator> <name>LONG_STOP_SEQUENCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>blocktype</name> <operator>=</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>next_window_seq</name></name> <operator>==</operator> <name>ONLY_LONG_SEQUENCE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_window_seq</name></name> <operator>=</operator> <name>LONG_START_SEQUENCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>next_window_seq</name></name> <operator>==</operator> <name>LONG_STOP_SEQUENCE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_window_seq</name></name> <operator>=</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>wi</name><operator>-&gt;</operator><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>next_window_seq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_window_seq</name></name> <operator>=</operator> <name>blocktype</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FFPsyWindowInfo</name></type> <name>psy_lame_window</name><parameter_list>(<parameter><decl><type><name>FFPsyContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>la</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AacPsyContext</name> <modifier>*</modifier></type><name>pctx</name> <init>= <expr><operator>(</operator><name>AacPsyContext</name><operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>model_priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AacPsyChannel</name> <modifier>*</modifier></type><name>pch</name> <init>= <expr><operator>&amp;</operator><name><name>pctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>grouping</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uselongblock</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>attacks</name><index>[<expr><name>AAC_NUM_BLOCKS_SHORT</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFPsyWindowInfo</name></type> <name>wi</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>la</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>hpfsmpl</name><index>[<expr><name>AAC_BLOCK_SIZE_LONG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><name>hpfsmpl</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>attack_intensity</name><index>[<expr><operator>(</operator><name>AAC_NUM_BLOCKS_SHORT</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>energy_subshort</name><index>[<expr><operator>(</operator><name>AAC_NUM_BLOCKS_SHORT</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>energy_short</name><index>[<expr><name>AAC_NUM_BLOCKS_SHORT</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>firbuf</name> <init>= <expr><name>la</name> <operator>+</operator> <operator>(</operator><name>AAC_BLOCK_SIZE_SHORT</name><operator>/</operator><literal type="number">4</literal> <operator>-</operator> <name>PSY_LAME_FIR_LEN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>att_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>psy_hp_filter</name><argument_list>(<argument><expr><name>firbuf</name></expr></argument>, <argument><expr><name>hpfsmpl</name></expr></argument>, <argument><expr><name>psy_fir_coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>energy_subshort</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pch</name><operator>-&gt;</operator><name>prev_energy_subshort</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>AAC_NUM_BLOCKS_SHORT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pch</name><operator>-&gt;</operator><name>prev_energy_subshort</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>AAC_NUM_BLOCKS_SHORT</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attack_intensity</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>energy_subshort</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>pch</name><operator>-&gt;</operator><name>prev_energy_subshort</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>AAC_NUM_BLOCKS_SHORT</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>energy_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>energy_subshort</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AAC_NUM_BLOCKS_SHORT</name> <operator>*</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pfe</name> <init>= <expr><name>pf</name> <operator>+</operator> <name>AAC_BLOCK_SIZE_LONG</name> <operator>/</operator> <operator>(</operator><name>AAC_NUM_BLOCKS_SHORT</name> <operator>*</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>p</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>pf</name> <operator>&lt;</operator> <name>pfe</name></expr>;</condition> <incr><expr><name>pf</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><operator>*</operator><name>pf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>pch</name><operator>-&gt;</operator><name>prev_energy_subshort</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>energy_subshort</name><index>[<expr><name>i</name> <operator>+</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>energy_short</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i</name> <operator>/</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>]</index></name> <operator>+=</operator> <name>p</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>energy_subshort</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>/</operator> <name><name>energy_subshort</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>energy_subshort</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>p</name> <operator>*</operator> <literal type="number">10.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>energy_subshort</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>p</name> <operator>*</operator> <literal type="number">10.0f</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>attack_intensity</name><index>[<expr><name>i</name> <operator>+</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>AAC_NUM_BLOCKS_SHORT</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attacks</name><index>[<expr><name>i</name> <operator>/</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>attack_intensity</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pch</name><operator>-&gt;</operator><name>attack_threshold</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>attacks</name><index>[<expr><name>i</name> <operator>/</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>PSY_LAME_NUM_SUBBLOCKS</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AAC_NUM_BLOCKS_SHORT</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>u</name> <init>= <expr><name><name>energy_short</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>v</name> <init>= <expr><name><name>energy_short</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>m</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">40000</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">1.7f</literal> <operator>*</operator> <name>v</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <literal type="number">1.7f</literal> <operator>*</operator> <name>u</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>attacks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>attacks</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>attacks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>attacks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>att_sum</name> <operator>+=</operator> <name><name>attacks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>attacks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>pch</name><operator>-&gt;</operator><name>prev_attack</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>attacks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>att_sum</name> <operator>+=</operator> <name><name>attacks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pch</name><operator>-&gt;</operator><name>prev_attack</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>att_sum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uselongblock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AAC_NUM_BLOCKS_SHORT</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>attacks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>attacks</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>attacks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>uselongblock</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>prev_type</name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lame_apply_block_type</name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wi</name></expr></argument>, <argument><expr><name>uselongblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>window_type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>prev_type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wi</name><operator>.</operator><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>num_windows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>grouping</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wi</name><operator>.</operator><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_START_SEQUENCE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>window_shape</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>window_shape</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lastgrp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>num_windows</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>window_shape</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>pch</name><operator>-&gt;</operator><name>next_grouping</name></name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lastgrp</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wi</name><operator>.</operator><name>grouping</name><index>[<expr><name>lastgrp</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>







<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>attacks</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>grouping</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pch</name><operator>-&gt;</operator><name>next_grouping</name></name> <operator>=</operator> <name><name>window_grouping</name><index>[<expr><name>grouping</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pch</name><operator>-&gt;</operator><name>prev_attack</name></name> <operator>=</operator> <name><name>attacks</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>wi</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>FFPsyModel</name></type> <name>ff_aac_psy_model</name> <init>=
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"3GPP TS 26.403-inspired model"</literal></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>psy_3gpp_init</name></expr>,
<expr><operator>.</operator><name>window</name> <operator>=</operator> <name>psy_lame_window</name></expr>,
<expr><operator>.</operator><name>analyze</name> <operator>=</operator> <name>psy_3gpp_analyze</name></expr>,
<expr><operator>.</operator><name>end</name> <operator>=</operator> <name>psy_3gpp_end</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
