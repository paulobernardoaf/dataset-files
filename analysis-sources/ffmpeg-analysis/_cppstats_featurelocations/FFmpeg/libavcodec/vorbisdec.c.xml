<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vorbisdec.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vorbis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vorbisdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xiph.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_NB_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_NB_BITS2</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_MAX_VLCS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_MAX_PARTITIONS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>vorbis_codebook</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dimensions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lookup_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>maxdepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name>vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>codevectors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_bits</name></decl>;</decl_stmt>
}</block></struct></type> <name>vorbis_codebook</name>;</typedef>

<typedef>typedef <type><name><name>union</name> <name>vorbis_floor_u</name></name></type> <name>vorbis_floor_data</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vorbis_floor0_s</name></name></type> <name>vorbis_floor0</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vorbis_floor1_s</name></name></type> <name>vorbis_floor1</name>;</typedef>
<struct_decl>struct <name>vorbis_context_s</name>;</struct_decl>
<typedef>typedef
<function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>vorbis_floor_decode_func</name>)
<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vorbis_context_s</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vorbis_floor_data</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>vorbis_floor</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>floor_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_floor_decode_func</name></type> <name>decode</name></decl>;</decl_stmt>
<union>union <name>vorbis_floor_u</name> <block>{
<struct>struct <name>vorbis_floor0_s</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bark_map_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>map</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>map_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>amplitude_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>amplitude_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_books</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>book_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>lsp</name></decl>;</decl_stmt>
}</block> <decl><name>t0</name></decl>;</struct>
<struct>struct <name>vorbis_floor1_s</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>partitions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>partition_class</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>class_dimensions</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>class_subclasses</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>class_masterbook</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>subclass_books</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>multiplier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>x_list_dim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_floor1_entry</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
}</block> <decl><name>t1</name></decl>;</struct>
}</block> <decl><name>data</name></decl>;</union>
}</block></struct></type> <name>vorbis_floor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vorbis_residue</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>partition_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>classifications</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>classbook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>books</name><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>maxpass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ptns_to_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>classifs</name></decl>;</decl_stmt>
}</block></struct></type> <name>vorbis_residue</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vorbis_mapping</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>submaps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>coupling_steps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>magnitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>angle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>submap_floor</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>submap_residue</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vorbis_mapping</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vorbis_mode</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>blockflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>windowtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>transformtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>mapping</name></decl>;</decl_stmt>
}</block></struct></type> <name>vorbis_mode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>vorbis_context_s</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VorbisDSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name><name>mdct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>first_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>audio_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>audio_samplerate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitrate_maximum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitrate_nominal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitrate_minimum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>blocksize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name><name>win</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>codebook_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_codebook</name> <modifier>*</modifier></type><name>codebooks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>floor_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_floor</name> <modifier>*</modifier></type><name>floors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>residue_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_residue</name> <modifier>*</modifier></type><name>residues</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>mapping_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_mapping</name> <modifier>*</modifier></type><name>mappings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>mode_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_mode</name> <modifier>*</modifier></type><name>modes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>mode_number</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>previous_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>channel_residues</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>saved</name></decl>;</decl_stmt>
}</block></struct></type> <name>vorbis_context</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(13.1f * atan(0.00074f * (x)) + 2.24f * atan(1.85e-8f * (x) * (x)) + 1e-4f * (x))</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>idx_err_str</name><index>[]</index></name> <init>= <expr><literal type="string">"Index value %d out of range (0 - %d) for %s at %s:%i\n"</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALIDATE_INDEX</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>limit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (idx &gt;= limit) {av_log(vc-&gt;avctx, AV_LOG_ERROR,idx_err_str,(int)(idx), (int)(limit - 1), #idx, __FILE__, __LINE__);return AVERROR_INVALIDDATA;}</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VALIDATED_INDEX</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>limit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{idx = get_bits(gb, bits);VALIDATE_INDEX(idx, limit)}</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>float</name></type> <name>vorbisfloat2float</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>mant</name> <init>= <expr><name>val</name> <operator>&amp;</operator> <literal type="number">0x1fffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>exp</name> <init>= <expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x7fe00000L</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mant</name> <operator>=</operator> <operator>-</operator><name>mant</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>ldexp</name><argument_list>(<argument><expr><name>mant</name></expr></argument>, <argument><expr><name>exp</name> <operator>-</operator> <literal type="number">20</literal> <operator>-</operator> <literal type="number">768</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>vorbis_free</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>channel_residues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>saved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>residues</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>residue_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>residues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>classifs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>residues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>mdct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>mdct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>codebook_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codevectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>floors</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>floor_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>floors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>floor_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>floors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>floors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>floors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>book_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>floors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>lsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>floors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>floors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>mappings</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>mapping_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>magnitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>mappings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_parse_setup_hdr_codebooks</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp_vlc_bits</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp_vlc_codes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>codebook_multiplicands</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>codebook_count</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" Codebooks: %d \n"</literal></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>codebook_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>codebook_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_vlc_bits</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>V_MAX_VLCS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp_vlc_bits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_vlc_codes</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>V_MAX_VLCS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp_vlc_codes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>codebook_multiplicands</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>V_MAX_VLCS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>codebook_multiplicands</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>||</operator>
<operator>!</operator><name>tmp_vlc_bits</name> <operator>||</operator> <operator>!</operator><name>tmp_vlc_codes</name> <operator>||</operator> <operator>!</operator><name>codebook_multiplicands</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cb</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>codebook_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>cb</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vorbis_codebook</name> <modifier>*</modifier></type><name>codebook_setup</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>cb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ordered</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>entries</name></decl>, <decl><type ref="prev"/><name>used_entries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %u. Codebook\n"</literal></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x564342</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">" %u. Codebook setup data corrupt.\n"</literal></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>dimensions</name></name><operator>=</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>dimensions</name></name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>codebook_setup</name><operator>-&gt;</operator><name>dimensions</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">" %u. Codebook's dimension is invalid (%d).\n"</literal></expr></argument>,
<argument><expr><name>cb</name></expr></argument>, <argument><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>dimensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entries</name> <operator>&gt;</operator> <name>V_MAX_VLCS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">" %u. Codebook has too many entries (%u).\n"</literal></expr></argument>,
<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ordered</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" codebook_dimensions %d, codebook_entries %u\n"</literal></expr></argument>,
<argument><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>dimensions</name></name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ordered</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ce</name></decl>, <decl><type ref="prev"/><name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>sparse</name> <init>= <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" not ordered \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sparse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" sparse \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>used_entries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ce</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ce</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><operator>++</operator><name>ce</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tmp_vlc_bits</name><index>[<expr><name>ce</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>used_entries</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp_vlc_bits</name><index>[<expr><name>ce</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" not sparse \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>used_entries</name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ce</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ce</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><operator>++</operator><name>ce</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp_vlc_bits</name><index>[<expr><name>ce</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>current_entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>current_length</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" ordered, current length: %u\n"</literal></expr></argument>, <argument><expr><name>current_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>used_entries</name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>current_entry</name> <operator>&lt;</operator> <name>used_entries</name> <operator>&amp;&amp;</operator> <name>current_length</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><operator>++</operator><name>current_length</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>number</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" number bits: %u "</literal></expr></argument>, <argument><expr><call><name>ilog</name><argument_list>(<argument><expr><name>entries</name> <operator>-</operator> <name>current_entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>ilog</name><argument_list>(<argument><expr><name>entries</name> <operator>-</operator> <name>current_entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" number: %u\n"</literal></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>current_entry</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number</name><operator>+</operator><name>current_entry</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>used_entries</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp_vlc_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>current_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>current_entry</name><operator>+=</operator><name>number</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>current_entry</name><operator>&gt;</operator><name>used_entries</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" More codelengths than codes in codebook. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" lookup type: %d : %s \n"</literal></expr></argument>, <argument><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>lookup_type</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>lookup_type</name></name></expr> ?</condition><then> <expr><literal type="string">"vq"</literal></expr> </then><else>: <expr><literal type="string">"no lookup"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>codebook_lookup_values</name> <init>= <expr><call><name>ff_vorbis_nth_root</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>dimensions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>codebook_minimum_value</name> <init>= <expr><call><name>vorbisfloat2float</name><argument_list>(<argument><expr><call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>codebook_delta_value</name> <init>= <expr><call><name>vorbisfloat2float</name><argument_list>(<argument><expr><call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>codebook_value_bits</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>codebook_sequence_p</name> <init>= <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" We expect %d numbers for building the codevectors. \n"</literal></expr></argument>,
<argument><expr><name>codebook_lookup_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" delta %f minmum %f \n"</literal></expr></argument>,
<argument><expr><name>codebook_delta_value</name></expr></argument>, <argument><expr><name>codebook_minimum_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>codebook_lookup_values</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>codebook_multiplicands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>codebook_value_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" multiplicands*delta+minmum : %e \n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>codebook_multiplicands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>codebook_delta_value</name> <operator>+</operator> <name>codebook_minimum_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" multiplicand %u\n"</literal></expr></argument>, <argument><expr><name><name>codebook_multiplicands</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>used_entries</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>codevectors</name></name> <operator>=</operator>
<call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>used_entries</name></expr></argument>, <argument><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>dimensions</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>codebook_setup</name><operator>-&gt;</operator><name>codevectors</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>codebook_setup</name><operator>-&gt;</operator><name>codevectors</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>codevectors</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dim</name> <init>= <expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>dimensions</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmp_vlc_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>last</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lookup_offset</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Lookup offset %u ,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>multiplicand_offset</name> <init>= <expr><name>lookup_offset</name> <operator>%</operator> <name>codebook_lookup_values</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>codevectors</name><index>[<expr><name>j</name> <operator>*</operator> <name>dim</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <name><name>codebook_multiplicands</name><index>[<expr><name>multiplicand_offset</name></expr>]</index></name> <operator>*</operator> <name>codebook_delta_value</name> <operator>+</operator> <name>codebook_minimum_value</name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codebook_sequence_p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>codebook_setup</name><operator>-&gt;</operator><name>codevectors</name><index>[<expr><name>j</name> <operator>*</operator> <name>dim</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lookup_offset</name><operator>/=</operator><name>codebook_lookup_values</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tmp_vlc_bits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>tmp_vlc_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"real lookup offset %u, vector: "</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">" %f "</literal></expr></argument>,
<argument><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>codevectors</name><index>[<expr><name>j</name> <operator>*</operator> <name>dim</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>used_entries</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bug in codevector vector building code. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>entries</name> <operator>=</operator> <name>used_entries</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codebook lookup type not supported. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ff_vorbis_len2vlc</name><argument_list>(<argument><expr><name>tmp_vlc_bits</name></expr></argument>, <argument><expr><name>tmp_vlc_codes</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Invalid code lengths while generating vlcs. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>maxdepth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>tmp_vlc_bits</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>codebook_setup</name><operator>-&gt;</operator><name>maxdepth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>maxdepth</name></name> <operator>=</operator> <name><name>tmp_vlc_bits</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>maxdepth</name></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>*</operator> <name>V_NB_BITS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>nb_bits</name></name> <operator>=</operator> <name>V_NB_BITS2</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>nb_bits</name></name> <operator>=</operator> <name>V_NB_BITS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>maxdepth</name></name> <operator>=</operator> <operator>(</operator><name><name>codebook_setup</name><operator>-&gt;</operator><name>maxdepth</name></name><operator>+</operator><name><name>codebook_setup</name><operator>-&gt;</operator><name>nb_bits</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>codebook_setup</name><operator>-&gt;</operator><name>nb_bits</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>codebook_setup</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>, <argument><expr><name><name>codebook_setup</name><operator>-&gt;</operator><name>nb_bits</name></name></expr></argument>,
<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>tmp_vlc_bits</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp_vlc_bits</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp_vlc_bits</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tmp_vlc_codes</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp_vlc_codes</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp_vlc_codes</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>INIT_VLC_LE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Error generating vlc tables. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmp_vlc_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmp_vlc_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>codebook_multiplicands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>


<label><name>error</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmp_vlc_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmp_vlc_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>codebook_multiplicands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_parse_setup_hdr_tdtransforms</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>vorbis_time_count</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vorbis_time_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>vorbis_tdtransform</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" Vorbis time domain transform %u: %u\n"</literal></expr></argument>,
<argument><expr><name>vorbis_time_count</name></expr></argument>, <argument><expr><name>vorbis_tdtransform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vorbis_tdtransform</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Vorbis time domain transform data nonzero. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_floor0_decode</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>,
<parameter><decl><type><name>vorbis_floor_data</name> <modifier>*</modifier></type><name>vfu</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>create_map</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>floor_number</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_floor1_decode</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>,
<parameter><decl><type><name>vorbis_floor_data</name> <modifier>*</modifier></type><name>vfu</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_parse_setup_hdr_floors</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>floor_count</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>floors</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>floor_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vc</name><operator>-&gt;</operator><name>floors</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>floors</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>floor_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vorbis_floor</name> <modifier>*</modifier></type><name>floor_setup</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>floors</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>floor_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %d. floor type %d \n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>floor_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>floor_setup</name><operator>-&gt;</operator><name>floor_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>maximum_class</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>rangebits</name></decl>, <decl><type ref="prev"/><name>rangemax</name></decl>, <decl><type ref="prev"/><name>floor1_values</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>decode</name></name> <operator>=</operator> <name>vorbis_floor1_decode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partitions</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %d.floor: %d partitions \n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partitions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partitions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partition_class</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partition_class</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>maximum_class</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maximum_class</name> <operator>=</operator> <name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partition_class</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %d. floor %d partition class %d \n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partition_class</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" maximum class %d \n"</literal></expr></argument>, <argument><expr><name>maximum_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>maximum_class</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>class_dimensions</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>class_subclasses</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %d floor %d class dim: %d subclasses %d \n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>class_dimensions</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>class_subclasses</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>class_subclasses</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<macro><name>GET_VALIDATED_INDEX</name><argument_list>(<argument>floor_setup-&gt;data.t1.class_masterbook[j]</argument>, <argument><literal type="number">8</literal></argument>, <argument>vc-&gt;codebook_count</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" masterbook: %d \n"</literal></expr></argument>, <argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>class_masterbook</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>class_subclasses</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name>bits</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<macro><name>VALIDATE_INDEX</name><argument_list>(<argument>bits</argument>, <argument>vc-&gt;codebook_count</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>subclass_books</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" book %d. : %d \n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>subclass_books</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>multiplier</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>x_list_dim</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partitions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>x_list_dim</name></name><operator>+=</operator><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>class_dimensions</name><index>[<expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partition_class</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>list</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>x_list_dim</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>list</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rangebits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rangebits</name> <operator>&amp;&amp;</operator> <name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partitions</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"A rangebits value of 0 is not compliant with the Vorbis I specification.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rangemax</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>rangebits</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rangemax</name> <operator>&gt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Floor value is too large for blocksize: %u (%"</literal><name>PRIu32</name><literal type="string">")\n"</literal></expr></argument>,
<argument><expr><name>rangemax</name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>rangemax</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partitions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>class_dimensions</name><index>[<expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>partition_class</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr><operator>,</operator> <expr><operator>++</operator><name>floor1_values</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>list</name><index>[<expr><name>floor1_values</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rangebits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %u. floor1 Y coord. %d\n"</literal></expr></argument>, <argument><expr><name>floor1_values</name></expr></argument>,
<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>list</name><index>[<expr><name>floor1_values</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>ff_vorbis_ready_floor1_list</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,
<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>list</name></name></expr></argument>,
<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t1</name><operator>.</operator><name>x_list_dim</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>floor_setup</name><operator>-&gt;</operator><name>floor_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max_codebook_dim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>decode</name></name> <operator>=</operator> <name>vorbis_floor0_decode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>order</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>order</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Floor 0 order is 0.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Floor 0 rate is 0.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>bark_map_size</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>bark_map_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Floor 0 bark map size is 0.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>amplitude_bits</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>amplitude_offset</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>num_books</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>book_list</name></name> <operator>=</operator>
<call><name>av_malloc</name><argument_list>(<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>num_books</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>book_list</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>book_idx</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>num_books</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
<macro><name>GET_VALIDATED_INDEX</name><argument_list>(<argument>book_idx</argument>, <argument><literal type="number">8</literal></argument>, <argument>vc-&gt;codebook_count</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>book_list</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>book_idx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>book_idx</name></expr>]</index></name><operator>.</operator><name>dimensions</name> <operator>&gt;</operator> <name>max_codebook_dim</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_codebook_dim</name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>book_idx</name></expr>]</index></name><operator>.</operator><name>dimensions</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>create_map</name><argument_list>(<argument><expr><name>vc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>lsp</name></name> <operator>=</operator>
<call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>(</operator><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>order</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>max_codebook_dim</name><operator>)</operator></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>lsp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>lsp</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 order: %u\n"</literal></expr></argument>, <argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 rate: %u\n"</literal></expr></argument>, <argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 bark map size: %u\n"</literal></expr></argument>,
<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>bark_map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 amplitude bits: %u\n"</literal></expr></argument>,
<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>amplitude_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 amplitude offset: %u\n"</literal></expr></argument>,
<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>amplitude_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 number of books: %u\n"</literal></expr></argument>,
<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>num_books</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 book list pointer: %p\n"</literal></expr></argument>,
<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>book_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>num_books</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" Book %d: %u\n"</literal></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>floor_setup</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>book_list</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid floor type!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_parse_setup_hdr_residues</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>residue_count</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>residues</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>residue_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vc</name><operator>-&gt;</operator><name>residues</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>residues</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" There are %d residues. \n"</literal></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>residue_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>residue_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vorbis_residue</name> <modifier>*</modifier></type><name>res_setup</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>residues</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cascade</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>high_bits</name></decl>, <decl><type ref="prev"/><name>low_bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res_setup</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %u. residue type %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res_setup</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res_setup</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res_setup</name><operator>-&gt;</operator><name>partition_size</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res_setup</name><operator>-&gt;</operator><name>begin</name></name><operator>&gt;</operator><name><name>res_setup</name><operator>-&gt;</operator><name>end</name></name> <operator>||</operator>
<operator>(</operator><name><name>res_setup</name><operator>-&gt;</operator><name>end</name></name><operator>-</operator><name><name>res_setup</name><operator>-&gt;</operator><name>begin</name></name><operator>)</operator> <operator>/</operator> <name><name>res_setup</name><operator>-&gt;</operator><name>partition_size</name></name> <operator>&gt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>V_MAX_PARTITIONS</name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"partition out of bounds: type, begin, end, size, blocksize: %"</literal><name>PRIu16</name><literal type="string">", %"</literal><name>PRIu32</name><literal type="string">", %"</literal><name>PRIu32</name><literal type="string">", %u, %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>begin</name></name></expr></argument>, <argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>end</name></name></expr></argument>,
<argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>partition_size</name></name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res_setup</name><operator>-&gt;</operator><name>classifications</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<macro><name>GET_VALIDATED_INDEX</name><argument_list>(<argument>res_setup-&gt;classbook</argument>, <argument><literal type="number">8</literal></argument>, <argument>vc-&gt;codebook_count</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>res_setup</name><operator>-&gt;</operator><name>ptns_to_read</name></name> <operator>=</operator>
<operator>(</operator><name><name>res_setup</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>res_setup</name><operator>-&gt;</operator><name>begin</name></name><operator>)</operator> <operator>/</operator> <name><name>res_setup</name><operator>-&gt;</operator><name>partition_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res_setup</name><operator>-&gt;</operator><name>classifs</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>ptns_to_read</name></name></expr></argument>,
<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>res_setup</name><operator>-&gt;</operator><name>classifs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>res_setup</name><operator>-&gt;</operator><name>classifs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" begin %"</literal><name>PRIu32</name><literal type="string">" end %"</literal><name>PRIu32</name><literal type="string">" part.size %u classif.s %"</literal><name>PRIu8</name><literal type="string">" classbook %"</literal><name>PRIu8</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>begin</name></name></expr></argument>, <argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>partition_size</name></name></expr></argument>,
<argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>classifications</name></name></expr></argument>, <argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>classbook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>res_setup</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>high_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>low_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>high_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cascade</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>high_bits</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>low_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %u class cascade depth: %d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>ilog</name><argument_list>(<argument><expr><name><name>cascade</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>res_setup</name><operator>-&gt;</operator><name>maxpass</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>res_setup</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cascade</name><index>[<expr><name>j</name></expr>]</index></name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<macro><name>GET_VALIDATED_INDEX</name><argument_list>(<argument>res_setup-&gt;books[j][k]</argument>, <argument><literal type="number">8</literal></argument>, <argument>vc-&gt;codebook_count</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %u class cascade depth %u book: %d\n"</literal></expr></argument>,
<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>res_setup</name><operator>-&gt;</operator><name>books</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name><operator>&gt;</operator><name><name>res_setup</name><operator>-&gt;</operator><name>maxpass</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>res_setup</name><operator>-&gt;</operator><name>maxpass</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>res_setup</name><operator>-&gt;</operator><name>books</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_parse_setup_hdr_mappings</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>mapping_count</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>mappings</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>mapping_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vc</name><operator>-&gt;</operator><name>mappings</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>mappings</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" There are %d mappings. \n"</literal></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>mapping_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>mapping_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vorbis_mapping</name> <modifier>*</modifier></type><name>mapping_setup</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Other mappings than type 0 are not compliant with the Vorbis I specification. \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>submaps</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>submaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>coupling_steps</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Square polar channel mapping with less than two channels is not compliant with the Vorbis I specification.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>coupling_steps</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mapping_setup</name><operator>-&gt;</operator><name>magnitude</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>angle</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>coupling_steps</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mapping_setup</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mapping_setup</name><operator>-&gt;</operator><name>angle</name></name> <operator>||</operator> <operator>!</operator><name><name>mapping_setup</name><operator>-&gt;</operator><name>magnitude</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>mapping_setup</name><operator>-&gt;</operator><name>coupling_steps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<macro><name>GET_VALIDATED_INDEX</name><argument_list>(<argument>mapping_setup-&gt;magnitude[j]</argument>, <argument>ilog(vc-&gt;audio_channels - <literal type="number">1</literal>)</argument>, <argument>vc-&gt;audio_channels</argument>)</argument_list></macro>
<macro><name>GET_VALIDATED_INDEX</name><argument_list>(<argument>mapping_setup-&gt;angle[j]</argument>, <argument>ilog(vc-&gt;audio_channels - <literal type="number">1</literal>)</argument>, <argument>vc-&gt;audio_channels</argument>)</argument_list></macro>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>coupling_steps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %u mapping coupling steps: %d\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>coupling_steps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%u. mapping setup data invalid.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>submaps</name></name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>mux</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mapping_setup</name><operator>-&gt;</operator><name>mux</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mapping_setup</name><operator>-&gt;</operator><name>mux</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>mux</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>mapping_setup</name><operator>-&gt;</operator><name>submaps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<macro><name>GET_VALIDATED_INDEX</name><argument_list>(<argument>mapping_setup-&gt;submap_floor[j]</argument>, <argument><literal type="number">8</literal></argument>, <argument>vc-&gt;floor_count</argument>)</argument_list></macro>
<macro><name>GET_VALIDATED_INDEX</name><argument_list>(<argument>mapping_setup-&gt;submap_residue[j]</argument>, <argument><literal type="number">8</literal></argument>, <argument>vc-&gt;residue_count</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %u mapping %u submap : floor %d, residue %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>submap_floor</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>mapping_setup</name><operator>-&gt;</operator><name>submap_residue</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>create_map</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>floor_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vorbis_floor</name> <modifier>*</modifier></type><name>floors</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>floors</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_floor0</name> <modifier>*</modifier></type><name>vf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blockflag</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blockflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blockflag</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>blockflag</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><name>blockflag</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floors</name><index>[<expr><name>floor_number</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>map</name><index>[<expr><name>blockflag</name></expr>]</index></name> <operator>=</operator>
<call><name>av_malloc_array</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>floors</name><index>[<expr><name>floor_number</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>map</name><index>[<expr><name>blockflag</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>floors</name><index>[<expr><name>floor_number</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>t0</name><operator>.</operator><name>map</name><index>[<expr><name>blockflag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vf</name> <operator>=</operator> <operator>&amp;</operator><name><name>floors</name><index>[<expr><name>floor_number</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>t0</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><call><name>BARK</name><argument_list>(<argument><expr><operator>(</operator><name><name>vf</name><operator>-&gt;</operator><name>rate</name></name> <operator>*</operator> <name>idx</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2.0f</literal> <operator>*</operator> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator>
<operator>(</operator><name><name>vf</name><operator>-&gt;</operator><name>bark_map_size</name></name> <operator>/</operator> <call><name>BARK</name><argument_list>(<argument><expr><name><name>vf</name><operator>-&gt;</operator><name>rate</name></name> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vf</name><operator>-&gt;</operator><name>bark_map_size</name></name><operator>-</operator><literal type="number">1</literal> <operator>&lt;</operator> <name><name>map</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>vf</name><operator>-&gt;</operator><name>bark_map_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vf</name><operator>-&gt;</operator><name>map_size</name><index>[<expr><name>blockflag</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 map: map at pos %d is %"</literal><name>PRId32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>map</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_parse_setup_hdr_modes</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>mode_count</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>modes</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>mode_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vc</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>modes</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" There are %d modes.\n"</literal></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>mode_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>mode_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vorbis_mode</name> <modifier>*</modifier></type><name>mode_setup</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mode_setup</name><operator>-&gt;</operator><name>blockflag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mode_setup</name><operator>-&gt;</operator><name>windowtype</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mode_setup</name><operator>-&gt;</operator><name>transformtype</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>GET_VALIDATED_INDEX</name><argument_list>(<argument><expr><name><name>mode_setup</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>mapping_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" %u mode: blockflag %d, windowtype %d, transformtype %d, mapping %d\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>mode_setup</name><operator>-&gt;</operator><name>blockflag</name></name></expr></argument>, <argument><expr><name><name>mode_setup</name><operator>-&gt;</operator><name>windowtype</name></name></expr></argument>,
<argument><expr><name><name>mode_setup</name><operator>-&gt;</operator><name>transformtype</name></name></expr></argument>, <argument><expr><name><name>mode_setup</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_parse_setup_hdr</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'v'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'o'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'r'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'b'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'i'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'s'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Vorbis setup header packet corrupt (no vorbis signature). \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vorbis_parse_setup_hdr_codebooks</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Vorbis setup header packet corrupt (codebooks). \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vorbis_parse_setup_hdr_tdtransforms</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Vorbis setup header packet corrupt (time domain transforms). \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vorbis_parse_setup_hdr_floors</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Vorbis setup header packet corrupt (floors). \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vorbis_parse_setup_hdr_residues</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Vorbis setup header packet corrupt (residues). \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vorbis_parse_setup_hdr_mappings</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Vorbis setup header packet corrupt (mappings). \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vorbis_parse_setup_hdr_modes</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Vorbis setup header packet corrupt (modes). \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Vorbis setup header packet corrupt (framing flag). \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_parse_id_hdr</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bl0</name></decl>, <decl><type ref="prev"/><name>bl1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'v'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'o'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'r'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'b'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'i'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'s'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Vorbis id header packet corrupt (no vorbis signature). \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>audio_samplerate</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>audio_samplerate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid samplerate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>bitrate_maximum</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>bitrate_nominal</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>bitrate_minimum</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bl0</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bl1</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bl0</name> <operator>&gt;</operator> <literal type="number">13</literal> <operator>||</operator> <name><name>bl0</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">6</literal> <operator>||</operator> <name>bl1</name></expr></argument> &gt;</argument_list></name> <literal type="number">13</literal> <operator>||</operator> <name>bl1</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> <name>bl1</name> <operator>&lt;</operator> <name>bl0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Vorbis id header packet corrupt (illegal blocksize). \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bl0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bl1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>win</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_vorbis_vwin</name><index>[<expr><name>bl0</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>win</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_vorbis_vwin</name><index>[<expr><name>bl1</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Vorbis id header packet corrupt (framing flag not set). \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>channel_residues</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vc</name><operator>-&gt;</operator><name>channel_residues</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>saved</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vc</name><operator>-&gt;</operator><name>saved</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>channel_residues</name></name> <operator>||</operator> <operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>saved</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>previous_window</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>mdct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bl0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>mdct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bl1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" vorbis version %"</literal><name>PRIu32</name><literal type="string">" \n audio_channels %"</literal><name>PRIu8</name><literal type="string">" \n audio_samplerate %"</literal><name>PRIu32</name><literal type="string">" \n bitrate_max %"</literal><name>PRIu32</name><literal type="string">" \n bitrate_nom %"</literal><name>PRIu32</name><literal type="string">" \n bitrate_min %"</literal><name>PRIu32</name><literal type="string">" \n blk_0 %"</literal><name>PRIu32</name><literal type="string">" blk_1 %"</literal><name>PRIu32</name><literal type="string">" \n "</literal></expr></argument>,
<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>audio_samplerate</name></name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>bitrate_maximum</name></name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>bitrate_nominal</name></name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>bitrate_minimum</name></name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vorbis_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>headers</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>headers_len</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>header_start</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>header_len</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hdr_type</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vorbisdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>headers_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extradata missing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avpriv_split_xiph_headers</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>headers_len</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>header_start</name></expr></argument>, <argument><expr><name>header_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extradata corrupt.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>header_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>header_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr_type</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hdr_type</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"First header is not the id header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vorbis_parse_id_hdr</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Id header corrupt.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vorbis_free</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>header_start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>header_len</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr_type</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hdr_type</name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Third header is not the setup header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vorbis_free</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vorbis_parse_setup_hdr</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Setup header corrupt.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vorbis_free</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>ff_vorbis_channel_layouts</name><index>[<expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_samplerate</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_floor0_decode</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>,
<parameter><decl><type><name>vorbis_floor_data</name> <modifier>*</modifier></type><name>vfu</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vorbis_floor0</name> <modifier>*</modifier></type><name>vf</name> <init>= <expr><operator>&amp;</operator><name><name>vfu</name><operator>-&gt;</operator><name>t0</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>lsp</name> <init>= <expr><name><name>vf</name><operator>-&gt;</operator><name>lsp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>book_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>amplitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>blockflag</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name><name>vc</name><operator>-&gt;</operator><name>mode_number</name></name></expr>]</index></name><operator>.</operator><name>blockflag</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vf</name><operator>-&gt;</operator><name>amplitude_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>amplitude</name> <operator>=</operator> <call><name>get_bits64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>vf</name><operator>-&gt;</operator><name>amplitude_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>amplitude</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>lsp_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_codebook</name></type> <name>codebook</name></decl>;</decl_stmt>

<expr_stmt><expr><name>book_idx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><call><name>ilog</name><argument_list>(<argument><expr><name><name>vf</name><operator>-&gt;</operator><name>num_books</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>book_idx</name> <operator>&gt;=</operator> <name><name>vf</name><operator>-&gt;</operator><name>num_books</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"floor0 dec: booknumber too high!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>book_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 dec: booknumber: %u\n"</literal></expr></argument>, <argument><expr><name>book_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>codebook</name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name><name>vf</name><operator>-&gt;</operator><name>book_list</name><index>[<expr><name>book_idx</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>codebook</name><operator>.</operator><name>codevectors</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>lsp_len</name><operator>&lt;</operator><name><name>vf</name><operator>-&gt;</operator><name>order</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vec_off</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 dec: book dimension: %d\n"</literal></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>dimensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 dec: maximum depth: %d\n"</literal></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>maxdepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec_off</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>,
<argument><expr><name><name>codebook</name><operator>.</operator><name>nb_bits</name></name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>maxdepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vec_off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vec_off</name> <operator>*=</operator> <name><name>codebook</name><operator>.</operator><name>dimensions</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 dec: vector offset: %d\n"</literal></expr></argument>, <argument><expr><name>vec_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>codebook</name><operator>.</operator><name>dimensions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>lsp_len</name><operator>+</operator><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>vec_off</name><operator>+</operator><name>idx</name></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>lsp</name><index>[<expr><name>lsp_len</name><operator>+</operator><name>idx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>lsp_len</name> <operator>+=</operator> <name><name>codebook</name><operator>.</operator><name>dimensions</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>lsp_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 dec: coeff at %d is %f\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>lsp</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>order</name> <init>= <expr><name><name>vf</name><operator>-&gt;</operator><name>order</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>wstep</name> <init>= <expr><name>M_PI</name> <operator>/</operator> <name><name>vf</name><operator>-&gt;</operator><name>bark_map_size</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor0 synth: map_size = %"</literal><name>PRIu32</name><literal type="string">"; m = %d; wstep = %f\n"</literal></expr></argument>,
<argument><expr><name><name>vf</name><operator>-&gt;</operator><name>map_size</name><index>[<expr><name>blockflag</name></expr>]</index></name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>wstep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>vf</name><operator>-&gt;</operator><name>map_size</name><index>[<expr><name>blockflag</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>iter_cond</name> <init>= <expr><name><name>vf</name><operator>-&gt;</operator><name>map</name><index>[<expr><name>blockflag</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>p</name> <init>= <expr><literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>q</name> <init>= <expr><literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>two_cos_w</name> <init>= <expr><literal type="number">2.0f</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>wstep</name> <operator>*</operator> <name>iter_cond</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>*=</operator> <name><name>lsp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>two_cos_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>*=</operator> <name><name>lsp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>two_cos_w</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>order</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>p</name> <operator>*=</operator> <name>p</name> <operator>*</operator> <operator>(</operator><literal type="number">2.0f</literal> <operator>-</operator> <name>two_cos_w</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>*=</operator> <name>q</name> <operator>*</operator> <operator>(</operator><literal type="number">2.0f</literal> <operator>+</operator> <name>two_cos_w</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>q</name> <operator>*=</operator> <name>two_cos_w</name><operator>-</operator><name><name>lsp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt> 


<expr_stmt><expr><name>p</name> <operator>*=</operator> <name>p</name> <operator>*</operator> <operator>(</operator><literal type="number">4.f</literal> <operator>-</operator> <name>two_cos_w</name> <operator>*</operator> <name>two_cos_w</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>*=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>q</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>amplitude</name><operator>*</operator><name><name>vf</name><operator>-&gt;</operator><name>amplitude_offset</name></name><operator>)</operator> <operator>/</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>vf</name><operator>-&gt;</operator><name>amplitude_bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>q</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>
<operator>-</operator> <name><name>vf</name><operator>-&gt;</operator><name>amplitude_offset</name></name><operator>)</operator> <operator>*</operator> <literal type="number">.11512925f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>vf</name><operator>-&gt;</operator><name>map</name><index>[<expr><name>blockflag</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>iter_cond</name></expr>)</condition>;</do>
</block_content>}</block></while>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" Floor0 decoded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_floor1_decode</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>,
<parameter><decl><type><name>vorbis_floor_data</name> <modifier>*</modifier></type><name>vfu</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vorbis_floor1</name> <modifier>*</modifier></type><name>vf</name> <init>= <expr><operator>&amp;</operator><name><name>vfu</name><operator>-&gt;</operator><name>t1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>range_v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>range</name> <init>= <expr><name><name>range_v</name><index>[<expr><name><name>vf</name><operator>-&gt;</operator><name>multiplier</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>floor1_Y</name><index>[<expr><literal type="number">258</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>floor1_Y_final</name><index>[<expr><literal type="number">258</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>floor1_flag</name><index>[<expr><literal type="number">258</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>partition_class</name></decl>, <decl><type ref="prev"/><name>cdim</name></decl>, <decl><type ref="prev"/><name>cbits</name></decl>, <decl><type ref="prev"/><name>csub</name></decl>, <decl><type ref="prev"/><name>cval</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>book</name></decl>, <decl><type ref="prev"/><name>adx</name></decl>, <decl><type ref="prev"/><name>ady</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>, <decl><type ref="prev"/><name>off</name></decl>, <decl><type ref="prev"/><name>predicted</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>floor1_Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>ilog</name><argument_list>(<argument><expr><name>range</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor1_Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>ilog</name><argument_list>(<argument><expr><name>range</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"floor 0 Y %d floor 1 Y %d \n"</literal></expr></argument>, <argument><expr><name><name>floor1_Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>floor1_Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vf</name><operator>-&gt;</operator><name>partitions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>partition_class</name> <operator>=</operator> <name><name>vf</name><operator>-&gt;</operator><name>partition_class</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cdim</name> <operator>=</operator> <name><name>vf</name><operator>-&gt;</operator><name>class_dimensions</name><index>[<expr><name>partition_class</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbits</name> <operator>=</operator> <name><name>vf</name><operator>-&gt;</operator><name>class_subclasses</name><index>[<expr><name>partition_class</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>csub</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cbits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Cbits %u\n"</literal></expr></argument>, <argument><expr><name>cbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cbits</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>cval</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name><name>vf</name><operator>-&gt;</operator><name>class_masterbook</name><index>[<expr><name>partition_class</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>,
<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name><name>vf</name><operator>-&gt;</operator><name>class_masterbook</name><index>[<expr><name>partition_class</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>nb_bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>cdim</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>book</name> <operator>=</operator> <name><name>vf</name><operator>-&gt;</operator><name>subclass_books</name><index>[<expr><name>partition_class</name></expr>]</index><index>[<expr><name>cval</name> <operator>&amp;</operator> <name>csub</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"book %d Cbits %u cval %u bits:%d\n"</literal></expr></argument>,
<argument><expr><name>book</name></expr></argument>, <argument><expr><name>cbits</name></expr></argument>, <argument><expr><name>cval</name></expr></argument>, <argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cval</name> <operator>=</operator> <name>cval</name> <operator>&gt;&gt;</operator> <name>cbits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>book</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>book</name></expr>]</index></name><operator>.</operator><name><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>,
<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>book</name></expr>]</index></name><operator>.</operator><name>nb_bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>floor1_Y</name><index>[<expr><name>offset</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>floor1_Y</name><index>[<expr><name>offset</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" floor(%d) = %d \n"</literal></expr></argument>,
<argument><expr><name><name>vf</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>offset</name><operator>+</operator><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>floor1_Y</name><index>[<expr><name>offset</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>offset</name><operator>+=</operator><name>cdim</name></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name><name>floor1_flag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor1_flag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor1_Y_final</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>floor1_Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor1_Y_final</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>floor1_Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vf</name><operator>-&gt;</operator><name>x_list_dim</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>highroom</name></decl>, <decl><type ref="prev"/><name>lowroom</name></decl>, <decl><type ref="prev"/><name>room</name></decl>, <decl><type ref="prev"/><name>high_neigh_offs</name></decl>, <decl><type ref="prev"/><name>low_neigh_offs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>low_neigh_offs</name> <operator>=</operator> <name><name>vf</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>low</name></expr>;</expr_stmt>
<expr_stmt><expr><name>high_neigh_offs</name> <operator>=</operator> <name><name>vf</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>high</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>floor1_Y_final</name><index>[<expr><name>high_neigh_offs</name></expr>]</index></name> <operator>-</operator> <name><name>floor1_Y_final</name><index>[<expr><name>low_neigh_offs</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>adx</name> <operator>=</operator> <name><name>vf</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>high_neigh_offs</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>vf</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>low_neigh_offs</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ady</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ady</name> <operator>*</operator> <operator>(</operator><name><name>vf</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>vf</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>low_neigh_offs</name></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>err</name> <operator>/</operator> <name>adx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>predicted</name> <operator>=</operator> <name><name>floor1_Y_final</name><index>[<expr><name>low_neigh_offs</name></expr>]</index></name> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>predicted</name> <operator>=</operator> <name><name>floor1_Y_final</name><index>[<expr><name>low_neigh_offs</name></expr>]</index></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>floor1_Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>highroom</name> <operator>=</operator> <name>range</name><operator>-</operator><name>predicted</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lowroom</name> <operator>=</operator> <name>predicted</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>highroom</name> <operator>&lt;</operator> <name>lowroom</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>=</operator> <name>highroom</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>room</name> <operator>=</operator> <name>lowroom</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>floor1_flag</name><index>[<expr><name>low_neigh_offs</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor1_flag</name><index>[<expr><name>high_neigh_offs</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor1_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>room</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>highroom</name> <operator>&gt;</operator> <name>lowroom</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>floor1_Y_final</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name>val</name> <operator>-</operator> <name>lowroom</name> <operator>+</operator> <name>predicted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>floor1_Y_final</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name>predicted</name> <operator>-</operator> <name>val</name> <operator>+</operator> <name>highroom</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>floor1_Y_final</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name>predicted</name> <operator>-</operator> <operator>(</operator><name>val</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>floor1_Y_final</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name>predicted</name> <operator>+</operator> <name>val</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>floor1_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>floor1_Y_final</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name>predicted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" Decoded floor(%d) = %u / val %u\n"</literal></expr></argument>,
<argument><expr><name><name>vf</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>floor1_Y_final</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>ff_vorbis_floor1_render_list</name><argument_list>(<argument><expr><name><name>vf</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>vf</name><operator>-&gt;</operator><name>x_list_dim</name></name></expr></argument>, <argument><expr><name>floor1_Y_final</name></expr></argument>, <argument><expr><name>floor1_flag</name></expr></argument>, <argument><expr><name><name>vf</name><operator>-&gt;</operator><name>multiplier</name></name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>vf</name><operator>-&gt;</operator><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" Floor decoded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>setup_classifs</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>,
<parameter><decl><type><name>vorbis_residue</name> <modifier>*</modifier></type><name>vr</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>do_not_decode</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ch_used</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>partition_count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ptns_to_read</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vorbis_codebook</name> <modifier>*</modifier></type><name>codebook</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>+</operator> <name><name>vr</name><operator>-&gt;</operator><name>classbook</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>c_p_c</name> <init>= <expr><name><name>codebook</name><operator>-&gt;</operator><name>dimensions</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>inverse_class</name> <init>= <expr><name><name>ff_inverse</name><index>[<expr><name><name>vr</name><operator>-&gt;</operator><name>classifications</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ch_used</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>do_not_decode</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>codebook</name><operator>-&gt;</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>,
<argument><expr><name><name>codebook</name><operator>-&gt;</operator><name>nb_bits</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Classword: %u\n"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>temp</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid vlc code decoding %d channel."</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vr</name><operator>-&gt;</operator><name>classifications</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>partition_count</name> <operator>+</operator> <name>c_p_c</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>partition_count</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ptns_to_read</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vr</name><operator>-&gt;</operator><name>classifs</name><index>[<expr><name>p</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>partition_count</name> <operator>+</operator> <name>c_p_c</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>partition_count</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>temp2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>temp</name><operator>)</operator> <operator>*</operator> <name>inverse_class</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ptns_to_read</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vr</name><operator>-&gt;</operator><name>classifs</name><index>[<expr><name>p</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>temp</name> <operator>-</operator> <name>temp2</name> <operator>*</operator> <name><name>vr</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>ptns_to_read</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vorbis_residue_decode_internal</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>,
<parameter><decl><type><name>vorbis_residue</name> <modifier>*</modifier></type><name>vr</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>do_not_decode</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>vlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ch_left</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>vr_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>c_p_c</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name><name>vr</name><operator>-&gt;</operator><name>classbook</name></name></expr>]</index></name><operator>.</operator><name>dimensions</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>classifs</name> <init>= <expr><name><name>vr</name><operator>-&gt;</operator><name>classifs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pass</name></decl>, <decl><type ref="prev"/><name>ch_used</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max_output</name> <init>= <expr><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>vlen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ptns_to_read</name> <init>= <expr><name><name>vr</name><operator>-&gt;</operator><name>ptns_to_read</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>libvorbis_bug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vr_type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ch</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>do_not_decode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <name><name>do_not_decode</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 
<if_stmt><if>if <condition>(<expr><name><name>do_not_decode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ch_used</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max_output</name> <operator>+=</operator> <name><name>vr</name><operator>-&gt;</operator><name>end</name></name> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ch_used</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_output</name> <operator>+=</operator> <name><name>vr</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_output</name> <operator>&gt;</operator> <name>ch_left</name> <operator>*</operator> <name>vlen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_output</name> <operator>&lt;=</operator> <name>ch_left</name> <operator>*</operator> <name>vlen</name> <operator>+</operator> <name><name>vr</name><operator>-&gt;</operator><name>partition_size</name></name><operator>*</operator><name>ch_used</name><operator>/</operator><name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptns_to_read</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>libvorbis_bug</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient output buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" residue type 0/1/2 decode begin, ch: %d cpc %d \n"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>c_p_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pass</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pass</name> <operator>&lt;=</operator> <name><name>vr</name><operator>-&gt;</operator><name>maxpass</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>pass</name></expr></incr>)</control> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>voffset</name></decl>, <decl><type ref="prev"/><name>partition_count</name></decl>, <decl><type ref="prev"/><name>j_times_ptns_to_read</name></decl>;</decl_stmt>

<expr_stmt><expr><name>voffset</name> <operator>=</operator> <name><name>vr</name><operator>-&gt;</operator><name>begin</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>partition_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>partition_count</name> <operator>&lt;</operator> <name>ptns_to_read</name></expr>;</condition><incr/>)</control> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pass</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>setup_classifs</name><argument_list>(<argument><expr><name>vc</name></expr></argument>, <argument><expr><name>vr</name></expr></argument>, <argument><expr><name>do_not_decode</name></expr></argument>, <argument><expr><name>ch_used</name></expr></argument>, <argument><expr><name>partition_count</name></expr></argument>, <argument><expr><name>ptns_to_read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>c_p_c</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>partition_count</name> <operator>&lt;</operator> <name>ptns_to_read</name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j_times_ptns_to_read</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ch_used</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>voffs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>do_not_decode</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>vqclass</name> <init>= <expr><name><name>classifs</name><index>[<expr><name>j_times_ptns_to_read</name> <operator>+</operator> <name>partition_count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vqbook</name> <init>= <expr><name><name>vr</name><operator>-&gt;</operator><name>books</name><index>[<expr><name>vqclass</name></expr>]</index><index>[<expr><name>pass</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vqbook</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>vqbook</name></expr>]</index></name><operator>.</operator><name>codevectors</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>coffs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dim</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>vqbook</name></expr>]</index></name><operator>.</operator><name>dimensions</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>step</name> <init>= <expr><call><name>FASTDIV</name><argument_list>(<argument><expr><name><name>vr</name><operator>-&gt;</operator><name>partition_size</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dim</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_codebook</name></type> <name>codebook</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>vqbook</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vr_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>voffs</name> <operator>=</operator> <name>voffset</name><operator>+</operator><name>j</name><operator>*</operator><name>vlen</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>coffs</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>nb_bits</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coffs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>coffs</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>coffs</name> <operator>*=</operator> <name>dim</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>voffs</name> <operator>+</operator> <name>k</name> <operator>+</operator> <name>l</name> <operator>*</operator> <name>step</name></expr>]</index></name> <operator>+=</operator> <name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name> <operator>+</operator> <name>l</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vr_type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>voffs</name> <operator>=</operator> <name>voffset</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>coffs</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>nb_bits</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coffs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>coffs</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>coffs</name> <operator>*=</operator> <name>dim</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr><operator>,</operator> <expr><operator>++</operator><name>voffs</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>voffs</name></expr>]</index></name><operator>+=</operator><name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name><operator>+</operator><name>l</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" pass %d offs: %d curr: %f change: %f cv offs.: %d \n"</literal></expr></argument>,
<argument><expr><name>pass</name></expr></argument>, <argument><expr><name>voffs</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>voffs</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name><operator>+</operator><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name>coffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vr_type</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>voffset</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>dim</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>voffs</name> <operator>=</operator> <name>voffset</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dim</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>coffs</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>nb_bits</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coffs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>coffs</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>coffs</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>voffs</name> <operator>+</operator> <name>k</name></expr> ]</index></name> <operator>+=</operator> <name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>voffs</name> <operator>+</operator> <name>k</name> <operator>+</operator> <name>vlen</name></expr>]</index></name> <operator>+=</operator> <name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dim</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr><operator>,</operator> <expr><name>voffs</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>coffs</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>nb_bits</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coffs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>coffs</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>coffs</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>voffs</name></expr> ]</index></name> <operator>+=</operator> <name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>voffs</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>+=</operator> <name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>voffs</name> <operator>+</operator> <name>vlen</name></expr> ]</index></name> <operator>+=</operator> <name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>voffs</name> <operator>+</operator> <name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>coffs</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>nb_bits</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coffs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>coffs</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>coffs</name> <operator>*=</operator> <name>dim</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><name>l</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>voffs</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>voffs</name></expr> ]</index></name> <operator>+=</operator> <name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name> <operator>+</operator> <name>l</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>voffs</name> <operator>+</operator> <name>vlen</name></expr>]</index></name> <operator>+=</operator> <name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" pass %d offs: %d curr: %f change: %f cv offs.: %d+%d \n"</literal></expr></argument>,
<argument><expr><name>pass</name></expr></argument>, <argument><expr><name>voffset</name> <operator>/</operator> <name>ch</name> <operator>+</operator> <operator>(</operator><name>voffs</name> <operator>%</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <name>vlen</name></expr></argument>,
<argument><expr><name><name>vec</name><index>[<expr><name>voffset</name> <operator>/</operator> <name>ch</name> <operator>+</operator> <operator>(</operator><name>voffs</name> <operator>%</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <name>vlen</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name> <operator>+</operator> <name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name>coffs</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vr_type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>voffs_div</name> <init>= <expr><ternary><condition><expr><name>ch</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>voffset</name></expr> </then><else>: <expr><call><name>FASTDIV</name><argument_list>(<argument><expr><name>voffset</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>voffs_mod</name> <init>= <expr><name>voffset</name> <operator>-</operator> <name>voffs_div</name> <operator>*</operator> <name>ch</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>coffs</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>codebook</name><operator>.</operator><name>nb_bits</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coffs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>coffs</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>coffs</name> <operator>*=</operator> <name>dim</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>voffs_div</name> <operator>+</operator> <name>voffs_mod</name> <operator>*</operator> <name>vlen</name></expr>]</index></name> <operator>+=</operator>
<name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name> <operator>+</operator> <name>l</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" pass %d offs: %d curr: %f change: %f cv offs.: %d+%d \n"</literal></expr></argument>,
<argument><expr><name>pass</name></expr></argument>, <argument><expr><name>voffs_div</name> <operator>+</operator> <name>voffs_mod</name> <operator>*</operator> <name>vlen</name></expr></argument>,
<argument><expr><name><name>vec</name><index>[<expr><name>voffs_div</name> <operator>+</operator> <name>voffs_mod</name> <operator>*</operator> <name>vlen</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>codebook</name><operator>.</operator><name>codevectors</name><index>[<expr><name>coffs</name> <operator>+</operator> <name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name>coffs</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>voffs_mod</name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>voffs_div</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>voffs_mod</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j_times_ptns_to_read</name> <operator>+=</operator> <name>ptns_to_read</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>++</operator><name>partition_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>voffset</name> <operator>+=</operator> <name><name>vr</name><operator>-&gt;</operator><name>partition_size</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>libvorbis_bug</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pass</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ch_used</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>do_not_decode</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name><name>vr</name><operator>-&gt;</operator><name>classbook</name></name></expr>]</index></name><operator>.</operator><name><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>,
<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name><name>vr</name><operator>-&gt;</operator><name>classbook</name></name></expr>]</index></name><operator>.</operator><name>nb_bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vorbis_residue_decode</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>, <parameter><decl><type><name>vorbis_residue</name> <modifier>*</modifier></type><name>vr</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ch</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>do_not_decode</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>vlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ch_left</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vorbis_residue_decode_internal</name><argument_list>(<argument><expr><name>vc</name></expr></argument>, <argument><expr><name>vr</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>do_not_decode</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>ch_left</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>vr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vorbis_residue_decode_internal</name><argument_list>(<argument><expr><name>vc</name></expr></argument>, <argument><expr><name>vr</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>do_not_decode</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>ch_left</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>vr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vorbis_residue_decode_internal</name><argument_list>(<argument><expr><name>vc</name></expr></argument>, <argument><expr><name>vr</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>do_not_decode</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>ch_left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Invalid residue type while residue decode?! \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vorbis_inverse_coupling</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mag</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>ang</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>blocksize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blocksize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ang</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ang</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>ang</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>temp</name> <init>= <expr><name><name>ang</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ang</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mag</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ang</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ang</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>mag</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>temp</name> <init>= <expr><name><name>ang</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ang</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mag</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_parse_audio_packet</name><parameter_list>(<parameter><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>floor_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>mdct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>previous_window</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>previous_window</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mode_number</name></decl>, <decl><type ref="prev"/><name>blockflag</name></decl>, <decl><type ref="prev"/><name>blocksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>no_residue</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>do_not_decode</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_mapping</name> <modifier>*</modifier></type><name>mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ch_res_ptr</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>channel_residues</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>res_chan</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>res_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ch_left</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>vlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not a Vorbis I audio packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>mode_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>GET_VALIDATED_INDEX</name><argument_list>(<argument>mode_number</argument>, <argument>ilog(vc-&gt;mode_count-<literal type="number">1</literal>)</argument>, <argument>vc-&gt;mode_count</argument>)</argument_list></macro>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>mode_number</name></name> <operator>=</operator> <name>mode_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mapping</name> <operator>=</operator> <operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>mappings</name><index>[<expr><name><name>vc</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name>mode_number</name></expr>]</index></name><operator>.</operator><name>mapping</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" Mode number: %u , mapping: %d , blocktype %d\n"</literal></expr></argument>, <argument><expr><name>mode_number</name></expr></argument>,
<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name>mode_number</name></expr>]</index></name><operator>.</operator><name>mapping</name></expr></argument>, <argument><expr><name><name>vc</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name>mode_number</name></expr>]</index></name><operator>.</operator><name>blockflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blockflag</name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name>mode_number</name></expr>]</index></name><operator>.</operator><name>blockflag</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><name>blockflag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <name>blocksize</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blockflag</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>previous_window</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>previous_window</name> <operator>=</operator> <name>code</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>previous_window</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>previous_window</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ch_res_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>*</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>floor_ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vlen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>floor_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vorbis_floor</name> <modifier>*</modifier></type><name>floor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mapping</name><operator>-&gt;</operator><name>submaps</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>floor</name> <operator>=</operator> <operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>floors</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>submap_floor</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>mux</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>floor</name> <operator>=</operator> <operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>floors</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>submap_floor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>floor</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><name>vc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>floor</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>floor_ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid codebook in vorbis_floor_decode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>no_residue</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>mapping</name><operator>-&gt;</operator><name>coupling_steps</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>no_residue</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>magnitude</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&amp;</operator> <name><name>no_residue</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>angle</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>no_residue</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>magnitude</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>no_residue</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>angle</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>submaps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vorbis_residue</name> <modifier>*</modifier></type><name>residue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mapping</name><operator>-&gt;</operator><name>submaps</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name><name>mapping</name><operator>-&gt;</operator><name>mux</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res_chan</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>res_num</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>no_residue</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>do_not_decode</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>do_not_decode</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>res_num</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>residue</name> <operator>=</operator> <operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>residues</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>submap_residue</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch_left</name> <operator>&lt;</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many channels in vorbis_floor_decode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vorbis_residue_decode</name><argument_list>(<argument><expr><name>vc</name></expr></argument>, <argument><expr><name>residue</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>do_not_decode</name></expr></argument>, <argument><expr><name>ch_res_ptr</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>ch_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ch_res_ptr</name> <operator>+=</operator> <name>ch</name> <operator>*</operator> <name>vlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_left</name> <operator>-=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ch_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>mapping</name><operator>-&gt;</operator><name>coupling_steps</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>mag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ang</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mag</name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>channel_residues</name></name><operator>+</operator><name><name>res_chan</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>magnitude</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <name>blocksize</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ang</name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>channel_residues</name></name><operator>+</operator><name><name>res_chan</name><index>[<expr><name><name>mapping</name><operator>-&gt;</operator><name>angle</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <name>blocksize</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>vorbis_inverse_coupling</name></name><argument_list>(<argument><expr><name>mag</name></expr></argument>, <argument><expr><name>ang</name></expr></argument>, <argument><expr><name>blocksize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>mdct</name> <operator>=</operator> <operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>mdct</name><index>[<expr><name>blockflag</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ch_res_ptr</name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>channel_residues</name></name> <operator>+</operator> <name><name>res_chan</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>blocksize</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vc</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name><name>floor_ptr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>floor_ptr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>ch_res_ptr</name></expr></argument>, <argument><expr><name>blocksize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>mdct</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>mdct</name></expr></argument>, <argument><expr><name>ch_res_ptr</name></expr></argument>, <argument><expr><name><name>floor_ptr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>retlen</name> <operator>=</operator> <operator>(</operator><name>blocksize</name> <operator>+</operator> <name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><name>previous_window</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bs0</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bs1</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>residue</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>channel_residues</name></name> <operator>+</operator> <name><name>res_chan</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>blocksize</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>saved</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>saved</name></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>bs1</name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name><name>floor_ptr</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>residue</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><name><name>vc</name><operator>-&gt;</operator><name>win</name><index>[<expr><name>blockflag</name> <operator>&amp;</operator> <name>previous_window</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blockflag</name> <operator>==</operator> <name>previous_window</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>vc</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>blocksize</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>blockflag</name> <operator>&gt;</operator> <name>previous_window</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>vc</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>bs0</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name><operator>+</operator><name>bs0</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>bs0</name><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>bs1</name><operator>-</operator><name>bs0</name><operator>)</operator><operator>/</operator><literal type="number">4</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>bs1</name> <operator>-</operator> <name>bs0</name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>vc</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <operator>(</operator><name>bs1</name> <operator>-</operator> <name>bs0</name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>saved</name> <operator>+</operator> <operator>(</operator><name>bs1</name> <operator>-</operator> <name>bs0</name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>bs0</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>blocksize</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>blocksize</name> <operator>/</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>previous_window</name></name> <operator>=</operator> <name>blockflag</name></expr>;</expr_stmt>
<return>return <expr><name>retlen</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>vorbis_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>vc</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>channel_ptrs</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"packet length %d \n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vorbis_free</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vorbis_parse_id_hdr</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Id header corrupt.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vorbis_free</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>ff_vorbis_channel_layouts</name><index>[<expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_samplerate</name></name></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Ignoring comment header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name><name>vc</name><operator>-&gt;</operator><name>channel_residues</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>modes</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vorbis_parse_setup_hdr</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Setup header corrupt.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vorbis_free</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>channel_residues</name></name> <operator>||</operator> <operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>modes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Data packet before valid headers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_ptrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name><name>ff_vorbis_channel_layout_offsets</name><index>[<expr><name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>channel_ptrs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>vorbis_parse_audio_packet</name><argument_list>(<argument><expr><name>vc</name></expr></argument>, <argument><expr><name>channel_ptrs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vc</name><operator>-&gt;</operator><name>first_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>first_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"parsed %d bytes %d bits, returned %d samples (*ch*bits) \n"</literal></expr></argument>,
<argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vorbis_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vorbis_free</name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vorbis_decode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vorbis_context</name> <modifier>*</modifier></type><name>vc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>saved</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>vc</name><operator>-&gt;</operator><name>saved</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>vc</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>vc</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>vc</name><operator>-&gt;</operator><name>saved</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>previous_window</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vc</name><operator>-&gt;</operator><name>first_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vorbis_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vorbis"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Vorbis"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VORBIS</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vorbis_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vorbis_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>vorbis_decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>vorbis_decode_frame</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>vorbis_decode_flush</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <name>ff_vorbis_channel_layouts</name></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
