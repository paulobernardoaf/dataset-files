<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\wmavoice.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wmavoice_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_vectors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rdft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sinewin.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BLOCKS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LSPS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LSPS_ALIGN16</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FRAMES</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FRAMESIZE</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SIGNAL_HISTORY</name></cpp:macro> <cpp:value>416</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SFRAMESIZE</name></cpp:macro> <cpp:value>(MAX_FRAMESIZE * MAX_FRAMES)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFRAME_CACHE_MAXSIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_NBITS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 




<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>frame_type_vlc</name></decl>;</decl_stmt>




<enum>enum <block>{
<decl><name>ACB_TYPE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>ACB_TYPE_ASYMMETRIC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 




<decl><name>ACB_TYPE_HAMMING</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> 


}</block>;</enum>




<enum>enum <block>{
<decl><name>FCB_TYPE_SILENCE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 


<decl><name>FCB_TYPE_HARDCODED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>FCB_TYPE_AW_PULSES</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>FCB_TYPE_EXC_PULSES</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 


}</block>;</enum>




<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>frame_type_desc</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n_blocks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>log_n_blocks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>acb_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fcb_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dbl_pulses</name></decl>;</decl_stmt> 


}</block> <decl><name><name>frame_descs</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ACB_TYPE_NONE</name></expr>, <expr><name>FCB_TYPE_SILENCE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ACB_TYPE_NONE</name></expr>, <expr><name>FCB_TYPE_HARDCODED</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ACB_TYPE_ASYMMETRIC</name></expr>, <expr><name>FCB_TYPE_AW_PULSES</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ACB_TYPE_ASYMMETRIC</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ACB_TYPE_ASYMMETRIC</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>ACB_TYPE_ASYMMETRIC</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>ACB_TYPE_ASYMMETRIC</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>ACB_TYPE_ASYMMETRIC</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ACB_TYPE_HAMMING</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ACB_TYPE_HAMMING</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ACB_TYPE_HAMMING</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>ACB_TYPE_HAMMING</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>ACB_TYPE_HAMMING</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>ACB_TYPE_HAMMING</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>ACB_TYPE_HAMMING</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>ACB_TYPE_HAMMING</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>ACB_TYPE_HAMMING</name></expr>, <expr><name>FCB_TYPE_EXC_PULSES</name></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>




<typedef>typedef <type><struct>struct <name>WMAVoiceContext</name> <block>{




<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>int8_t</name></type> <name><name>vbm_tree</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>spillover_bitsize</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>history_nsamples</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>int</name></type> <name>do_apf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>denoise_strength</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>denoise_tilt_corr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dc_level</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>lsps</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>lsp_q_mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>lsp_def_mode</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>min_pitch_val</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>max_pitch_val</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pitch_nbits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>block_pitch_nbits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>block_pitch_range</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>block_delta_pitch_nbits</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>int</name></type> <name>block_delta_pitch_hrange</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>block_conv_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 











<decl_stmt><decl><type><name>int</name></type> <name>spillover_nbits</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>int</name></type> <name>has_residual_lsps</name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>int</name></type> <name>skip_bits_next</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sframe_cache</name><index>[<expr><name>SFRAME_CACHE_MAXSIZE</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>sframe_cache_size</name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt> 










<decl_stmt><decl><type><name>double</name></type> <name><name>prev_lsps</name><index>[<expr><name>MAX_LSPS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>last_pitch_val</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>last_acb_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pitch_diff_sh16</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>silence_gain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>aw_idx_is_ext</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>aw_pulse_range</name></decl>;</decl_stmt> 





<decl_stmt><decl><type><name>int</name></type> <name><name>aw_n_pulses</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name><name>aw_first_pulse_off</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>aw_next_pulse_off_cache</name></decl>;</decl_stmt> 





<decl_stmt><decl><type><name>int</name></type> <name>frame_cntr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_superframes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>gain_pred_err</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>excitation_history</name><index>[<expr><name>MAX_SIGNAL_HISTORY</name></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>float</name></type> <name><name>synth_history</name><index>[<expr><name>MAX_LSPS</name></expr>]</index></name></decl>;</decl_stmt> 









<decl_stmt><decl><type><name>RDFTContext</name></type> <name>rdft</name></decl>, <name>irdft</name>;</decl_stmt> 

<decl_stmt><decl><type><name>DCTContext</name></type> <name>dct</name></decl>, <name>dst</name>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>sin</name><index>[<expr><literal type="number">511</literal></expr>]</index></name></decl>, <name><name>cos</name><index>[<expr><literal type="number">511</literal></expr>]</index></name>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>postfilter_agc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>dcf_mem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>zero_exc_pf</name><index>[<expr><name>MAX_SIGNAL_HISTORY</name> <operator>+</operator> <name>MAX_SFRAMESIZE</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name><name>denoise_filter_cache</name><index>[<expr><name>MAX_FRAMESIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>denoise_filter_cache_size</name></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>tilted_lpcs_pf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0x80</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>denoise_coeffs_pf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0x80</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>synth_filter_out_buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0x80</literal> <operator>+</operator> <name>MAX_LSPS_ALIGN16</name></expr>]</index></expr>;</expr_stmt>





}</block></struct></type> <name>WMAVoiceContext</name>;</typedef>










<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_vbmtree</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name><name>vbm_tree</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>cntr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vbm_tree</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vbm_tree</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cntr</name><index>[<expr><name>res</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vbm_tree</name><index>[<expr><name>res</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>cntr</name><index>[<expr><name>res</name></expr>]</index></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>wmavoice_init_static_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>bits</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>codes</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">0x0002</literal></expr>, 
<expr><literal type="number">0x000c</literal></expr>, <expr><literal type="number">0x000d</literal></expr>, <expr><literal type="number">0x000e</literal></expr>, 
<expr><literal type="number">0x003c</literal></expr>, <expr><literal type="number">0x003d</literal></expr>, <expr><literal type="number">0x003e</literal></expr>, 
<expr><literal type="number">0x00fc</literal></expr>, <expr><literal type="number">0x00fd</literal></expr>, <expr><literal type="number">0x00fe</literal></expr>, 
<expr><literal type="number">0x03fc</literal></expr>, <expr><literal type="number">0x03fd</literal></expr>, <expr><literal type="number">0x03fe</literal></expr>, 
<expr><literal type="number">0x0ffc</literal></expr>, <expr><literal type="number">0x0ffd</literal></expr>, <expr><literal type="number">0x0ffe</literal></expr>, 
<expr><literal type="number">0x3ffc</literal></expr>, <expr><literal type="number">0x3ffd</literal></expr>, <expr><literal type="number">0x3ffe</literal></expr>, <expr><literal type="number">0x3fff</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame_type_vlc</name></expr></argument>, <argument><expr><name>VLC_NBITS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">132</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>wmavoice_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>postfilter_agc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sframe_cache_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_bits_next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>excitation_history</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>excitation_history</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_SIGNAL_HISTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>synth_history</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>synth_history</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_LSPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>gain_pred_err</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>gain_pred_err</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_apf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>synth_filter_out_buf</name><index>[<expr><name>MAX_LSPS_ALIGN16</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>synth_filter_out_buf</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dcf_mem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dcf_mem</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>zero_exc_pf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>zero_exc_pf</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>history_nsamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>wmavoice_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>AVOnce</name></type> <name>init_static_once</name> <init>= <expr><name>AV_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>pitch_range</name></decl>, <decl><type ref="prev"/><name>lsp16_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init_static_once</name></expr></argument>, <argument><expr><name>wmavoice_init_static_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <literal type="number">46</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid extradata size %d (should be 46)\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">22</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid block alignment %d.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spillover_bitsize</name></name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>av_ceil_log2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_apf</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_apf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_rdft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>DFT_R2C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_rdft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>IDFT_C2R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dct</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>DCT_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>DST_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_sine_window_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cos</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sin</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cos</name></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sin</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>sin</name><index>[<expr><literal type="number">510</literal> <operator>-</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cos</name><index>[<expr><literal type="number">510</literal> <operator>-</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cos</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_strength</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>denoise_strength</name></name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid denoise filter strength %d (max=11)\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_strength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_tilt_corr</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_level</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsp_q_mode</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x2000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsp_def_mode</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x4000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>lsp16_flag</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <literal type="number">0x1000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lsp16_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">22</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>-</operator> <literal type="number">22</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>decode_vbmtree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vbm_tree</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid VBM tree; broken extradata?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <operator>(</operator><literal type="number">256</literal> <operator>*</operator> <literal type="number">37</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_pitch_val</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">400</literal> <operator>+</operator> <literal type="number">50</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_pitch_val</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">37</literal> <operator>/</operator> <literal type="number">2000</literal> <operator>+</operator> <literal type="number">50</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pitch_range</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_pitch_val</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>min_pitch_val</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pitch_range</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid pitch range; broken extradata?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pitch_nbits</name></name> <operator>=</operator> <call><name>av_ceil_log2</name><argument_list>(<argument><expr><name>pitch_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_pitch_val</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_acb_type</name></name> <operator>=</operator> <name>ACB_TYPE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>history_nsamples</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_pitch_val</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>min_pitch_val</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>history_nsamples</name></name> <operator>&gt;</operator> <name>MAX_SIGNAL_HISTORY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>min_sr</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">50</literal><operator>)</operator> <operator>*</operator> <literal type="number">400</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>,
<decl><type ref="prev"/><name>max_sr</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>MAX_SIGNAL_HISTORY</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">205</literal><operator>)</operator> <operator>*</operator> <literal type="number">2000</literal> <operator>/</operator> <literal type="number">37</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported samplerate %d (min=%d, max=%d)\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name>min_sr</name></expr></argument>, <argument><expr><name>max_sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_pitch_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pitch_range</name> <operator>*</operator> <literal type="number">25</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pitch_range</name> <operator>*</operator> <literal type="number">44</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_pitch_val</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_delta_pitch_hrange</name></name> <operator>=</operator> <operator>(</operator><name>pitch_range</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_delta_pitch_hrange</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid delta pitch hrange; broken extradata?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_delta_pitch_nbits</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>av_ceil_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_delta_pitch_hrange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_pitch_range</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>
<name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>
<literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>min_pitch_val</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_pitch_nbits</name></name> <operator>=</operator> <call><name>av_ceil_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_pitch_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>void</name></type> <name>adaptive_gain_control</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>speech_synth</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>gain_mem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>speech_energy</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>postfilter_energy</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gain_scale_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>mem</name> <init>= <expr><operator>*</operator><name>gain_mem</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>speech_energy</name> <operator>+=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>speech_synth</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>postfilter_energy</name> <operator>+=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>gain_scale_factor</name> <operator>=</operator> <ternary><condition><expr><name>postfilter_energy</name> <operator>==</operator> <literal type="number">0.0</literal></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>:
<expr><operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>alpha</name><operator>)</operator> <operator>*</operator> <name>speech_energy</name> <operator>/</operator> <name>postfilter_energy</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>mem</name> <operator>=</operator> <name>alpha</name> <operator>*</operator> <name>mem</name> <operator>+</operator> <name>gain_scale_factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>mem</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>gain_mem</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>int</name></type> <name>kalman_smoothen</name><parameter_list>(<parameter><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>optimal_gain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>&amp;</operator><name><name>in</name><index>[<expr><operator>-</operator><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>min_pitch_val</name></name></expr></argument>, <argument><expr><name>pitch</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><operator>&amp;</operator><name><name>in</name><index>[<expr><operator>-</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_pitch_val</name></name></expr></argument>, <argument><expr><name>pitch</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>best_hist_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>&gt;</operator> <name>optimal_gain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optimal_gain</name> <operator>=</operator> <name>dot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_hist_ptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>ptr</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>optimal_gain</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>best_hist_ptr</name></expr></argument>, <argument><expr><name>best_hist_ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>optimal_gain</name> <operator>&lt;=</operator> <name>dot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <name>dot</name> <operator>/</operator> <operator>(</operator><name>dot</name> <operator>+</operator> <literal type="number">0.6</literal> <operator>*</operator> <name>optimal_gain</name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dot</name> <operator>=</operator> <literal type="number">0.625</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>best_hist_ptr</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <name>dot</name> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>best_hist_ptr</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>float</name></type> <name>tilt_factor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lpcs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_lpcs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>rh0</name></decl>, <decl><type ref="prev"/><name>rh1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rh0</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>lpcs</name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>, <argument><expr><name>n_lpcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rh1</name> <operator>=</operator> <name><name>lpcs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>lpcs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lpcs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n_lpcs</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rh1</name> <operator>/</operator> <name>rh0</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_input_response</name><parameter_list>(<parameter><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpcs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fcb_type</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remainder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>last_coeff</name></decl>, <decl><type ref="prev"/><name>min</name> <init>= <expr><literal type="number">15.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><operator>-</operator><literal type="number">15.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>irange</name></decl>, <decl><type ref="prev"/><name>angle_mul</name></decl>, <decl><type ref="prev"/><name>gain_mul</name></decl>, <decl><type ref="prev"/><name>range</name></decl>, <decl><type ref="prev"/><name>sq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>rdft</name><operator>.</operator><name>rdft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log_range</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>assign</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { float tmp = log10f(assign); var = tmp; max = FFMAX(max, tmp); min = FFMIN(min, tmp); } while (0)</cpp:value></cpp:define>



<expr_stmt><expr><call><name>log_range</name><argument_list>(<argument><expr><name>last_coeff</name></expr></argument>, <argument><expr><name><name>lpcs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>lpcs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>log_range</name><argument_list>(<argument><expr><name><name>lpcs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lpcs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>lpcs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator>
<name><name>lpcs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>lpcs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>log_range</name><argument_list>(<argument><expr><name><name>lpcs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lpcs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>lpcs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>log_range</name></cpp:undef>
<expr_stmt><expr><name>range</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpcs</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>=</operator> <name>last_coeff</name></expr>;</expr_stmt>






<expr_stmt><expr><name>irange</name> <operator>=</operator> <literal type="number">64.0</literal> <operator>/</operator> <name>range</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>gain_mul</name> <operator>=</operator> <name>range</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>fcb_type</name> <operator>==</operator> <name>FCB_TYPE_HARDCODED</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">5.0</literal> <operator>/</operator> <literal type="number">13.0</literal><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><literal type="number">5.0</literal> <operator>/</operator> <literal type="number">14.7</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_mul</name> <operator>=</operator> <name>gain_mul</name> <operator>*</operator> <operator>(</operator><literal type="number">8.0</literal> <operator>*</operator> <name>M_LN10</name> <operator>/</operator> <name>M_PI</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>pwr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><operator>(</operator><name>max</name> <operator>-</operator> <name><name>lpcs</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>irange</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pwr</name> <operator>=</operator> <name><name>wmavoice_denoise_power_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>denoise_strength</name></name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpcs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>angle_mul</name> <operator>*</operator> <name>pwr</name></expr>;</expr_stmt>


<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><operator>(</operator><name>pwr</name> <operator>*</operator> <name>gain_mul</name> <operator>-</operator> <literal type="number">0.0295</literal><operator>)</operator> <operator>*</operator> <literal type="number">70.570526123</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>wmavoice_energy_table</name><index>[<expr><literal type="number">127</literal></expr>]</index></name> <operator>*</operator>
<call><name>powf</name><argument_list>(<argument><expr><literal type="number">1.0331663</literal></expr></argument>, <argument><expr><name>idx</name> <operator>-</operator> <literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>wmavoice_energy_table</name><index>[<expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>





<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dct</name><operator>.</operator><name>dct_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dct</name></name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>dct_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">255</literal> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>lpcs</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cos</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">255</literal> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>lpcs</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>lpcs</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_coeff</name> <operator>=</operator> <name><name>coeffs</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cos</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">63</literal></expr>;</init><condition>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">255</literal> <operator>+</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>-</operator><name><name>lpcs</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>lpcs</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sin</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cos</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">255</literal> <operator>+</operator> <call><name>av_clip</name><argument_list>( <argument><expr><name><name>lpcs</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>lpcs</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sin</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cos</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>last_coeff</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>irdft</name><operator>.</operator><name>rdft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coeffs</name><index>[<expr><name>remainder</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">128</literal> <operator>-</operator> <name>remainder</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>denoise_tilt_corr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>tilt_mem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>remainder</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_tilt_compensation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tilt_mem</name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1.8</literal> <operator>*</operator> <call><name>tilt_factor</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>remainder</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sq</name> <operator>=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">64.0</literal><operator>)</operator> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>/</operator> <call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>,
<argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>remainder</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*=</operator> <name>sq</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>



























<function><type><specifier>static</specifier> <name>void</name></type> <name>wiener_denoise</name><parameter_list>(<parameter><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fcb_type</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>synth_pf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lpcs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>remainder</name></decl>, <decl><type ref="prev"/><name>lim</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fcb_type</name> <operator>!=</operator> <name>FCB_TYPE_SILENCE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>tilted_lpcs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tilted_lpcs_pf</name></name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>coeffs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>denoise_coeffs_pf</name></name></expr></init></decl>, <decl><type ref="prev"/><name>tilt_mem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tilted_lpcs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tilted_lpcs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>lpcs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tilted_lpcs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tilted_lpcs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">128</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_tilt_compensation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tilt_mem</name></expr></argument>, <argument><expr><literal type="number">0.7</literal> <operator>*</operator> <call><name>tilt_factor</name><argument_list>(<argument><expr><name>lpcs</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tilted_lpcs</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>remainder</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">127</literal> <operator>-</operator> <name>size</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calc_input_response</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tilted_lpcs</name></expr></argument>, <argument><expr><name>fcb_type</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>synth_pf</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>synth_pf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">128</literal> <operator>-</operator> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>rdft</name><operator>.</operator><name>rdft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><name>synth_pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>rdft</name><operator>.</operator><name>rdft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>synth_pf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>synth_pf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name><name>coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>v1</name> <init>= <expr><name><name>synth_pf</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><name><name>synth_pf</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>synth_pf</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v1</name> <operator>*</operator> <name><name>coeffs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>v2</name> <operator>*</operator> <name><name>coeffs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>synth_pf</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v2</name> <operator>*</operator> <name><name>coeffs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>v1</name> <operator>*</operator> <name><name>coeffs</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>irdft</name><operator>.</operator><name>rdft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>, <argument><expr><name>synth_pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache_size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>synth_pf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache_size</name></name> <operator>-=</operator> <name>lim</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>fcb_type</name> <operator>!=</operator> <name>FCB_TYPE_SILENCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+=</operator> <name><name>synth_pf</name><index>[<expr><name>size</name> <operator>+</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>lim</name> <operator>&lt;</operator> <name>remainder</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache</name><index>[<expr><name>lim</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>synth_pf</name><index>[<expr><name>size</name> <operator>+</operator> <name>lim</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>remainder</name> <operator>-</operator> <name>lim</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_filter_cache_size</name></name> <operator>=</operator> <name>remainder</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>void</name></type> <name>postfilter</name><parameter_list>(<parameter><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>synth</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lpcs</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>zero_exc_pf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fcb_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>synth_filter_in_buf</name><index>[<expr><name>MAX_FRAMESIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>synth_pf</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>synth_filter_out_buf</name><index>[<expr><name>MAX_LSPS_ALIGN16</name></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>synth_filter_in</name> <init>= <expr><name>zero_exc_pf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>MAX_FRAMESIZE</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_celp_lp_zero_synthesis_filterf</name><argument_list>(<argument><expr><name>zero_exc_pf</name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>, <argument><expr><name>synth</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fcb_type</name> <operator>&gt;=</operator> <name>FCB_TYPE_AW_PULSES</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>kalman_smoothen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>zero_exc_pf</name></expr></argument>, <argument><expr><name>synth_filter_in_buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>synth_filter_in</name> <operator>=</operator> <name>synth_filter_in_buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>synth_pf</name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>,
<argument><expr><name>synth_filter_in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>synth_pf</name><index>[<expr><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>synth_pf</name><index>[<expr><name>size</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>synth_pf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wiener_denoise</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fcb_type</name></expr></argument>, <argument><expr><name>synth_pf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adaptive_gain_control</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>synth_pf</name></expr></argument>, <argument><expr><name>synth</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0.99</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>postfilter_agc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dc_level</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>



<macro><name>ff_acelp_apply_order_2_transfer_function</name><argument_list>(<argument>samples</argument>, <argument>samples</argument>,
<argument>(const float[<literal type="number">2</literal>]) { -<literal type="number">1.99997</literal></argument>, <argument><literal type="number">1.0</literal> }</argument>,
<argument>(const float[<literal type="number">2</literal>]) { -<literal type="number">1.9330735188</literal></argument>, <argument><literal type="number">0.93589198496</literal> }</argument>,
<argument><literal type="number">0.93980580475</literal></argument>, <argument>s-&gt;dcf_mem</argument>, <argument>size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>void</name></type> <name>dequant_lsps</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>lsps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>sizes</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>n_stages</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>mul_q</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>base_q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lsps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lsps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>n_stages</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>t_off</name> <init>= <expr><operator>&amp;</operator><name><name>table</name><index>[<expr><name><name>values</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>base</name> <init>= <expr><name><name>base_q</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>mul</name> <init>= <expr><name><name>mul_q</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsps</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+=</operator> <name>base</name> <operator>+</operator> <name>mul</name> <operator>*</operator> <name><name>t_off</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>table</name> <operator>+=</operator> <name><name>sizes</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>num</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>void</name></type> <name>dequant_lsp10i</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>lsps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>vec_sizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>mul_lsf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">5.2187144800e-3</literal></expr>, <expr><literal type="number">1.4626986422e-3</literal></expr>,
<expr><literal type="number">9.6179549166e-4</literal></expr>, <expr><literal type="number">1.1325736225e-3</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>base_lsf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">2.15522e-1</literal></expr>, <expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">6.1646e-2</literal></expr>,
<expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">3.3486e-2</literal></expr>, <expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">5.7408e-2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dequant_lsps</name><argument_list>(<argument><expr><name>lsps</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vec_sizes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>wmavoice_dq_lsp10i</name></expr></argument>,
<argument><expr><name>mul_lsf</name></expr></argument>, <argument><expr><name>base_lsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>dequant_lsp10r</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>i_lsps</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>old</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>a1</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>vec_sizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">128</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>mul_lsf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">2.5807601174e-3</literal></expr>, <expr><literal type="number">1.2354460219e-3</literal></expr>, <expr><literal type="number">1.1763821673e-3</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>base_lsf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">1.07448e-1</literal></expr>, <expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">5.2706e-2</literal></expr>, <expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">5.1634e-2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <call><name>float</name> <argument_list>(<argument><expr><operator>*</operator><name>ipol_tab</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index> <operator>=</operator> <ternary><condition><expr><name>q_mode</name></expr> ?</condition><then>
<expr><name>wmavoice_lsp10_intercoeff_b</name></expr> </then><else>: <expr><name>wmavoice_lsp10_intercoeff_a</name></expr></else></ternary></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>interpol</name></decl>, <decl><type ref="prev"/><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dequant_lsp10i</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>i_lsps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>interpol</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>delta</name> <init>= <expr><name><name>old</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>i_lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a1</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>ipol_tab</name><index>[<expr><name>interpol</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>delta</name> <operator>+</operator> <name><name>i_lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a1</name><index>[<expr><literal type="number">10</literal> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>ipol_tab</name><index>[<expr><name>interpol</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>delta</name> <operator>+</operator> <name><name>i_lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dequant_lsps</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vec_sizes</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>wmavoice_dq_lsp10r</name></expr></argument>,
<argument><expr><name>mul_lsf</name></expr></argument>, <argument><expr><name>base_lsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>dequant_lsp16i</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>lsps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>vec_sizes</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>mul_lsf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">3.3439586280e-3</literal></expr>, <expr><literal type="number">6.9908173703e-4</literal></expr>,
<expr><literal type="number">3.3216608306e-3</literal></expr>, <expr><literal type="number">1.0334960326e-3</literal></expr>,
<expr><literal type="number">3.1899104283e-3</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>base_lsf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">1.27576e-1</literal></expr>, <expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">2.4292e-2</literal></expr>,
<expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">1.28094e-1</literal></expr>, <expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">3.2128e-2</literal></expr>,
<expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">1.29816e-1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dequant_lsps</name><argument_list>( <argument><expr><name>lsps</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vec_sizes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>wmavoice_dq_lsp16i1</name></expr></argument>, <argument><expr><name>mul_lsf</name></expr></argument>, <argument><expr><name>base_lsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dequant_lsps</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lsps</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vec_sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>wmavoice_dq_lsp16i2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mul_lsf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base_lsf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dequant_lsps</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lsps</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vec_sizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>wmavoice_dq_lsp16i3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mul_lsf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base_lsf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>dequant_lsp16r</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>i_lsps</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>old</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>a1</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>a2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>vec_sizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>mul_lsf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">1.2232979501e-3</literal></expr>, <expr><literal type="number">1.4062241527e-3</literal></expr>, <expr><literal type="number">1.6114744851e-3</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>base_lsf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">5.5830e-2</literal></expr>, <expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">5.2908e-2</literal></expr>, <expr><name>M_PI</name> <operator>*</operator> <operator>-</operator><literal type="number">5.4776e-2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <call><name>float</name> <argument_list>(<argument><expr><operator>*</operator><name>ipol_tab</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index> <operator>=</operator> <ternary><condition><expr><name>q_mode</name></expr> ?</condition><then>
<expr><name>wmavoice_lsp16_intercoeff_b</name></expr> </then><else>: <expr><name>wmavoice_lsp16_intercoeff_a</name></expr></else></ternary></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>interpol</name></decl>, <decl><type ref="prev"/><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dequant_lsp16i</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>i_lsps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>interpol</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>delta</name> <init>= <expr><name><name>old</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>i_lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a1</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>ipol_tab</name><index>[<expr><name>interpol</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>delta</name> <operator>+</operator> <name><name>i_lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a1</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>ipol_tab</name><index>[<expr><name>interpol</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>delta</name> <operator>+</operator> <name><name>i_lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>dequant_lsps</name><argument_list>( <argument><expr><name>a2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vec_sizes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>wmavoice_dq_lsp16r1</name></expr></argument>, <argument><expr><name>mul_lsf</name></expr></argument>, <argument><expr><name>base_lsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dequant_lsps</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vec_sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>wmavoice_dq_lsp16r2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mul_lsf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base_lsf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dequant_lsps</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a2</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vec_sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>wmavoice_dq_lsp16r3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mul_lsf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>base_lsf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>void</name></type> <name>aw_parse_coords</name><parameter_list>(<parameter><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>pitch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>start_offset</name><index>[<expr><literal type="number">94</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>,
<expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">43</literal></expr>,
<expr><literal type="number">45</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">67</literal></expr>,
<expr><literal type="number">69</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">91</literal></expr>,
<expr><literal type="number">93</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">115</literal></expr>,
<expr><literal type="number">117</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">139</literal></expr>,
<expr><literal type="number">141</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">159</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aw_idx_is_ext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">54</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aw_idx_is_ext</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">54</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aw_pulse_range</name></name> <operator>=</operator> <ternary><condition><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><literal type="number">24</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <name><name>start_offset</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>offset</name> <operator>+=</operator> <name><name>pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aw_n_pulses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>MAX_FRAMESIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>offset</name><operator>)</operator> <operator>/</operator> <name><name>pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aw_first_pulse_off</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>aw_pulse_range</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>aw_n_pulses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aw_n_pulses</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>MAX_FRAMESIZE</name> <operator>-</operator> <name>offset</name><operator>)</operator> <operator>/</operator> <name><name>pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aw_first_pulse_off</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>-</operator> <operator>(</operator><name>MAX_FRAMESIZE</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>aw_pulse_range</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>start_offset</name><index>[<expr><name>bits</name></expr>]</index></name> <operator>&lt;</operator> <name>MAX_FRAMESIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>aw_first_pulse_off</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>aw_pulse_range</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aw_first_pulse_off</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name><name>pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>start_offset</name><index>[<expr><name>bits</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>aw_first_pulse_off</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>aw_pulse_range</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aw_first_pulse_off</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name><name>pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>aw_pulse_set2</name><parameter_list>(<parameter><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_idx</name></decl></parameter>, <parameter><decl><type><name>AMRFixed</name> <modifier>*</modifier></type><name>fcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>use_mask_mem</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>use_mask</name> <init>= <expr><name>use_mask_mem</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><name>int</name></type> <name>pulse_off</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>aw_first_pulse_off</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"/><name>pulse_start</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>range</name></decl>, <decl><type ref="prev"/><name>aidx</name></decl>, <decl><type ref="prev"/><name>start_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>aw_n_pulses</name><index>[<expr><name>block_idx</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name>pulse_off</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>aw_pulse_range</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pulse_off</name> <operator>+=</operator> <name><name>fcb</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>aw_n_pulses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>aw_n_pulses</name><index>[<expr><name>block_idx</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pulse_off</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>aw_next_pulse_off_cache</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>pulse_start</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>aw_n_pulses</name><index>[<expr><name>block_idx</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>pulse_off</name> <operator>-</operator> <name>range</name> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>use_mask</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>use_mask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>use_mask</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>use_mask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>use_mask</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>use_mask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>aw_n_pulses</name><index>[<expr><name>block_idx</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name>pulse_off</name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>MAX_FRAMESIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>idx</name> <operator>+=</operator> <name><name>fcb</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>excl_range</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>aw_pulse_range</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>use_mask_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>use_mask</name><index>[<expr><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_sh</name> <init>= <expr><literal type="number">16</literal> <operator>-</operator> <operator>(</operator><name>idx</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>use_mask_ptr</name><operator>++</operator> <operator>&amp;=</operator> <literal type="number">0xFFFFu</literal> <operator>&lt;&lt;</operator> <name>first_sh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>excl_range</name> <operator>-=</operator> <name>first_sh</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>excl_range</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>use_mask_ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>use_mask_ptr</name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>excl_range</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>use_mask_ptr</name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal> <operator>&gt;&gt;</operator> <name>excl_range</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>


<expr_stmt><expr><name>aidx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>aw_n_pulses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">5</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>block_idx</name></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>aidx</name></expr>;</condition> <incr><expr><name>pulse_start</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name>pulse_start</name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>idx</name> <operator>+=</operator> <name><name>fcb</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name>MAX_FRAMESIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>use_mask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>use_mask</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>use_mask</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0x2F</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>use_mask</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>use_mask</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0x4F</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>-=</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><name><name>use_mask</name><index>[<expr><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>use_mask</name><index>[<expr><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x8000</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>idx</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>use_mask</name><index>[<expr><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">0x8000</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>idx</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>start_off</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <name>start_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>y</name><index>[<expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>MAX_FRAMESIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>start_off</name><operator>)</operator> <operator>%</operator> <name><name>fcb</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aw_next_pulse_off_cache</name></name> <operator>=</operator> <ternary><condition><expr><name>n</name></expr> ?</condition><then> <expr><name><name>fcb</name><operator>-&gt;</operator><name>pitch_lag</name></name> <operator>-</operator> <name>n</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>aw_pulse_set1</name><parameter_list>(<parameter><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_idx</name></decl></parameter>, <parameter><decl><type><name>AMRFixed</name> <modifier>*</modifier></type><name>fcb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>aw_idx_is_ext</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>block_idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>aw_n_pulses</name><index>[<expr><name>block_idx</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>v_mask</name></decl>, <decl><type ref="prev"/><name>i_mask</name></decl>, <decl><type ref="prev"/><name>sh</name></decl>, <decl><type ref="prev"/><name>n_pulses</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>aw_pulse_range</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>n_pulses</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v_mask</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_mask</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>n_pulses</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v_mask</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_mask</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>n_pulses</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr><operator>,</operator> <expr><name>val</name> <operator>&gt;&gt;=</operator> <name>sh</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>y</name><index>[<expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <name>v_mask</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <name>i_mask</name><operator>)</operator> <operator>*</operator> <name>n_pulses</name> <operator>+</operator> <name>n</name> <operator>+</operator>
<name><name>s</name><operator>-&gt;</operator><name>aw_first_pulse_off</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>fcb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>+=</operator> <name><name>fcb</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>fcb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>&lt;</operator> <name>MAX_FRAMESIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num2</name> <init>= <expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x1FF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num2</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">79</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>num2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>num2</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">78</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>num2</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">77</literal></expr>;</expr_stmt> </block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>num2</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">77</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>num2</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">76</literal></expr>;</expr_stmt> </block_content>}</block></if>
<else>else <block>{<block_content> <expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt> <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>num2</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">75</literal></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x200</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>no_repeat_mask</name></name> <operator>|=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <name><name>fcb</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <name>idx</name> <operator>-</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>y</name><index>[<expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>y</name><index>[<expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>v</name></expr> </then><else>: <expr><name>v</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>int</name></type> <name>pRNG</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>frame_cntr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>










<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>div_tbl</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">8332</literal></expr>, <expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">715827883U</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">4545</literal></expr>, <expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">390451573U</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">3124</literal></expr>, <expr><literal type="number">11</literal> <operator>*</operator> <literal type="number">268435456U</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2380</literal></expr>, <expr><literal type="number">15</literal> <operator>*</operator> <literal type="number">204522253U</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1922</literal></expr>, <expr><literal type="number">23</literal> <operator>*</operator> <literal type="number">165191050U</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1612</literal></expr>, <expr><literal type="number">23</literal> <operator>*</operator> <literal type="number">138547333U</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1388</literal></expr>, <expr><literal type="number">27</literal> <operator>*</operator> <literal type="number">119304648U</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1219</literal></expr>, <expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">104755300U</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1086</literal></expr>, <expr><literal type="number">39</literal> <operator>*</operator> <literal type="number">93368855U</literal></expr> }</block></expr> 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><call><name>MUL16</name><argument_list>(<argument><expr><name>block_num</name></expr></argument>, <argument><expr><literal type="number">1877</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>frame_cntr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">9</literal> <operator>*</operator> <call><name>MULH</name><argument_list>(<argument><expr><literal type="number">477218589</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name><name>div_tbl</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name>UMULH</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>div_tbl</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>z</name> <operator>%</operator> <operator>(</operator><literal type="number">1000</literal> <operator>-</operator> <name>block_size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>synth_block_hardcoded</name><parameter_list>(<parameter><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>frame_type_desc</name></name> <modifier>*</modifier></type><name>frame_desc</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>excitation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>MAX_FRAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>frame_desc</name><operator>-&gt;</operator><name>fcb_type</name></name> <operator>==</operator> <name>FCB_TYPE_SILENCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r_idx</name> <operator>=</operator> <call><name>pRNG</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_cntr</name></name></expr></argument>, <argument><expr><name>block_idx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>silence_gain</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r_idx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <name><name>wmavoice_gain_universal</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>gain_pred_err</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>gain_pred_err</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>excitation</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>wmavoice_std_codebook</name><index>[<expr><name>r_idx</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>*</operator> <name>gain</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>synth_block_fcb_acb</name><parameter_list>(<parameter><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_pitch_sh2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>frame_type_desc</name></name> <modifier>*</modifier></type><name>frame_desc</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>excitation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>gain_coeff</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.8169</literal></expr>, <expr><operator>-</operator><literal type="number">0.06545</literal></expr>, <expr><literal type="number">0.1726</literal></expr>, <expr><literal type="number">0.0185</literal></expr>, <expr><operator>-</operator><literal type="number">0.0359</literal></expr>, <expr><literal type="number">0.0458</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pulses</name><index>[<expr><name>MAX_FRAMESIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>pred_err</name></decl>, <decl><type ref="prev"/><name>acb_gain</name></decl>, <decl><type ref="prev"/><name>fcb_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>gain_weight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AMRFixed</name></type> <name>fcb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>MAX_FRAMESIZE</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pulses</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pulses</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fcb</name><operator>.</operator><name>pitch_lag</name></name> <operator>=</operator> <name>block_pitch_sh2</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>.</operator><name>pitch_fac</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>.</operator><name>no_repeat_mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>frame_desc</name><operator>-&gt;</operator><name>fcb_type</name></name> <operator>==</operator> <name>FCB_TYPE_AW_PULSES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>aw_pulse_set1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>block_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>aw_pulse_set2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>block_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fcb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>r_idx</name> <init>= <expr><call><name>pRNG</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_cntr</name></name></expr></argument>, <argument><expr><name>block_idx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>excitation</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator>
<name><name>wmavoice_std_codebook</name><index>[<expr><name>r_idx</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>silence_gain</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset_nbits</name> <init>= <expr><literal type="number">5</literal> <operator>-</operator> <name><name>frame_desc</name><operator>-&gt;</operator><name>log_n_blocks</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fcb</name><operator>.</operator><name>no_repeat_mask</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos1</name></decl>, <decl><type ref="prev"/><name>pos2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>pos1</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>offset_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>.</operator><name>x</name><index>[<expr><name><name>fcb</name><operator>.</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>pos1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>.</operator><name>y</name><index>[<expr><name><name>fcb</name><operator>.</operator><name>n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>frame_desc</name><operator>-&gt;</operator><name>dbl_pulses</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos2</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>offset_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>.</operator><name>x</name><index>[<expr><name><name>fcb</name><operator>.</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>pos2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcb</name><operator>.</operator><name>y</name><index>[<expr><name><name>fcb</name><operator>.</operator><name>n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pos1</name> <operator>&lt;</operator> <name>pos2</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>sign</name></expr> </then><else>: <expr><name>sign</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_set_fixed_vector</name><argument_list>(<argument><expr><name>pulses</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fcb</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fcb_gain</name> <operator>=</operator> <call><name>expf</name><argument_list>(<argument><expr><call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>gain_pred_err</name></name></expr></argument>,
<argument><expr><name>gain_coeff</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>-</operator>
<literal type="number">5.2409161640</literal> <operator>+</operator> <name><name>wmavoice_gain_codebook_fcb</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acb_gain</name> <operator>=</operator> <name><name>wmavoice_gain_codebook_acb</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pred_err</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>wmavoice_gain_codebook_fcb</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">2.9957322736</literal></expr></argument> ,
<argument><expr><literal type="number">1.6094379124</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_weight</name> <operator>=</operator> <literal type="number">8</literal> <operator>&gt;&gt;</operator> <name><name>frame_desc</name><operator>-&gt;</operator><name>log_n_blocks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gain_pred_err</name><index>[<expr><name>gain_weight</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>gain_pred_err</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>gain_pred_err</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>gain_weight</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>gain_weight</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_pred_err</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>pred_err</name></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name><name>frame_desc</name><operator>-&gt;</operator><name>acb_type</name></name> <operator>==</operator> <name>ACB_TYPE_ASYMMETRIC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>n</name> <operator>+=</operator> <name>len</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next_idx_sh16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abs_idx</name> <init>= <expr><name>block_idx</name> <operator>*</operator> <name>size</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pitch_sh16</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_pitch_val</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator>
<name><name>s</name><operator>-&gt;</operator><name>pitch_diff_sh16</name></name> <operator>*</operator> <name>abs_idx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name> <init>= <expr><operator>(</operator><name>pitch_sh16</name> <operator>+</operator> <literal type="number">0x6FFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx_sh16</name> <init>= <expr><operator>(</operator><operator>(</operator><name>pitch</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>pitch_sh16</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">0x58000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>idx_sh16</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pitch_diff_sh16</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pitch_diff_sh16</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next_idx_sh16</name> <operator>=</operator> <operator>(</operator><name>idx_sh16</name><operator>)</operator> <operator>&amp;</operator><operator>~</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>next_idx_sh16</name> <operator>=</operator> <operator>(</operator><name>idx_sh16</name> <operator>+</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&amp;</operator><operator>~</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>idx_sh16</name> <operator>-</operator> <name>next_idx_sh16</name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>pitch_diff_sh16</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ff_acelp_interpolatef</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>excitation</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>excitation</name><index>[<expr><name>n</name> <operator>-</operator> <name>pitch</name></expr>]</index></name></expr></argument>,
<argument><expr><name>wmavoice_ipol1_coeffs</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>,
<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block_pitch</name> <init>= <expr><name>block_pitch_sh2</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>block_pitch_sh2</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_acelp_interpolatef</name><argument_list>(<argument><expr><name>excitation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>excitation</name><index>[<expr><operator>-</operator><name>block_pitch</name></expr>]</index></name></expr></argument>,
<argument><expr><name>wmavoice_ipol2_coeffs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_memcpy_backptr</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>excitation</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>block_pitch</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>ff_weighted_vector_sumf</name><argument_list>(<argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>pulses</name></expr></argument>,
<argument><expr><name>acb_gain</name></expr></argument>, <argument><expr><name>fcb_gain</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>void</name></type> <name>synth_block</name><parameter_list>(<parameter><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_pitch_sh2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>lsps</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>prev_lsps</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>frame_type_desc</name></name> <modifier>*</modifier></type><name>frame_desc</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>excitation</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>synth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>i_lsps</name><index>[<expr><name>MAX_LSPS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>lpcs</name><index>[<expr><name>MAX_LSPS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame_desc</name><operator>-&gt;</operator><name>acb_type</name></name> <operator>==</operator> <name>ACB_TYPE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>synth_block_hardcoded</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>block_idx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>frame_desc</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>synth_block_fcb_acb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>block_idx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>block_pitch_sh2</name></expr></argument>,
<argument><expr><name>frame_desc</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>fac</name> <operator>=</operator> <operator>(</operator><name>block_idx</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <name><name>frame_desc</name><operator>-&gt;</operator><name>n_blocks</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>i_lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>prev_lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <name>fac</name> <operator>*</operator> <operator>(</operator><name><name>lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>prev_lsps</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ff_acelp_lspd2lpc</name><argument_list>(<argument><expr><name>i_lsps</name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>synth</name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>int</name></type> <name>synth_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_idx</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>lsps</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>prev_lsps</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>excitation</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>synth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>n_blocks_x2</name></decl>, <decl><type ref="prev"/><name>log_n_blocks_x2</name></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>cur_pitch_val</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pitch</name><index>[<expr><name>MAX_BLOCKS</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>last_block_pitch</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>bd_idx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vbm_tree</name><index>[<expr><call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>frame_type_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>block_nsamples</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bd_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid frame type VLC code, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block_nsamples</name> <operator>=</operator> <name>MAX_FRAMESIZE</name> <operator>/</operator> <name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>n_blocks</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>acb_type</name> <operator>==</operator> <name>ACB_TYPE_ASYMMETRIC</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>n_blocks_x2</name> <operator>=</operator> <name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>n_blocks</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>log_n_blocks_x2</name> <operator>=</operator> <name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>log_n_blocks</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_pitch_val</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_pitch_val</name></name> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pitch_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_pitch_val</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>cur_pitch_val</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_pitch_val</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_acb_type</name></name> <operator>==</operator> <name>ACB_TYPE_NONE</name> <operator>||</operator>
<literal type="number">20</literal> <operator>*</operator> <call><name>abs</name><argument_list>(<argument><expr><name>cur_pitch_val</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pitch_val</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator>
<operator>(</operator><name>cur_pitch_val</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pitch_val</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_pitch_val</name></name> <operator>=</operator> <name>cur_pitch_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>n_blocks</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fac</name> <init>= <expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pitch</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>MUL16</name><argument_list>(<argument><expr><name>fac</name></expr></argument>, <argument><expr><name>cur_pitch_val</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>MUL16</name><argument_list>(<argument><expr><operator>(</operator><name>n_blocks_x2</name> <operator>-</operator> <name>fac</name><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_pitch_val</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>n_blocks</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log_n_blocks_x2</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pitch_diff_sh16</name></name> <operator>=</operator>
<operator>(</operator><name>cur_pitch_val</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pitch_val</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <name>MAX_FRAMESIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>fcb_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FCB_TYPE_SILENCE</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>silence_gain</name></name> <operator>=</operator> <name><name>wmavoice_gain_silence</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FCB_TYPE_AW_PULSES</name></expr>:</case>
<expr_stmt><expr><call><name>aw_parse_coords</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>n_blocks</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bl_pitch_sh2</name></decl>;</decl_stmt>


<switch>switch <condition>(<expr><name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>acb_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACB_TYPE_HAMMING</name></expr>:</case> <block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>block_pitch</name></decl>,
<decl><type ref="prev"/><name>t1</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><type ref="prev"/><name>t2</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><type ref="prev"/><name>t3</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_pitch</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_pitch_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>block_pitch</name> <operator>=</operator> <name>last_block_pitch</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_delta_pitch_hrange</name></name> <operator>+</operator>
<call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_delta_pitch_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>last_block_pitch</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>block_pitch</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_delta_pitch_hrange</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_pitch_range</name></name> <operator>-</operator>
<name><name>s</name><operator>-&gt;</operator><name>block_delta_pitch_hrange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>block_pitch</name> <operator>&lt;</operator> <name>t1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bl_pitch_sh2</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>block_pitch</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>block_pitch</name> <operator>-=</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block_pitch</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bl_pitch_sh2</name> <operator>=</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>block_pitch</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>block_pitch</name> <operator>-=</operator> <name>t2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block_pitch</name> <operator>&lt;</operator> <name>t3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bl_pitch_sh2</name> <operator>=</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>block_pitch</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bl_pitch_sh2</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_conv_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>pitch</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>bl_pitch_sh2</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>ACB_TYPE_ASYMMETRIC</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name>bl_pitch_sh2</name> <operator>=</operator> <name><name>pitch</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default> 
<expr_stmt><expr><name>bl_pitch_sh2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>synth_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>block_nsamples</name></expr></argument>, <argument><expr><name>bl_pitch_sh2</name></expr></argument>,
<argument><expr><name>lsps</name></expr></argument>, <argument><expr><name>prev_lsps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>excitation</name><index>[<expr><name>n</name> <operator>*</operator> <name>block_nsamples</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>synth</name><index>[<expr><name>n</name> <operator>*</operator> <name>block_nsamples</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_apf</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>i_lsps</name><index>[<expr><name>MAX_LSPS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>lpcs</name><index>[<expr><name>MAX_LSPS</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>i_lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name><name>prev_lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <name><name>lsps</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ff_acelp_lspd2lpc</name><argument_list>(<argument><expr><name>i_lsps</name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>postfilter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>synth</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>zero_exc_pf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>history_nsamples</name></name> <operator>+</operator> <name>MAX_FRAMESIZE</name> <operator>*</operator> <name>frame_idx</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>fcb_type</name></expr></argument>, <argument><expr><name><name>pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>i_lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ff_acelp_lspd2lpc</name><argument_list>(<argument><expr><name>i_lsps</name></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>postfilter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>synth</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>samples</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>lpcs</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>zero_exc_pf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>history_nsamples</name></name> <operator>+</operator> <name>MAX_FRAMESIZE</name> <operator>*</operator> <name>frame_idx</name> <operator>+</operator> <literal type="number">80</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>fcb_type</name></expr></argument>, <argument><expr><name><name>pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>synth</name></expr></argument>, <argument><expr><literal type="number">160</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>synth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_cntr</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_cntr</name></name> <operator>&gt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_cntr</name></name> <operator>-=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_acb_type</name></name> <operator>=</operator> <name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>acb_type</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>acb_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACB_TYPE_NONE</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_pitch_val</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACB_TYPE_ASYMMETRIC</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_pitch_val</name></name> <operator>=</operator> <name>cur_pitch_val</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACB_TYPE_HAMMING</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_pitch_val</name></name> <operator>=</operator> <name><name>pitch</name><index>[<expr><name><name>frame_descs</name><index>[<expr><name>bd_idx</name></expr>]</index></name><operator>.</operator><name>n_blocks</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>void</name></type> <name>stabilize_lsps</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>lsps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>




<expr_stmt><expr><name><name>lsps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>lsps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.0015</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lsps</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.0125</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>lsps</name><index>[<expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>lsps</name><index>[<expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.9985</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;</operator> <name><name>lsps</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>tmp</name> <init>= <expr><name><name>lsps</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>l</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>l</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lsps</name><index>[<expr><name>l</name></expr>]</index></name> <operator>&lt;=</operator> <name>tmp</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>lsps</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lsps</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>lsps</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>int</name></type> <name>synth_superframe</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>, <decl><type ref="prev"/><name>s_gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>n_samples</name> <init>= <expr><name>MAX_SFRAMESIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>lsps</name><index>[<expr><name>MAX_FRAMES</name></expr>]</index><index>[<expr><name>MAX_LSPS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>mean_lsf</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>==</operator> <literal type="number">16</literal></expr> ?</condition><then>
<expr><name><name>wmavoice_mean_lsf16</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lsp_def_mode</name></name></expr>]</index></name></expr> </then><else>: <expr><name><name>wmavoice_mean_lsf10</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lsp_def_mode</name></name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>excitation</name><index>[<expr><name>MAX_SIGNAL_HISTORY</name> <operator>+</operator> <name>MAX_SFRAMESIZE</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>synth</name><index>[<expr><name>MAX_LSPS</name> <operator>+</operator> <name>MAX_SFRAMESIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>synth</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>synth_history</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>synth</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>excitation</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>excitation_history</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>history_nsamples</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>excitation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sframe_cache_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gb</name> <operator>=</operator> <operator>&amp;</operator><name>s_gb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sframe_cache</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sframe_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sframe_cache_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"WMAPro-in-WMAVoice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n_samples</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>MAX_SFRAMESIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Superframe encodes &gt; %d samples (%d), not allowed\n"</literal></expr></argument>,
<argument><expr><name>MAX_SFRAMESIZE</name></expr></argument>, <argument><expr><name>n_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_residual_lsps</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>prev_lsps</name><index>[<expr><name>MAX_LSPS</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>a1</name><index>[<expr><name>MAX_LSPS</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>a2</name><index>[<expr><name>MAX_LSPS</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev_lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_lsps</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>mean_lsf</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dequant_lsp10r</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>lsps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>prev_lsps</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsp_q_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>dequant_lsp16r</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>lsps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>prev_lsps</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsp_q_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lsps</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>mean_lsf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>a1</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>a2</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsps</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>mean_lsf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>a1</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>-</operator> <name><name>a2</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsps</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>+=</operator> <name><name>mean_lsf</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stabilize_lsps</name><argument_list>(<argument><expr><name><name>lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>MAX_SFRAMESIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>n_samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>has_residual_lsps</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dequant_lsp10i</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>dequant_lsp16i</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsps</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>+=</operator> <name><name>mean_lsf</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>stabilize_lsps</name><argument_list>(<argument><expr><name><name>lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>synth_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>samples</name><index>[<expr><name>n</name> <operator>*</operator> <name>MAX_FRAMESIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>lsps</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>prev_lsps</name></name></expr> </then><else>: <expr><name><name>lsps</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>excitation</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>history_nsamples</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>MAX_FRAMESIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>synth</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>MAX_FRAMESIZE</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <operator>(</operator><name>res</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wmavoice_flush</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_lsps</name></name></expr></argument>, <argument><expr><name><name>lsps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>prev_lsps</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>synth_history</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>synth</name><index>[<expr><name>MAX_SFRAMESIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsps</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>synth</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>excitation_history</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>excitation</name><index>[<expr><name>MAX_SFRAMESIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>history_nsamples</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>excitation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_apf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>zero_exc_pf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>zero_exc_pf</name><index>[<expr><name>MAX_SFRAMESIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>history_nsamples</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>zero_exc_pf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_packet_header</name><parameter_list>(<parameter><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>n_superframes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_residual_lsps</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">6</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>spillover_bitsize</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>n_superframes</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0x3F</literal></expr>)</condition>;</do>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spillover_nbits</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spillover_bitsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n_superframes</name></expr> </then><else>: <expr><name>AVERROR_INVALIDDATA</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_bits</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rmn_bytes</name></decl>, <decl><type ref="prev"/><name>rmn_bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rmn_bits</name> <operator>=</operator> <name>rmn_bytes</name> <operator>=</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rmn_bits</name> <operator>&lt;</operator> <name>nbits</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>&gt;</operator> <name><name>pb</name><operator>-&gt;</operator><name>size_in_bits</name></name> <operator>-</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rmn_bits</name> <operator>&amp;=</operator> <literal type="number">7</literal></expr>;</expr_stmt> <expr_stmt><expr><name>rmn_bytes</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rmn_bits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>rmn_bits</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>rmn_bits</name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rmn_bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>rmn_bytes</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>nbits</name> <operator>-</operator> <name>rmn_bits</name></expr></argument>, <argument><expr><name>rmn_bytes</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>wmavoice_decode_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>






<for>for <control>(<init><expr><name>size</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</init> <condition><expr><name>size</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</condition> <incr><expr><name>size</name> <operator>-=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>size</name> <operator>%</operator> <name><name>ctx</name><operator>-&gt;</operator><name>block_align</name></name><operator>)</operator></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spillover_nbits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_superframes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>parse_packet_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_superframes</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sframe_cache_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>spillover_nbits</name></name> <operator>&gt;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spillover_nbits</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>copy_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spillover_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sframe_cache_size</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>spillover_nbits</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>synth_superframe</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>got_frame_ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><name>got_frame_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>spillover_nbits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_bits_next</name></name> <operator>=</operator> <name>cnt</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>cnt</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits_long</name> <argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spillover_nbits</name></name> <operator>-</operator> <name>cnt</name> <operator>+</operator>
<call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>spillover_nbits</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spillover_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>skip_bits_next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>skip_bits_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sframe_cache_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_bits_next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_superframes</name></name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_superframes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>synth_superframe</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>got_frame_ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>got_frame_ptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_bits_next</name></name> <operator>=</operator> <name>cnt</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>cnt</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sframe_cache_size</name></name> <operator>=</operator> <name>pos</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sframe_cache</name></name></expr></argument>, <argument><expr><name>SFRAME_CACHE_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sframe_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>wmavoice_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WMAVoiceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_apf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_rdft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_rdft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_wmavoice_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmavoice"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Windows Media Audio Voice"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMAVOICE</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WMAVoiceContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>wmavoice_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>wmavoice_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>wmavoice_decode_packet</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SUBFRAMES</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>wmavoice_flush</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
