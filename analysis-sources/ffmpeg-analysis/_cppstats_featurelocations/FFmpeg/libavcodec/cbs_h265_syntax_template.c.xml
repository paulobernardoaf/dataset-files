<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\cbs_h265_syntax_template.c">

















<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>rbsp_trailing_bits</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rbsp_stop_one_bit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>byte_alignment</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rbsp_alignment_zero_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>nal_unit_header</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawNALUnitHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>expected_nal_unit_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>forbidden_zero_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expected_nal_unit_type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>nal_unit_type</name></expr></argument>, <argument><expr><name>expected_nal_unit_type</name></expr></argument>,
<argument><expr><name>expected_nal_unit_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>nal_unit_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>nuh_layer_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>nuh_temporal_id_plus1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>byte_alignment</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alignment_bit_equal_to_one</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>byte_alignment</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alignment_bit_equal_to_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>extension_data</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawPSExtensionData</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name></decl>;</decl_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>*</operator><name>rw</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>cbs_h2645_read_more_rbsp_data</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>bit_length</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rw</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>allocate</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>bit_length</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>bit_length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>extension_data</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>k</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <name>bit</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>k</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>bit_length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>extension_data</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>k</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>k</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>profile_tier_level</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawProfileTierLevel</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>profile_present_flag</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_num_sub_layers_minus1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>profile_present_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>general_profile_space</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_tier_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>general_profile_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>general_profile_compatibility_flag</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_progressive_source_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_interlaced_source_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_non_packed_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_frame_only_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>profile_compatible</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(current-&gt;general_profile_idc == (x) || current-&gt;general_profile_compatibility_flag[x])</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_max_12bit_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_max_10bit_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_max_8bit_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_max_422chroma_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_max_420chroma_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_max_monochrome_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_intra_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_one_picture_only_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_lower_bit_rate_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_max_14bit_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>general_reserved_zero_33bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>general_reserved_zero_33bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>general_reserved_zero_34bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>general_reserved_zero_34bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>general_reserved_zero_7bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_one_picture_only_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>general_reserved_zero_35bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>general_reserved_zero_35bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>general_reserved_zero_43bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><name>general_reserved_zero_43bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>general_inbld_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>general_reserved_zero_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>profile_compatible</name></cpp:undef>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>general_level_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_num_sub_layers_minus1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_profile_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_level_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>max_num_sub_layers_minus1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>max_num_sub_layers_minus1</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>reserved_zero_2bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_num_sub_layers_minus1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sub_layer_profile_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>sub_layer_profile_space</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_tier_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>sub_layer_profile_idc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_profile_compatibility_flag</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_progressive_source_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_interlaced_source_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_non_packed_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_frame_only_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>profile_compatible</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(current-&gt;sub_layer_profile_idc[i] == (x) || current-&gt;sub_layer_profile_compatibility_flag[i][x])</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_max_12bit_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_max_10bit_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_max_8bit_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_max_422chroma_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_max_420chroma_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_max_monochrome_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_intra_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_one_picture_only_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_lower_bit_rate_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_max_14bit_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>sub_layer_reserved_zero_33bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>sub_layer_reserved_zero_33bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>sub_layer_reserved_zero_34bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>sub_layer_reserved_zero_34bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>sub_layer_reserved_zero_7bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_one_picture_only_constraint_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>sub_layer_reserved_zero_43bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>sub_layer_reserved_zero_43bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>sub_layer_reserved_zero_43bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><name>sub_layer_reserved_zero_43bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>profile_compatible</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>sub_layer_inbld_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sub_layer_reserved_zero_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>profile_compatible</name></cpp:undef>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sub_layer_level_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>sub_layer_level_idc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sub_layer_hrd_parameters</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawHRDParameters</name> <modifier>*</modifier></type><name>hrd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sub_layer_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>H265RawSubLayerHRDParameters</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>current</name> <operator>=</operator> <operator>&amp;</operator><name><name>hrd</name><operator>-&gt;</operator><name>nal_sub_layer_hrd_parameters</name><index>[<expr><name>sub_layer_id</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>current</name> <operator>=</operator> <operator>&amp;</operator><name><name>hrd</name><operator>-&gt;</operator><name>vcl_sub_layer_hrd_parameters</name><index>[<expr><name>sub_layer_id</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>cpb_cnt_minus1</name><index>[<expr><name>sub_layer_id</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>bit_rate_value_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>cpb_size_value_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hrd</name><operator>-&gt;</operator><name>sub_pic_hrd_params_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>cpb_size_du_value_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>bit_rate_du_value_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>cbr_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>hrd_parameters</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawHRDParameters</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>common_inf_present_flag</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_num_sub_layers_minus1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>common_inf_present_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>nal_hrd_parameters_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vcl_hrd_parameters_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name> <operator>||</operator>
<name><name>current</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sub_pic_hrd_params_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sub_pic_hrd_params_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>tick_divisor_minus2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>du_cpb_removal_delay_increment_length_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sub_pic_cpb_params_in_pic_timing_sei_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>dpb_output_delay_du_length_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>bit_rate_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cpb_size_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sub_pic_hrd_params_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cpb_size_du_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>initial_cpb_removal_delay_length_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>au_cpb_removal_delay_length_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>dpb_output_delay_length_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>sub_pic_hrd_params_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>initial_cpb_removal_delay_length_minus1</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>au_cpb_removal_delay_length_minus1</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>dpb_output_delay_length_minus1</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max_num_sub_layers_minus1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>fixed_pic_rate_general_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>fixed_pic_rate_general_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>fixed_pic_rate_within_cvs_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>fixed_pic_rate_within_cvs_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>fixed_pic_rate_within_cvs_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>elemental_duration_in_tc_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2047</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>low_delay_hrd_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>low_delay_hrd_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>low_delay_hrd_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>cpb_cnt_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>cpb_cnt_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sub_layer_hrd_parameters</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sub_layer_hrd_parameters</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>vui_parameters</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawVUI</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>aspect_ratio_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>aspect_ratio_info_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>aspect_ratio_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>aspect_ratio_idc</name></name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sar_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sar_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>aspect_ratio_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>overscan_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>overscan_info_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>overscan_appropriate_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>video_signal_type_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>video_signal_type_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>video_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>video_full_range_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>colour_description_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>colour_description_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>colour_primaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>transfer_characteristics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>matrix_coefficients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>colour_primaries</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>video_format</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>video_full_range_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>colour_primaries</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>chroma_loc_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>chroma_loc_info_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>chroma_sample_loc_type_top_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>chroma_sample_loc_type_bottom_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>chroma_sample_loc_type_top_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>chroma_sample_loc_type_bottom_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>neutral_chroma_indication_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>field_seq_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>frame_field_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>default_display_window_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>default_display_window_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>def_disp_win_left_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>def_disp_win_right_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>def_disp_win_top_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>def_disp_win_bottom_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vui_timing_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>vui_timing_info_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>vui_num_units_in_tick</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>vui_time_scale</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vui_poc_proportional_to_timing_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>vui_poc_proportional_to_timing_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>vui_num_ticks_poc_diff_one_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vui_hrd_parameters_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>vui_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>hrd_parameters</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>hrd_parameters</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>bitstream_restriction_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>tiles_fixed_structure_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>motion_vectors_over_pic_boundaries_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>restricted_ref_pic_lists_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>min_spatial_segmentation_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4095</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>max_bytes_per_pic_denom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>max_bits_per_min_cu_denom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_max_mv_length_horizontal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_max_mv_length_vertical</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>tiles_fixed_structure_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>motion_vectors_over_pic_boundaries_flag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>min_spatial_segmentation_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_bytes_per_pic_denom</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_bits_per_min_cu_denom</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>log2_max_mv_length_horizontal</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>log2_max_mv_length_vertical</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>vps</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawVPS</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Video Parameter Set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>, <argument><expr><name>HEVC_NAL_VPS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>vps_video_parameter_set_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vps_base_layer_internal_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vps_base_layer_available_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>vps_max_layers_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_LAYERS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vps_max_sub_layers_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_SUB_LAYERS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vps_temporal_id_nesting_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>current</name><operator>-&gt;</operator><name>vps_temporal_id_nesting_flag</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid stream: "</literal>
<literal type="string">"vps_temporal_id_nesting_flag must be 1 if "</literal>
<literal type="string">"vps_max_sub_layers_minus1 is 0.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>vps_reserved_0xffff_16bits</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>profile_tier_level</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>profile_tier_level</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vps_sub_layer_ordering_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>vps_sub_layer_ordering_info_present_flag</name></name></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>current</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr></else></ternary><operator>)</operator></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>vps_max_dec_pic_buffering_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_DPB_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>vps_max_num_reorder_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>vps_max_dec_pic_buffering_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>vps_max_latency_increase_plus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>vps_sub_layer_ordering_info_present_flag</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>vps_max_dec_pic_buffering_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>vps_max_dec_pic_buffering_minus1</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>vps_max_num_reorder_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>vps_max_num_reorder_pics</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>vps_max_latency_increase_plus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>vps_max_latency_increase_plus1</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>vps_max_layer_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_LAYERS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>vps_num_layer_sets_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_LAYER_SETS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>vps_num_layer_sets_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>vps_max_layer_id</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>layer_id_included_flag</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>vps_max_layer_id</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>layer_id_included_flag</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vps_timing_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>vps_timing_info_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>vps_num_units_in_tick</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>vps_time_scale</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vps_poc_proportional_to_timing_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>vps_poc_proportional_to_timing_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>vps_num_ticks_poc_diff_one_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>vps_num_hrd_parameters</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>vps_num_layer_sets_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>vps_num_hrd_parameters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>hrd_layer_set_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>vps_base_layer_internal_flag</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>vps_num_layer_sets_minus1</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>cprms_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>cprms_present_flag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>hrd_parameters</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>hrd_parameters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>cprms_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vps_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>vps_extension_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>extension_data</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>extension_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>rbsp_trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>st_ref_pic_set</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSTRefPicSet</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st_rps_idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>st_rps_idx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>inter_ref_pic_set_prediction_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>inter_ref_pic_set_prediction_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>inter_ref_pic_set_prediction_flag</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ref_rps_idx</name></decl>, <decl><type ref="prev"/><name>num_delta_pocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSTRefPicSet</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta_rps</name></decl>, <decl><type ref="prev"/><name>d_poc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ref_delta_poc_s0</name><index>[<expr><name>HEVC_MAX_REFS</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ref_delta_poc_s1</name><index>[<expr><name>HEVC_MAX_REFS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>delta_poc_s0</name><index>[<expr><name>HEVC_MAX_REFS</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>delta_poc_s1</name><index>[<expr><name>HEVC_MAX_REFS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>used_by_curr_pic_s0</name><index>[<expr><name>HEVC_MAX_REFS</name></expr>]</index></name></decl>,
<decl><type ref="prev"/><name><name>used_by_curr_pic_s1</name><index>[<expr><name>HEVC_MAX_REFS</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>st_rps_idx</name> <operator>==</operator> <name><name>sps</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>delta_idx_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>st_rps_idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_idx_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ref_rps_idx</name> <operator>=</operator> <name>st_rps_idx</name> <operator>-</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>delta_idx_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>st_ref_pic_set</name><index>[<expr><name>ref_rps_idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_delta_pocs</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>+</operator> <name><name>ref</name><operator>-&gt;</operator><name>num_positive_pics</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>delta_rps_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>abs_delta_rps_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta_rps</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>current</name><operator>-&gt;</operator><name>delta_rps_sign</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>abs_delta_rps_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>num_delta_pocs</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>used_by_curr_pic_flag</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>used_by_curr_pic_flag</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>use_delta_flag</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>use_delta_flag</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

















<expr_stmt><expr><name>d_poc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ref</name><operator>-&gt;</operator><name>num_negative_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d_poc</name> <operator>-=</operator> <name><name>ref</name><operator>-&gt;</operator><name>delta_poc_s0_minus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_delta_poc_s0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d_poc</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>d_poc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ref</name><operator>-&gt;</operator><name>num_positive_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d_poc</name> <operator>+=</operator> <name><name>ref</name><operator>-&gt;</operator><name>delta_poc_s1_minus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_delta_poc_s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d_poc</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>num_positive_pics</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d_poc</name> <operator>=</operator> <name><name>ref_delta_poc_s1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>delta_rps</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d_poc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>use_delta_flag</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>delta_poc_s0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d_poc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>used_by_curr_pic_s0</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<name><name>current</name><operator>-&gt;</operator><name>used_by_curr_pic_flag</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>delta_rps</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>use_delta_flag</name><index>[<expr><name>num_delta_pocs</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>delta_poc_s0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>delta_rps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>used_by_curr_pic_s0</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<name><name>current</name><operator>-&gt;</operator><name>used_by_curr_pic_flag</name><index>[<expr><name>num_delta_pocs</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ref</name><operator>-&gt;</operator><name>num_negative_pics</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d_poc</name> <operator>=</operator> <name><name>ref_delta_poc_s0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>delta_rps</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d_poc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>use_delta_flag</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>delta_poc_s0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d_poc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>used_by_curr_pic_s0</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>used_by_curr_pic_flag</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_negative_pics</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_negative_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>delta_poc_s0_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>-</operator><operator>(</operator><name><name>delta_poc_s0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>delta_poc_s0</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>used_by_curr_pic_s0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>used_by_curr_pic_s0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d_poc</name> <operator>=</operator> <name><name>ref_delta_poc_s0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>delta_rps</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d_poc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>use_delta_flag</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>delta_poc_s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d_poc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>used_by_curr_pic_s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>used_by_curr_pic_flag</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>delta_rps</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>use_delta_flag</name><index>[<expr><name>num_delta_pocs</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>delta_poc_s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>delta_rps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>used_by_curr_pic_s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<name><name>current</name><operator>-&gt;</operator><name>used_by_curr_pic_flag</name><index>[<expr><name>num_delta_pocs</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ref</name><operator>-&gt;</operator><name>num_positive_pics</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d_poc</name> <operator>=</operator> <name><name>ref_delta_poc_s1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>delta_rps</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d_poc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>use_delta_flag</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>delta_poc_s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d_poc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>used_by_curr_pic_s1</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
<name><name>current</name><operator>-&gt;</operator><name>used_by_curr_pic_flag</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_positive_pics</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_positive_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>delta_poc_s1_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>delta_poc_s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>delta_poc_s1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>used_by_curr_pic_s1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>used_by_curr_pic_s1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_negative_pics</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_positive_pics</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>num_negative_pics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_negative_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>delta_poc_s0_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>used_by_curr_pic_s0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_positive_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>delta_poc_s1_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>used_by_curr_pic_s1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>scaling_list_data</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawScalingList</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sizeId</name></decl>, <decl><type ref="prev"/><name>matrixId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sizeId</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sizeId</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sizeId</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>matrixId</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>matrixId</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>matrixId</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>sizeId</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>scaling_list_pred_mode_flag</name><index>[<expr><name>sizeId</name></expr>]</index><index>[<expr><name>matrixId</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>sizeId</name></expr></argument>, <argument><expr><name>matrixId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>scaling_list_pred_mode_flag</name><index>[<expr><name>sizeId</name></expr>]</index><index>[<expr><name>matrixId</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>scaling_list_pred_matrix_id_delta</name><index>[<expr><name>sizeId</name></expr>]</index><index>[<expr><name>matrixId</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sizeId</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>matrixId</name> <operator>/</operator> <literal type="number">3</literal></expr> </then><else>: <expr><name>matrixId</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>sizeId</name></expr></argument>, <argument><expr><name>matrixId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>sizeId</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sizeId</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>scaling_list_dc_coef_minus8</name><index>[<expr><name>sizeId</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>matrixId</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">7</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">247</literal></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>sizeId</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>matrixId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>scaling_list_delta_coeff</name><index>[<expr><name>sizeId</name></expr>]</index><index>[<expr><name>matrixId</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>sizeId</name></expr></argument>, <argument><expr><name>matrixId</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sps_range_extension</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSPS</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>transform_skip_rotation_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>transform_skip_context_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>implicit_rdpcm_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>explicit_rdpcm_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>extended_precision_processing_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>intra_smoothing_disabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>high_precision_offsets_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>persistent_rice_adaptation_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>cabac_bypass_alignment_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sps_scc_extension</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSPS</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>comp</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sps_curr_pic_ref_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>palette_mode_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>palette_mode_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>palette_max_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>delta_palette_max_predictor_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sps_palette_predictor_initializer_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sps_palette_predictor_initializer_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>sps_num_palette_predictor_initializer_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>comp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>comp</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name> <init>= <expr><ternary><condition><expr><name>comp</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>current</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal></expr>
</then><else>: <expr><name><name>current</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>sps_num_palette_predictor_initializer_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name><name>sps_palette_predictor_initializers</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>motion_vector_resolution_control_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>intra_boundary_filtering_disable_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sps</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSPS</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamH265Context</name> <modifier>*</modifier></type><name>h265</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawVPS</name> <modifier>*</modifier></type><name>vps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>min_cb_log2_size_y</name></decl>, <decl><type ref="prev"/><name>ctb_log2_size_y</name></decl>,
<decl><type ref="prev"/><name>min_cb_size_y</name></decl>, <decl><type ref="prev"/><name>min_tb_log2_size_y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Sequence Parameter Set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>, <argument><expr><name>HEVC_NAL_SPS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>sps_video_parameter_set_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h265</name><operator>-&gt;</operator><name>active_vps</name></name> <operator>=</operator> <name>vps</name> <operator>=</operator> <name><name>h265</name><operator>-&gt;</operator><name>vps</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>sps_video_parameter_set_id</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>sps_max_sub_layers_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_SUB_LAYERS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sps_temporal_id_nesting_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vps</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name> <operator>&gt;</operator> <name><name>current</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid stream: "</literal>
<literal type="string">"sps_max_sub_layers_minus1 (%d) must be less than or equal to "</literal>
<literal type="string">"vps_max_sub_layers_minus1 (%d).\n"</literal></expr></argument>,
<argument><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vps</name><operator>-&gt;</operator><name>vps_temporal_id_nesting_flag</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>sps_temporal_id_nesting_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid stream: "</literal>
<literal type="string">"sps_temporal_id_nesting_flag must be 1 if "</literal>
<literal type="string">"vps_temporal_id_nesting_flag is 1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>profile_tier_level</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>profile_tier_level</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>sps_seq_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>chroma_format_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>separate_colour_plane_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>separate_colour_plane_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pic_width_in_luma_samples</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>HEVC_MAX_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pic_height_in_luma_samples</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>HEVC_MAX_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>conformance_window_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>conformance_window_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>conf_win_left_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>conf_win_right_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>conf_win_top_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>conf_win_bottom_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>conf_win_left_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>conf_win_right_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>conf_win_top_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>conf_win_bottom_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>bit_depth_luma_minus8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>bit_depth_chroma_minus8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_max_pic_order_cnt_lsb_minus4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sps_sub_layer_ordering_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>sps_sub_layer_ordering_info_present_flag</name></name></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>current</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr></else></ternary><operator>)</operator></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>sps_max_dec_pic_buffering_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_DPB_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>sps_max_num_reorder_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>sps_max_dec_pic_buffering_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>sps_max_latency_increase_plus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>sps_sub_layer_ordering_info_present_flag</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>sps_max_dec_pic_buffering_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>sps_max_dec_pic_buffering_minus1</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>sps_max_num_reorder_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>sps_max_num_reorder_pics</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>sps_max_latency_increase_plus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>sps_max_latency_increase_plus1</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_min_luma_coding_block_size_minus3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_cb_log2_size_y</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>log2_min_luma_coding_block_size_minus3</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_diff_max_min_luma_coding_block_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctb_log2_size_y</name> <operator>=</operator> <name>min_cb_log2_size_y</name> <operator>+</operator>
<name><name>current</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_coding_block_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_cb_size_y</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>min_cb_log2_size_y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name> <operator>%</operator> <name>min_cb_size_y</name> <operator>||</operator>
<name><name>current</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name> <operator>%</operator> <name>min_cb_size_y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid dimensions: %ux%u not divisible "</literal>
<literal type="string">"by MinCbSizeY = %u.\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name></expr></argument>, <argument><expr><name>min_cb_size_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_min_luma_transform_block_size_minus2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>min_cb_log2_size_y</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min_tb_log2_size_y</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>log2_min_luma_transform_block_size_minus2</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_diff_max_min_luma_transform_block_size</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>ctb_log2_size_y</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>min_tb_log2_size_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>max_transform_hierarchy_depth_inter</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctb_log2_size_y</name> <operator>-</operator> <name>min_tb_log2_size_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>max_transform_hierarchy_depth_intra</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctb_log2_size_y</name> <operator>-</operator> <name>min_tb_log2_size_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>scaling_list_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>scaling_list_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sps_scaling_list_data_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sps_scaling_list_data_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>scaling_list_data</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>scaling_list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>sps_scaling_list_data_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>amp_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sample_adaptive_offset_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pcm_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pcm_sample_bit_depth_luma_minus1</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pcm_sample_bit_depth_chroma_minus1</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_min_pcm_luma_coding_block_size_minus3</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>min_cb_log2_size_y</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>ctb_log2_size_y</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_diff_max_min_pcm_luma_coding_block_size</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>ctb_log2_size_y</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>log2_min_pcm_luma_coding_block_size_minus3</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pcm_loop_filter_disabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_short_term_ref_pic_sets</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_SHORT_TERM_REF_PIC_SETS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>st_ref_pic_set</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>st_ref_pic_set</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>long_term_ref_pics_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_long_term_ref_pics_sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_LONG_TERM_REF_PICS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>lt_ref_pic_poc_lsb_sps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>used_by_curr_pic_lt_sps_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sps_temporal_mvp_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>strong_intra_smoothing_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vui_parameters_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>vui_parameters</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>vui</name></name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sps_extension_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sps_extension_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sps_range_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sps_multilayer_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sps_3d_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sps_scc_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>sps_extension_4bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sps_range_extension_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sps_range_extension</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sps_multilayer_extension_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sps_3d_extension_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sps_scc_extension_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sps_scc_extension</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>sps_extension_4bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>extension_data</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>extension_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>rbsp_trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>pps_range_extension</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawPPS</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamH265Context</name> <modifier>*</modifier></type><name>h265</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h265</name><operator>-&gt;</operator><name>active_sps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>transform_skip_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_max_transform_skip_block_size_minus2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>cross_component_prediction_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>chroma_qp_offset_list_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>chroma_qp_offset_list_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>diff_cu_chroma_qp_offset_depth</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_coding_block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>chroma_qp_offset_list_len_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>chroma_qp_offset_list_len_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>cb_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>cr_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_sao_offset_scale_luma</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_sao_offset_scale_chroma</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>pps_scc_extension</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawPPS</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>comp</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_curr_pic_ref_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>residual_adaptive_colour_transform_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>residual_adaptive_colour_transform_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_slice_act_qp_offsets_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>pps_act_y_qp_offset_plus5</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">7</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>pps_act_cb_qp_offset_plus5</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">7</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>pps_act_cr_qp_offset_plus3</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">9</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pps_slice_act_qp_offsets_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pps_act_y_qp_offset_plus5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pps_act_cb_qp_offset_plus5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pps_act_cr_qp_offset_plus3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_palette_predictor_initializer_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pps_palette_predictor_initializer_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pps_num_palette_predictor_initializer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pps_num_palette_predictor_initializer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>monochrome_palette_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>luma_bit_depth_entry_minus8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>monochrome_palette_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>chroma_bit_depth_entry_minus8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>comp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>comp</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>monochrome_palette_flag</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name> <init>= <expr><ternary><condition><expr><name>comp</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>current</name><operator>-&gt;</operator><name>luma_bit_depth_entry_minus8</name></name> <operator>+</operator> <literal type="number">8</literal></expr>
</then><else>: <expr><name><name>current</name><operator>-&gt;</operator><name>chroma_bit_depth_entry_minus8</name></name> <operator>+</operator> <literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>pps_num_palette_predictor_initializer</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name><name>pps_palette_predictor_initializers</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>pps</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawPPS</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamH265Context</name> <modifier>*</modifier></type><name>h265</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Picture Parameter Set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>, <argument><expr><name>HEVC_NAL_PPS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pps_pic_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pps_seq_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>h265</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>pps_seq_parameter_set_id</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS id %d not available.\n"</literal></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>pps_seq_parameter_set_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>h265</name><operator>-&gt;</operator><name>active_sps</name></name> <operator>=</operator> <name>sps</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>dependent_slice_segments_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>output_flag_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>num_extra_slice_header_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sign_data_hiding_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>cabac_init_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_ref_idx_l0_default_active_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_ref_idx_l1_default_active_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>init_qp_minus26</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><literal type="number">26</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>+</operator><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>constrained_intra_pred_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>transform_skip_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>cu_qp_delta_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>diff_cu_qp_delta_depth</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_coding_block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>diff_cu_qp_delta_depth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>pps_cb_qp_offset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>pps_cr_qp_offset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_slice_chroma_qp_offsets_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>weighted_pred_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>weighted_bipred_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>transquant_bypass_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>tiles_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>entropy_coding_sync_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_tile_columns_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_TILE_COLUMNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_tile_rows_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_TILE_ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>uniform_spacing_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_tile_columns_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>column_width_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_tile_rows_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>row_height_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>loop_filter_across_tiles_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_tile_columns_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_tile_rows_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_loop_filter_across_slices_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>deblocking_filter_control_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>deblocking_filter_control_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>deblocking_filter_override_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_deblocking_filter_disabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>pps_deblocking_filter_disabled_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>pps_beta_offset_div2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>pps_tc_offset_div2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pps_beta_offset_div2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pps_tc_offset_div2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>deblocking_filter_override_enabled_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pps_deblocking_filter_disabled_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pps_beta_offset_div2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pps_tc_offset_div2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_scaling_list_data_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pps_scaling_list_data_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>scaling_list_data</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>scaling_list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>lists_modification_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_parallel_merge_level_minus2</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>log2_min_luma_coding_block_size_minus3</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator>
<name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_coding_block_size</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>slice_segment_header_extension_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_extension_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pps_extension_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_range_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_multilayer_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_3d_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pps_scc_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pps_extension_4bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pps_range_extension_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>pps_range_extension</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pps_multilayer_extension_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pps_3d_extension_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pps_scc_extension_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>pps_scc_extension</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pps_extension_4bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>extension_data</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>extension_data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>rbsp_trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>aud</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawAUD</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Access Unit Delimiter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>, <argument><expr><name>HEVC_NAL_AUD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>pic_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>rbsp_trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>ref_pic_lists_modification</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSliceHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_pic_total_curr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>entry_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry_size</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>num_pic_total_curr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>ref_pic_list_modification_flag_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>ref_pic_list_modification_flag_l0</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><name>entry_size</name></expr></argument>, <argument><expr><name><name>list_entry_l0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_pic_total_curr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>ref_pic_list_modification_flag_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>ref_pic_list_modification_flag_l1</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><name>entry_size</name></expr></argument>, <argument><expr><name><name>list_entry_l1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_pic_total_curr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>pred_weight_table</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSliceHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamH265Context</name> <modifier>*</modifier></type><name>h265</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h265</name><operator>-&gt;</operator><name>active_sps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chroma</name> <init>= <expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name> <operator>&amp;&amp;</operator>
<name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>luma_log2_weight_denom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>delta_chroma_log2_weight_denom</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_chroma_log2_weight_denom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>luma_weight_l0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>luma_weight_l0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>chroma_weight_l0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>chroma_weight_l0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>luma_weight_l0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>delta_luma_weight_l0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>luma_offset_l0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>delta_luma_weight_l0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>luma_offset_l0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>chroma_weight_l0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>delta_chroma_weight_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>chroma_offset_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>-</operator><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>delta_chroma_weight_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>chroma_offset_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>luma_weight_l1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>luma_weight_l1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>chroma_weight_l1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>chroma_weight_l1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>luma_weight_l1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>delta_luma_weight_l1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>luma_offset_l1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>delta_luma_weight_l1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>luma_offset_l1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>chroma_weight_l1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>delta_chroma_weight_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>chroma_offset_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>-</operator><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>delta_chroma_weight_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>chroma_offset_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>slice_segment_header</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSliceHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamH265Context</name> <modifier>*</modifier></type><name>h265</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawPPS</name> <modifier>*</modifier></type><name>pps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>min_cb_log2_size_y</name></decl>, <decl><type ref="prev"/><name>ctb_log2_size_y</name></decl>, <decl><type ref="prev"/><name>ctb_size_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pic_width_in_ctbs_y</name></decl>, <decl><type ref="prev"/><name>pic_height_in_ctbs_y</name></decl>, <decl><type ref="prev"/><name>pic_size_in_ctbs_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_pic_total_curr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Slice Segment Header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>first_slice_segment_in_pic_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>&gt;=</operator> <name>HEVC_NAL_BLA_W_LP</name> <operator>&amp;&amp;</operator>
<name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>&lt;=</operator> <name>HEVC_NAL_RSV_IRAP_VCL23</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>no_output_of_prior_pics_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>slice_pic_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pps</name> <operator>=</operator> <name><name>h265</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>slice_pic_parameter_set_id</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PPS id %d not available.\n"</literal></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>slice_pic_parameter_set_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>h265</name><operator>-&gt;</operator><name>active_pps</name></name> <operator>=</operator> <name>pps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>h265</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name><name>pps</name><operator>-&gt;</operator><name>pps_seq_parameter_set_id</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS id %d not available.\n"</literal></expr></argument>,
<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>pps_seq_parameter_set_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>h265</name><operator>-&gt;</operator><name>active_sps</name></name> <operator>=</operator> <name>sps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_cb_log2_size_y</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_luma_coding_block_size_minus3</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ctb_log2_size_y</name> <operator>=</operator> <name>min_cb_log2_size_y</name> <operator>+</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_coding_block_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctb_size_y</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ctb_log2_size_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pic_width_in_ctbs_y</name> <operator>=</operator>
<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name> <operator>+</operator> <name>ctb_size_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>ctb_size_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pic_height_in_ctbs_y</name> <operator>=</operator>
<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name> <operator>+</operator> <name>ctb_size_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>ctb_size_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pic_size_in_ctbs_y</name> <operator>=</operator> <name>pic_width_in_ctbs_y</name> <operator>*</operator> <name>pic_height_in_ctbs_y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>first_slice_segment_in_pic_flag</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>address_size</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>pic_size_in_ctbs_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>dependent_slice_segments_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>dependent_slice_segment_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>dependent_slice_segment_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><name>address_size</name></expr></argument>, <argument><expr><name>slice_segment_address</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pic_size_in_ctbs_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>dependent_slice_segment_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>dependent_slice_segment_flag</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>slice_reserved_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>slice_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>output_flag_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pic_output_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>colour_plane_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>!=</operator> <name>HEVC_NAL_IDR_W_RADL</name> <operator>&amp;&amp;</operator>
<name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>!=</operator> <name>HEVC_NAL_IDR_N_LP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSTRefPicSet</name> <modifier>*</modifier></type><name>rps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>slice_pic_order_cnt_lsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>short_term_ref_pic_set_sps_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>short_term_ref_pic_set_sps_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>st_ref_pic_set</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>short_term_ref_pic_set</name></name></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rps</name> <operator>=</operator> <operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>short_term_ref_pic_set</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx_size</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><name>idx_size</name></expr></argument>, <argument><expr><name>short_term_ref_pic_set_idx</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rps</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>st_ref_pic_set</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>short_term_ref_pic_set_idx</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>short_term_ref_pic_set_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rps</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>st_ref_pic_set</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_pic_total_curr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>rps</name><operator>-&gt;</operator><name>used_by_curr_pic_s0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>num_pic_total_curr</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rps</name><operator>-&gt;</operator><name>num_positive_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>rps</name><operator>-&gt;</operator><name>used_by_curr_pic_s1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>num_pic_total_curr</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_long_term_sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx_size</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_long_term_sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_long_term_pics</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_LONG_TERM_REF_PICS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_long_term_sps</name></name> <operator>+</operator>
<name><name>current</name><operator>-&gt;</operator><name>num_long_term_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_long_term_sps</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><name>idx_size</name></expr></argument>, <argument><expr><name><name>lt_idx_sps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>used_by_curr_pic_lt_sps_flag</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>lt_idx_sps</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>num_pic_total_curr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>poc_lsb_lt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>used_by_curr_pic_lt_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>used_by_curr_pic_lt_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>num_pic_total_curr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>delta_poc_msb_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>delta_poc_msb_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>delta_poc_msb_cycle_lt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>delta_poc_msb_cycle_lt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>sps_temporal_mvp_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>slice_temporal_mvp_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_temporal_mvp_enabled_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>pps_curr_pic_ref_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>num_pic_total_curr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>sample_adaptive_offset_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>slice_sao_luma_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name> <operator>&amp;&amp;</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>slice_sao_chroma_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_sao_chroma_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_sao_luma_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_sao_chroma_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_P</name> <operator>||</operator>
<name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>num_ref_idx_active_override_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_active_override_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_ref_idx_l0_active_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_ref_idx_l1_active_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_ref_idx_l1_active_minus1</name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active_minus1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_ref_idx_l0_active_minus1</name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active_minus1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_ref_idx_l1_active_minus1</name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active_minus1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>lists_modification_present_flag</name></name> <operator>&amp;&amp;</operator> <name>num_pic_total_curr</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>ref_pic_lists_modification</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name>num_pic_total_curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>mvd_l1_zero_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>cabac_init_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>cabac_init_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>cabac_init_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_temporal_mvp_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>collocated_from_l0_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>collocated_from_l0_flag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>collocated_from_l0_flag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>collocated_ref_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>collocated_ref_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>collocated_ref_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>collocated_ref_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_P</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_flag</name></name> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>pred_weight_table</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>five_minus_max_num_merge_cand</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>motion_vector_resolution_control_idc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>use_integer_mv_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>use_integer_mv_flag</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>motion_vector_resolution_control_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_qp_delta</name></expr></argument>,
<argument><expr><operator>-</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>init_qp_minus26</name></name> <operator>+</operator> <literal type="number">26</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>+</operator> <literal type="number">51</literal> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>init_qp_minus26</name></name> <operator>+</operator> <literal type="number">26</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>pps_slice_chroma_qp_offsets_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_cb_qp_offset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_cr_qp_offset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_cb_qp_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_cr_qp_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>pps_slice_act_qp_offsets_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_act_y_qp_offset</name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">12</literal> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>pps_act_y_qp_offset_plus5</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>+</operator><literal type="number">12</literal> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>pps_act_y_qp_offset_plus5</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_act_cb_qp_offset</name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">12</literal> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>pps_act_cb_qp_offset_plus5</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>+</operator><literal type="number">12</literal> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>pps_act_cb_qp_offset_plus5</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_act_cr_qp_offset</name></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">12</literal> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>pps_act_cr_qp_offset_plus3</name></name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>+</operator><literal type="number">12</literal> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>pps_act_cr_qp_offset_plus3</name></name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_act_y_qp_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_act_cb_qp_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_act_cr_qp_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>cu_chroma_qp_offset_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>cu_chroma_qp_offset_enabled_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_override_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>deblocking_filter_override_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>deblocking_filter_override_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>deblocking_filter_override_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>slice_deblocking_filter_disabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>slice_deblocking_filter_disabled_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_beta_offset_div2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_tc_offset_div2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_beta_offset_div2</name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>pps_beta_offset_div2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_tc_offset_div2</name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>pps_tc_offset_div2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_deblocking_filter_disabled_flag</name></expr></argument>,
<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>pps_deblocking_filter_disabled_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_beta_offset_div2</name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>pps_beta_offset_div2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_tc_offset_div2</name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>pps_tc_offset_div2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>pps_loop_filter_across_slices_enabled_flag</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>slice_sao_luma_flag</name></name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>slice_sao_chroma_flag</name></name> <operator>||</operator>
<operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>slice_deblocking_filter_disabled_flag</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>slice_loop_filter_across_slices_enabled_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_loop_filter_across_slices_enabled_flag</name></expr></argument>,
<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>pps_loop_filter_across_slices_enabled_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name> <operator>||</operator> <name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_entry_point_offsets_limit</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name> <operator>&amp;&amp;</operator> <name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_entry_point_offsets_limit</name> <operator>=</operator> <name>pic_height_in_ctbs_y</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_entry_point_offsets_limit</name> <operator>=</operator>
<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>num_entry_point_offsets_limit</name> <operator>=</operator>
<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>pic_height_in_ctbs_y</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_entry_point_offsets</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_entry_point_offsets_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>num_entry_point_offsets</name></name> <operator>&gt;</operator> <name>HEVC_MAX_ENTRY_POINT_OFFSETS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many entry points: "</literal>
<literal type="string">"%"</literal><name>PRIu16</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>num_entry_point_offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>num_entry_point_offsets</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>offset_len_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_entry_point_offsets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>offset_len_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>entry_point_offset_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>slice_segment_header_extension_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>slice_segment_header_extension_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>slice_segment_header_extension_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>slice_segment_header_extension_data_byte</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>byte_alignment</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_buffering_period</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIBufferingPeriod</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>payload_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamH265Context</name> <modifier>*</modifier></type><name>h265</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawHRDParameters</name> <modifier>*</modifier></type><name>hrd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>start_pos</name></decl>, <decl><type ref="prev"/><name>end_pos</name></decl>, <decl><type ref="prev"/><name>bits_left</name></decl>;</decl_stmt>
<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Buffering Period"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>bp_seq_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_SPS_COUNT</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>h265</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>bp_seq_parameter_set_id</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS id %d not available.\n"</literal></expr></argument>,
<argument><expr><name><name>current</name><operator>-&gt;</operator><name>bp_seq_parameter_set_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>h265</name><operator>-&gt;</operator><name>active_sps</name></name> <operator>=</operator> <name>sps</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name> <operator>||</operator>
<operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffering period SEI requires "</literal>
<literal type="string">"HRD parameters to be present in SPS.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hrd</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>hrd_parameters</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hrd</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>hrd</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffering period SEI requires "</literal>
<literal type="string">"NAL or VCL HRD parameters to be present.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hrd</name><operator>-&gt;</operator><name>sub_pic_hrd_params_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>irap_cpb_params_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>irap_cpb_params_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>irap_cpb_params_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>au_cpb_removal_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>cpb_delay_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>dpb_output_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>dpb_delay_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>cpb_delay_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>dpb_delay_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>concatenation_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>au_cpb_removal_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>au_cpb_removal_delay_delta_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hrd</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>cpb_cnt_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>initial_cpb_removal_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>nal_initial_cpb_removal_delay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>nal_initial_cpb_removal_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hrd</name><operator>-&gt;</operator><name>sub_pic_hrd_params_present_flag</name></name> <operator>||</operator>
<name><name>current</name><operator>-&gt;</operator><name>irap_cpb_params_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>nal_initial_alt_cpb_removal_delay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>nal_initial_alt_cpb_removal_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hrd</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>cpb_cnt_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>initial_cpb_removal_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>vcl_initial_cpb_removal_delay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>vcl_initial_cpb_removal_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hrd</name><operator>-&gt;</operator><name>sub_pic_hrd_params_present_flag</name></name> <operator>||</operator>
<name><name>current</name><operator>-&gt;</operator><name>irap_cpb_params_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>vcl_initial_alt_cpb_removal_delay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>vcl_initial_alt_cpb_removal_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits_left</name> <operator>=</operator> <operator>*</operator><name>payload_size</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>end_pos</name> <operator>-</operator> <name>start_pos</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits_left</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>bits_left</name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>||</operator> <call><name>ff_ctz</name><argument_list>(<argument><expr><call><name>show_bits</name><argument_list>(<argument><expr><name>rw</name></expr></argument>, <argument><expr><name>bits_left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>bits_left</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>use_alt_cpb_params_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>use_alt_cpb_params_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>use_alt_cpb_params_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>use_alt_cpb_params_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_pic_timing</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIPicTiming</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamH265Context</name> <modifier>*</modifier></type><name>h265</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawHRDParameters</name> <modifier>*</modifier></type><name>hrd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>expected_source_scan_type</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Picture Timing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>h265</name><operator>-&gt;</operator><name>active_sps</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"No active SPS for pic_timing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>expected_source_scan_type</name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator>
<literal type="number">2</literal> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general_interlaced_source_flag</name></name> <operator>-</operator>
<name><name>sps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general_progressive_source_flag</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>frame_field_info_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pic_struct</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>source_scan_type</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>expected_source_scan_type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>expected_source_scan_type</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>expected_source_scan_type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>expected_source_scan_type</name></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>duplicate_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pic_struct</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>source_scan_type</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>expected_source_scan_type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>expected_source_scan_type</name></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>duplicate_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name> <operator>&amp;&amp;</operator>
<name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hrd</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>hrd_parameters</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hrd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hrd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hrd</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name> <operator>||</operator>
<name><name>hrd</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>au_cpb_removal_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>au_cpb_removal_delay_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>dpb_output_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>pic_dpb_output_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hrd</name><operator>-&gt;</operator><name>sub_pic_hrd_params_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>dpb_output_delay_du_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>pic_dpb_output_du_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hrd</name><operator>-&gt;</operator><name>sub_pic_hrd_params_present_flag</name></name> <operator>&amp;&amp;</operator>
<name><name>hrd</name><operator>-&gt;</operator><name>sub_pic_cpb_params_in_pic_timing_sei_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_decoding_units_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_SLICE_SEGMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>du_common_cpb_removal_delay_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>hrd</name><operator>-&gt;</operator><name>du_cpb_removal_delay_increment_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>du_common_cpb_removal_delay_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>du_common_cpb_removal_delay_increment_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_decoding_units_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>num_nalus_in_du_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_SLICE_SEGMENTS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>du_common_cpb_removal_delay_flag</name></name> <operator>&amp;&amp;</operator>
<name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_decoding_units_minus1</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>du_cpb_removal_delay_increment_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_pan_scan_rect</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIPanScanRect</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Pan-Scan Rectangle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pan_scan_rect_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pan_scan_rect_cancel_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>pan_scan_rect_cancel_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pan_scan_cnt_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>pan_scan_cnt_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>pan_scan_rect_left_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>pan_scan_rect_right_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>pan_scan_rect_top_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>pan_scan_rect_bottom_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pan_scan_rect_persistence_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_user_data_registered</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIUserDataRegistered</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>payload_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"User Data Registered ITU-T T.35"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>itu_t_t35_country_code</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>itu_t_t35_country_code</name></name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>itu_t_t35_country_code_extension_byte</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>payload_size</name> <operator>&lt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid SEI user data registered payload.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>data_length</name></name> <operator>=</operator> <operator>*</operator><name>payload_size</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>payload_size</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>allocate</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>itu_t_t35_payload_byte</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_user_data_unregistered</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIUserDataUnregistered</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>payload_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"User Data Unregistered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>payload_size</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid SEI user data unregistered payload.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>data_length</name></name> <operator>=</operator> <operator>*</operator><name>payload_size</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>payload_size</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>uuid_iso_iec_11578</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>allocate</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>user_data_payload_byte</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_recovery_point</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIRecoveryPoint</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Recovery Point"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>recovery_poc_cnt</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>exact_match_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>broken_link_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_display_orientation</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIDisplayOrientation</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Display Orientation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>display_orientation_cancel_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>display_orientation_cancel_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>hor_flip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>ver_flip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>anticlockwise_rotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>display_orientation_persistence_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_active_parameter_sets</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIActiveParameterSets</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamH265Context</name> <modifier>*</modifier></type><name>h265</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawVPS</name> <modifier>*</modifier></type><name>vps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Active Parameter Sets"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>active_video_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_VPS_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vps</name> <operator>=</operator> <name><name>h265</name><operator>-&gt;</operator><name>vps</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>active_video_parameter_set_id</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"VPS id %d not available for active "</literal>
<literal type="string">"parameter sets.\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>active_video_parameter_set_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>h265</name><operator>-&gt;</operator><name>active_vps</name></name> <operator>=</operator> <name>vps</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>self_contained_cvs_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>no_parameter_set_update_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_sps_ids_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_SPS_COUNT</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_sps_ids_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>active_seq_parameter_set_id</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HEVC_MAX_SPS_COUNT</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_base_layer_internal_flag</name></name></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">62</literal></expr></argument>, <argument><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_layers_minus1</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>layer_sps_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>num_sps_ids_minus1</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h265</name><operator>-&gt;</operator><name>active_sps</name></name> <operator>=</operator> <name><name>h265</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>active_seq_parameter_set_id</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>layer_sps_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_decoded_picture_hash</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIDecodedPictureHash</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamH265Context</name> <modifier>*</modifier></type><name>h265</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h265</name><operator>-&gt;</operator><name>active_sps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Decoded Picture Hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"No active SPS for decoded picture hash.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>hash_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>hash_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>picture_md5</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>hash_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>picture_crc</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>hash_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>picture_checksum</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_time_code</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEITimeCode</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Time Code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>num_clock_ts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_clock_ts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>clock_timestamp_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>clock_timestamp_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>units_field_based_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>counting_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>full_timestamp_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>discontinuity_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>cnt_dropped_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name><name>n_frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>full_timestamp_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>seconds_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>minutes_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>hours_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>seconds_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>seconds_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>seconds_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>minutes_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>minutes_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>minutes_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>hours_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>hours_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>hours_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ubs</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>time_offset_length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>time_offset_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ibs</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>time_offset_length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>time_offset_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>time_offset_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_mastering_display</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIMasteringDisplayColourVolume</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Mastering Display Colour Volume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>display_primaries_x</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>display_primaries_y</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>white_point_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>white_point_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>max_display_mastering_luminance</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>min_display_mastering_luminance</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>max_display_mastering_luminance</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_content_light_level</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIContentLightLevelInfo</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Content Light Level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>max_content_light_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>max_pic_average_light_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_alternative_transfer_characteristics</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIAlternativeTransferCharacteristics</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Alternative Transfer Characteristics"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>preferred_transfer_characteristics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_alpha_channel_info</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIAlphaChannelInfo</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Alpha Channel Information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>alpha_channel_cancel_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>alpha_channel_cancel_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>alpha_channel_use_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>alpha_channel_bit_depth_minus8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>alpha_channel_bit_depth_minus8</name></name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>alpha_transparent_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>alpha_opaque_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>alpha_channel_incr_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>alpha_channel_clip_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>alpha_channel_clip_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>alpha_channel_clip_type_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>alpha_channel_use_idc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>alpha_channel_incr_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>alpha_channel_clip_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_payload</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEIPayload</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_position</name></decl>, <decl><type ref="prev"/><name>end_position</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>start_position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>start_position</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>payload_type</name></name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEI_TYPE_CHECK_VALID</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>prefix_valid</name></type></parameter>, <parameter><type><name>suffix_valid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (prefix &amp;&amp; !prefix_valid) { av_log(ctx-&gt;log_ctx, AV_LOG_ERROR, "SEI type %s invalid " "as prefix SEI!\n", #name); return AVERROR_INVALIDDATA; } if (!prefix &amp;&amp; !suffix_valid) { av_log(ctx-&gt;log_ctx, AV_LOG_ERROR, "SEI type %s invalid " "as suffix SEI!\n", #name); return AVERROR_INVALIDDATA; } } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEI_TYPE_N</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>prefix_valid</name></type></parameter>, <parameter><type><name>suffix_valid</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case HEVC_SEI_TYPE_ ##type: SEI_TYPE_CHECK_VALID(name, prefix_valid, suffix_valid); CHECK(FUNC(sei_ ##name)(ctx, rw, &amp;current-&gt;payload.name)); break</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEI_TYPE_S</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>prefix_valid</name></type></parameter>, <parameter><type><name>suffix_valid</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case HEVC_SEI_TYPE_ ##type: SEI_TYPE_CHECK_VALID(name, prefix_valid, suffix_valid); CHECK(FUNC(sei_ ##name)(ctx, rw, &amp;current-&gt;payload.name, &amp;current-&gt;payload_size)); break</cpp:value></cpp:define>






<expr_stmt><expr><call><name>SEI_TYPE_S</name><argument_list>(<argument><expr><name>BUFFERING_PERIOD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffering_period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_N</name><argument_list>(<argument><expr><name>PICTURE_TIMING</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pic_timing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_N</name><argument_list>(<argument><expr><name>PAN_SCAN_RECT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pan_scan_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_S</name><argument_list>(<argument><expr><name>USER_DATA_REGISTERED_ITU_T_T35</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>user_data_registered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_S</name><argument_list>(<argument><expr><name>USER_DATA_UNREGISTERED</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>user_data_unregistered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_N</name><argument_list>(<argument><expr><name>RECOVERY_POINT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>recovery_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_N</name><argument_list>(<argument><expr><name>DISPLAY_ORIENTATION</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>display_orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_N</name><argument_list>(<argument><expr><name>ACTIVE_PARAMETER_SETS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>active_parameter_sets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_N</name><argument_list>(<argument><expr><name>DECODED_PICTURE_HASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>decoded_picture_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_N</name><argument_list>(<argument><expr><name>TIME_CODE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>time_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_N</name><argument_list>(<argument><expr><name>MASTERING_DISPLAY_INFO</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mastering_display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_N</name><argument_list>(<argument><expr><name>CONTENT_LIGHT_LEVEL_INFO</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>content_light_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_N</name><argument_list>(<argument><expr><name>ALTERNATIVE_TRANSFER_CHARACTERISTICS</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>alternative_transfer_characteristics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEI_TYPE_N</name><argument_list>(<argument><expr><name>ALPHA_CHANNEL_INFO</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>alpha_channel_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SEI_TYPE</name></cpp:undef>
<default>default:</default>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>other</name><operator>.</operator><name>data_length</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>allocate</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>other</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>other</name><operator>.</operator><name>data_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>payload_byte</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>other</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>byte_alignment</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bit_equal_to_one</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>byte_alignment</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bit_equal_to_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>end_position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end_position</name> <operator>&lt;</operator> <name>start_position</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect SEI payload length: "</literal>
<literal type="string">"header %"</literal><name>PRIu32</name><literal type="string">" bits, actually %d bits.\n"</literal></expr></argument>,
<argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr></argument>,
<argument><expr><name>end_position</name> <operator>-</operator> <name>start_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>end_position</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name> <operator>=</operator> <operator>(</operator><name>end_position</name> <operator>-</operator> <name>start_position</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,
<parameter><decl><type><name>H265RawSEI</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Prefix Supplemental Enhancement Information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Suffix Supplemental Enhancement Information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>HEVC_NAL_SEI_PREFIX</name></expr>
</then><else>: <expr><name>HEVC_NAL_SEI_SUFFIX</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>H265_MAX_SEI_PAYLOADS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>payload_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>payload_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>show_bits</name><argument_list>(<argument><expr><name>rw</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_byte</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>payload_type</name> <operator>+=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>last_payload_type_byte</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>payload_type</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>show_bits</name><argument_list>(<argument><expr><name>rw</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_byte</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>payload_size</name> <operator>+=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>last_payload_size_byte</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>payload_size</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>payload_type</name> <operator>=</operator> <name>payload_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>payload_size</name> <operator>=</operator> <name>payload_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_payload</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cbs_h2645_read_more_rbsp_data</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>H265_MAX_SEI_PAYLOADS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many payloads in "</literal>
<literal type="string">"SEI message: found %d.\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_count</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>start_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>




<expr_stmt><expr><name>start_state</name> <operator>=</operator> <operator>*</operator><name>rw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>need_size</name> <operator>=</operator> <operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>payload_size</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <name>need_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rw</name> <operator>=</operator> <name>start_state</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>payload_type</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_byte</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>-=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>last_payload_type_byte</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>payload_size</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_byte</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>-=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>last_payload_size_byte</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_payload</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>rbsp_trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
