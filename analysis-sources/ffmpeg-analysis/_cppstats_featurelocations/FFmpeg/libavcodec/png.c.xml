<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\png.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"png.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_png_pass_ymask</name><index>[<expr><name>NB_PASSES</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x55</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_png_pass_xmin</name><index>[<expr><name>NB_PASSES</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_png_pass_xshift</name><index>[<expr><name>NB_PASSES</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name> <modifier>*</modifier></type><name>ff_png_zalloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>items</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_png_zfree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_png_get_nb_channels</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>color_type</name> <operator>&amp;</operator> <operator>(</operator><name>PNG_COLOR_MASK_COLOR</name> <operator>|</operator> <name>PNG_COLOR_MASK_PALETTE</name><operator>)</operator><operator>)</operator> <operator>==</operator>
<name>PNG_COLOR_MASK_COLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>color_type</name> <operator>&amp;</operator> <name>PNG_COLOR_MASK_ALPHA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>channels</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>channels</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>ff_png_pass_row_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits_per_pixel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>xmin</name></decl>, <decl><type ref="prev"/><name>pass_width</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xmin</name> <operator>=</operator> <name><name>ff_png_pass_xmin</name><index>[<expr><name>pass</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <name>xmin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>ff_png_pass_xshift</name><index>[<expr><name>pass</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pass_width</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>xmin</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>pass_width</name> <operator>*</operator> <name>bits_per_pixel</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>
</unit>
