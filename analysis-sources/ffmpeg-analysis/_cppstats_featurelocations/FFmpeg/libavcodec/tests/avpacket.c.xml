<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\tests\avpacket.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/error.h"</cpp:file></cpp:include>



<function><type><specifier>static</specifier> <name>int</name></type> <name>setup_side_data_entry</name><parameter_list>(<parameter><decl><type><name>AVPacket</name><modifier>*</modifier></type> <name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extra_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>data_name</name> <operator>=</operator> <call><name>av_packet_side_data_name</name><argument_list>(<argument><expr><name>AV_PKT_DATA_NEW_EXTRADATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>extra_data</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error occurred: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>extra_data</name></expr></argument>, <argument><expr><name>data_name</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_add_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_NEW_EXTRADATA</name></expr></argument>,
<argument><expr><name>extra_data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Error occurred in av_packet_add_side_data: %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>initializations</name><parameter_list>(<parameter><decl><type><name>AVPacket</name><modifier>*</modifier></type> <name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><literal type="string">"selftest for av_packet_clone(...)"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>AV_PKT_FLAG_DISCARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setup_side_data_entry</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>avpkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt_clone</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>initializations</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to initialize variables\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>avpkt_clone</name> <operator>=</operator> <call><name>av_packet_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>avpkt_clone</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,<argument><expr><literal type="string">"av_packet_clone failed to clone AVPacket\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_grow_packet</name><argument_list>(<argument><expr><name>avpkt_clone</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"av_grow_packet failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>av_grow_packet</name><argument_list>(<argument><expr><name>avpkt_clone</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"av_grow_packet failed to return error "</literal>
<literal type="string">"when \"grow_by\" parameter is too large.\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_new_packet</name><argument_list>(<argument><expr><name>avpkt_clone</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"av_new_packet failed to return error "</literal>
<literal type="string">"when \"size\" parameter is too large.\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_packet_from_data</name><argument_list>(<argument><expr><name>avpkt_clone</name></expr></argument>, <argument><expr><name><name>avpkt_clone</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"av_packet_from_data failed to return error "</literal>
<literal type="string">"when \"size\" parameter is too large.\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
