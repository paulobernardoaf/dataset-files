<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\tests\fft.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVFFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/fft.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/rdft.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) * (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMAC</name><parameter_list>(<parameter><type><name>pre</name></type></parameter>, <parameter><type><name>pim</name></type></parameter>, <parameter><type><name>are</name></type></parameter>, <parameter><type><name>aim</name></type></parameter>, <parameter><type><name>bre</name></type></parameter>, <parameter><type><name>bim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ pre += (MUL16(are, bre) - MUL16(aim, bim)); pim += (MUL16(are, bim) + MUL16(bre, aim)); }</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name> <operator>||</operator> <name>AVFFT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE</name></cpp:macro> <cpp:value>1.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_SCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT</name></cpp:macro> <cpp:value>"%10.6f"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>FFT_FIXED_32</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE</name></cpp:macro> <cpp:value>8388608</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_SCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT</name></cpp:macro> <cpp:value>"%6d"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_SCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) / (1 &lt;&lt; (bits)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT</name></cpp:macro> <cpp:value>"%6d"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>float</name></type> <name>re</name></decl>, <decl><type ref="prev"/><name>im</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>exptab</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fft_ref_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbits</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exptab</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>exptab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exptab</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>alpha</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>c1</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>s1</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inverse</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>-</operator><name>s1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>exptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fft_ref</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>tabr</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>tmp_re</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmp_im</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>tab</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>i</name> <operator>*</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>n2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><name><name>exptab</name><index>[<expr><name>k</name> <operator>-</operator> <name>n2</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><name><name>exptab</name><index>[<expr><name>k</name> <operator>-</operator> <name>n2</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>exptab</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>exptab</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CMAC</name><argument_list>(<argument><expr><name>tmp_re</name></expr></argument>, <argument><expr><name>tmp_im</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>im</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tabr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <call><name>REF_SCALE</name><argument_list>(<argument><expr><name>tmp_re</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tabr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <call><name>REF_SCALE</name><argument_list>(<argument><expr><name>tmp_im</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MDCT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_ref</name><parameter_list>(<parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbits</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name>a</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>f</name> <operator>*</operator> <name><name>in</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>REF_SCALE</name><argument_list>(<argument><expr><operator>-</operator><name>sum</name></expr></argument>, <argument><expr><name>nbits</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>mdct_ref</name><parameter_list>(<parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbits</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>n</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>REF_SCALE</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>nbits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DCT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>idct_ref</name><parameter_list>(<parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbits</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><literal type="number">0.5</literal> <operator>*</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><name>M_PI</name> <operator>*</operator> <name>k</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <name>n</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>input</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>s</name> <operator>/</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_ref</name><parameter_list>(<parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbits</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><name>M_PI</name> <operator>*</operator> <name>k</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <name>n</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>FFTSample</name></type> <name>frandom</name><parameter_list>(<parameter><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">32768.0</literal> <operator>*</operator> <name>RANGE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_diff</name><parameter_list>(<parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>tab1</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>tab2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>e</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>tab1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>tab2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name>scale</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>/</operator> <name>RANGE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">1e-3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR %5d: "</literal><name>FMT</name><literal type="string">" "</literal><name>FMT</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tab1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tab2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>+=</operator> <name>e</name> <operator>*</operator> <name>e</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"max:%f e:%g\n"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>error</name> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fft_init</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>av_fft_init</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ff_fft_init</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mdct_init</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>av_mdct_init</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mdct_calc</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_mdct_calc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdct_calc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>imdct_calc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFTContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_imdct_calc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>imdct_calc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fft_permute</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft_permute</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fft_calc</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft_calc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mdct_end</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_mdct_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fft_end</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_fft_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rdft_init</name><parameter_list>(<parameter><decl><type><name>RDFTContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>RDFTransformType</name></name></type> <name>trans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ff_rdft_init</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dct_init</name><parameter_list>(<parameter><decl><type><name>DCTContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>DCTTransformType</name></name></type> <name>trans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>av_dct_init</name><argument_list>(<argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ff_dct_init</name><argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rdft_calc</name><parameter_list>(<parameter><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name><name>r</name><operator>-&gt;</operator><name>rdft_calc</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dct_calc</name><parameter_list>(<parameter><decl><type><name>DCTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_dct_calc</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>dct_calc</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rdft_end</name><parameter_list>(<parameter><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ff_rdft_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dct_end</name><parameter_list>(<parameter><decl><type><name>DCTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_dct_end</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ff_dct_end</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"usage: fft-test [-h] [-s] [-i] [-n b]\n"</literal>
<literal type="string">"-h print this help\n"</literal>
<literal type="string">"-s speed test\n"</literal>
<literal type="string">"-m (I)MDCT test\n"</literal>
<literal type="string">"-d (I)DCT test\n"</literal>
<literal type="string">"-r (I)RDFT test\n"</literal>
<literal type="string">"-i inverse transform test\n"</literal>
<literal type="string">"-n b set the transform size to 2^b\n"</literal>
<literal type="string">"-f x set scale factor for output data of (I)MDCT to x\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<enum>enum <name>tf_transform</name> <block>{
<decl><name>TRANSFORM_FFT</name></decl>,
<decl><name>TRANSFORM_MDCT</name></decl>,
<decl><name>TRANSFORM_RDFT</name></decl>,
<decl><name>TRANSFORM_DCT</name></decl>,
}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_GETOPT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/getopt.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>tab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tab1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tab_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>tab2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>tf_transform</name></name></type> <name>transform</name> <init>= <expr><name>TRANSFORM_FFT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>m</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>
<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DCTContext</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<decl_stmt><decl><type><name>int</name></type> <name>it</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_speed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>do_inverse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fft_nbits</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>, <decl><type ref="prev"/><name>fft_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>scale</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVLFG</name></type> <name>prng</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>AVFFT</name> <operator>&amp;&amp;</operator> <name>FFT_FLOAT</name></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hsimrdn:f:c:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><call><name>help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>do_speed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name>do_inverse</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name>transform</name> <operator>=</operator> <name>TRANSFORM_MDCT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>transform</name> <operator>=</operator> <name>TRANSFORM_RDFT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>transform</name> <operator>=</operator> <name>TRANSFORM_DCT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>fft_nbits</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cpuflags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_parse_cpu_caps</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpuflags</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_force_cpu_flags</name><argument_list>(<argument><expr><name>cpuflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><name>fft_size</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>fft_nbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tab</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>fft_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tab1</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>fft_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tab_ref</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>fft_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tab2</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>fft_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFTSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tab</name> <operator>&amp;&amp;</operator> <name>tab1</name> <operator>&amp;&amp;</operator> <name>tab_ref</name> <operator>&amp;&amp;</operator> <name>tab2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>transform</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MDCT</name></expr></cpp:if>
<case>case <expr><name>TRANSFORM_MDCT</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Scale factor is set to %f\n"</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_inverse</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"IMDCT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"MDCT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>fft_nbits</name></expr></argument>, <argument><expr><name>do_inverse</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<case>case <expr><name>TRANSFORM_FFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>do_inverse</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"IFFT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FFT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>fft_nbits</name></expr></argument>, <argument><expr><name>do_inverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>fft_ref_init</name><argument_list>(<argument><expr><name>fft_nbits</name></expr></argument>, <argument><expr><name>do_inverse</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RDFT</name></expr></cpp:if>
<case>case <expr><name>TRANSFORM_RDFT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>do_inverse</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"IDFT_C2R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DFT_R2C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>rdft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>fft_nbits</name></expr></argument>, <argument><expr><ternary><condition><expr><name>do_inverse</name></expr> ?</condition><then> <expr><name>IDFT_C2R</name></expr> </then><else>: <expr><name>DFT_R2C</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>fft_ref_init</name><argument_list>(<argument><expr><name>fft_nbits</name></expr></argument>, <argument><expr><name>do_inverse</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DCT</name></expr></cpp:if>
<case>case <expr><name>TRANSFORM_DCT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>do_inverse</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DCT_III"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DCT_II"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>dct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>fft_nbits</name></expr></argument>, <argument><expr><ternary><condition><expr><name>do_inverse</name></expr> ?</condition><then> <expr><name>DCT_III</name></expr> </then><else>: <expr><name>DCT_II</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Requested transform not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %d test\n"</literal></expr></argument>, <argument><expr><name>fft_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fft_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <call><name>frandom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <call><name>frandom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Checking...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>transform</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MDCT</name></expr></cpp:if>
<case>case <expr><name>TRANSFORM_MDCT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>do_inverse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>imdct_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tab_ref</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab1</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>fft_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>imdct_calc</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>tab2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab1</name><operator>-&gt;</operator><name>re</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>check_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tab_ref</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>tab2</name></expr></argument>, <argument><expr><name>fft_size</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>mdct_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tab_ref</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab1</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>fft_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mdct_calc</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>tab2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab1</name><operator>-&gt;</operator><name>re</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>check_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tab_ref</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>tab2</name></expr></argument>, <argument><expr><name>fft_size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<case>case <expr><name>TRANSFORM_FFT</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>tab1</name></expr></argument>, <argument><expr><name>fft_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft_permute</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft_calc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fft_ref</name><argument_list>(<argument><expr><name>tab_ref</name></expr></argument>, <argument><expr><name>tab1</name></expr></argument>, <argument><expr><name>fft_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>check_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tab_ref</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>fft_size</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RDFT</name></expr></cpp:if>
<case>case <expr><name>TRANSFORM_RDFT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fft_size_2</name> <init>= <expr><name>fft_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>do_inverse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><name>fft_size_2</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fft_size_2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><name>fft_size_2</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><name>fft_size_2</name> <operator>-</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><name>fft_size_2</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <operator>-</operator><name><name>tab1</name><index>[<expr><name>fft_size_2</name> <operator>-</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tab2</name></expr></argument>, <argument><expr><name>tab1</name></expr></argument>, <argument><expr><name>fft_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tab1</name><index>[<expr><name>fft_size_2</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rdft_calc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tab2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft_ref</name><argument_list>(<argument><expr><name>tab_ref</name></expr></argument>, <argument><expr><name>tab1</name></expr></argument>, <argument><expr><name>fft_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fft_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>tab2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>check_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tab_ref</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>fft_size</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fft_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tab2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tab1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rdft_calc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tab2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft_ref</name><argument_list>(<argument><expr><name>tab_ref</name></expr></argument>, <argument><expr><name>tab1</name></expr></argument>, <argument><expr><name>fft_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>tab_ref</name><index>[<expr><name>fft_size_2</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>check_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tab_ref</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>tab2</name></expr></argument>, <argument><expr><name>fft_size</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DCT</name></expr></cpp:if>
<case>case <expr><name>TRANSFORM_DCT</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>tab1</name></expr></argument>, <argument><expr><name>fft_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_calc</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab</name><operator>-&gt;</operator><name>re</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_inverse</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tab_ref</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab1</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>fft_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dct_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tab_ref</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab1</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>fft_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>check_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tab_ref</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><name>fft_size</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></switch>



<if_stmt><if>if <condition>(<expr><name>do_speed</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>time_start</name></decl>, <decl><type ref="prev"/><name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_its</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Speed test...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_its</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>time_start</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>it</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>it</name> <operator>&lt;</operator> <name>nb_its</name></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>transform</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TRANSFORM_MDCT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>do_inverse</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>imdct_calc</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab1</name><operator>-&gt;</operator><name>re</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mdct_calc</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab</name><operator>-&gt;</operator><name>re</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tab1</name><operator>-&gt;</operator><name>re</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>TRANSFORM_FFT</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>tab1</name></expr></argument>, <argument><expr><name>fft_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft_calc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>
<case>case <expr><name>TRANSFORM_RDFT</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tab2</name></expr></argument>, <argument><expr><name>tab1</name></expr></argument>, <argument><expr><name>fft_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rdft_calc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tab2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSFORM_DCT</name></expr>:</case>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tab2</name></expr></argument>, <argument><expr><name>tab1</name></expr></argument>, <argument><expr><name>fft_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_calc</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>tab2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name>time_start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>&gt;=</operator> <literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_its</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"time: %0.1f us/transform [total time=%0.2f s its=%d]\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>duration</name> <operator>/</operator> <name>nb_its</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>duration</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>,
<argument><expr><name>nb_its</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>transform</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MDCT</name></expr></cpp:if>
<case>case <expr><name>TRANSFORM_MDCT</name></expr>:</case>
<expr_stmt><expr><call><name>mdct_end</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<case>case <expr><name>TRANSFORM_FFT</name></expr>:</case>
<expr_stmt><expr><call><name>fft_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RDFT</name></expr></cpp:if>
<case>case <expr><name>TRANSFORM_RDFT</name></expr>:</case>
<expr_stmt><expr><call><name>rdft_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DCT</name></expr></cpp:if>
<case>case <expr><name>TRANSFORM_DCT</name></expr>:</case>
<expr_stmt><expr><call><name>dct_end</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></switch>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tab1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tab2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tab_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>exptab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>AVFFT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>AVFFT</name> <operator>&amp;&amp;</operator> <name>FFT_FLOAT</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name>err</name></expr>;</return>
</block_content>}</block></function>
</unit>
