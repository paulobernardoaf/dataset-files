<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\tests\snowenc.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/snowenc.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>malloc</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>free</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>printf</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>width</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>height</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>width</name><operator>*</operator><name>height</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SnowContext</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVLFG</name></type> <name>prng</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_type</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>temp_dwt_buffer</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DWTELEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>temp_idwt_buffer</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IDWTELEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>.</operator><name>temp_dwt_buffer</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>.</operator><name>temp_idwt_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing 5/3 DWT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name><operator>*</operator><name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">54321</literal> <operator>-</operator> <literal type="number">12345</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_spatial_dwt</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>temp_dwt_buffer</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_spatial_idwt</name><argument_list>(<argument><expr><operator>(</operator><name>IDWTELEM</name><operator>*</operator><operator>)</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>temp_idwt_buffer</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name><operator>*</operator><name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fsck: %6d %12d %7d\n"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing 9/7 DWT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_type</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name><operator>*</operator><name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">54321</literal> <operator>-</operator> <literal type="number">12345</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_spatial_dwt</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>temp_dwt_buffer</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_spatial_idwt</name><argument_list>(<argument><expr><operator>(</operator><name>IDWTELEM</name><operator>*</operator><operator>)</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>temp_idwt_buffer</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name><operator>*</operator><name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fsck: %6d %12d %7d\n"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>orientation</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>errors</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>g</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errors</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_type</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><name>width</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name><operator>-</operator><name>level</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name><init>= <expr><name>height</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name><operator>-</operator><name>level</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name><init>= <expr><name>width</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name><operator>-</operator><name>level</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>buf</name><init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>error</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>orientation</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>buf</name><operator>+=</operator><name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>orientation</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>buf</name><operator>+=</operator><name>stride</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>width</name><operator>*</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>w</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>h</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <literal type="number">256</literal><operator>*</operator><literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_spatial_idwt</name><argument_list>(<argument><expr><operator>(</operator><name>IDWTELEM</name><operator>*</operator><operator>)</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>temp_idwt_buffer</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>d</name><init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>error</name> <operator>+=</operator> <name>d</name><operator>*</operator><name>d</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>width</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><name>x</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">9</literal> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>height</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><name>y</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>level</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%8"</literal><name>PRId64</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>height</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><name>y</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>level</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>error</name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errors</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name><operator>=</operator> <name>error</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>g</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g</name><operator>=</operator><call><name>av_gcd</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>g</name><operator>=</operator> <name>error</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static int const visual_weight[][4]={\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%8"</literal><name>PRId64</name><literal type="string">","</literal></expr></argument>, <argument><expr><name><name>errors</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name><operator>/</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"},\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><name>width</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name><operator>-</operator><name>level</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name><init>= <expr><name>width</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name><operator>-</operator><name>level</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWTELEM</name> <modifier>*</modifier></type><name>buf</name><init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>error</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name><operator>+=</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name><operator>+=</operator><name>stride</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>width</name><operator>*</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name><operator>+</operator><name>width</name><operator>*</operator><name>y</name></expr>]</index></name><operator>=</operator> <literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><name><name>tab</name><index>[<expr><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ff_spatial_dwt</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>temp_dwt_buffer</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>spatial_decomposition_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>d</name><init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>error</name> <operator>+=</operator> <name>d</name><operator>*</operator><name>d</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>width</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><name>x</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">9</literal> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>height</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><name>y</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%8"</literal><name>PRId64</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>height</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><name>y</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>

</block_content>}</block>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
