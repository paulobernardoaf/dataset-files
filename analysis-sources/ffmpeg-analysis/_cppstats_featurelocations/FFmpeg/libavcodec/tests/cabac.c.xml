<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\tests\cabac.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/cabac.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>10240</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>put_cabac_bit</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init>;</init><condition><expr><name><name>c</name><operator>-&gt;</operator><name>outstanding_count</name></name></expr>;</condition> <incr><expr><name><name>c</name><operator>-&gt;</operator><name>outstanding_count</name></name><operator>--</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>renorm_cabac_encoder</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
<while>while<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;</operator> <literal type="number">0x100</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name><operator>&lt;</operator><literal type="number">0x100</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>put_cabac_bit</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name><operator>&lt;</operator><literal type="number">0x200</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>outstanding_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>-=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><call><name>put_cabac_bit</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>-=</operator> <literal type="number">0x200</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>low</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_cabac</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>RangeLPS</name><init>= <expr><name><name>ff_h264_lps_range</name><index>[<expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>&amp;</operator><literal type="number">0xC0</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>state</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>bit</name> <operator>==</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>state</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>-=</operator> <name>RangeLPS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name><name>ff_h264_mlps_state</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <operator>*</operator><name>state</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>-</operator> <name>RangeLPS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>RangeLPS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name><operator>=</operator> <name><name>ff_h264_mlps_state</name><index>[<expr><literal type="number">127</literal> <operator>-</operator> <operator>*</operator><name>state</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>renorm_cabac_encoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>put_cabac_bypass</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>low</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>bit</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name><operator>&lt;</operator><literal type="number">0x200</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>put_cabac_bit</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name><operator>&lt;</operator><literal type="number">0x400</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>outstanding_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>-=</operator> <literal type="number">0x200</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><call><name>put_cabac_bit</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>-=</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>put_cabac_terminate</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bit</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>renorm_cabac_encoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>range</name></name><operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>renorm_cabac_encoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name> <operator>&lt;=</operator> <literal type="number">0x1FF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_cabac_bit</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>low</name></name><operator>&gt;&gt;</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>low</name></name><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>CABACContext</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>b</name><index>[<expr><literal type="number">9</literal><operator>*</operator><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>r</name><index>[<expr><literal type="number">9</literal><operator>*</operator><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>state</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVLFG</name></type> <name>prng</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_cabac_encoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>&lt;</operator><name>SIZE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>put_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>put_cabac</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name><operator>=</operator> <call><name>put_cabac_terminate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_cabac_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <call><name>get_cabac_bypass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CABAC bypass failure at %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <call><name>get_cabac_noinline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CABAC failure at %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>get_cabac_terminate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"where's the Terminator?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
