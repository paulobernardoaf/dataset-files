<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ra144enc.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_frame_queue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra144.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ra144_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RA144Context</name> <modifier>*</modifier></type><name>ractx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_lpc_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>lpc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_af_queue_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ra144_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RA144Context</name> <modifier>*</modifier></type><name>ractx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid number of channels: %d\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>NBLOCKS</name> <operator>*</operator> <name>BLOCKSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">8000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ractx</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ractx</name><operator>-&gt;</operator><name>lpc_coef</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ractx</name><operator>-&gt;</operator><name>lpc_tables</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ractx</name><operator>-&gt;</operator><name>lpc_coef</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ractx</name><operator>-&gt;</operator><name>lpc_tables</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ractx</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_audiodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>adsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_lpc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>lpc_ctx</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><name>LPC_ORDER</name></expr></argument>,
<argument><expr><name>FF_LPC_TYPE_LEVINSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_af_queue_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>ra144_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>quantize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>high</name> <init>= <expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>low</name> <operator>+</operator> <name>high</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>table</name><index>[<expr><name>index</name></expr>]</index></name> <operator>-</operator> <name>value</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>low</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>table</name><index>[<expr><name>high</name></expr>]</index></name> <operator>+</operator> <name>error</name> <operator>&gt;</operator> <name>value</name></expr> ?</condition><then> <expr><name>low</name></expr> </then><else>: <expr><name>high</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>high</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>low</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>orthogonalize</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>den</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>+=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>u</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>+=</operator> <name><name>u</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>u</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name> <operator>/=</operator> <name>den</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>num</name> <operator>*</operator> <name><name>u</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>void</name></type> <name>get_match_score</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>work</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coefs</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vect</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ortho1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ortho2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>score</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>gain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>vect</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>, <argument><expr><name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ortho1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>orthogonalize</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>ortho1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ortho2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>orthogonalize</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>ortho2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>+=</operator> <name><name>work</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>work</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>work</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>gain</name> <operator>=</operator> <name>c</name> <operator>/</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>score</name> <operator>=</operator> <operator>*</operator><name>gain</name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>create_adapt_vect</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cb</name> <operator>+=</operator> <name>BUFFERSIZE</name> <operator>-</operator> <name>lag</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>BLOCKSIZE</name></expr></argument>, <argument><expr><name>lag</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vect</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>lag</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCKSIZE</name> <operator>-</operator> <name>lag</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vect</name><index>[<expr><name>lag</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>adaptive_cb_search</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>adapt_cb</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>work</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coefs</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>best_vect</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>score</name></decl>, <decl><type ref="prev"/><name>gain</name></decl>, <decl><type ref="prev"/><name>best_score</name></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>best_gain</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>exc</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <name>best_score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>BLOCKSIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>BUFFERSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>create_adapt_vect</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>adapt_cb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_match_score</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>exc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>best_score</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_vect</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_gain</name> <operator>=</operator> <name>gain</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>best_score</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>create_adapt_vect</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>adapt_cb</name></expr></argument>, <argument><expr><name>best_vect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>exc</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>, <argument><expr><name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>best_gain</name> <operator>*</operator> <name><name>work</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>best_vect</name> <operator>-</operator> <name>BLOCKSIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>void</name></type> <name>find_best_vect</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>work</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coefs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int8_t</name></type> <name><name>cb</name><index>[]</index><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ortho1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ortho2</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>gain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>score</name></decl>, <decl><type ref="prev"/><name>best_score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>vect</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <operator>*</operator><name>gain</name> <operator>=</operator> <name>best_score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FIXED_CB_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vect</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>cb</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>get_match_score</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>vect</name></expr></argument>, <argument><expr><name>ortho1</name></expr></argument>, <argument><expr><name>ortho2</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>best_score</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>gain</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>void</name></type> <name>fixed_cb_search</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>work</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coefs</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cba_idx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cb1_idx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cb2_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ortho_cb1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>cba_vect</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cb1_vect</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>vect</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>cba_idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cba_vect</name></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cba_vect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>find_best_vect</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>ff_cb1_vects</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cba_idx</name></expr> ?</condition><then> <expr><name>cba_vect</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cb1_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>gain</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vect</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_cb1_vects</name><index>[<expr><operator>*</operator><name>cb1_idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>vect</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>, <argument><expr><name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cba_idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>orthogonalize</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>cba_vect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>gain</name> <operator>*</operator> <name><name>work</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cb1_vect</name></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cb1_vect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ortho_cb1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ortho_cb1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>find_best_vect</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>ff_cb2_vects</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cba_idx</name></expr> ?</condition><then> <expr><name>cba_vect</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>ortho_cb1</name></expr> ?</condition><then> <expr><name>cb1_vect</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>cb2_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>void</name></type> <name>ra144_encode_subblock</name><parameter_list>(<parameter><decl><type><name>RA144Context</name> <modifier>*</modifier></type><name>ractx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>sblock_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lpc_coefs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>rms</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>data</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>work</name><index>[<expr><name>LPC_ORDER</name> <operator>+</operator> <name>BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>coefs</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>zero</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cba</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cb1</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cb2</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cba_idx</name></decl>, <decl><type ref="prev"/><name>cb1_idx</name></decl>, <decl><type ref="prev"/><name>cb2_idx</name></decl>, <decl><type ref="prev"/><name>gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>g</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>best_error</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>work</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ractx</name><operator>-&gt;</operator><name>curr_sblock</name><index>[<expr><name>BLOCKSIZE</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lpc_coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>/</operator><literal type="number">4096.0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>work</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>,
<argument><expr><name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>zero</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>work</name><index>[<expr><name>LPC_ORDER</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sblock_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>zero</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>






<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>work</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cba_idx</name> <operator>=</operator> <call><name>adaptive_cb_search</name><argument_list>(<argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>adapt_cb</name></name></expr></argument>, <argument><expr><name>work</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cba_idx</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cba</name></expr></argument>, <argument><expr><name>work</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cba</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_copy_and_dup</name><argument_list>(<argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>buffer_a</name></name></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>adapt_cb</name></name></expr></argument>, <argument><expr><name>cba_idx</name> <operator>+</operator> <name>BLOCKSIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>ff_irms</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>adsp</name></name></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>buffer_a</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>rms</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fixed_cb_search</name><argument_list>(<argument><expr><name>work</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>cba_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb1_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb2_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cb1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_cb1_vects</name><index>[<expr><name>cb1_idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_cb2_vects</name><index>[<expr><name>cb2_idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>work</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>cb1</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>,
<argument><expr><name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cb1</name></expr></argument>, <argument><expr><name>work</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cb1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ff_cb1_base</name><index>[<expr><name>cb1_idx</name></expr>]</index></name> <operator>*</operator> <name>rms</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>work</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>cb2</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>,
<argument><expr><name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cb2</name></expr></argument>, <argument><expr><name>work</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cb2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ff_cb2_base</name><index>[<expr><name>cb2_idx</name></expr>]</index></name> <operator>*</operator> <name>rms</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>best_error</name> <operator>=</operator> <name>FLT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ff_gain_val_tab</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>ff_gain_exp_tab</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><literal type="number">1</literal><operator>/</operator><literal type="number">4096.0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ff_gain_val_tab</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>ff_gain_exp_tab</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><literal type="number">1</literal><operator>/</operator><literal type="number">4096.0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cba_idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ff_gain_val_tab</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>ff_gain_exp_tab</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><literal type="number">1</literal><operator>/</operator><literal type="number">4096.0</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>zero</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>cba</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>cb1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>
<name><name>g</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>cb2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>+=</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>sblock_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>sblock_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>zero</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>cb1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>cb2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>+=</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>sblock_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>sblock_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&lt;</operator> <name>best_error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_error</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>cba_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>cb1_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>cb2_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_subblock_synthesis</name><argument_list>(<argument><expr><name>ractx</name></expr></argument>, <argument><expr><name>lpc_coefs</name></expr></argument>, <argument><expr><name>cba_idx</name></expr></argument>, <argument><expr><name>cb1_idx</name></expr></argument>, <argument><expr><name>cb2_idx</name></expr></argument>, <argument><expr><name>rms</name></expr></argument>,
<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>ra144_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>sizes</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">64</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>bit_sizes</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RA144Context</name> <modifier>*</modifier></type><name>ractx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>lpc_data</name><index>[<expr><name>NBLOCKS</name> <operator>*</operator> <name>BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>lpc_coefs</name><index>[<expr><name>LPC_ORDER</name></expr>]</index><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>shift</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>block_coefs</name><index>[<expr><name>NBLOCKS</name></expr>]</index><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>lpc_refl</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>refl_rms</name><index>[<expr><name>NBLOCKS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>energy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ractx</name><operator>-&gt;</operator><name>last_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>FRAME_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>








<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>BLOCKSIZE</name> <operator>+</operator> <name>BLOCKSIZE</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lpc_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ractx</name><operator>-&gt;</operator><name>curr_block</name><index>[<expr><name>BLOCKSIZE</name> <operator>+</operator> <name>BLOCKSIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>energy</name> <operator>+=</operator> <operator>(</operator><name><name>lpc_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lpc_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>NBLOCKS</name> <operator>*</operator> <name>BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lpc_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>samples</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>energy</name> <operator>+=</operator> <operator>(</operator><name><name>lpc_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lpc_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>NBLOCKS</name> <operator>*</operator> <name>BLOCKSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lpc_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>NBLOCKS</name> <operator>*</operator> <name>BLOCKSIZE</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lpc_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>energy</name> <operator>=</operator> <name><name>ff_energy_tab</name><index>[<expr><call><name>quantize</name><argument_list>(<argument><expr><call><name>ff_t_sqrt</name><argument_list>(<argument><expr><name>energy</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>ff_energy_tab</name></expr></argument>,
<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_lpc_calc_coefs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>lpc_ctx</name></name></expr></argument>, <argument><expr><name>lpc_data</name></expr></argument>, <argument><expr><name>NBLOCKS</name> <operator>*</operator> <name>BLOCKSIZE</name></expr></argument>, <argument><expr><name>LPC_ORDER</name></expr></argument>,
<argument><expr><name>LPC_ORDER</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>lpc_coefs</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>FF_LPC_TYPE_LEVINSON</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ORDER_METHOD_EST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block_coefs</name><index>[<expr><name>NBLOCKS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>lpc_coefs</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name>
<operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">12</literal> <operator>-</operator> <name><name>shift</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>






<if_stmt><if>if <condition>(<expr><call><name>ff_eval_refl</name><argument_list>(<argument><expr><name>lpc_refl</name></expr></argument>, <argument><expr><name><name>block_coefs</name><index>[<expr><name>NBLOCKS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>ff_int_to_int16</name><argument_list>(<argument><expr><name><name>block_coefs</name><index>[<expr><name>NBLOCKS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>lpc_coef</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_eval_refl</name><argument_list>(<argument><expr><name>lpc_refl</name></expr></argument>, <argument><expr><name><name>block_coefs</name><index>[<expr><name>NBLOCKS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lpc_refl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lpc_refl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>quantize</name><argument_list>(<argument><expr><name><name>lpc_refl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff_lpc_refl_cb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>bit_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpc_refl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_lpc_refl_cb</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ractx</name><operator>-&gt;</operator><name>lpc_refl_rms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_rms</name><argument_list>(<argument><expr><name>lpc_refl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_eval_coefs</name><argument_list>(<argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>lpc_coef</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lpc_refl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>refl_rms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_interp</name><argument_list>(<argument><expr><name>ractx</name></expr></argument>, <argument><expr><name><name>block_coefs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>old_energy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>refl_rms</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_interp</name><argument_list>(<argument><expr><name>ractx</name></expr></argument>, <argument><expr><name><name>block_coefs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>energy</name> <operator>&lt;=</operator> <name><name>ractx</name><operator>-&gt;</operator><name>old_energy</name></name></expr></argument>,
<argument><expr><call><name>ff_t_sqrt</name><argument_list>(<argument><expr><name>energy</name> <operator>*</operator> <name><name>ractx</name><operator>-&gt;</operator><name>old_energy</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>refl_rms</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_interp</name><argument_list>(<argument><expr><name>ractx</name></expr></argument>, <argument><expr><name><name>block_coefs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>energy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>refl_rms</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_rescale_rms</name><argument_list>(<argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>lpc_refl_rms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>energy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_int_to_int16</name><argument_list>(<argument><expr><name><name>block_coefs</name><index>[<expr><name>NBLOCKS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>lpc_coef</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name>quantize</name><argument_list>(<argument><expr><name>energy</name></expr></argument>, <argument><expr><name>ff_energy_tab</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBLOCKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ra144_encode_subblock</name><argument_list>(<argument><expr><name>ractx</name></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>curr_block</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>BLOCKSIZE</name></expr></argument>,
<argument><expr><name><name>block_coefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>refl_rms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ractx</name><operator>-&gt;</operator><name>old_energy</name></name> <operator>=</operator> <name>energy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ractx</name><operator>-&gt;</operator><name>lpc_refl_rms</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ractx</name><operator>-&gt;</operator><name>lpc_refl_rms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<macro><name>FFSWAP</name><argument_list>(<argument>unsigned int *</argument>, <argument>ractx-&gt;lpc_coef[<literal type="number">0</literal>]</argument>, <argument>ractx-&gt;lpc_coef[<literal type="number">1</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ractx</name><operator>-&gt;</operator><name>curr_block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_af_queue_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ractx</name><operator>-&gt;</operator><name>last_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>curr_block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>NBLOCKS</name> <operator>*</operator> <name>BLOCKSIZE</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ractx</name><operator>-&gt;</operator><name>curr_block</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_af_queue_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>FRAME_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_ra_144_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"real_144"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"RealAudio 1.0 (14.4K)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_RA_144</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RA144Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ra144_encode_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>ra144_encode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ra144_encode_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
<expr><operator>.</operator><name>supported_samplerates</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>int</name><index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">8000</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint64_t</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_CH_LAYOUT_MONO</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
