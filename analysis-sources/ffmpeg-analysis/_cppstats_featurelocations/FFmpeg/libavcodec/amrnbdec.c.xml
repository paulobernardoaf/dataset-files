<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\amrnbdec.c">









































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_math.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_vectors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_pitch_delay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amrnbdata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMR_BLOCK_SIZE</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMR_SAMPLE_BOUND</name></cpp:macro> <cpp:value>32768.0</cpp:value></cpp:define> 










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMR_SAMPLE_SCALE</name></cpp:macro> <cpp:value>(2.0 / 32768.0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRED_FAC_MODE_12k2</name></cpp:macro> <cpp:value>0.65</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSF_R_FAC</name></cpp:macro> <cpp:value>(8000.0 / 32768.0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_LSF_SPACING</name></cpp:macro> <cpp:value>(50.0488 / 8000.0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PITCH_LAG_MIN_MODE_12k2</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_ENERGY</name></cpp:macro> <cpp:value>-14.0</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARP_MAX</name></cpp:macro> <cpp:value>0.79449462890625</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMR_TILT_RESPONSE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMR_TILT_GAMMA_T</name></cpp:macro> <cpp:value>0.8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMR_AGC_ALPHA</name></cpp:macro> <cpp:value>0.9</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>AMRContext</name> <block>{
<decl_stmt><decl><type><name>AMRNBFrame</name></type> <name>frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bad_frame_indicator</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>Mode</name></name></type> <name>cur_frame_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>prev_lsf_r</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name><name>lsp</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name><name>prev_lsp_sub4</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>lsf_q</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>lsf_avg</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>lpc</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>pitch_lag_int</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>excitation_buf</name><index>[<expr><name>PITCH_DELAY_MAX</name> <operator>+</operator> <name>LP_FILTER_ORDER</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>AMR_SUBFRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>excitation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>pitch_vector</name><index>[<expr><name>AMR_SUBFRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>fixed_vector</name><index>[<expr><name>AMR_SUBFRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>prediction_error</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>pitch_gain</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>fixed_gain</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>beta</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>diff_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>hang_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>prev_sparse_fixed_gain</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>prev_ir_filter_nr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ir_filter_onset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>postfilter_mem</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>tilt_mem</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>postfilter_agc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>high_pass_mem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>samples_in</name><index>[<expr><name>LP_FILTER_ORDER</name> <operator>+</operator> <name>AMR_SUBFRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ACELPFContext</name></type> <name>acelpf_ctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ACELPVContext</name></type> <name>acelpv_ctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CELPFContext</name></type> <name>celpf_ctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CELPMContext</name></type> <name>celpm_ctx</name></decl>;</decl_stmt> 

}</block></struct></type> <name>AMRContext</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name></type> <name>weighted_vector_sumd</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>in_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>in_b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>weight_coeff_a</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>weight_coeff_b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>weight_coeff_a</name> <operator>*</operator> <name><name>in_a</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>+</operator> <name>weight_coeff_b</name> <operator>*</operator> <name><name>in_b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>amrnb_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"multi-channel AMR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">8000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>excitation_buf</name><index>[<expr><name>PITCH_DELAY_MAX</name> <operator>+</operator> <name>LP_FILTER_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp_sub4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lsp_sub4_init</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lsf_avg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lsf_q</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lsp_avg_init</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>prediction_error</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>MIN_ENERGY</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_acelp_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>acelpf_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_acelp_vectors_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>acelpv_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_celp_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>celpf_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_celp_math_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>celpm_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name><name>enum</name> <name>Mode</name></name></type> <name>unpack_bitstream</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>Mode</name></name></type> <name>mode</name></decl>;</decl_stmt>


<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bad_frame_indicator</name></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x4</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <name>N_MODES</name> <operator>||</operator> <name>buf_size</name> <operator>&lt;</operator> <name><name>frame_sizes_nb</name><index>[<expr><name>mode</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NO_DATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;</operator> <name>MODE_DTX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_amr_bit_reorder</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AMRNBFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>amr_unpacking_bitmaps_per_mode</name><index>[<expr><name>mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>void</name></type> <name>interpolate_lsf</name><parameter_list>(<parameter><decl><type><name>ACELPVContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>lsf_q</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lsf_new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>weighted_vector_sumf</name></name><argument_list>(<argument><expr><name><name>lsf_q</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lsf_q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lsf_new</name></expr></argument>,
<argument><expr><literal type="number">0.25</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0.25</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf2lsp_for_mode12k2</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>lsp</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>lsf_no_r</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>lsf_quantizer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>quantizer_offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>update</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsf_r</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>lsf_q</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>LP_FILTER_ORDER</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lsf_r</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lsf_quantizer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>quantizer_offset</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lsf_r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lsf_r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsf_r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsf_r</name></name></expr></argument>, <argument><expr><name>lsf_r</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lsf_r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsf_q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lsf_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>LSF_R_FAC</name> <operator>/</operator> <literal type="number">8000.0</literal><operator>)</operator> <operator>+</operator> <name><name>lsf_no_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">8000.0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_set_min_dist_lsf</name><argument_list>(<argument><expr><name>lsf_q</name></expr></argument>, <argument><expr><name>MIN_LSF_SPACING</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>interpolate_lsf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>acelpv_ctx</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsf_q</name></name></expr></argument>, <argument><expr><name>lsf_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_acelp_lsf2lspd</name><argument_list>(<argument><expr><name>lsp</name></expr></argument>, <argument><expr><name>lsf_q</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf2lsp_5</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>lsf_param</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>lsf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>lsf_no_r</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>lsf_quantizer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lsf_quantizer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>lsf_5_1</name><index>[<expr><name><name>lsf_param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsf_quantizer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lsf_5_2</name><index>[<expr><name><name>lsf_param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsf_quantizer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>lsf_5_3</name><index>[<expr><name><name>lsf_param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsf_quantizer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>lsf_5_4</name><index>[<expr><name><name>lsf_param</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsf_quantizer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>lsf_5_5</name><index>[<expr><name><name>lsf_param</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsf_no_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>prev_lsf_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>LSF_R_FAC</name> <operator>*</operator> <name>PRED_FAC_MODE_12k2</name> <operator>+</operator> <name><name>lsf_5_mean</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>lsf2lsp_for_mode12k2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lsf_no_r</name></expr></argument>, <argument><expr><name>lsf_quantizer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>lsf_param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lsf2lsp_for_mode12k2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lsf_no_r</name></expr></argument>, <argument><expr><name>lsf_quantizer</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>lsf_param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>weighted_vector_sumd</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp_sub4</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>weighted_vector_sumd</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> , <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf2lsp_3</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>lsf_param</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>lsf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsf_r</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>lsf_q</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lsf_quantizer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lsf_quantizer</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>==</operator> <name>MODE_7k95</name></expr> ?</condition><then> <expr><name>lsf_3_1_MODE_7k95</name></expr> </then><else>: <expr><name>lsf_3_1</name></expr></else></ternary><operator>)</operator><index>[<expr><name><name>lsf_param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lsf_r</name></expr></argument>, <argument><expr><name>lsf_quantizer</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lsf_r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lsf_quantizer</name> <operator>=</operator> <name><name>lsf_3_2</name><index>[<expr><name><name>lsf_param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>&lt;=</operator> <name>MODE_5k15</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lsf_r</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>lsf_quantizer</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lsf_r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lsf_quantizer</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>&lt;=</operator> <name>MODE_5k15</name></expr> ?</condition><then> <expr><name>lsf_3_3_MODE_5k15</name></expr> </then><else>: <expr><name>lsf_3_3</name></expr></else></ternary><operator>)</operator><index>[<expr><name><name>lsf_param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lsf_r</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>lsf_quantizer</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lsf_r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsf_q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lsf_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>prev_lsf_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>pred_fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>LSF_R_FAC</name> <operator>/</operator> <literal type="number">8000.0</literal><operator>)</operator> <operator>+</operator> <name><name>lsf_3_mean</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">8000.0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_set_min_dist_lsf</name><argument_list>(<argument><expr><name>lsf_q</name></expr></argument>, <argument><expr><name>MIN_LSF_SPACING</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>interpolate_lsf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>acelpv_ctx</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsf_q</name></name></expr></argument>, <argument><expr><name>lsf_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsf_r</name></name></expr></argument>, <argument><expr><name>lsf_r</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lsf_r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_lsf2lspd</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lsf_q</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>prev_lsp_sub4</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>prev_lsp_sub4</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.25</literal> <operator>*</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_pitch_lag_1_6</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lag_int</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lag_frac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_index</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>prev_lag_int</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subframe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>subframe</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>subframe</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pitch_index</name> <operator>&lt;</operator> <literal type="number">463</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>=</operator> <operator>(</operator><name>pitch_index</name> <operator>+</operator> <literal type="number">107</literal><operator>)</operator> <operator>*</operator> <literal type="number">10923</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lag_frac</name> <operator>=</operator> <name>pitch_index</name> <operator>-</operator> <operator>*</operator><name>lag_int</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">105</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>=</operator> <name>pitch_index</name> <operator>-</operator> <literal type="number">368</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lag_frac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pitch_index</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <literal type="number">10923</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lag_frac</name> <operator>=</operator> <name>pitch_index</name> <operator>-</operator> <operator>*</operator><name>lag_int</name> <operator>*</operator> <literal type="number">6</literal> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>+=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>prev_lag_int</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>PITCH_LAG_MIN_MODE_12k2</name></expr></argument>,
<argument><expr><name>PITCH_DELAY_MAX</name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_pitch_vector</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AMRNBSubframe</name> <modifier>*</modifier></type><name>amr_subframe</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subframe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pitch_lag_int</name></decl>, <decl><type ref="prev"/><name>pitch_lag_frac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>Mode</name></name></type> <name>mode</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>==</operator> <name>MODE_12k2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_pitch_lag_1_6</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pitch_lag_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pitch_lag_frac</name></expr></argument>,
<argument><expr><name><name>amr_subframe</name><operator>-&gt;</operator><name>p_lag</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag_int</name></name></expr></argument>,
<argument><expr><name>subframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_decode_pitch_lag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pitch_lag_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pitch_lag_frac</name></expr></argument>,
<argument><expr><name><name>amr_subframe</name><operator>-&gt;</operator><name>p_lag</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag_int</name></name></expr></argument>, <argument><expr><name>subframe</name></expr></argument>,
<argument><expr><name>mode</name> <operator>!=</operator> <name>MODE_4k75</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>MODE_5k15</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>mode</name> <operator>&lt;=</operator> <name>MODE_6k7</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>MODE_7k95</name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pitch_lag_frac</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag_int</name></name> <operator>=</operator> <name>pitch_lag_int</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>pitch_lag_int</name> <operator>+=</operator> <name>pitch_lag_frac</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>acelpf_ctx</name><operator>.</operator><name>acelp_interpolatef</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>pitch_lag_int</name></expr></argument>,
<argument><expr><name>ff_b60_sinc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><name>pitch_lag_frac</name> <operator>+</operator> <literal type="number">6</literal> <operator>-</operator> <literal type="number">6</literal><operator>*</operator><operator>(</operator><name>pitch_lag_frac</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_vector</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>, <argument><expr><name>AMR_SUBFRAME_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_10bit_pulse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>pulse_position</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i3</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>positions</name> <init>= <expr><name><name>base_five_table</name><index>[<expr><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>positions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>positions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><name>i3</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>positions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_8_pulses_31bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>fixed_index</name></decl></parameter>,
<parameter><decl><type><name>AMRFixed</name> <modifier>*</modifier></type><name>fixed_sparse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>pulse_position</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_10bit_pulse</name><argument_list>(<argument><expr><name><name>fixed_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pulse_position</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_10bit_pulse</name><argument_list>(<argument><expr><name><name>fixed_index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pulse_position</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>fixed_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">25</literal> <operator>+</operator> <literal type="number">12</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>temp</name> <operator>%</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>temp</name> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pulse_position</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <name><name>pulse_position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pulse_position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator> <name><name>fixed_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pulse_position</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>fixed_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos1</name> <init>= <expr><operator>(</operator><name><name>pulse_position</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos2</name> <init>= <expr><operator>(</operator><name><name>pulse_position</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name><name>fixed_index</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>pos1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>pos2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>pos2</name> <operator>&lt;</operator> <name>pos1</name></expr> ?</condition><then> <expr><operator>-</operator><name>sign</name></expr> </then><else>: <expr><name>sign</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_fixed_sparse</name><parameter_list>(<parameter><decl><type><name>AMRFixed</name> <modifier>*</modifier></type><name>fixed_sparse</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>pulses</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>Mode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subframe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>MODE_4k75</name> <operator>&lt;=</operator> <operator>(</operator><name>signed</name><operator>)</operator><name>mode</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>&lt;=</operator> <name>MODE_12k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_12k2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_decode_10_pulses_35bits</name><argument_list>(<argument><expr><name>pulses</name></expr></argument>, <argument><expr><name>fixed_sparse</name></expr></argument>, <argument><expr><name>gray_decode</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_10k2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_8_pulses_31bits</name><argument_list>(<argument><expr><name>pulses</name></expr></argument>, <argument><expr><name>fixed_sparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pulse_position</name> <init>= <expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pulse_subset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fixed_index</name> <init>= <expr><name><name>pulses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;=</operator> <name>MODE_5k15</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pulse_subset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>subframe</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>fixed_index</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>track_position</name><index>[<expr><name>pulse_subset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>track_position</name><index>[<expr><name>pulse_subset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_5k9</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pulse_subset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>fixed_index</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>pulse_subset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pulse_subset</name> <operator>=</operator> <operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>pulse_subset</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>pulse_subset</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pulse_position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>pulse_position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_6k7</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>fixed_index</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pulse_subset</name> <operator>=</operator> <operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>pulse_subset</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pulse_subset</name> <operator>=</operator> <operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>pulse_subset</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>gray_decode</name><index>[ <expr><name>fixed_index</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>gray_decode</name><index>[<expr><operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>gray_decode</name><index>[<expr><operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pulse_subset</name> <operator>=</operator> <operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pulse_position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>gray_decode</name><index>[<expr><operator>(</operator><name>fixed_index</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>pulse_subset</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fixed_sparse</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pulses</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>pitch_sharpening</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subframe</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>Mode</name></name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>AMRFixed</name> <modifier>*</modifier></type><name>fixed_sparse</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_12k2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>beta</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>pitch_lag</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pitch_lag_int</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>pitch_fac</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>beta</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>MODE_4k75</name> <operator>||</operator> <name>subframe</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>beta</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>SHARP_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>float</name></type> <name>fixed_gain_smooth</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lsf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lsf_avg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>Mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>diff</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff</name> <operator>+=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>lsf_avg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>lsf_avg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>diff_count</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0.65</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>diff_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>diff_count</name></name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hang_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>diff_count</name></name><operator>--</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>hang_count</name></name> <operator>&lt;</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hang_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&lt;</operator> <name>MODE_7k4</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>MODE_10k2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>smoothing_factor</name> <init>= <expr><call><name>av_clipf</name><argument_list>(<argument><expr><literal type="number">4.0</literal> <operator>*</operator> <name>diff</name> <operator>-</operator> <literal type="number">1.6</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>fixed_gain_mean</name> <init>= <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<name><name>p</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>
<name><name>p</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.2</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name>smoothing_factor</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator>
<operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>smoothing_factor</name><operator>)</operator> <operator>*</operator> <name>fixed_gain_mean</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_gains</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AMRNBSubframe</name> <modifier>*</modifier></type><name>amr_subframe</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>Mode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subframe</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>fixed_gain_factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_12k2</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>MODE_7k95</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>qua_gain_pit</name> <index>[<expr><name><name>amr_subframe</name><operator>-&gt;</operator><name>p_gain</name></name></expr> ]</index></name>
<operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">16384.0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fixed_gain_factor</name> <operator>=</operator> <name><name>qua_gain_code</name><index>[<expr><name><name>amr_subframe</name><operator>-&gt;</operator><name>fixed_gain</name></name></expr>]</index></name>
<operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">2048.0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>gains</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <name>MODE_6k7</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gains</name> <operator>=</operator> <name><name>gains_high</name><index>[<expr><name><name>amr_subframe</name><operator>-&gt;</operator><name>p_gain</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <name>MODE_5k15</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gains</name> <operator>=</operator> <name><name>gains_low</name> <index>[<expr><name><name>amr_subframe</name><operator>-&gt;</operator><name>p_gain</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>gains</name> <operator>=</operator> <name><name>gains_MODE_4k75</name><index>[<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>subframe</name><index>[<expr><name>subframe</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_gain</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>subframe</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>gains</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">16384.0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fixed_gain_factor</name> <operator>=</operator> <name><name>gains</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">4096.0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_ir_filter</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AMRFixed</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>filter1</name><index>[<expr><name>AMR_SUBFRAME_SIZE</name></expr>]</index></name></decl>, 
<decl><type ref="prev"/><name><name>filter2</name><index>[<expr><name>AMR_SUBFRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lag</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fac</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>pitch_fac</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lag</name> <operator>&lt;</operator> <name>AMR_SUBFRAME_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_celp_circ_addf</name><argument_list>(<argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>lag</name></expr></argument>, <argument><expr><name>fac</name></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lag</name> <argument_list type="generic">&lt; <argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_celp_circ_addf</name><argument_list>(<argument><expr><name>filter2</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filter1</name></expr></argument>, <argument><expr><name>lag</name></expr></argument>, <argument><expr><name>fac</name></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filterp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>AMR_SUBFRAME_SIZE</name> <operator>-</operator> <name>lag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filterp</name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>AMR_SUBFRAME_SIZE</name> <operator>-</operator> <operator>(</operator><name>lag</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filterp</name> <operator>=</operator> <name>filter1</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>filterp</name> <operator>=</operator> <name>filter2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ff_celp_circ_addf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>filterp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>anti_sparseness</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>AMRFixed</name> <modifier>*</modifier></type><name>fixed_sparse</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>fixed_vector</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>fixed_gain</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ir_filter_nr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0.6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ir_filter_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0.9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ir_filter_nr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ir_filter_nr</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 


<if_stmt><if>if <condition>(<expr><name>fixed_gain</name> <operator>&gt;</operator> <literal type="number">2.0</literal> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>prev_sparse_fixed_gain</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ir_filter_onset</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>ir_filter_onset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ir_filter_onset</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>ir_filter_onset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0.6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ir_filter_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ir_filter_nr</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>prev_ir_filter_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ir_filter_nr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ir_filter_nr</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ir_filter_nr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>fixed_gain</name> <operator>&lt;</operator> <literal type="number">5.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ir_filter_nr</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>!=</operator> <name>MODE_7k4</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>&lt;</operator> <name>MODE_10k2</name>
<operator>&amp;&amp;</operator> <name>ir_filter_nr</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>apply_ir_filter</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fixed_sparse</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>==</operator> <name>MODE_7k95</name></expr> ?</condition><then>
<expr><name>ir_filters_lookup_MODE_7k95</name></expr> </then><else>:
<expr><name>ir_filters_lookup</name></expr></else></ternary><operator>)</operator><index>[<expr><name>ir_filter_nr</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fixed_vector</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>prev_ir_filter_nr</name></name> <operator>=</operator> <name>ir_filter_nr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>prev_sparse_fixed_gain</name></name> <operator>=</operator> <name>fixed_gain</name></expr>;</expr_stmt>

<return>return <expr><name>fixed_vector</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>int</name></type> <name>synthesis</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>fixed_gain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>fixed_vector</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>overflow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>excitation</name><index>[<expr><name>AMR_SUBFRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMR_SUBFRAME_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">0.25</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>acelpv_ctx</name><operator>.</operator><name>weighted_vector_sumf</name></name><argument_list>(<argument><expr><name>excitation</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_vector</name></name></expr></argument>, <argument><expr><name>fixed_vector</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fixed_gain</name></expr></argument>, <argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>overflow</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>energy</name> <init>= <expr><call><name><name>p</name><operator>-&gt;</operator><name>celpm_ctx</name><operator>.</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pitch_factor</name> <init>=
<expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator>
<operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>==</operator> <name>MODE_12k2</name></expr> ?</condition><then>
<expr><literal type="number">0.25</literal> <operator>*</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><literal type="number">0.5</literal> <operator>*</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SHARP_MAX</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMR_SUBFRAME_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>pitch_factor</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>pitch_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_scale_vector_to_given_sum_of_squares</name><argument_list>(<argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>energy</name></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>celpf_ctx</name><operator>.</operator><name>celp_lp_synthesis_filterf</name></name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMR_SUBFRAME_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>AMR_SAMPLE_BOUND</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type> <name>update_state</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp_sub4</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>excitation_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>excitation_buf</name><index>[<expr><name>AMR_SUBFRAME_SIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>PITCH_DELAY_MAX</name> <operator>+</operator> <name>LP_FILTER_ORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>samples_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>samples_in</name><index>[<expr><name>AMR_SUBFRAME_SIZE</name></expr>]</index></name></expr></argument>,
<argument><expr><name>LP_FILTER_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>float</name></type> <name>tilt_factor</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc_n</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc_d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>rh0</name></decl>, <decl><type ref="prev"/><name>rh1</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>float</name></type> <name><name>impulse_buffer</name><index>[<expr><name>LP_FILTER_ORDER</name> <operator>+</operator> <name>AMR_TILT_RESPONSE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>hf</name> <init>= <expr><name>impulse_buffer</name> <operator>+</operator> <name>LP_FILTER_ORDER</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>hf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lpc_n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>celpf_ctx</name><operator>.</operator><name>celp_lp_synthesis_filterf</name></name><argument_list>(<argument><expr><name>hf</name></expr></argument>, <argument><expr><name>lpc_d</name></expr></argument>, <argument><expr><name>hf</name></expr></argument>,
<argument><expr><name>AMR_TILT_RESPONSE</name></expr></argument>,
<argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rh0</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>celpm_ctx</name><operator>.</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name>hf</name></expr></argument>, <argument><expr><name>hf</name></expr></argument>, <argument><expr><name>AMR_TILT_RESPONSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rh1</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>celpm_ctx</name><operator>.</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name>hf</name></expr></argument>, <argument><expr><name>hf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>AMR_TILT_RESPONSE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><ternary><condition><expr><name>rh1</name> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr> ?</condition><then> <expr><name>rh1</name> <operator>/</operator> <name>rh0</name> <operator>*</operator> <name>AMR_TILT_GAMMA_T</name></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>postfilter</name><parameter_list>(<parameter><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buf_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>samples_in</name></name> <operator>+</operator> <name>LP_FILTER_ORDER</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>speech_gain</name> <init>= <expr><call><name><name>p</name><operator>-&gt;</operator><name>celpm_ctx</name><operator>.</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>pole_out</name><index>[<expr><name>AMR_SUBFRAME_SIZE</name> <operator>+</operator> <name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>gamma_n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gamma_d</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>lpc_n</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lpc_d</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>==</operator> <name>MODE_12k2</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>==</operator> <name>MODE_10k2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gamma_n</name> <operator>=</operator> <name>ff_pow_0_7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gamma_d</name> <operator>=</operator> <name>ff_pow_0_75</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>gamma_n</name> <operator>=</operator> <name>ff_pow_0_55</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gamma_d</name> <operator>=</operator> <name>ff_pow_0_7</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>lpc_n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>gamma_n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpc_d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>gamma_d</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pole_out</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>postfilter_mem</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>celpf_ctx</name><operator>.</operator><name>celp_lp_synthesis_filterf</name></name><argument_list>(<argument><expr><name>pole_out</name> <operator>+</operator> <name>LP_FILTER_ORDER</name></expr></argument>, <argument><expr><name>lpc_d</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>postfilter_mem</name></name></expr></argument>, <argument><expr><name>pole_out</name> <operator>+</operator> <name>AMR_SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>celpf_ctx</name><operator>.</operator><name>celp_lp_zero_synthesis_filterf</name></name><argument_list>(<argument><expr><name>buf_out</name></expr></argument>, <argument><expr><name>lpc_n</name></expr></argument>,
<argument><expr><name>pole_out</name> <operator>+</operator> <name>LP_FILTER_ORDER</name></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tilt_compensation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tilt_mem</name></name></expr></argument>, <argument><expr><call><name>tilt_factor</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lpc_n</name></expr></argument>, <argument><expr><name>lpc_d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_out</name></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_adaptive_gain_control</name><argument_list>(<argument><expr><name>buf_out</name></expr></argument>, <argument><expr><name>buf_out</name></expr></argument>, <argument><expr><name>speech_gain</name></expr></argument>, <argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><name>AMR_AGC_ALPHA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>postfilter_agc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>amrnb_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>AMRContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf_out</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>subframe</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fixed_gain_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AMRFixed</name></type> <name>fixed_sparse</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>spare_vector</name><index>[<expr><name>AMR_SUBFRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>synth_fixed_gain</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>synth_fixed_vector</name></decl>;</decl_stmt> 


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>AMR_BLOCK_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf_out</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>=</operator> <call><name>unpack_bitstream</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>==</operator> <name>NO_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Corrupt bitstream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>==</operator> <name>MODE_DTX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"dtx mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Note: libopencore_amrnb supports dtx\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name> <operator>==</operator> <name>MODE_12k2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lsf2lsp_5</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lsf2lsp_3</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_acelp_lspd2lpc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>subframe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>subframe</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>subframe</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AMRNBSubframe</name> <modifier>*</modifier></type><name>amr_subframe</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>subframe</name><index>[<expr><name>subframe</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_pitch_vector</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>amr_subframe</name></expr></argument>, <argument><expr><name>subframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_fixed_sparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed_sparse</name></expr></argument>, <argument><expr><name><name>amr_subframe</name><operator>-&gt;</operator><name>pulses</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name></expr></argument>, <argument><expr><name>subframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>decode_gains</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>amr_subframe</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name></expr></argument>, <argument><expr><name>subframe</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fixed_gain_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pitch_sharpening</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>subframe</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fixed_sparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fixed_sparse</name><operator>.</operator><name>pitch_lag</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The file is corrupted, pitch_lag = 0 is not allowed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_set_fixed_vector</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fixed_vector</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fixed_sparse</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator>
<call><name>ff_amr_set_fixed_gain</name><argument_list>(<argument><expr><name>fixed_gain_factor</name></expr></argument>,
<argument><expr><call><name><name>p</name><operator>-&gt;</operator><name>celpm_ctx</name><operator>.</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fixed_vector</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fixed_vector</name></name></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call> <operator>/</operator>
<name>AMR_SUBFRAME_SIZE</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prediction_error</name></name></expr></argument>,
<argument><expr><name><name>energy_mean</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>energy_pred_fac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMR_SUBFRAME_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>p</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ff_set_fixed_vector</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fixed_sparse</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMR_SUBFRAME_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>truncf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>




<expr_stmt><expr><name>synth_fixed_gain</name> <operator>=</operator> <call><name>fixed_gain_smooth</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsf_q</name><index>[<expr><name>subframe</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsf_avg</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>synth_fixed_vector</name> <operator>=</operator> <call><name>anti_sparseness</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fixed_sparse</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fixed_vector</name></name></expr></argument>,
<argument><expr><name>synth_fixed_gain</name></expr></argument>, <argument><expr><name>spare_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>synthesis</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lpc</name><index>[<expr><name>subframe</name></expr>]</index></name></expr></argument>, <argument><expr><name>synth_fixed_gain</name></expr></argument>,
<argument><expr><name>synth_fixed_vector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>samples_in</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><call><name>synthesis</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lpc</name><index>[<expr><name>subframe</name></expr>]</index></name></expr></argument>, <argument><expr><name>synth_fixed_gain</name></expr></argument>,
<argument><expr><name>synth_fixed_vector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>samples_in</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>postfilter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lpc</name><index>[<expr><name>subframe</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf_out</name> <operator>+</operator> <name>subframe</name> <operator>*</operator> <name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_clear_fixed_vector</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fixed_vector</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fixed_sparse</name></expr></argument>, <argument><expr><name>AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_state</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>acelpf_ctx</name><operator>.</operator><name>acelp_apply_order_2_transfer_function</name></name><argument_list>(<argument><expr><name>buf_out</name></expr></argument>,
<argument><expr><name>buf_out</name></expr></argument>, <argument><expr><name>highpass_zeros</name></expr></argument>,
<argument><expr><name>highpass_poles</name></expr></argument>,
<argument><expr><name>highpass_gain</name> <operator>*</operator> <name>AMR_SAMPLE_SCALE</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>high_pass_mem</name></name></expr></argument>, <argument><expr><name>AMR_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>acelpv_ctx</name><operator>.</operator><name>weighted_vector_sumf</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsf_avg</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsf_avg</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsf_q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0.84</literal></expr></argument>, <argument><expr><literal type="number">0.16</literal></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<return>return <expr><name><name>frame_sizes_nb</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>cur_frame_mode</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>


<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_amrnb_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"amrnb"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"AMR-NB (Adaptive Multi-Rate NarrowBand)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AMR_NB</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AMRContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>amrnb_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>amrnb_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_FLT</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
