<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aacdec_fixed.c">



























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_FLOAT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_FIXED_32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FIXED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fixed_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kbdwin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sinewin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aactab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacdectab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adts_header.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbrt_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacsbr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>reset_predict_state</name><parameter_list>(<parameter><decl><type><name>PredictorState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r0</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r0</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r1</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r1</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor0</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor0</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor1</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor1</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var0</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var0</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var1</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var1</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>exp2tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.0000000000</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.1892071150</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">1.4142135624</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <macro><name>Q31</name><argument_list>(<argument><literal type="number">1.6817928305</literal>/<literal type="number">2</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name> <modifier>*</modifier></type><name>DEC_SPAIR</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name> <modifier>*</modifier></type><name>DEC_SQUAD</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name> <modifier>*</modifier></type><name>DEC_UPAIR</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>sign</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFE</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>sign</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name> <modifier>*</modifier></type><name>DEC_UQUAD</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nz</name> <init>= <expr><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>sign</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>&lt;&lt;=</operator> <name>nz</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nz</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>sign</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>&lt;&lt;=</operator> <name>nz</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nz</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>sign</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>&lt;&lt;=</operator> <name>nz</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nz</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>sign</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vector_pow43</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>coefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>coef</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>coef</name> <operator>=</operator> <name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>coef</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coef</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>ff_cbrt_tab_fixed</name><index>[<expr><operator>-</operator><name>coef</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>coef</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ff_cbrt_tab_fixed</name><index>[<expr><name>coef</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>coef</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>subband_scale</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ssign</name> <init>= <expr><ternary><condition><expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>out</name></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><name><name>exp2tab</name><index>[<expr><name>s</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>s</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>out</name><operator>+</operator><name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>s</name><operator>)</operator> <operator>*</operator> <name>ssign</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>s</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>out</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>ssign</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overflow in subband_scale()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>noise_scale</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>coefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band_energy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><operator>-</operator><name>scale</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>out</name></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><name><name>exp2tab</name><index>[<expr><name>s</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>s</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>band_energy</name> <operator>&gt;</operator> <literal type="number">0x7fff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>band_energy</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nlz</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>c</name> <operator>/=</operator> <name>band_energy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">21</literal> <operator>+</operator> <name>nlz</name> <operator>-</operator> <operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>round</name> <operator>=</operator> <ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>s</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>out</name><operator>+</operator><name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>s</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>out</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>c</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>-</operator><name>s</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>SoftFloat</name></type> <name>flt16_round</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>pf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <name><name>pf</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>pf</name><operator>.</operator><name>mant</name></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>(</operator><name><name>pf</name><operator>.</operator><name>mant</name></name> <operator>^</operator> <name>s</name><operator>)</operator> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>mant</name></name> <operator>+</operator> <literal type="number">0x00200000U</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFC00000U</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>mant</name></name> <operator>^</operator> <name>s</name><operator>)</operator> <operator>-</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>SoftFloat</name></type> <name>flt16_even</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>pf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <name><name>pf</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>pf</name><operator>.</operator><name>mant</name></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>(</operator><name><name>pf</name><operator>.</operator><name>mant</name></name> <operator>^</operator> <name>s</name><operator>)</operator> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>mant</name></name> <operator>+</operator> <literal type="number">0x001FFFFFU</literal> <operator>+</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>mant</name></name> <operator>&amp;</operator> <literal type="number">0x00400000U</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFC00000U</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>mant</name></name> <operator>^</operator> <name>s</name><operator>)</operator> <operator>-</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>SoftFloat</name></type> <name>flt16_trunc</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>pf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>pun</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pun</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <name><name>pf</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>pf</name><operator>.</operator><name>mant</name></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pun</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>(</operator><name><name>pf</name><operator>.</operator><name>mant</name></name> <operator>^</operator> <name>s</name><operator>)</operator> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pun</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <name><name>pun</name><operator>.</operator><name>mant</name></name> <operator>&amp;</operator> <literal type="number">0xFFC00000U</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pun</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>(</operator><name><name>pun</name><operator>.</operator><name>mant</name></name> <operator>^</operator> <name>s</name><operator>)</operator> <operator>-</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>pun</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>predict</name><parameter_list>(<parameter><decl><type><name>PredictorState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>coef</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>output_enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>SoftFloat</name></type> <name>a</name> <init>= <expr><block>{ <expr><literal type="number">1023410176</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>SoftFloat</name></type> <name>alpha</name> <init>= <expr><block>{ <expr><literal type="number">973078528</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>e0</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>pv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>r0</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>r0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>r1</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>r1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>cor0</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>cor0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>cor1</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>cor1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>var0</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>var0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>var1</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>var1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SoftFloat</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var0</name><operator>.</operator><name>exp</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>var0</name><operator>.</operator><name>exp</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>var0</name><operator>.</operator><name>mant</name></name> <operator>&gt;</operator> <literal type="number">0x20000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name>cor0</name></expr></argument>, <argument><expr><call><name>flt16_even</name><argument_list>(<argument><expr><call><name>av_div_sf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>var0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>k1</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k1</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var1</name><operator>.</operator><name>exp</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>var1</name><operator>.</operator><name>exp</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>var1</name><operator>.</operator><name>mant</name></name> <operator>&gt;</operator> <literal type="number">0x20000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name>cor1</name></expr></argument>, <argument><expr><call><name>flt16_even</name><argument_list>(<argument><expr><call><name>av_div_sf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>var1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>k2</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k2</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>flt16_round</name><argument_list>(<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output_enable</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">28</literal> <operator>-</operator> <name><name>pv</name><operator>.</operator><name>exp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>coef</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pv</name><operator>.</operator><name>mant</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>coef</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pv</name><operator>.</operator><name>mant</name></name> <operator>&lt;&lt;</operator> <operator>-</operator><name>shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e0</name> <operator>=</operator> <call><name>av_int2sf</name><argument_list>(<argument><expr><operator>*</operator><name>coef</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>av_sub_sf</name><argument_list>(<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor1</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>cor1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>exp</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var1</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>var1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor0</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>cor0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>e0</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>exp</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var0</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>var0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r1</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>av_sub_sf</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r0</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><call><name>av_mul_sf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>e0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cce_scale_fixed</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>Q30</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>Q30</name><argument_list>(<argument><expr><literal type="number">1.0905077327</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>Q30</name><argument_list>(<argument><expr><literal type="number">1.1892071150</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>Q30</name><argument_list>(<argument><expr><literal type="number">1.2968395547</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>Q30</name><argument_list>(<argument><expr><literal type="number">1.4142135624</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>Q30</name><argument_list>(<argument><expr><literal type="number">1.5422108254</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>Q30</name><argument_list>(<argument><expr><literal type="number">1.6817928305</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>Q30</name><argument_list>(<argument><expr><literal type="number">1.8340080864</literal></expr></argument>)</argument_list></call></expr>, 
}</block></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_dependent_coupling_fixed</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,
<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,
<parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>cce</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>offsets</name> <init>= <expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>coeffs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>cce</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>group</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_AAC_LTP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Dependent coupling is not supported together with LTP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cce</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>ZERO_BT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>gain</name> <init>= <expr><name><name>cce</name><operator>-&gt;</operator><name>coup</name><operator>.</operator><name>gain</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>round</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gain</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><name><name>cce_scale_fixed</name><index>[<expr><operator>-</operator><name>gain</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>gain</name><operator>-</operator><literal type="number">1024</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>cce_scale_fixed</name><index>[<expr><name>gain</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>gain</name><operator>-</operator><literal type="number">1024</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">31</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>-</operator><name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>offsets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>src</name><index>[<expr><name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>*</operator> <name>c</name> <operator>+</operator> \
<operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">0x1000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">37</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>offsets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>src</name><index>[<expr><name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>*</operator> <name>c</name> <operator>+</operator> \
<operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">0x1000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">37</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>+=</operator> <name>tmp</name> <operator>*</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_independent_coupling_fixed</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,
<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,
<parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>round</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>gain</name> <init>= <expr><name><name>cce</name><operator>-&gt;</operator><name>coup</name><operator>.</operator><name>gain</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>cce</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ret</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>ret</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">1024</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sbr</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>cce_scale_fixed</name><index>[<expr><name>gain</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>gain</name><operator>-</operator><literal type="number">1024</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>-</operator><name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>c</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">0x1000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">37</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>c</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">0x1000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">37</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>tmp</name> <operator>*</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacdec_template.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_aac_fixed_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aac_fixed"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"AAC (Advanced Audio Coding)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AACContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>aac_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>aac_decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>aac_decode_frame</name></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_SAMPLE_FMT_S32P</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr>
}</block></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_CHANNEL_CONF</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <name>aac_channel_layout</name></expr>,
<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_aac_profiles</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>flush</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
