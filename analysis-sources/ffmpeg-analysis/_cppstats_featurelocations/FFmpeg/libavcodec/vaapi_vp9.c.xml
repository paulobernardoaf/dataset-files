<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vaapi_vp9.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_decode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9shared.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>VASurfaceID</name></type> <name>vaapi_vp9_surface_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VP9Frame</name> <modifier>*</modifier></type><name>vf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>vf</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>VA_INVALID_SURFACE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_vp9_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>av_unused</name> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>av_unused</name> <name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VP9SharedContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>hwaccel_picture_private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VADecPictureParameterBufferVP9</name></type> <name>pic_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pixdesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>output_surface</name></name> <operator>=</operator> <call><name>vaapi_vp9_surface_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pic_param</name> <operator>=</operator> <operator>(</operator><name>VADecPictureParameterBufferVP9</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>frame_width</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>,
<expr><operator>.</operator><name>frame_height</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>,

<expr><operator>.</operator><name><name>pic_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>subsampling_x</name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>,
<expr><operator>.</operator><name>subsampling_y</name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>,
<expr><operator>.</operator><name>frame_type</name> <operator>=</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>keyframe</name></name></expr>,
<expr><operator>.</operator><name>show_frame</name> <operator>=</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>invisible</name></name></expr>,
<expr><operator>.</operator><name>error_resilient_mode</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>errorres</name></name></expr>,
<expr><operator>.</operator><name>intra_only</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>,
<expr><operator>.</operator><name>allow_high_precision_mv</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>?</operator> <literal type="number">0</literal> <operator>:</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>highprecisionmvs</name></name></expr>,
<expr><operator>.</operator><name>mcomp_filter_type</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filtermode</name></name> <operator>^</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filtermode</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>,
<expr><operator>.</operator><name>frame_parallel_decoding_mode</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>parallelmode</name></name></expr>,
<expr><operator>.</operator><name>reset_frame_context</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>resetctx</name></name></expr>,
<expr><operator>.</operator><name>refresh_frame_context</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refreshctx</name></name></expr>,
<expr><operator>.</operator><name>frame_context_idx</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>framectxid</name></name></expr>,

<expr><operator>.</operator><name>segmentation_enabled</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name></expr>,
<expr><operator>.</operator><name>segmentation_temporal_update</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>temporal</name></name></expr>,
<expr><operator>.</operator><name>segmentation_update_map</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name></expr>,

<expr><operator>.</operator><name>last_ref_frame</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>last_ref_frame_sign_bias</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>golden_ref_frame</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>golden_ref_frame_sign_bias</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>alt_ref_frame</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>alt_ref_frame_sign_bias</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>lossless_flag</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>lossless</name></name></expr>,
}</block></expr>,

<expr><operator>.</operator><name>filter_level</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>level</name></name></expr>,
<expr><operator>.</operator><name>sharpness_level</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>sharpness</name></name></expr>,
<expr><operator>.</operator><name>log2_tile_rows</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_rows</name></name></expr>,
<expr><operator>.</operator><name>log2_tile_columns</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name></expr>,

<expr><operator>.</operator><name>frame_header_length_in_bytes</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>uncompressed_header_size</name></name></expr>,
<expr><operator>.</operator><name>first_partition_size</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>compressed_header_size</name></name></expr>,

<expr><operator>.</operator><name>profile</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>profile</name></name></expr>,
<expr><operator>.</operator><name>bit_depth</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>bpp</name></name></expr>,
}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pic_param</name><operator>.</operator><name>mb_segment_tree_probs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>prob</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>temporal</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pic_param</name><operator>.</operator><name>segment_pred_probs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>pred_prob</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pic_param</name><operator>.</operator><name>segment_pred_probs</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pic_param</name><operator>.</operator><name>segment_pred_probs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pic_param</name><operator>.</operator><name>reference_frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pic_param</name><operator>.</operator><name>reference_frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,
<argument><expr><name>VAPictureParameterBufferType</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pic_param</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pic_param</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_vaapi_decode_cancel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_vp9_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VP9SharedContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>hwaccel_picture_private</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_vaapi_decode_issue</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_vp9_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VP9SharedContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>hwaccel_picture_private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASliceParameterBufferVP9</name></type> <name>slice_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>slice_param</name> <operator>=</operator> <operator>(</operator><name>VASliceParameterBufferVP9</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>slice_data_size</name> <operator>=</operator> <name>size</name></expr>,
<expr><operator>.</operator><name>slice_data_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>slice_data_flag</name> <operator>=</operator> <name>VA_SLICE_DATA_FLAG_ALL</name></expr>,
}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>slice_param</name><operator>.</operator><name>seg_param</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VASegmentParameterVP9</name><operator>)</operator> <block>{
<expr><operator>.</operator><name><name>segment_flags</name><operator>.</operator><name>fields</name></name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>segment_reference_enabled</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_enabled</name></expr>,
<expr><operator>.</operator><name>segment_reference</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_val</name></expr>,
<expr><operator>.</operator><name>segment_reference_skipped</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip_enabled</name></expr>,
}</block></expr>,

<expr><operator>.</operator><name>luma_dc_quant_scale</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>luma_ac_quant_scale</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>chroma_dc_quant_scale</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><operator>.</operator><name>chroma_ac_quant_scale</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>slice_param</name><operator>.</operator><name>seg_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter_level</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lflvl</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>slice_param</name><operator>.</operator><name>seg_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter_level</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_slice_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>slice_param</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>slice_param</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_vaapi_decode_cancel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_vp9_vaapi_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp9_vaapi"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP9</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>vaapi_vp9_start_frame</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>vaapi_vp9_end_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>vaapi_vp9_decode_slice</name></expr>,
<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodePicture</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_vaapi_decode_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_vaapi_decode_uninit</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_vaapi_common_frame_params</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
