<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\simple_idct_template.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_idct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>W1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>W2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>W3</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>W4</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>W5</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>W6</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>W7</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ROW_SHIFT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COL_SHIFT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DC_SHIFT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MUL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAC</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W1</name></cpp:macro> <cpp:value>22725</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W2</name></cpp:macro> <cpp:value>21407</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W3</name></cpp:macro> <cpp:value>19266</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W4</name></cpp:macro> <cpp:value>16383</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W5</name></cpp:macro> <cpp:value>12873</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W6</name></cpp:macro> <cpp:value>8867</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W7</name></cpp:macro> <cpp:value>4520</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_SHIFT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_SHIFT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_SHIFT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL16(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MAC16(a, b, c)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>==</operator> <literal type="number">10</literal> <operator>||</operator> <name>BIT_DEPTH</name> <operator>==</operator> <literal type="number">12</literal></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>==</operator> <literal type="number">10</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W1</name></cpp:macro> <cpp:value>22725</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W2</name></cpp:macro> <cpp:value>21407</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W3</name></cpp:macro> <cpp:value>19265</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W4</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W5</name></cpp:macro> <cpp:value>12873</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W6</name></cpp:macro> <cpp:value>8867</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W7</name></cpp:macro> <cpp:value>4520</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXTRA_SHIFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_SHIFT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_SHIFT</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_SHIFT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>IN_IDCT_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_SHIFT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_SHIFT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_SHIFT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_SHIFT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_SHIFT</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_SHIFT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W1</name></cpp:macro> <cpp:value>45451</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W2</name></cpp:macro> <cpp:value>42813</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W3</name></cpp:macro> <cpp:value>38531</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W4</name></cpp:macro> <cpp:value>32767</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W5</name></cpp:macro> <cpp:value>25746</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W6</name></cpp:macro> <cpp:value>17734</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W7</name></cpp:macro> <cpp:value>9041</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_SHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_SHIFT</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_SHIFT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((SUINT)(a) * (b)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) += (SUINT)(b) * (c))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported bitdepth"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXTRA_SHIFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>FUNC</name></type><argument_list>(<argument><expr><name>idctRowCondDC_extrashift</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int16_t</name> <operator>*</operator><name>row</name></expr></argument>, <argument><expr><name>int</name> <name>extra_shift</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <namespace><specifier>inline</specifier> void <name>FUNC6</name>(<name>idctRowCondDC</name></namespace></decl>)(idctin *row<operator>,</operator> int extra_shift</decl_stmt>)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>SUINT</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IN_IDCT_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_64BIT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW0_MASK</name></cpp:macro> <cpp:value>(0xffffULL &lt;&lt; 48 * HAVE_BIGENDIAN)</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>AV_RN64A</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>ROW0_MASK</name><operator>)</operator> <operator>|</operator> <call><name>AV_RN64A</name><argument_list>(<argument><expr><name>row</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>temp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>DC_SHIFT</name> <operator>-</operator> <name>extra_shift</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DC_SHIFT</name> <operator>-</operator> <name>extra_shift</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>extra_shift</name> <operator>-</operator> <name>DC_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>extra_shift</name> <operator>-</operator> <name>DC_SHIFT</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name>temp</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name>temp</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>AV_RN32A</name><argument_list>(<argument><expr><name>row</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>AV_RN32A</name><argument_list>(<argument><expr><name>row</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>AV_RN32A</name><argument_list>(<argument><expr><name>row</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>|</operator>
<name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>temp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>DC_SHIFT</name> <operator>-</operator> <name>extra_shift</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DC_SHIFT</name> <operator>-</operator> <name>extra_shift</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>extra_shift</name> <operator>-</operator> <name>DC_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>extra_shift</name> <operator>-</operator> <name>DC_SHIFT</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name>temp</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>row</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>row</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>row</name><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUINT</name><operator>)</operator><name>W4</name> <operator>*</operator> <name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ROW_SHIFT</name> <operator>+</operator> <name>extra_shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>+=</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name>W2</name> <operator>*</operator> <name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>+=</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name>W6</name> <operator>*</operator> <name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>-=</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name>W6</name> <operator>*</operator> <name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>-=</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name>W2</name> <operator>*</operator> <name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>W1</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>W3</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>W3</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><operator>-</operator><name>W7</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>W5</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><operator>-</operator><name>W1</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>W7</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b3</name></expr></argument>, <argument><expr><operator>-</operator><name>W5</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IN_IDCT_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>AV_RN64A</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>AV_RN64A</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>AV_RN64A</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <operator>(</operator><name>SUINT</name><operator>)</operator> <name>W4</name><operator>*</operator><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name>W6</name><operator>*</operator><name><name>row</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>+=</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><operator>-</operator> <name>W4</name><operator>*</operator><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name>W2</name><operator>*</operator><name><name>row</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>+=</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><operator>-</operator> <name>W4</name><operator>*</operator><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name>W2</name><operator>*</operator><name><name>row</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>+=</operator> <operator>(</operator><name>SUINT</name><operator>)</operator> <name>W4</name><operator>*</operator><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name>W6</name><operator>*</operator><name><name>row</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>W5</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>W7</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><operator>-</operator><name>W1</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><operator>-</operator><name>W5</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>W7</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>W3</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b3</name></expr></argument>, <argument><expr><name>W3</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAC</name><argument_list>(<argument><expr><name>b3</name></expr></argument>, <argument><expr><operator>-</operator><name>W1</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a0</name> <operator>+</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>ROW_SHIFT</name> <operator>+</operator> <name>extra_shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a0</name> <operator>-</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>ROW_SHIFT</name> <operator>+</operator> <name>extra_shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>+</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>ROW_SHIFT</name> <operator>+</operator> <name>extra_shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>-</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>ROW_SHIFT</name> <operator>+</operator> <name>extra_shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a2</name> <operator>+</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>ROW_SHIFT</name> <operator>+</operator> <name>extra_shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a2</name> <operator>-</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>ROW_SHIFT</name> <operator>+</operator> <name>extra_shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a3</name> <operator>+</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>ROW_SHIFT</name> <operator>+</operator> <name>extra_shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a3</name> <operator>-</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>ROW_SHIFT</name> <operator>+</operator> <name>extra_shift</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_COLS</name></cpp:macro> <cpp:value>do { a0 = (SUINT)W4 * (col[8*0] + ((1&lt;&lt;(COL_SHIFT-1))/W4)); a1 = a0; a2 = a0; a3 = a0; a0 += (SUINT) W2*col[8*2]; a1 += (SUINT) W6*col[8*2]; a2 += (SUINT)-W6*col[8*2]; a3 += (SUINT)-W2*col[8*2]; b0 = MUL(W1, col[8*1]); b1 = MUL(W3, col[8*1]); b2 = MUL(W5, col[8*1]); b3 = MUL(W7, col[8*1]); MAC(b0, W3, col[8*3]); MAC(b1, -W7, col[8*3]); MAC(b2, -W1, col[8*3]); MAC(b3, -W5, col[8*3]); if (col[8*4]) { a0 += (SUINT) W4*col[8*4]; a1 += (SUINT)-W4*col[8*4]; a2 += (SUINT)-W4*col[8*4]; a3 += (SUINT) W4*col[8*4]; } if (col[8*5]) { MAC(b0, W5, col[8*5]); MAC(b1, -W1, col[8*5]); MAC(b2, W7, col[8*5]); MAC(b3, W3, col[8*5]); } if (col[8*6]) { a0 += (SUINT) W6*col[8*6]; a1 += (SUINT)-W2*col[8*6]; a2 += (SUINT) W2*col[8*6]; a3 += (SUINT)-W6*col[8*6]; } if (col[8*7]) { MAC(b0, W7, col[8*7]); MAC(b1, -W5, col[8*7]); MAC(b2, W3, col[8*7]); MAC(b3, -W1, col[8*7]); } } while (0)</cpp:value></cpp:define>

















































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXTRA_SHIFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>FUNC</name></type><argument_list>(<argument><expr><name>idctSparseCol_extrashift</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>int16_t</name> <operator>*</operator><name>col</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <namespace><specifier>inline</specifier> void <name>FUNC6</name>(<name>idctSparseColPut</name></namespace></decl>)(pixel *dest<operator>,</operator> ptrdiff_t line_size<operator>,</operator>
idctin *col</decl_stmt>)</block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>SUINT</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>IDCT_COLS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a0</name> <operator>+</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>+</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a2</name> <operator>+</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a3</name> <operator>+</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a3</name> <operator>-</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a2</name> <operator>-</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>-</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a0</name> <operator>-</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

static <namespace><specifier>inline</specifier> void <name>FUNC6</name>(<name>idctSparseColAdd</name></namespace></block>)<expr_stmt><expr><operator>(</operator><name>pixel</name> <operator>*</operator><name>dest</name><operator>,</operator> <name>ptrdiff_t</name> <name>line_size</name><operator>,</operator>
<name>idctin</name> <operator>*</operator><name>col</name><operator>)</operator>
<block>{
<expr><name>unsigned</name> <name>a0</name></expr>, <expr><name>a1</name></expr>, <expr><name>a2</name></expr>, <expr><name>a3</name></expr>, <expr><name>b0</name></expr>, <expr><name>b1</name></expr>, <expr><name>b2</name></expr>, <expr><name>b3</name></expr>;

<expr><name>IDCT_COLS</name></expr>;

<expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a0</name> <operator>+</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;
<expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>+</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;
<expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a2</name> <operator>+</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;
<expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a3</name> <operator>+</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;
<expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a3</name> <operator>-</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;
<expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a2</name> <operator>-</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;
<expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>-</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>dest</name> <operator>+=</operator> <name>line_size</name></expr>;
<expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a0</name> <operator>-</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <macro><name>FUNC6</name><argument_list>(<argument>idctSparseCol</argument>)</argument_list></macro><operator>(</operator><name>idctin</name> <operator>*</operator><name>col</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>unsigned</name> <name>a0</name></expr>, <expr><name>a1</name></expr>, <expr><name>a2</name></expr>, <expr><name>a3</name></expr>, <expr><name>b0</name></expr>, <expr><name>b1</name></expr>, <expr><name>b2</name></expr>, <expr><name>b3</name></expr>;

<expr><name>IDCT_COLS</name></expr>;

<expr><name><name>col</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a0</name> <operator>+</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;
<expr><name><name>col</name><index>[<expr><literal type="number">8</literal></expr> ]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>+</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;
<expr><name><name>col</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a2</name> <operator>+</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;
<expr><name><name>col</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a3</name> <operator>+</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;
<expr><name><name>col</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a3</name> <operator>-</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;
<expr><name><name>col</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a2</name> <operator>-</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;
<expr><name><name>col</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a1</name> <operator>-</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;
<expr><name><name>col</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a0</name> <operator>-</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name><operator>)</operator></expr>;
}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXTRA_SHIFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>void</name> <macro><name>FUNC6</name><argument_list>(<argument>ff_simple_idct_put</argument>)</argument_list></macro><operator>(</operator><name>uint8_t</name> <operator>*</operator><name>dest_</name><operator>,</operator> <name>ptrdiff_t</name> <name>line_size</name><operator>,</operator> <name>int16_t</name> <operator>*</operator><name>block_</name><operator>)</operator>
<block>{
<expr><name>idctin</name> <operator>*</operator><name>block</name> <operator>=</operator> <operator>(</operator><name>idctin</name> <operator>*</operator><operator>)</operator><name>block_</name></expr>;
<expr><name>pixel</name> <operator>*</operator><name>dest</name> <operator>=</operator> <operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>dest_</name></expr>;
<expr><name>int</name> <name>i</name></expr>;

<expr><name>line_size</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>FUNC6</name><argument_list>(<argument><expr><name>idctRowCondDC</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block></expr></expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>FUNC6</name><argument_list>(<argument><expr><name>idctSparseColPut</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IN_IDCT_DEPTH</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:if>
void <function><type><name>FUNC6</name></type>(<name>ff_simple_idct_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>dest_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line_size</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>FUNC6</name><argument_list>(<argument><expr><name>idctRowCondDC</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>FUNC6</name><argument_list>(<argument><expr><name>idctSparseColAdd</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name> <name>FUNC6</name></type>(<name>ff_simple_idct</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>FUNC6</name><argument_list>(<argument><expr><name>idctRowCondDC</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>FUNC6</name><argument_list>(<argument><expr><name>idctSparseCol</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
