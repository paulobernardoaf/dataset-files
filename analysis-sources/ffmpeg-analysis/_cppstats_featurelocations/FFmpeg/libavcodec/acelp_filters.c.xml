<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\acelp_filters.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_filters.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>ff_acelp_interp_filter</name><index>[<expr><literal type="number">61</literal></expr>]</index></name> <init>= <expr><block>{ 
<expr><literal type="number">29443</literal></expr>, <expr><literal type="number">28346</literal></expr>, <expr><literal type="number">25207</literal></expr>, <expr><literal type="number">20449</literal></expr>, <expr><literal type="number">14701</literal></expr>, <expr><literal type="number">8693</literal></expr>,
<expr><literal type="number">3143</literal></expr>, <expr><operator>-</operator><literal type="number">1352</literal></expr>, <expr><operator>-</operator><literal type="number">4402</literal></expr>, <expr><operator>-</operator><literal type="number">5865</literal></expr>, <expr><operator>-</operator><literal type="number">5850</literal></expr>, <expr><operator>-</operator><literal type="number">4673</literal></expr>,
<expr><operator>-</operator><literal type="number">2783</literal></expr>, <expr><operator>-</operator><literal type="number">672</literal></expr>, <expr><literal type="number">1211</literal></expr>, <expr><literal type="number">2536</literal></expr>, <expr><literal type="number">3130</literal></expr>, <expr><literal type="number">2991</literal></expr>,
<expr><literal type="number">2259</literal></expr>, <expr><literal type="number">1170</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1001</literal></expr>, <expr><operator>-</operator><literal type="number">1652</literal></expr>, <expr><operator>-</operator><literal type="number">1868</literal></expr>,
<expr><operator>-</operator><literal type="number">1666</literal></expr>, <expr><operator>-</operator><literal type="number">1147</literal></expr>, <expr><operator>-</operator><literal type="number">464</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">756</literal></expr>, <expr><literal type="number">1060</literal></expr>,
<expr><literal type="number">1099</literal></expr>, <expr><literal type="number">904</literal></expr>, <expr><literal type="number">550</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><operator>-</operator><literal type="number">245</literal></expr>, <expr><operator>-</operator><literal type="number">514</literal></expr>,
<expr><operator>-</operator><literal type="number">634</literal></expr>, <expr><operator>-</operator><literal type="number">602</literal></expr>, <expr><operator>-</operator><literal type="number">451</literal></expr>, <expr><operator>-</operator><literal type="number">231</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">191</literal></expr>,
<expr><literal type="number">308</literal></expr>, <expr><literal type="number">340</literal></expr>, <expr><literal type="number">296</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>,
<expr><operator>-</operator><literal type="number">120</literal></expr>, <expr><operator>-</operator><literal type="number">163</literal></expr>, <expr><operator>-</operator><literal type="number">165</literal></expr>, <expr><operator>-</operator><literal type="number">132</literal></expr>, <expr><operator>-</operator><literal type="number">79</literal></expr>, <expr><operator>-</operator><literal type="number">19</literal></expr>,
<expr><literal type="number">34</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">38</literal></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ff_acelp_interpolate</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>filter_coeffs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>frac_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>frac_pos</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>frac_pos</name> <operator>&lt;</operator> <name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filter_length</name></expr>;</condition><incr/>)</control> <block>{<block_content>










<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>n</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <name><name>filter_coeffs</name><index>[<expr><name>idx</name> <operator>+</operator> <name>frac_pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>precision</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>n</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <name><name>filter_coeffs</name><index>[<expr><name>idx</name> <operator>-</operator> <name>frac_pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>av_clip_int16</name><argument_list>(<argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"overflow that would need clipping in ff_acelp_interpolate()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_acelp_interpolatef</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter_coeffs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>frac_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filter_length</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>n</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <name><name>filter_coeffs</name><index>[<expr><name>idx</name> <operator>+</operator> <name>frac_pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>precision</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>n</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <name><name>filter_coeffs</name><index>[<expr><name>idx</name> <operator>-</operator> <name>frac_pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_acelp_high_pass_filter</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>hpf_f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>hpf_f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator> <literal type="number">15836LL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <operator>(</operator><name><name>hpf_f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator> <operator>-</operator><literal type="number">7667LL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">7699</literal> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name><name>in</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">0x800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpf_f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hpf_f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpf_f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_acelp_apply_order_2_transfer_function</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>zero_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>pole_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>mem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tmp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>gain</name> <operator>*</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>pole_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pole_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name><name>zero_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>zero_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_tilt_compensation</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>tilt</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>new_tilt_mem</name> <init>= <expr><name><name>samples</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>tilt</name> <operator>*</operator> <name><name>samples</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>tilt</name> <operator>*</operator> <operator>*</operator><name>mem</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mem</name> <operator>=</operator> <name>new_tilt_mem</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_acelp_filter_init</name><parameter_list>(<parameter><decl><type><name>ACELPFContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>acelp_interpolatef</name></name> <operator>=</operator> <name>ff_acelp_interpolatef</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>acelp_apply_order_2_transfer_function</name></name> <operator>=</operator> <name>ff_acelp_apply_order_2_transfer_function</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>HAVE_MIPSFPU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_acelp_filter_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
