<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mlp_parse.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_MLP_PARSE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_MLP_PARSE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>MLPHeaderInfo</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>stream_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>header_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>group1_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>group2_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>group1_samplerate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>group2_samplerate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>channel_arrangement</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel_modifier_thd_stream0</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>channel_modifier_thd_stream1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>channel_modifier_thd_stream2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>channels_mlp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>channels_thd_stream1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>channels_thd_stream2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_layout_mlp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_layout_thd_stream1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_layout_thd_stream2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>access_unit_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>access_unit_size_pow2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>is_vbr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>peak_bitrate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_substreams</name></decl>;</decl_stmt> 
}</block></struct></type> <name>MLPHeaderInfo</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>thd_chancount</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>thd_layout</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>AV_CH_FRONT_LEFT</name><operator>|</operator><name>AV_CH_FRONT_RIGHT</name></expr>, 
<expr><name>AV_CH_FRONT_CENTER</name></expr>, 
<expr><name>AV_CH_LOW_FREQUENCY</name></expr>, 
<expr><name>AV_CH_SIDE_LEFT</name><operator>|</operator><name>AV_CH_SIDE_RIGHT</name></expr>, 
<expr><name>AV_CH_TOP_FRONT_LEFT</name><operator>|</operator><name>AV_CH_TOP_FRONT_RIGHT</name></expr>, 
<expr><name>AV_CH_FRONT_LEFT_OF_CENTER</name><operator>|</operator><name>AV_CH_FRONT_RIGHT_OF_CENTER</name></expr>, 
<expr><name>AV_CH_BACK_LEFT</name><operator>|</operator><name>AV_CH_BACK_RIGHT</name></expr>, 
<expr><name>AV_CH_BACK_CENTER</name></expr>, 
<expr><name>AV_CH_TOP_CENTER</name></expr>, 
<expr><name>AV_CH_SURROUND_DIRECT_LEFT</name><operator>|</operator><name>AV_CH_SURROUND_DIRECT_RIGHT</name></expr>, 
<expr><name>AV_CH_WIDE_LEFT</name><operator>|</operator><name>AV_CH_WIDE_RIGHT</name></expr>, 
<expr><name>AV_CH_TOP_FRONT_CENTER</name></expr>, 
<expr><name>AV_CH_LOW_FREQUENCY_2</name></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>mlp_samplerate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="number">0xF</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>in</name> <operator>&amp;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">44100</literal></expr> </then><else>: <expr><literal type="number">48000</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>in</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>truehd_channels</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chanmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>channels</name> <operator>+=</operator> <name><name>thd_chancount</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>chanmap</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>channels</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>truehd_layout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chanmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>layout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>layout</name> <operator>|=</operator> <name><name>thd_layout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>chanmap</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>layout</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ff_mlp_read_major_sync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><name>MLPHeaderInfo</name> <modifier>*</modifier></type><name>mh</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
