<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dcadct.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcadct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcamath.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sum_a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sum_b</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sum_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sum_d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cos_mod</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">8348215</literal></expr>, <expr><literal type="number">8027397</literal></expr>, <expr><literal type="number">7398092</literal></expr>, <expr><literal type="number">6484482</literal></expr>, <expr><literal type="number">5321677</literal></expr>, <expr><literal type="number">3954362</literal></expr>, <expr><literal type="number">2435084</literal></expr>, <expr><literal type="number">822227</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8027397</literal></expr>, <expr><literal type="number">5321677</literal></expr>, <expr><literal type="number">822227</literal></expr>, <expr><operator>-</operator><literal type="number">3954362</literal></expr>, <expr><operator>-</operator><literal type="number">7398092</literal></expr>, <expr><operator>-</operator><literal type="number">8348215</literal></expr>, <expr><operator>-</operator><literal type="number">6484482</literal></expr>, <expr><operator>-</operator><literal type="number">2435084</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">7398092</literal></expr>, <expr><literal type="number">822227</literal></expr>, <expr><operator>-</operator><literal type="number">6484482</literal></expr>, <expr><operator>-</operator><literal type="number">8027397</literal></expr>, <expr><operator>-</operator><literal type="number">2435084</literal></expr>, <expr><literal type="number">5321677</literal></expr>, <expr><literal type="number">8348215</literal></expr>, <expr><literal type="number">3954362</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">6484482</literal></expr>, <expr><operator>-</operator><literal type="number">3954362</literal></expr>, <expr><operator>-</operator><literal type="number">8027397</literal></expr>, <expr><literal type="number">822227</literal></expr>, <expr><literal type="number">8348215</literal></expr>, <expr><literal type="number">2435084</literal></expr>, <expr><operator>-</operator><literal type="number">7398092</literal></expr>, <expr><operator>-</operator><literal type="number">5321677</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5321677</literal></expr>, <expr><operator>-</operator><literal type="number">7398092</literal></expr>, <expr><operator>-</operator><literal type="number">2435084</literal></expr>, <expr><literal type="number">8348215</literal></expr>, <expr><operator>-</operator><literal type="number">822227</literal></expr>, <expr><operator>-</operator><literal type="number">8027397</literal></expr>, <expr><literal type="number">3954362</literal></expr>, <expr><literal type="number">6484482</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3954362</literal></expr>, <expr><operator>-</operator><literal type="number">8348215</literal></expr>, <expr><literal type="number">5321677</literal></expr>, <expr><literal type="number">2435084</literal></expr>, <expr><operator>-</operator><literal type="number">8027397</literal></expr>, <expr><literal type="number">6484482</literal></expr>, <expr><literal type="number">822227</literal></expr>, <expr><operator>-</operator><literal type="number">7398092</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2435084</literal></expr>, <expr><operator>-</operator><literal type="number">6484482</literal></expr>, <expr><literal type="number">8348215</literal></expr>, <expr><operator>-</operator><literal type="number">7398092</literal></expr>, <expr><literal type="number">3954362</literal></expr>, <expr><literal type="number">822227</literal></expr>, <expr><operator>-</operator><literal type="number">5321677</literal></expr>, <expr><literal type="number">8027397</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">822227</literal></expr>, <expr><operator>-</operator><literal type="number">2435084</literal></expr>, <expr><literal type="number">3954362</literal></expr>, <expr><operator>-</operator><literal type="number">5321677</literal></expr>, <expr><literal type="number">6484482</literal></expr>, <expr><operator>-</operator><literal type="number">7398092</literal></expr>, <expr><literal type="number">8027397</literal></expr>, <expr><operator>-</operator><literal type="number">8348215</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>input</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>norm23</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_b</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cos_mod</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">8227423</literal></expr>, <expr><literal type="number">7750063</literal></expr>, <expr><literal type="number">6974873</literal></expr>, <expr><literal type="number">5931642</literal></expr>, <expr><literal type="number">4660461</literal></expr>, <expr><literal type="number">3210181</literal></expr>, <expr><literal type="number">1636536</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">6974873</literal></expr>, <expr><literal type="number">3210181</literal></expr>, <expr><operator>-</operator><literal type="number">1636536</literal></expr>, <expr><operator>-</operator><literal type="number">5931642</literal></expr>, <expr><operator>-</operator><literal type="number">8227423</literal></expr>, <expr><operator>-</operator><literal type="number">7750063</literal></expr>, <expr><operator>-</operator><literal type="number">4660461</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4660461</literal></expr>, <expr><operator>-</operator><literal type="number">3210181</literal></expr>, <expr><operator>-</operator><literal type="number">8227423</literal></expr>, <expr><operator>-</operator><literal type="number">5931642</literal></expr>, <expr><literal type="number">1636536</literal></expr>, <expr><literal type="number">7750063</literal></expr>, <expr><literal type="number">6974873</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1636536</literal></expr>, <expr><operator>-</operator><literal type="number">7750063</literal></expr>, <expr><operator>-</operator><literal type="number">4660461</literal></expr>, <expr><literal type="number">5931642</literal></expr>, <expr><literal type="number">6974873</literal></expr>, <expr><operator>-</operator><literal type="number">3210181</literal></expr>, <expr><operator>-</operator><literal type="number">8227423</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1636536</literal></expr>, <expr><operator>-</operator><literal type="number">7750063</literal></expr>, <expr><literal type="number">4660461</literal></expr>, <expr><literal type="number">5931642</literal></expr>, <expr><operator>-</operator><literal type="number">6974873</literal></expr>, <expr><operator>-</operator><literal type="number">3210181</literal></expr>, <expr><literal type="number">8227423</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">4660461</literal></expr>, <expr><operator>-</operator><literal type="number">3210181</literal></expr>, <expr><literal type="number">8227423</literal></expr>, <expr><operator>-</operator><literal type="number">5931642</literal></expr>, <expr><operator>-</operator><literal type="number">1636536</literal></expr>, <expr><literal type="number">7750063</literal></expr>, <expr><operator>-</operator><literal type="number">6974873</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">6974873</literal></expr>, <expr><literal type="number">3210181</literal></expr>, <expr><literal type="number">1636536</literal></expr>, <expr><operator>-</operator><literal type="number">5931642</literal></expr>, <expr><literal type="number">8227423</literal></expr>, <expr><operator>-</operator><literal type="number">7750063</literal></expr>, <expr><literal type="number">4660461</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">8227423</literal></expr>, <expr><literal type="number">7750063</literal></expr>, <expr><operator>-</operator><literal type="number">6974873</literal></expr>, <expr><literal type="number">5931642</literal></expr>, <expr><operator>-</operator><literal type="number">4660461</literal></expr>, <expr><literal type="number">3210181</literal></expr>, <expr><operator>-</operator><literal type="number">1636536</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>res</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>norm23</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mod_a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cos_mod</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">4199362</literal></expr>, <expr><literal type="number">4240198</literal></expr>, <expr><literal type="number">4323885</literal></expr>, <expr><literal type="number">4454708</literal></expr>,
<expr><literal type="number">4639772</literal></expr>, <expr><literal type="number">4890013</literal></expr>, <expr><literal type="number">5221943</literal></expr>, <expr><literal type="number">5660703</literal></expr>,
<expr><operator>-</operator><literal type="number">6245623</literal></expr>, <expr><operator>-</operator><literal type="number">7040975</literal></expr>, <expr><operator>-</operator><literal type="number">8158494</literal></expr>, <expr><operator>-</operator><literal type="number">9809974</literal></expr>,
<expr><operator>-</operator><literal type="number">12450076</literal></expr>, <expr><operator>-</operator><literal type="number">17261920</literal></expr>, <expr><operator>-</operator><literal type="number">28585092</literal></expr>, <expr><operator>-</operator><literal type="number">85479984</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul23</name><argument_list>(<argument><expr><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul23</name><argument_list>(<argument><expr><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>input</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mod_b</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cos_mod</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">4214598</literal></expr>, <expr><literal type="number">4383036</literal></expr>, <expr><literal type="number">4755871</literal></expr>, <expr><literal type="number">5425934</literal></expr>,
<expr><literal type="number">6611520</literal></expr>, <expr><literal type="number">8897610</literal></expr>, <expr><literal type="number">14448934</literal></expr>, <expr><literal type="number">42791536</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul23</name><argument_list>(<argument><expr><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>input</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mod_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cos_mod</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">1048892</literal></expr>, <expr><literal type="number">1051425</literal></expr>, <expr><literal type="number">1056522</literal></expr>, <expr><literal type="number">1064244</literal></expr>,
<expr><literal type="number">1074689</literal></expr>, <expr><literal type="number">1087987</literal></expr>, <expr><literal type="number">1104313</literal></expr>, <expr><literal type="number">1123884</literal></expr>,
<expr><literal type="number">1146975</literal></expr>, <expr><literal type="number">1173922</literal></expr>, <expr><literal type="number">1205139</literal></expr>, <expr><literal type="number">1241133</literal></expr>,
<expr><literal type="number">1282529</literal></expr>, <expr><literal type="number">1330095</literal></expr>, <expr><literal type="number">1384791</literal></expr>, <expr><literal type="number">1447815</literal></expr>,
<expr><operator>-</operator><literal type="number">1520688</literal></expr>, <expr><operator>-</operator><literal type="number">1605358</literal></expr>, <expr><operator>-</operator><literal type="number">1704360</literal></expr>, <expr><operator>-</operator><literal type="number">1821051</literal></expr>,
<expr><operator>-</operator><literal type="number">1959964</literal></expr>, <expr><operator>-</operator><literal type="number">2127368</literal></expr>, <expr><operator>-</operator><literal type="number">2332183</literal></expr>, <expr><operator>-</operator><literal type="number">2587535</literal></expr>,
<expr><operator>-</operator><literal type="number">2913561</literal></expr>, <expr><operator>-</operator><literal type="number">3342802</literal></expr>, <expr><operator>-</operator><literal type="number">3931480</literal></expr>, <expr><operator>-</operator><literal type="number">4785806</literal></expr>,
<expr><operator>-</operator><literal type="number">6133390</literal></expr>, <expr><operator>-</operator><literal type="number">8566050</literal></expr>, <expr><operator>-</operator><literal type="number">14253820</literal></expr>, <expr><operator>-</operator><literal type="number">42727120</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul23</name><argument_list>(<argument><expr><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul23</name><argument_list>(<argument><expr><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>input</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clp_v</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_half_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>buf_a</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf_b</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>mag</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>round</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>mag</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <ternary><condition><expr><name>mag</name> <operator>&gt;</operator> <literal type="number">0x400000</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>round</name> <operator>=</operator> <ternary><condition><expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf_a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>sum_a</name><argument_list>(<argument><expr><name>buf_a</name></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_b</name><argument_list>(<argument><expr><name>buf_a</name></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clp_v</name><argument_list>(<argument><expr><name>buf_b</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sum_a</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_b</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_c</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_d</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clp_v</name><argument_list>(<argument><expr><name>buf_a</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_a</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_b</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_b</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_b</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clp_v</name><argument_list>(<argument><expr><name>buf_b</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mod_a</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mod_b</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clp_v</name><argument_list>(<argument><expr><name>buf_a</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mod_c</name><argument_list>(<argument><expr><name>buf_a</name></expr></argument>, <argument><expr><name>buf_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf_b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><name><name>buf_b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">31</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><index>[ <expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><name><name>buf_b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>buf_b</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><name><name>buf_b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>buf_b</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mod64_a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cos_mod</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">4195568</literal></expr>, <expr><literal type="number">4205700</literal></expr>, <expr><literal type="number">4226086</literal></expr>, <expr><literal type="number">4256977</literal></expr>,
<expr><literal type="number">4298755</literal></expr>, <expr><literal type="number">4351949</literal></expr>, <expr><literal type="number">4417251</literal></expr>, <expr><literal type="number">4495537</literal></expr>,
<expr><literal type="number">4587901</literal></expr>, <expr><literal type="number">4695690</literal></expr>, <expr><literal type="number">4820557</literal></expr>, <expr><literal type="number">4964534</literal></expr>,
<expr><literal type="number">5130115</literal></expr>, <expr><literal type="number">5320382</literal></expr>, <expr><literal type="number">5539164</literal></expr>, <expr><literal type="number">5791261</literal></expr>,
<expr><operator>-</operator><literal type="number">6082752</literal></expr>, <expr><operator>-</operator><literal type="number">6421430</literal></expr>, <expr><operator>-</operator><literal type="number">6817439</literal></expr>, <expr><operator>-</operator><literal type="number">7284203</literal></expr>,
<expr><operator>-</operator><literal type="number">7839855</literal></expr>, <expr><operator>-</operator><literal type="number">8509474</literal></expr>, <expr><operator>-</operator><literal type="number">9328732</literal></expr>, <expr><operator>-</operator><literal type="number">10350140</literal></expr>,
<expr><operator>-</operator><literal type="number">11654242</literal></expr>, <expr><operator>-</operator><literal type="number">13371208</literal></expr>, <expr><operator>-</operator><literal type="number">15725922</literal></expr>, <expr><operator>-</operator><literal type="number">19143224</literal></expr>,
<expr><operator>-</operator><literal type="number">24533560</literal></expr>, <expr><operator>-</operator><literal type="number">34264200</literal></expr>, <expr><operator>-</operator><literal type="number">57015280</literal></expr>, <expr><operator>-</operator><literal type="number">170908480</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul23</name><argument_list>(<argument><expr><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul23</name><argument_list>(<argument><expr><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>input</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mod64_b</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cos_mod</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">4199362</literal></expr>, <expr><literal type="number">4240198</literal></expr>, <expr><literal type="number">4323885</literal></expr>, <expr><literal type="number">4454708</literal></expr>,
<expr><literal type="number">4639772</literal></expr>, <expr><literal type="number">4890013</literal></expr>, <expr><literal type="number">5221943</literal></expr>, <expr><literal type="number">5660703</literal></expr>,
<expr><literal type="number">6245623</literal></expr>, <expr><literal type="number">7040975</literal></expr>, <expr><literal type="number">8158494</literal></expr>, <expr><literal type="number">9809974</literal></expr>,
<expr><literal type="number">12450076</literal></expr>, <expr><literal type="number">17261920</literal></expr>, <expr><literal type="number">28585092</literal></expr>, <expr><literal type="number">85479984</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul23</name><argument_list>(<argument><expr><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>input</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mod64_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cos_mod</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">741511</literal></expr>, <expr><literal type="number">741958</literal></expr>, <expr><literal type="number">742853</literal></expr>, <expr><literal type="number">744199</literal></expr>,
<expr><literal type="number">746001</literal></expr>, <expr><literal type="number">748262</literal></expr>, <expr><literal type="number">750992</literal></expr>, <expr><literal type="number">754197</literal></expr>,
<expr><literal type="number">757888</literal></expr>, <expr><literal type="number">762077</literal></expr>, <expr><literal type="number">766777</literal></expr>, <expr><literal type="number">772003</literal></expr>,
<expr><literal type="number">777772</literal></expr>, <expr><literal type="number">784105</literal></expr>, <expr><literal type="number">791021</literal></expr>, <expr><literal type="number">798546</literal></expr>,
<expr><literal type="number">806707</literal></expr>, <expr><literal type="number">815532</literal></expr>, <expr><literal type="number">825054</literal></expr>, <expr><literal type="number">835311</literal></expr>,
<expr><literal type="number">846342</literal></expr>, <expr><literal type="number">858193</literal></expr>, <expr><literal type="number">870912</literal></expr>, <expr><literal type="number">884554</literal></expr>,
<expr><literal type="number">899181</literal></expr>, <expr><literal type="number">914860</literal></expr>, <expr><literal type="number">931667</literal></expr>, <expr><literal type="number">949686</literal></expr>,
<expr><literal type="number">969011</literal></expr>, <expr><literal type="number">989747</literal></expr>, <expr><literal type="number">1012012</literal></expr>, <expr><literal type="number">1035941</literal></expr>,
<expr><operator>-</operator><literal type="number">1061684</literal></expr>, <expr><operator>-</operator><literal type="number">1089412</literal></expr>, <expr><operator>-</operator><literal type="number">1119320</literal></expr>, <expr><operator>-</operator><literal type="number">1151629</literal></expr>,
<expr><operator>-</operator><literal type="number">1186595</literal></expr>, <expr><operator>-</operator><literal type="number">1224511</literal></expr>, <expr><operator>-</operator><literal type="number">1265719</literal></expr>, <expr><operator>-</operator><literal type="number">1310613</literal></expr>,
<expr><operator>-</operator><literal type="number">1359657</literal></expr>, <expr><operator>-</operator><literal type="number">1413400</literal></expr>, <expr><operator>-</operator><literal type="number">1472490</literal></expr>, <expr><operator>-</operator><literal type="number">1537703</literal></expr>,
<expr><operator>-</operator><literal type="number">1609974</literal></expr>, <expr><operator>-</operator><literal type="number">1690442</literal></expr>, <expr><operator>-</operator><literal type="number">1780506</literal></expr>, <expr><operator>-</operator><literal type="number">1881904</literal></expr>,
<expr><operator>-</operator><literal type="number">1996824</literal></expr>, <expr><operator>-</operator><literal type="number">2128058</literal></expr>, <expr><operator>-</operator><literal type="number">2279225</literal></expr>, <expr><operator>-</operator><literal type="number">2455101</literal></expr>,
<expr><operator>-</operator><literal type="number">2662128</literal></expr>, <expr><operator>-</operator><literal type="number">2909200</literal></expr>, <expr><operator>-</operator><literal type="number">3208956</literal></expr>, <expr><operator>-</operator><literal type="number">3579983</literal></expr>,
<expr><operator>-</operator><literal type="number">4050785</literal></expr>, <expr><operator>-</operator><literal type="number">4667404</literal></expr>, <expr><operator>-</operator><literal type="number">5509372</literal></expr>, <expr><operator>-</operator><literal type="number">6726913</literal></expr>,
<expr><operator>-</operator><literal type="number">8641940</literal></expr>, <expr><operator>-</operator><literal type="number">12091426</literal></expr>, <expr><operator>-</operator><literal type="number">20144284</literal></expr>, <expr><operator>-</operator><literal type="number">60420720</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul23</name><argument_list>(<argument><expr><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">32</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">32</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">31</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul23</name><argument_list>(<argument><expr><name><name>cos_mod</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>input</name><index>[<expr><literal type="number">32</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_half_64</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>buf_a</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf_b</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>mag</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>round</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>mag</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <ternary><condition><expr><name>mag</name> <operator>&gt;</operator> <literal type="number">0x400000</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>round</name> <operator>=</operator> <ternary><condition><expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf_a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>sum_a</name><argument_list>(<argument><expr><name>buf_a</name></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_b</name><argument_list>(<argument><expr><name>buf_a</name></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clp_v</name><argument_list>(<argument><expr><name>buf_b</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sum_a</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_b</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_c</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_d</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clp_v</name><argument_list>(<argument><expr><name>buf_a</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sum_a</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_b</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_c</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_d</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_c</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_d</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_c</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sum_d</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clp_v</name><argument_list>(<argument><expr><name>buf_b</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct_a</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_b</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_b</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_b</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_b</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_b</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_b</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_b</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clp_v</name><argument_list>(<argument><expr><name>buf_a</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mod_a</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mod_b</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mod_b</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mod_b</name><argument_list>(<argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clp_v</name><argument_list>(<argument><expr><name>buf_b</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mod64_a</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mod64_b</name><argument_list>(<argument><expr><name>buf_b</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>buf_a</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clp_v</name><argument_list>(<argument><expr><name>buf_a</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mod64_c</name><argument_list>(<argument><expr><name>buf_a</name></expr></argument>, <argument><expr><name>buf_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf_b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><name><name>buf_b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">63</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><index>[ <expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><name><name>buf_b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>buf_b</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">32</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><name><name>buf_b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>buf_b</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_dcadct_init</name><parameter_list>(<parameter><decl><type><name>DCADCTContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>imdct_half</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>imdct_half_32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>imdct_half</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>imdct_half_64</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
