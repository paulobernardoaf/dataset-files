<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\libopenjpegenc.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openjpeg.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>LibOpenJPEGContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>avclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opj_cparameters_t</name></type> <name>enc_params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prog_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cinema_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numresolution</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>irreversible</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>disto_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fixed_quality</name></decl>;</decl_stmt>
}</block></struct></type> <name>LibOpenJPEGContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>error_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>warning_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>info_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>PacketWriter</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
}</block></struct></type> <name>PacketWriter</name>;</typedef>

<function><type><specifier>static</specifier> <name>OPJ_SIZE_T</name></type> <name>stream_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out_buffer</name></decl></parameter>, <parameter><decl><type><name>OPJ_SIZE_T</name></type> <name>nb_bytes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PacketWriter</name> <modifier>*</modifier></type><name>writer</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><name><name>writer</name><operator>-&gt;</operator><name>packet</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remaining</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>writer</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&gt;</operator> <name>remaining</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OPJ_SIZE_T</name></type> <name>needed</name> <init>= <expr><name>nb_bytes</name> <operator>-</operator> <name>remaining</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_growth</name> <init>= <expr><name>INT_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>needed</name> <operator>&gt;</operator> <name>max_growth</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>OPJ_SIZE_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_grow_packet</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>needed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>OPJ_SIZE_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>writer</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>out_buffer</name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>writer</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nb_bytes</name></expr>;</expr_stmt>
<return>return <expr><name>nb_bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OPJ_OFF_T</name></type> <name>stream_skip</name><parameter_list>(<parameter><decl><type><name>OPJ_OFF_T</name></type> <name>nb_bytes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PacketWriter</name> <modifier>*</modifier></type><name>writer</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><name><name>writer</name><operator>-&gt;</operator><name>packet</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>writer</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>OPJ_SIZE_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>+</operator> <name><name>writer</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_bytes</name> <operator>=</operator> <operator>-</operator><name><name>writer</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>remaining</name> <init>= <expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>writer</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&gt;</operator> <name>remaining</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OPJ_SIZE_T</name></type> <name>needed</name> <init>= <expr><name>nb_bytes</name> <operator>-</operator> <name>remaining</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_growth</name> <init>= <expr><name>INT_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>needed</name> <operator>&gt;</operator> <name>max_growth</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>OPJ_SIZE_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_grow_packet</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>needed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>OPJ_SIZE_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>writer</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nb_bytes</name></expr>;</expr_stmt>
<return>return <expr><name>nb_bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OPJ_BOOL</name></type> <name>stream_seek</name><parameter_list>(<parameter><decl><type><name>OPJ_OFF_T</name></type> <name>nb_bytes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PacketWriter</name> <modifier>*</modifier></type><name>writer</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><name><name>writer</name><operator>-&gt;</operator><name>packet</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>OPJ_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&gt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name> <operator>||</operator>
<call><name>av_grow_packet</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nb_bytes</name> <operator>-</operator> <name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>OPJ_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>writer</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nb_bytes</name></expr>;</expr_stmt>
<return>return <expr><name>OPJ_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cinema_parameters</name><parameter_list>(<parameter><decl><type><name>opj_cparameters_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tile_size_on</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cp_tdx</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cp_tdy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tp_flag</name></name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tp_on</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cp_tx0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cp_ty0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>image_offset_x0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>image_offset_y0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cblockw_init</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cblockh_init</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>csty</name></name> <operator>|=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>prog_order</name></name> <operator>=</operator> <name>OPJ_CPRL</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>roi_compno</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subsampling_dx</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subsampling_dy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>irreversible</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tcp_mct</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>opj_image_t</name> <modifier>*</modifier></type><name>mj2_create_image</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>opj_cparameters_t</name> <modifier>*</modifier></type><name>parameters</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opj_image_cmptparm_t</name></type> <name><name>cmptparm</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sub_dx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sub_dy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numcomps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OPJ_COLOR_SPACE</name></type> <name>color_space</name> <init>= <expr><name>OPJ_CLRSPC_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sub_dx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sub_dx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_dy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sub_dy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_dx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sub_dx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_dy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sub_dy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>numcomps</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YA8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY14</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YA16</name></expr>:</case>
<expr_stmt><expr><name>color_space</name> <operator>=</operator> <name>OPJ_CLRSPC_GRAY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB48</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBR24P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP14</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_XYZ12</name></expr>:</case>
<expr_stmt><expr><name>color_space</name> <operator>=</operator> <name>OPJ_CLRSPC_SRGB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV410P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV411P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P14</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P14</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P14</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>:</case>
<expr_stmt><expr><name>color_space</name> <operator>=</operator> <name>OPJ_CLRSPC_SYCC</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"The requested pixel format '%s' is not supported\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numcomps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cmptparm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prec</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmptparm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bpp</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmptparm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sgnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmptparm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dx</name> <operator>=</operator> <name><name>sub_dx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmptparm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dy</name> <operator>=</operator> <name><name>sub_dy</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmptparm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>sub_dx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>sub_dx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmptparm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>sub_dy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>sub_dy</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>img</name> <operator>=</operator> <call><name>opj_image_create</name><argument_list>(<argument><expr><name>numcomps</name></expr></argument>, <argument><expr><name>cmptparm</name></expr></argument>, <argument><expr><name>color_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>img</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>x0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>y0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>x1</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>parameters</name><operator>-&gt;</operator><name>subsampling_dx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>y1</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>parameters</name><operator>-&gt;</operator><name>subsampling_dy</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>img</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>libopenjpeg_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LibOpenJPEGContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>opj_set_default_encoder_parameters</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cinema_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OPJ_CINEMA2K_24</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>rsiz</name></name> <operator>=</operator> <name>OPJ_PROFILE_CINEMA_2K</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>max_cs_size</name></name> <operator>=</operator> <name>OPJ_CINEMA_24_CS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>max_comp_size</name></name> <operator>=</operator> <name>OPJ_CINEMA_24_COMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPJ_CINEMA2K_48</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>rsiz</name></name> <operator>=</operator> <name>OPJ_PROFILE_CINEMA_2K</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>max_cs_size</name></name> <operator>=</operator> <name>OPJ_CINEMA_48_CS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>max_comp_size</name></name> <operator>=</operator> <name>OPJ_CINEMA_48_COMP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPJ_CINEMA4K_24</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>rsiz</name></name> <operator>=</operator> <name>OPJ_PROFILE_CINEMA_4K</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>max_cs_size</name></name> <operator>=</operator> <name>OPJ_CINEMA_24_CS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>max_comp_size</name></name> <operator>=</operator> <name>OPJ_CINEMA_24_COMP</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OPJ_CINEMA2K</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>rsiz</name></name> <operator>==</operator> <name>OPJ_PROFILE_CINEMA_4K</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>rsiz</name></name> <operator>=</operator> <name>OPJ_PROFILE_CINEMA_2K</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPJ_CINEMA4K</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>rsiz</name></name> <operator>==</operator> <name>OPJ_PROFILE_CINEMA_2K</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>rsiz</name></name> <operator>=</operator> <name>OPJ_PROFILE_CINEMA_4K</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid parameter pairing: cinema_mode and profile conflict.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>numresolution</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>numresolution</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>numresolution</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>numresolution</name></name> <operator>--</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>prog_order</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>prog_order</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>numresolution</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>numresolution</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>irreversible</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>irreversible</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>cp_disto_alloc</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>disto_alloc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>cp_fixed_quality</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fixed_quality</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>tcp_numlayers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name><operator>.</operator><name>tcp_rates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cinema_mode</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cinema_parameters</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libopenjpeg_copy_packed8</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>image_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>numcomps</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>numcomps</name></expr>;</condition> <incr><expr><operator>++</operator><name>compno</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>numcomps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: frame's linesize is too small for the image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>numcomps</name></expr>;</condition> <incr><expr><operator>++</operator><name>compno</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>image_line</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_index</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>compno</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>frame_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_index</name> <operator>+=</operator> <name>numcomps</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>image_line</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>image_line</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>image_line</name><index>[<expr><name>x</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>libopenjpeg_copy_packed12</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>image_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>numcomps</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>frame_ptr</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>numcomps</name></expr>;</condition> <incr><expr><operator>++</operator><name>compno</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>numcomps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: frame's linesize is too small for the image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>numcomps</name></expr>;</condition> <incr><expr><operator>++</operator><name>compno</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>image_line</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_index</name> <operator>=</operator> <name>y</name> <operator>*</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>compno</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>frame_ptr</name><index>[<expr><name>frame_index</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_index</name> <operator>+=</operator> <name>numcomps</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>image_line</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>image_line</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>image_line</name><index>[<expr><name>x</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libopenjpeg_copy_packed16</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>image_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>numcomps</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>frame_ptr</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>numcomps</name></expr>;</condition> <incr><expr><operator>++</operator><name>compno</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>numcomps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: frame's linesize is too small for the image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>numcomps</name></expr>;</condition> <incr><expr><operator>++</operator><name>compno</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>image_line</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_index</name> <operator>=</operator> <name>y</name> <operator>*</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>compno</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>frame_ptr</name><index>[<expr><name>frame_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_index</name> <operator>+=</operator> <name>numcomps</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>image_line</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>image_line</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>image_line</name><index>[<expr><name>x</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libopenjpeg_copy_unpacked8</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>image_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>numcomps</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>numcomps</name></expr>;</condition> <incr><expr><operator>++</operator><name>compno</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>compno</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: frame's linesize is too small for the image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>numcomps</name></expr>;</condition> <incr><expr><operator>++</operator><name>compno</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>dx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>dy</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>dy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>image_line</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_index</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>compno</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>compno</name></expr>]</index><index>[<expr><name>frame_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>image_line</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>image_line</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>image_line</name><index>[<expr><name>x</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libopenjpeg_copy_unpacked16</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>image_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>numcomps</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>frame_ptr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>numcomps</name></expr>;</condition> <incr><expr><operator>++</operator><name>compno</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>compno</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: frame's linesize is too small for the image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>numcomps</name></expr>;</condition> <incr><expr><operator>++</operator><name>compno</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>dx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>dy</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_ptr</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>compno</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>image_line</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_index</name> <operator>=</operator> <name>y</name> <operator>*</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>compno</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>frame_ptr</name><index>[<expr><name>frame_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>image_line</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>image_line</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>image_line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>image_line</name><index>[<expr><name>x</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>w</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libopenjpeg_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LibOpenJPEGContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>gbrframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpyresult</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketWriter</name></type> <name>writer</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opj_codec_t</name> <modifier>*</modifier></type><name>compress</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opj_stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><call><name>mj2_create_image</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating the mj2 image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YA8</name></expr>:</case>
<expr_stmt><expr><name>cpyresult</name> <operator>=</operator> <call><name>libopenjpeg_copy_packed8</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_XYZ12</name></expr>:</case>
<expr_stmt><expr><name>cpyresult</name> <operator>=</operator> <call><name>libopenjpeg_copy_packed12</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YA16</name></expr>:</case>
<expr_stmt><expr><name>cpyresult</name> <operator>=</operator> <call><name>libopenjpeg_copy_packed16</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBR24P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP14</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP16</name></expr>:</case>
<expr_stmt><expr><name>gbrframe</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gbrframe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>gbrframe</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>gbrframe</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gbrframe</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gbrframe</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gbrframe</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gbrframe</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBR24P</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cpyresult</name> <operator>=</operator> <call><name>libopenjpeg_copy_unpacked8</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>gbrframe</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cpyresult</name> <operator>=</operator> <call><name>libopenjpeg_copy_unpacked16</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>gbrframe</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbrframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV410P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV411P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P</name></expr>:</case>
<expr_stmt><expr><name>cpyresult</name> <operator>=</operator> <call><name>libopenjpeg_copy_unpacked8</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GRAY10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY14</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P14</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P14</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P14</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P16</name></expr>:</case>
<expr_stmt><expr><name>cpyresult</name> <operator>=</operator> <call><name>libopenjpeg_copy_unpacked16</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"The frame's pixel format '%s' is not supported\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpyresult</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Could not copy the frame data to the internal image buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>compress</name> <operator>=</operator> <call><name>opj_create_compress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compress</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating the compressor\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>opj_set_error_handler</name><argument_list>(<argument><expr><name>compress</name></expr></argument>, <argument><expr><name>error_callback</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>opj_set_warning_handler</name><argument_list>(<argument><expr><name>compress</name></expr></argument>, <argument><expr><name>warning_callback</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>opj_set_info_handler</name><argument_list>(<argument><expr><name>compress</name></expr></argument>, <argument><expr><name>info_callback</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting the compressor handlers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>opj_setup_encoder</name><argument_list>(<argument><expr><name>compress</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>enc_params</name></name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting up the compressor\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>opj_stream_default_create</name><argument_list>(<argument><expr><name>OPJ_STREAM_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating the cio stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>writer</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_stream_set_write_function</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>stream_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_stream_set_skip_function</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>stream_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_stream_set_seek_function</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>stream_seek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_stream_set_user_data</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>opj_start_compress</name><argument_list>(<argument><expr><name>compress</name></expr></argument>, <argument><expr><name>image</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>opj_encode</name><argument_list>(<argument><expr><name>compress</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>opj_end_compress</name><argument_list>(<argument><expr><name>compress</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error during the opj encode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_shrink_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>writer</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>opj_stream_destroy</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_destroy_codec</name><argument_list>(<argument><expr><name>compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_image_destroy</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(LibOpenJPEGContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"format"</literal></expr>, <expr><literal type="string">"Codec Format"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_CODEC_JP2</name></expr> }</block></expr>, <expr><name>OPJ_CODEC_J2K</name></expr>, <expr><name>OPJ_CODEC_JP2</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"j2k"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_CODEC_J2K</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jp2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_CODEC_JP2</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_STD_RSIZ</name></expr> }</block></expr>, <expr><name>OPJ_STD_RSIZ</name></expr>, <expr><name>OPJ_CINEMA4K</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jpeg2000"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_STD_RSIZ</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cinema2k"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_CINEMA2K</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cinema4k"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_CINEMA4K</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cinema_mode"</literal></expr>, <expr><literal type="string">"Digital Cinema"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cinema_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_OFF</name></expr> }</block></expr>, <expr><name>OPJ_OFF</name></expr>, <expr><name>OPJ_CINEMA4K_24</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"cinema_mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"off"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_OFF</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"cinema_mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2k_24"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_CINEMA2K_24</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"cinema_mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2k_48"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_CINEMA2K_48</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"cinema_mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"4k_24"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_CINEMA4K_24</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"cinema_mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prog_order"</literal></expr>, <expr><literal type="string">"Progression Order"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>prog_order</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_LRCP</name></expr> }</block></expr>, <expr><name>OPJ_LRCP</name></expr>, <expr><name>OPJ_CPRL</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"prog_order"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lrcp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_LRCP</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"prog_order"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rlcp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_RLCP</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"prog_order"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rpcl"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_RPCL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"prog_order"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pcrl"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_PCRL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"prog_order"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cprl"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OPJ_CPRL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"prog_order"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"numresolution"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>numresolution</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">6</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"irreversible"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>irreversible</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"disto_alloc"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>disto_alloc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fixed_quality"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fixed_quality</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>openjpeg_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libopenjpeg"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libopenjpeg_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libopenjpeg"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"OpenJPEG JPEG 2000"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_JPEG2000</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LibOpenJPEGContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>libopenjpeg_encode_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>libopenjpeg_encode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_RGB48</name></expr>,
<expr><name>AV_PIX_FMT_RGBA64</name></expr>, <expr><name>AV_PIX_FMT_GBR24P</name></expr>,
<expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRP14</name></expr>, <expr><name>AV_PIX_FMT_GBRP16</name></expr>,
<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_YA8</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>, <expr><name>AV_PIX_FMT_YA16</name></expr>,
<expr><name>AV_PIX_FMT_GRAY10</name></expr>, <expr><name>AV_PIX_FMT_GRAY12</name></expr>, <expr><name>AV_PIX_FMT_GRAY14</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV444P14</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,
<expr><name>AV_PIX_FMT_XYZ12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>openjpeg_class</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libopenjpeg"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
