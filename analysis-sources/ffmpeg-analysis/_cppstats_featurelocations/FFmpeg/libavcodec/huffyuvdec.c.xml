<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\huffyuvdec.c">































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCHECKED_BITSTREAM_READER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"huffyuv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"huffyuvdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lossless_videodsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>classic_shift_luma_table_size</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>classic_shift_luma</name><index>[<expr><name>classic_shift_luma_table_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">34</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">207</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">236</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">199</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>classic_shift_chroma_table_size</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>classic_shift_chroma</name><index>[<expr><name>classic_shift_chroma_table_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">66</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">83</literal></expr>,
<expr><literal type="number">84</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">141</literal></expr>,
<expr><literal type="number">57</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">214</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">79</literal></expr>,
<expr><literal type="number">78</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>classic_add_luma</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">37</literal></expr>,
<expr><literal type="number">73</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">36</literal></expr>,
<expr><literal type="number">68</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">36</literal></expr>,
<expr><literal type="number">35</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">39</literal></expr>,
<expr><literal type="number">37</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">37</literal></expr>,
<expr><literal type="number">35</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">29</literal></expr>,
<expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><literal type="number">15</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">14</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>,
<expr><literal type="number">28</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">49</literal></expr>,
<expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>,
<expr><literal type="number">62</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">52</literal></expr>,
<expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>,
<expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>classic_add_chroma</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">77</literal></expr>,
<expr><literal type="number">43</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">143</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">79</literal></expr>,
<expr><literal type="number">80</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>,
<expr><literal type="number">17</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">111</literal></expr>,
<expr><literal type="number">112</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">134</literal></expr>,
<expr><literal type="number">135</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">96</literal></expr>,
<expr><literal type="number">52</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">41</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">36</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">26</literal></expr>,
<expr><literal type="number">83</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">13</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_len_table</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>repeat</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>repeat</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>repeat</name> <operator>&gt;</operator> <name>n</name> <operator>||</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error reading huffman table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>repeat</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_joint_tables</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>symbols</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>&lt;&lt;</operator> <name>VLC_BITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symbols</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>symbols</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>VLC_BITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>bits</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>VLC_BITS</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>&lt;</operator> <literal type="number">24</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p0</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>vlc_n</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><name>VLC_BITS</name> <operator>-</operator> <name>len0</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>len0</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>sign_extend</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>vlc_n</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>vlc_n</name></name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&gt;</operator> <name>limit</name> <operator>||</operator> <operator>!</operator><name>len1</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>sign_extend</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>vlc_n</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>u</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>VLC_BITS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>len0</name> <operator>+</operator> <name>len1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>len1</name><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>symbols</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator> <operator>(</operator><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>pix_bgr_map</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>decorrelate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p1</name> <init>= <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>decorrelate</name></name></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>g</name> <operator>=</operator> <operator>-</operator><literal type="number">16</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>g</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit0</name> <init>= <expr><name>VLC_BITS</name> <operator>-</operator> <name>len0</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>limit0</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><name>len0</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <operator>-</operator><literal type="number">16</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>b</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit1</name> <init>= <expr><name>limit0</name> <operator>-</operator> <name>len1</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>limit1</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>len1</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>g</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>len1</name><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>b</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">16</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>r</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>&gt;</operator> <name>limit1</name> <operator>||</operator> <operator>!</operator><name>len2</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>VLC_BITS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>len0</name> <operator>+</operator> <name>len1</name> <operator>+</operator> <name>len2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&lt;&lt;</operator> <name>len2</name><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>r</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>decorrelate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>G</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>B</name></expr>]</index></name> <operator>=</operator> <name>g</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>R</name></expr>]</index></name> <operator>=</operator> <name>g</name> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>B</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>G</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>R</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>symbols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_huffman_tables</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>alpha</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>chroma</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_len_table</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc_n</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_huffyuv_generate_bits_table</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc_n</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc_n</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>generate_joint_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_old_huffman_tables</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>classic_shift_luma</name></expr></argument>,
<argument><expr><name>classic_shift_luma_table_size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_len_table</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>classic_shift_chroma</name></expr></argument>,
<argument><expr><name>classic_shift_chroma_table_size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_len_table</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>classic_add_luma</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>classic_add_chroma</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>generate_joint_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_huffyuv_common_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_huffyuvdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hdsp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_llviddsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">288</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bgr32</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>bps</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vlc_n</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>MAX_VLC_N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>method</name></decl>, <decl><type ref="prev"/><name>interlace</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>method</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorrelate</name></name> <operator>=</operator> <ternary><condition><expr><name>method</name> <operator>&amp;</operator> <literal type="number">64</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>method</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>bps</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vlc_n</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>MAX_VLC_N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name></name><operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>interlace</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>interlace</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>interlace</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_huffman_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorrelate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorrelate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>PLANE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorrelate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>MEDIAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorrelate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>LEFT</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorrelate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_old_huffman_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>yuy2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUYV422</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bgr32</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_0RGB32</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BGR24</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bgr32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB32</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>( <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>chroma</name></name><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>yuv</name></name><operator>&lt;&lt;</operator><literal type="number">9</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bps</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x070</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x0F0</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x470</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x480</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP9</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x490</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x4B0</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP12</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x4D0</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP14</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x4F0</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x570</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x670</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x680</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P9</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x690</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6B0</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P12</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6D0</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P14</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6F0</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x671</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x681</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P9</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x691</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6B1</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P12</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6D1</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P14</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6F1</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x672</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV411P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x674</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV440P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x675</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x685</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P9</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x695</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6B5</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P12</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6D5</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P14</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6F5</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x67A</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV410P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x770</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x780</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P9</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x790</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x7F0</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x771</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x781</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P9</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x791</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x7F1</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x775</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x785</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P9</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x795</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x7F5</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P16</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_huffyuv_common_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"width must be even for this colorspace\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>==</operator> <name>MEDIAN</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"width must be a multiple of 4 "</literal>
<literal type="string">"for this combination of colorspace and predictor type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_huffyuv_alloc_temp</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_huffyuv_common_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>decode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init_thread_copy</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_huffyuv_alloc_temp</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_huffyuv_common_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_huffman_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_old_huffman_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_INTERN</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>table</name></type></parameter>, <parameter><type><name>gb</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>max_depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>code = table[index][0]; n = table[index][1]; if (max_depth &gt; 1 &amp;&amp; n &lt; 0) { LAST_SKIP_BITS(name, gb, bits); UPDATE_CACHE(name, gb); nb_bits = -n; index = SHOW_UBITS(name, gb, nb_bits) + code; code = table[index][0]; n = table[index][1]; if (max_depth &gt; 2 &amp;&amp; n &lt; 0) { LAST_SKIP_BITS(name, gb, nb_bits); UPDATE_CACHE(name, gb); nb_bits = -n; index = SHOW_UBITS(name, gb, nb_bits) + code; code = table[index][0]; n = table[index][1]; } } dst = code; LAST_SKIP_BITS(name, gb, n)</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VLC_DUAL</name><parameter_list>(<parameter><type><name>dst0</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>gb</name></type></parameter>, <parameter><type><name>dtable</name></type></parameter>, <parameter><type><name>table1</name></type></parameter>, <parameter><type><name>table2</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>max_depth</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { unsigned int index = SHOW_UBITS(name, gb, bits); int code, n = dtable[index][1]; if (n&lt;=0) { int nb_bits; VLC_INTERN(dst0, table1, gb, name, bits, max_depth); UPDATE_CACHE(re, gb); index = SHOW_UBITS(name, gb, bits); VLC_INTERN(dst1, table2, gb, name, bits, max_depth); } else { code = dtable[index][0]; OP(dst0, dst1, code); LAST_SKIP_BITS(name, gb, n); } } while (0)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP8bits</name><parameter_list>(<parameter><type><name>dst0</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst0 = code&gt;&gt;8; dst1 = code</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_2PIX</name><parameter_list>(<parameter><type><name>dst0</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>plane1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPDATE_CACHE(re, &amp;s-&gt;gb); GET_VLC_DUAL(dst0, dst1, re, &amp;s-&gt;gb, s-&gt;vlc[4+plane1].table, s-&gt;vlc[0].table, s-&gt;vlc[plane1].table, VLC_BITS, 3, OP8bits)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_422_bitstream</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>icount</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>icount</name> <operator>=</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">32</literal> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>icount</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>icount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>READ_2PIX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_2PIX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>count</name> <operator>&amp;&amp;</operator> <name>BITS_LEFT</name><operator>(</operator><name>re</name>, <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>READ_2PIX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BITS_LEFT</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>READ_2PIX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>READ_2PIX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_2PIX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_2PIX_PLANE</name><parameter_list>(<parameter><type><name>dst0</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>plane</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UPDATE_CACHE(re, &amp;s-&gt;gb); GET_VLC_DUAL(dst0, dst1, re, &amp;s-&gt;gb, s-&gt;vlc[4+plane].table, s-&gt;vlc[plane].table, s-&gt;vlc[plane].table, VLC_BITS, 3, OP)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP14bits</name><parameter_list>(<parameter><type><name>dst0</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst0 = code&gt;&gt;8; dst1 = sign_extend(code, 8)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_2PIX_PLANE16</name><parameter_list>(<parameter><type><name>dst0</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>plane</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{dst0 = get_vlc2(&amp;s-&gt;gb, s-&gt;vlc[plane].table, VLC_BITS, 3)&lt;&lt;2;dst0 += get_bits(&amp;s-&gt;gb, 2);dst1 = get_vlc2(&amp;s-&gt;gb, s-&gt;vlc[plane].table, VLC_BITS, 3)&lt;&lt;2;dst1 += get_bits(&amp;s-&gt;gb, 2);}</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_plane_bitstream</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <operator>(</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>count</name> <operator>&amp;&amp;</operator> <name>BITS_LEFT</name><operator>(</operator><name>re</name>, <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>READ_2PIX_PLANE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>OP8bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>READ_2PIX_PLANE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>OP8bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name>width</name><operator>&amp;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>BITS_LEFT</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_bits</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_INTERN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>width</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>&lt;=</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <operator>(</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>count</name> <operator>&amp;&amp;</operator> <name>BITS_LEFT</name><operator>(</operator><name>re</name>, <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>READ_2PIX_PLANE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>OP14bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>READ_2PIX_PLANE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>OP14bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name>width</name><operator>&amp;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>BITS_LEFT</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_bits</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_INTERN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>width</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <operator>(</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>count</name> <operator>&amp;&amp;</operator> <name>get_bits_left</name><operator>(</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>READ_2PIX_PLANE16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>READ_2PIX_PLANE16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>( <expr><name>width</name><operator>&amp;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst</name> <init>= <expr><call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>temp16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>width</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_gray_bitstream</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <operator>(</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>count</name> <operator>&amp;&amp;</operator> <name>BITS_LEFT</name><operator>(</operator><name>re</name>, <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>READ_2PIX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>READ_2PIX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>decode_bgr_1</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>decorrelate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>count</name> <operator>&amp;&amp;</operator> <name>BITS_LEFT</name><operator>(</operator><name>re</name>, <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>nb_bits</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name><name>table</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name><name>table</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pix_bgr_map</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>decorrelate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VLC_INTERN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>G</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_INTERN</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>B</name></expr>]</index></name> <operator>=</operator> <name>code</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>G</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_INTERN</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>R</name></expr>]</index></name> <operator>=</operator> <name>code</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>G</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>VLC_INTERN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>B</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_INTERN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>G</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_INTERN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>R</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>alpha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VLC_INTERN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>A</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>A</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_bgr_bitstream</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>decorrelate</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_bgr_1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_bgr_1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_bgr_1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_bgr_1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_slice</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>offset</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>draw_horiz_band</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>y</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_slice_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>cy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>cy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV_NUM_DATA_POINTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>draw_horiz_band</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_slice_end</name></name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>left_prediction</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>acc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred_int16</name></name><argument_list>(<argument><expr><operator>(</operator> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_bytes</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_bytes</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>add_int16</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_median_prediction</name><parameter_list>(<parameter><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>diff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>left_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>left_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>add_hfyu_median_pred_int16</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>diff</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>left_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>table_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fake_ystride</name></decl>, <decl><type ref="prev"/><name>fake_ustride</name></decl>, <decl><type ref="prev"/><name>fake_vstride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width2</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name> <operator>+</operator> <name>table_size</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>table_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fake_ystride</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fake_ustride</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fake_vstride</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>chroma</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>alpha</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>lefttop</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fake_stride</name> <init>= <expr><name>fake_ystride</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fake_stride</name> <operator>=</operator> <ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>fake_ustride</name></expr> </then><else>: <expr><name>fake_vstride</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEFT</name></expr>:</case>
<case>case <expr><name>PLANE</name></expr>:</case>
<expr_stmt><expr><call><name>decode_plane_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>left_prediction</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name><operator>*</operator><name>y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_plane_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>left_prediction</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>==</operator> <name>PLANE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_bytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name> <operator>-</operator> <name>fake_stride</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<break>break;</break>
<case>case <expr><name>MEDIAN</name></expr>:</case>
<expr_stmt><expr><call><name>decode_plane_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name><operator>=</operator> <call><name>left_prediction</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_plane_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>left_prediction</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lefttop</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_plane_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_median_prediction</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>fake_stride</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lefttop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_plane_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_median_prediction</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name> <operator>-</operator> <name>fake_stride</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lefttop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><call><name>draw_slice</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lefty</name></decl>, <decl><type ref="prev"/><name>leftu</name></decl>, <decl><type ref="prev"/><name>leftv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lefttopy</name></decl>, <decl><type ref="prev"/><name>lefttopu</name></decl>, <decl><type ref="prev"/><name>lefttopv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>yuy2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"YUY2 output is not implemented yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>leftv</name> <operator>=</operator>
<name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y_offset</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lefty</name> <operator>=</operator>
<name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>y_offset</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>leftu</name> <operator>=</operator>
<name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y_offset</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y_offset</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEFT</name></expr>:</case>
<case>case <expr><name>PLANE</name></expr>:</case>
<expr_stmt><expr><call><name>decode_422_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lefty</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y_offset</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>width</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>lefty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>leftu</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>y_offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>leftu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>leftv</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>y_offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>leftv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cy</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr><operator>,</operator> <expr><name>cy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>udst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vdst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_gray_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ydst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>y_offset</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lefty</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name>ydst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>lefty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>==</operator> <name>PLANE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_bytes</name></name><argument_list>(<argument><expr><name>ydst</name></expr></argument>, <argument><expr><name>ydst</name> <operator>-</operator> <name>fake_ystride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>draw_slice</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ydst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>y_offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>udst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>cy</name> <operator>+</operator> <name>y_offset</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vdst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>cy</name> <operator>+</operator> <name>y_offset</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_422_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lefty</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name>ydst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>lefty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>leftu</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name>udst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name></expr></argument>, <argument><expr><name>leftu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>leftv</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name>vdst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name></expr></argument>, <argument><expr><name>leftv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>==</operator> <name>PLANE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cy</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_bytes</name></name><argument_list>(<argument><expr><name>ydst</name></expr></argument>, <argument><expr><name>ydst</name> <operator>-</operator> <name>fake_ystride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_bytes</name></name><argument_list>(<argument><expr><name>udst</name></expr></argument>, <argument><expr><name>udst</name> <operator>-</operator> <name>fake_ustride</name></expr></argument>, <argument><expr><name>width2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_bytes</name></name><argument_list>(<argument><expr><name>vdst</name></expr></argument>, <argument><expr><name>vdst</name> <operator>-</operator> <name>fake_vstride</name></expr></argument>, <argument><expr><name>width2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>draw_slice</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><name>MEDIAN</name></expr>:</case>

<expr_stmt><expr><call><name>decode_422_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lefty</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>width</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>lefty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>leftu</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>leftu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>leftv</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>leftv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cy</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_422_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lefty</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>lefty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>leftu</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name></expr></argument>, <argument><expr><name>leftu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>leftv</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name></expr></argument>, <argument><expr><name>leftv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>decode_422_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lefty</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>fake_ystride</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>lefty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>leftu</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>fake_ustride</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>leftu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>leftv</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>fake_vstride</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>leftv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>lefttopy</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_422_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>fake_ystride</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>width</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lefty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lefttopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lefttopu</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lefttopv</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>fake_ustride</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>leftu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lefttopu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>fake_vstride</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>leftv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lefttopv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr><operator>,</operator> <expr><name>cy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>udst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vdst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>cy</name> <operator>&gt;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_gray_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ydst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name>ydst</name></expr></argument>, <argument><expr><name>ydst</name> <operator>-</operator> <name>fake_ystride</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>lefty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lefttopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>draw_slice</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_422_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ydst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>udst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>cy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vdst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>cy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name>ydst</name></expr></argument>, <argument><expr><name>ydst</name> <operator>-</operator> <name>fake_ystride</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>lefty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lefttopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name>udst</name></expr></argument>, <argument><expr><name>udst</name> <operator>-</operator> <name>fake_ustride</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leftu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lefttopu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name>vdst</name></expr></argument>, <argument><expr><name>vdst</name> <operator>-</operator> <name>fake_vstride</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leftv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lefttopv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>draw_slice</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>last_line</name> <init>= <expr><operator>(</operator><name>y_offset</name> <operator>+</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>A</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>last_line</name> <operator>+</operator> <name>A</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>R</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>last_line</name> <operator>+</operator> <name>R</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>G</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>last_line</name> <operator>+</operator> <name>G</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>B</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>last_line</name> <operator>+</operator> <name>B</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>R</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>last_line</name> <operator>+</operator> <name>R</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>G</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>last_line</name> <operator>+</operator> <name>G</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>B</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>last_line</name> <operator>+</operator> <name>B</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>A</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>last_line</name> <operator>+</operator> <name>A</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bgr32</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LEFT</name></expr>:</case>
<case>case <expr><name>PLANE</name></expr>:</case>
<expr_stmt><expr><call><name>decode_bgr_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>add_hfyu_left_pred_bgr32</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>last_line</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>height</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><call><name>decode_bgr_bitstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>add_hfyu_left_pred_bgr32</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>y_offset</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>==</operator> <name>PLANE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_bpp</name></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>A</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_bytes</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>y_offset</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>y_offset</name><operator>)</operator> <operator>+</operator>
<name>fake_ystride</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>draw_slice</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"prediction type not supported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"BGR24 output is not implemented yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HYuvContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>frame</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice</name></decl>, <decl><type ref="prev"/><name>table_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>nb_slices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>slices_info_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>*</operator> <name>height</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer_size</name></name></expr></argument>,
<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap_buf</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>table_size</name> <operator>=</operator> <call><name>read_huffman_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>table_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>table_size</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <name>table_size</name><operator>)</operator> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_slice_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HYMT</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>buf_size</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slices_info_offset</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_height</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_slices</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_slices</name> <operator>*</operator> <literal type="number">8LL</literal> <operator>+</operator> <name>slices_info_offset</name> <operator>&gt;</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">16</literal> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name> <operator>||</operator>
<name>slice_height</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>nb_slices</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>slice_height</name> <operator>&gt;</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>slice_height</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_slices</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name>nb_slices</name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y_offset</name></decl>, <decl><type ref="prev"/><name>slice_offset</name></decl>, <decl><type ref="prev"/><name>slice_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_slices</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slice_offset</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>slices_info_offset</name> <operator>+</operator> <name>slice</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>slices_info_offset</name> <operator>+</operator> <name>slice</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice_offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>slice_size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>slice_offset</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>||</operator>
<name>slice_offset</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>slice_size</name></expr></argument> &gt;</argument_list></name> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y_offset</name> <operator>=</operator> <name>height</name> <operator>-</operator> <operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>slice_height</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap_buf</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>slice_offset</name><operator>)</operator></expr></argument>, <argument><expr><name>slice_size</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>y_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_slice</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>slice_height</name></expr></argument>, <argument><expr><name>slice_size</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>, <argument><expr><name>table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>table_size</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_huffyuv_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"huffyuv"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Huffyuv / HuffYUV"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HUFFYUV</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HYuvContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_DRAW_HORIZ_BAND</name> <operator>|</operator>
<name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>decode_init_thread_copy</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_FFVHUFF_DECODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_ffvhuff_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ffvhuff"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Huffyuv FFmpeg variant"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_FFVHUFF</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HYuvContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_DRAW_HORIZ_BAND</name> <operator>|</operator>
<name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>decode_init_thread_copy</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HYMT_DECODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_hymt_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hymt"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"HuffYUV MT"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HYMT</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HYuvContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_DRAW_HORIZ_BAND</name> <operator>|</operator>
<name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>decode_init_thread_copy</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
