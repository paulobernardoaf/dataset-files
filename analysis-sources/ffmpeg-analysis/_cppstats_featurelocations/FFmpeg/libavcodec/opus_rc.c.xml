<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\opus_rc.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus_rc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_RC_BITS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_RC_SYM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_RC_CEIL</name></cpp:macro> <cpp:value>((1 &lt;&lt; OPUS_RC_SYM) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_RC_TOP</name></cpp:macro> <cpp:value>(1u &lt;&lt; 31)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_RC_BOT</name></cpp:macro> <cpp:value>(OPUS_RC_TOP &gt;&gt; OPUS_RC_SYM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_RC_SHIFT</name></cpp:macro> <cpp:value>(OPUS_RC_BITS - OPUS_RC_SYM - 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>opus_rc_enc_carryout</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cb</name> <init>= <expr><name>cbuf</name> <operator>&gt;&gt;</operator> <name>OPUS_RC_SYM</name></expr></init></decl>, <decl><type ref="prev"/><name>mb</name> <init>= <expr><operator>(</operator><name>OPUS_RC_CEIL</name> <operator>+</operator> <name>cb</name><operator>)</operator> <operator>&amp;</operator> <name>OPUS_RC_CEIL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cbuf</name> <operator>==</operator> <name>OPUS_RC_CEIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ext</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rng_cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>rem</name></name> <operator>+</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rng_cur</name></name> <operator>+=</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>rem</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>rc</name><operator>-&gt;</operator><name>ext</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>rc</name><operator>-&gt;</operator><name>ext</name></name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>rc</name><operator>-&gt;</operator><name>rng_cur</name></name><operator>++</operator> <operator>=</operator> <name>mb</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rng_cur</name></name> <operator>&lt;</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rem</name></name> <operator>=</operator> <name>cbuf</name> <operator>&amp;</operator> <name>OPUS_RC_CEIL</name></expr>;</expr_stmt> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>opus_rc_dec_normalize</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;=</operator> <name>OPUS_RC_BOT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>&lt;&lt;</operator> <name>OPUS_RC_SYM</name><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rc</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>OPUS_RC_SYM</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>OPUS_RC_CEIL</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>OPUS_RC_TOP</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;&lt;=</operator> <name>OPUS_RC_SYM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>+=</operator> <name>OPUS_RC_SYM</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>opus_rc_enc_normalize</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;=</operator> <name>OPUS_RC_BOT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opus_rc_enc_carryout</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;&gt;</operator> <name>OPUS_RC_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>&lt;&lt;</operator> <name>OPUS_RC_SYM</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>OPUS_RC_TOP</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;&lt;=</operator> <name>OPUS_RC_SYM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>+=</operator> <name>OPUS_RC_SYM</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>opus_rc_dec_update</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>scale</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>high</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>-=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><name>total</name> <operator>-</operator> <name>high</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <ternary><condition><expr><name>low</name></expr> ?</condition><then> <expr><name>scale</name> <operator>*</operator> <operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator></expr>
</then><else>: <expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>-</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><name>total</name> <operator>-</operator> <name>high</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opus_rc_dec_normalize</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>opus_rc_enc_update</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>p</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>p_tot</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ptwo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rscaled</name></decl>, <decl><type ref="prev"/><name>cnd</name> <init>= <expr><operator>!</operator><operator>!</operator><name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ptwo</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>rscaled</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&gt;&gt;</operator> <call><name>ff_log2</name><argument_list>(<argument><expr><name>p_tot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rscaled</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name><operator>/</operator><name>p_tot</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>+=</operator> <name>cnd</name><operator>*</operator><operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>-</operator> <name>rscaled</name><operator>*</operator><operator>(</operator><name>p_tot</name> <operator>-</operator> <name>b</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>cnd</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>-</operator> <name>rscaled</name><operator>*</operator><operator>(</operator><name>p_tot</name> <operator>-</operator> <name>p</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>cnd</name><operator>*</operator><name>rscaled</name><operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opus_rc_enc_normalize</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ff_opus_rc_dec_cdf</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>cdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>total</name></decl>, <decl><type ref="prev"/><name>symbol</name></decl>, <decl><type ref="prev"/><name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>

<expr_stmt><expr><name>total</name> <operator>=</operator> <operator>*</operator><name>cdf</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>/</operator> <name>total</name></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>/</operator> <name>scale</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name>total</name> <operator>-</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cdf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;=</operator> <name>symbol</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>cdf</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>low</name> <operator>=</operator> <ternary><condition><expr><name>k</name></expr> ?</condition><then> <expr><name><name>cdf</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opus_rc_dec_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>k</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opus_rc_enc_cdf</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>cdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>opus_rc_enc_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>(</operator><operator>!</operator><operator>!</operator><name>val</name><operator>)</operator><operator>*</operator><name><name>cdf</name><index>[<expr><name>val</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdf</name><index>[<expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ff_opus_rc_dec_log</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&gt;&gt;</operator> <name>bits</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;=</operator> <name>scale</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>-=</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>-=</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>opus_rc_dec_normalize</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>k</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opus_rc_enc_log</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opus_rc_enc_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>(</operator><operator>!</operator><operator>!</operator><name>val</name><operator>)</operator><operator>*</operator><name>bits</name></expr></argument>, <argument><expr><name>bits</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>val</name></expr></argument>, <argument><expr><name>bits</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>uint32_t</name></type> <name>ff_opus_rc_get_raw</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cacheval</name></name> <operator>|=</operator> <operator>*</operator><operator>--</operator><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>position</name></name> <operator>&lt;&lt;</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>bytes</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cacheval</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cacheval</name></name> <operator>&gt;&gt;=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ff_opus_rc_put_raw</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>to_write</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cacheval</name></name> <operator>|=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>to_write</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name> <operator>=</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name> <operator>+</operator> <name>to_write</name><operator>)</operator> <operator>%</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name> <operator>&amp;&amp;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cacheval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>position</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name> <operator>=</operator> <name>count</name> <operator>-</operator> <name>to_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cacheval</name></name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;&gt;</operator> <name>to_write</name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rng_cur</name></name> <operator>&lt;</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>uint32_t</name></type> <name>ff_opus_rc_dec_uint</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>opus_ilog</name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bits</name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>/</operator> <name>total</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>/</operator> <name>scale</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>total</name> <operator>-</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opus_rc_dec_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>ff_opus_rc_get_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>bits</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>k</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ff_opus_rc_enc_uint</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ps</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>opus_ilog</name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>opus_rc_enc_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <name>ps</name></expr></argument>, <argument><expr><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <name>ps</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>ps</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_opus_rc_put_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ff_opus_rc_dec_uint_step</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k0</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>symbol</name></decl>, <decl><type ref="prev"/><name>total</name> <init>= <expr><operator>(</operator><name>k0</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>k0</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>/</operator> <name>total</name></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>/</operator> <name>scale</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name>total</name> <operator>-</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>symbol</name> <operator>&lt;</operator> <operator>(</operator><name>k0</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name>symbol</name><operator>/</operator><literal type="number">3</literal></expr> </then><else>: <expr><name>symbol</name> <operator>-</operator> <operator>(</operator><name>k0</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opus_rc_dec_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>k</name> <operator>&lt;=</operator> <name>k0</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal><operator>*</operator><operator>(</operator><name>k</name><operator>+</operator><literal type="number">0</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>k</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>k0</name><operator>)</operator> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><operator>(</operator><name>k0</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>k</name> <operator>&lt;=</operator> <name>k0</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal><operator>*</operator><operator>(</operator><name>k</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>k</name><operator>-</operator><literal type="number">0</literal><operator>-</operator><name>k0</name><operator>)</operator> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><operator>(</operator><name>k0</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>k</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opus_rc_enc_uint_step</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>a</name> <init>= <expr><name>val</name> <operator>&lt;=</operator> <name>k0</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>k0</name> <operator>=</operator> <operator>(</operator><name>k0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>b</name><operator>*</operator><operator>(</operator><name>val</name> <operator>+</operator> <name>k0</name><operator>)</operator> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name>a</name><operator>*</operator><name>k0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opus_rc_enc_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val</name> <operator>+</operator> <name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>k0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ff_opus_rc_dec_uint_tri</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>symbol</name></decl>, <decl><type ref="prev"/><name>total</name></decl>, <decl><type ref="prev"/><name>low</name></decl>, <decl><type ref="prev"/><name>center</name></decl>;</decl_stmt>

<expr_stmt><expr><name>total</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>qn</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>qn</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>/</operator> <name>total</name></expr>;</expr_stmt>
<expr_stmt><expr><name>center</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>/</operator> <name>scale</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>center</name> <operator>=</operator> <name>total</name> <operator>-</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>center</name> <argument_list type="generic">&lt; <argument><expr><name>total</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><call><name>ff_sqrt</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <name>center</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>low</name> <operator>=</operator> <name>k</name> <operator>*</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>qn</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>ff_sqrt</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>*</operator><operator>(</operator><name>total</name> <operator>-</operator> <name>center</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>low</name> <operator>=</operator> <name>total</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>qn</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>qn</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>k</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name>qn</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>opus_rc_dec_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>low</name> <operator>+</operator> <name>symbol</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>k</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opus_rc_enc_uint_tri</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>symbol</name></decl>, <decl><type ref="prev"/><name>low</name></decl>, <decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>

<expr_stmt><expr><name>total</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>qn</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>qn</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name>qn</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>low</name> <operator>=</operator> <name>k</name> <operator>*</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>low</name> <operator>=</operator> <name>total</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>qn</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>qn</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>k</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name>qn</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>opus_rc_enc_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>low</name> <operator>+</operator> <name>symbol</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_opus_rc_dec_laplace</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>symbol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decay</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>scale</name></decl>, <decl><type ref="prev"/><name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>center</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>center</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>/</operator> <name>scale</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>center</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>center</name> <operator>&gt;=</operator> <name>symbol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>low</name> <operator>=</operator> <name>symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">32768</literal> <operator>-</operator> <literal type="number">32</literal> <operator>-</operator> <name>symbol</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">16384</literal><operator>-</operator><name>decay</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>symbol</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>center</name> <operator>&gt;=</operator> <name>low</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>symbol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>low</name> <operator>+=</operator> <name>symbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>symbol</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>decay</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>distance</name> <init>= <expr><operator>(</operator><name>center</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>distance</name></expr>;</expr_stmt>
<expr_stmt><expr><name>low</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>distance</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>center</name> <operator>&lt;</operator> <name>low</name> <operator>+</operator> <name>symbol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>low</name> <operator>+=</operator> <name>symbol</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>opus_rc_dec_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>low</name> <operator>+</operator> <name>symbol</name></expr></argument>, <argument><expr><literal type="number">32768</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">32768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opus_rc_enc_laplace</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>symbol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>low</name> <init>= <expr><name>symbol</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><operator>*</operator><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opus_rc_enc_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>symbol</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">32768</literal> <operator>-</operator> <literal type="number">32</literal> <operator>-</operator> <name>symbol</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">16384</literal> <operator>-</operator> <name>decay</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>val</name> <operator>&amp;&amp;</operator> <name>symbol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>low</name> <operator>+=</operator> <operator>(</operator><name>symbol</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <operator>(</operator><name>symbol</name><operator>*</operator><name>decay</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>symbol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>low</name> <operator>+=</operator> <operator>(</operator><operator>++</operator><name>symbol</name><operator>)</operator><operator>*</operator><name>pos</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>distance</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>val</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">32768</literal> <operator>-</operator> <name>low</name><operator>)</operator> <operator>-</operator> <operator>!</operator><name>pos</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>low</name> <operator>+=</operator> <name>pos</name> <operator>+</operator> <operator>(</operator><name>distance</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32768</literal> <operator>-</operator> <name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name>distance</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>opus_rc_enc_update</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>low</name> <operator>+</operator> <name>symbol</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_opus_rc_dec_init</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rc</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">127</literal> <operator>-</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rc</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opus_rc_dec_normalize</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opus_rc_dec_raw_init</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rightend</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name>rightend</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cacheval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opus_rc_enc_end</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rng_bytes</name></decl>, <decl><type ref="prev"/><name>bits</name> <init>= <expr><name>OPUS_RC_BITS</name> <operator>-</operator> <call><name>opus_ilog</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><name>OPUS_RC_TOP</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>bits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>end</name> <init>= <expr><operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <name>mask</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>mask</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>|</operator> <name>mask</name><operator>)</operator> <operator>&gt;=</operator> <name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <name>mask</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opus_rc_enc_carryout</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>end</name> <operator>&gt;&gt;</operator> <name>OPUS_RC_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>&lt;&lt;</operator> <name>OPUS_RC_SYM</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>OPUS_RC_TOP</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>-=</operator> <name>OPUS_RC_SYM</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>rem</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rc</name><operator>-&gt;</operator><name>ext</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opus_rc_enc_carryout</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rng_bytes</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>rng_cur</name></name> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>rng_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>waste</name></name> <operator>=</operator> <name>size</name><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>bytes</name></name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name><operator>)</operator> <operator>-</operator> <name>rng_bytes</name><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>bytes</name></name> <operator>||</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>lap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rb_src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rb_dst</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_opus_rc_put_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>cachelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_src</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>OPUS_MAX_PACKET_SIZE</name> <operator>+</operator> <literal type="number">12</literal> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_dst</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lap</name> <operator>=</operator> <operator>&amp;</operator><name><name>dst</name><index>[<expr><name>rng_bytes</name></expr>]</index></name> <operator>-</operator> <name>rb_dst</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lap</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rb_dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name><name>rb_src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rb_dst</name><index>[<expr><name>lap</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rb_src</name><index>[<expr><name>lap</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name>lap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opus_rc_enc_init</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>OPUS_RC_TOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>=</operator> <name>OPUS_RC_BITS</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rem</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>ext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rng_cur</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_opus_rc_dec_raw_init</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>OPUS_MAX_PACKET_SIZE</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
