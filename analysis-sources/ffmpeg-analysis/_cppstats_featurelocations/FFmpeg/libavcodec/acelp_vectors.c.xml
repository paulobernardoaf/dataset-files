<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\acelp_vectors.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_vectors.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_fc_2pulses_9bits_track1</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>,
<expr><literal type="number">21</literal></expr>, <expr><literal type="number">23</literal></expr>,
<expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>,
<expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>,
<expr><literal type="number">36</literal></expr>, <expr><literal type="number">38</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_fc_2pulses_9bits_track1_gray</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>,
<expr><literal type="number">38</literal></expr>, <expr><literal type="number">36</literal></expr>,
<expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>,
<expr><literal type="number">21</literal></expr>, <expr><literal type="number">23</literal></expr>,
<expr><literal type="number">28</literal></expr>, <expr><literal type="number">26</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_fc_2pulses_9bits_track2_gray</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">25</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">36</literal></expr>, <expr><literal type="number">31</literal></expr>,
<expr><literal type="number">21</literal></expr>, <expr><literal type="number">26</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr>,
<expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>,
<expr><literal type="number">32</literal></expr>, <expr><literal type="number">30</literal></expr>,
<expr><literal type="number">39</literal></expr>, <expr><literal type="number">37</literal></expr>,
<expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_fc_4pulses_8bits_tracks_13</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">75</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_fc_4pulses_8bits_track_4</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>,
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>,
<expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>,
<expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>,
<expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>,
<expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>,
<expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>,
<expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>,
<expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>,
<expr><literal type="number">63</literal></expr>, <expr><literal type="number">64</literal></expr>,
<expr><literal type="number">68</literal></expr>, <expr><literal type="number">69</literal></expr>,
<expr><literal type="number">73</literal></expr>, <expr><literal type="number">74</literal></expr>,
<expr><literal type="number">78</literal></expr>, <expr><literal type="number">79</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>ff_pow_0_7</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.700000</literal></expr>, <expr><literal type="number">0.490000</literal></expr>, <expr><literal type="number">0.343000</literal></expr>, <expr><literal type="number">0.240100</literal></expr>, <expr><literal type="number">0.168070</literal></expr>,
<expr><literal type="number">0.117649</literal></expr>, <expr><literal type="number">0.082354</literal></expr>, <expr><literal type="number">0.057648</literal></expr>, <expr><literal type="number">0.040354</literal></expr>, <expr><literal type="number">0.028248</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>ff_pow_0_75</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.750000</literal></expr>, <expr><literal type="number">0.562500</literal></expr>, <expr><literal type="number">0.421875</literal></expr>, <expr><literal type="number">0.316406</literal></expr>, <expr><literal type="number">0.237305</literal></expr>,
<expr><literal type="number">0.177979</literal></expr>, <expr><literal type="number">0.133484</literal></expr>, <expr><literal type="number">0.100113</literal></expr>, <expr><literal type="number">0.075085</literal></expr>, <expr><literal type="number">0.056314</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>ff_pow_0_55</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.550000</literal></expr>, <expr><literal type="number">0.302500</literal></expr>, <expr><literal type="number">0.166375</literal></expr>, <expr><literal type="number">0.091506</literal></expr>, <expr><literal type="number">0.050328</literal></expr>,
<expr><literal type="number">0.027681</literal></expr>, <expr><literal type="number">0.015224</literal></expr>, <expr><literal type="number">0.008373</literal></expr>, <expr><literal type="number">0.004605</literal></expr>, <expr><literal type="number">0.002533</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>ff_b60_sinc</name><index>[<expr><literal type="number">61</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.898529</literal></expr> , <expr><literal type="number">0.865051</literal></expr> , <expr><literal type="number">0.769257</literal></expr> , <expr><literal type="number">0.624054</literal></expr> , <expr><literal type="number">0.448639</literal></expr> , <expr><literal type="number">0.265289</literal></expr> ,
<expr><literal type="number">0.0959167</literal></expr> , <expr><operator>-</operator><literal type="number">0.0412598</literal></expr> , <expr><operator>-</operator><literal type="number">0.134338</literal></expr> , <expr><operator>-</operator><literal type="number">0.178986</literal></expr> , <expr><operator>-</operator><literal type="number">0.178528</literal></expr> , <expr><operator>-</operator><literal type="number">0.142609</literal></expr> ,
<expr><operator>-</operator><literal type="number">0.0849304</literal></expr> , <expr><operator>-</operator><literal type="number">0.0205078</literal></expr> , <expr><literal type="number">0.0369568</literal></expr> , <expr><literal type="number">0.0773926</literal></expr> , <expr><literal type="number">0.0955200</literal></expr> , <expr><literal type="number">0.0912781</literal></expr> ,
<expr><literal type="number">0.0689392</literal></expr> , <expr><literal type="number">0.0357056</literal></expr> , <expr><literal type="number">0.0</literal></expr> , <expr><operator>-</operator><literal type="number">0.0305481</literal></expr> , <expr><operator>-</operator><literal type="number">0.0504150</literal></expr> , <expr><operator>-</operator><literal type="number">0.0570068</literal></expr> ,
<expr><operator>-</operator><literal type="number">0.0508423</literal></expr> , <expr><operator>-</operator><literal type="number">0.0350037</literal></expr> , <expr><operator>-</operator><literal type="number">0.0141602</literal></expr> , <expr><literal type="number">0.00665283</literal></expr>, <expr><literal type="number">0.0230713</literal></expr> , <expr><literal type="number">0.0323486</literal></expr> ,
<expr><literal type="number">0.0335388</literal></expr> , <expr><literal type="number">0.0275879</literal></expr> , <expr><literal type="number">0.0167847</literal></expr> , <expr><literal type="number">0.00411987</literal></expr>, <expr><operator>-</operator><literal type="number">0.00747681</literal></expr>, <expr><operator>-</operator><literal type="number">0.0156860</literal></expr> ,
<expr><operator>-</operator><literal type="number">0.0193481</literal></expr> , <expr><operator>-</operator><literal type="number">0.0183716</literal></expr> , <expr><operator>-</operator><literal type="number">0.0137634</literal></expr> , <expr><operator>-</operator><literal type="number">0.00704956</literal></expr>, <expr><literal type="number">0.0</literal></expr> , <expr><literal type="number">0.00582886</literal></expr> ,
<expr><literal type="number">0.00939941</literal></expr>, <expr><literal type="number">0.0103760</literal></expr> , <expr><literal type="number">0.00903320</literal></expr>, <expr><literal type="number">0.00604248</literal></expr>, <expr><literal type="number">0.00238037</literal></expr>, <expr><operator>-</operator><literal type="number">0.00109863</literal></expr> ,
<expr><operator>-</operator><literal type="number">0.00366211</literal></expr>, <expr><operator>-</operator><literal type="number">0.00497437</literal></expr>, <expr><operator>-</operator><literal type="number">0.00503540</literal></expr>, <expr><operator>-</operator><literal type="number">0.00402832</literal></expr>, <expr><operator>-</operator><literal type="number">0.00241089</literal></expr>, <expr><operator>-</operator><literal type="number">0.000579834</literal></expr>,
<expr><literal type="number">0.00103760</literal></expr>, <expr><literal type="number">0.00222778</literal></expr>, <expr><literal type="number">0.00277710</literal></expr>, <expr><literal type="number">0.00271606</literal></expr>, <expr><literal type="number">0.00213623</literal></expr>, <expr><literal type="number">0.00115967</literal></expr> ,
<expr><literal type="number">0.</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ff_acelp_fc_pulse_per_track</name><parameter_list>(
<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>fc_v</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tab1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tab2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pulse_indexes</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pulse_signs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pulse_count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>pulse_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>fc_v</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>tab1</name><index>[<expr><name>pulse_indexes</name> <operator>&amp;</operator> <name>mask</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator>
<ternary><condition><expr><operator>(</operator><name>pulse_signs</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8191</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">8192</literal></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><name>pulse_indexes</name> <operator>&gt;&gt;=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pulse_signs</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>fc_v</name><index>[<expr><name><name>tab2</name><index>[<expr><name>pulse_indexes</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>pulse_signs</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8191</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">8192</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_decode_10_pulses_35bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>fixed_index</name></decl></parameter>,
<parameter><decl><type><name>AMRFixed</name> <modifier>*</modifier></type><name>fixed_sparse</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>gray_decode</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>half_pulse_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>no_repeat_mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>half_pulse_count</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>half_pulse_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos1</name> <init>= <expr><name><name>gray_decode</name><index>[<expr><name><name>fixed_index</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos2</name> <init>= <expr><name><name>gray_decode</name><index>[<expr><name><name>fixed_index</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name> <operator>&amp;</operator> <name>mask</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>fixed_index</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>pos1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name> <operator>=</operator> <name>pos2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name> <operator>=</operator> <ternary><condition><expr><name>pos2</name> <operator>&lt;</operator> <name>pos1</name></expr> ?</condition><then> <expr><operator>-</operator><name>sign</name></expr> </then><else>: <expr><name>sign</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_acelp_weighted_vector_sum</name><parameter_list>(
<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in_a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in_b</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>weight_coeff_a</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>weight_coeff_b</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>rounder</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator>
<name><name>in_a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>weight_coeff_a</name> <operator>+</operator>
<name><name>in_b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>weight_coeff_b</name> <operator>+</operator>
<name>rounder</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_weighted_vector_sumf</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in_b</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>weight_coeff_a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>weight_coeff_b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>weight_coeff_a</name> <operator>*</operator> <name><name>in_a</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>+</operator> <name>weight_coeff_b</name> <operator>*</operator> <name><name>in_b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_adaptive_gain_control</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>speech_energ</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>gain_mem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>postfilter_energ</name> <init>= <expr><call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>gain_scale_factor</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>mem</name> <init>= <expr><operator>*</operator><name>gain_mem</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>postfilter_energ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gain_scale_factor</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>speech_energ</name> <operator>/</operator> <name>postfilter_energ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gain_scale_factor</name> <operator>*=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name>alpha</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>mem</name> <operator>=</operator> <name>alpha</name> <operator>*</operator> <name>mem</name> <operator>+</operator> <name>gain_scale_factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>mem</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>gain_mem</name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_scale_vector_to_given_sum_of_squares</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>sum_of_squares</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scalefactor</name> <init>= <expr><call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>scalefactor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scalefactor</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>sum_of_squares</name> <operator>/</operator> <name>scalefactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scalefactor</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_set_fixed_vector</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AMRFixed</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>repeats</name> <init>= <expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>no_repeat_mask</name></name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scale</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>pitch_lag</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>*=</operator> <name><name>in</name><operator>-&gt;</operator><name>pitch_fac</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>repeats</name></expr>)</condition>;</do>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_clear_fixed_vector</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AMRFixed</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>repeats</name> <init>= <expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>no_repeat_mask</name></name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>pitch_lag</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>pitch_lag</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>repeats</name></expr>)</condition>;</do></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_acelp_vectors_init</name><parameter_list>(<parameter><decl><type><name>ACELPVContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weighted_vector_sumf</name></name> <operator>=</operator> <name>ff_weighted_vector_sumf</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>HAVE_MIPSFPU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_acelp_vectors_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
