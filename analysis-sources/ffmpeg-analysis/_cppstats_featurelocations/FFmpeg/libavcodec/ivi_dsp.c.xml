<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ivi_dsp.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ivi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ivi_dsp.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_ivi_recompose53</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IVIPlaneDesc</name> <modifier>*</modifier></type><name>plane</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>dst_pitch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>indx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>p0</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p3</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>b0_1</name></decl>, <decl><type ref="prev"/><name>b0_2</name></decl>, <decl><type ref="prev"/><name>b1_1</name></decl>, <decl><type ref="prev"/><name>b1_2</name></decl>, <decl><type ref="prev"/><name>b1_3</name></decl>, <decl><type ref="prev"/><name>b2_1</name></decl>, <decl><type ref="prev"/><name>b2_2</name></decl>, <decl><type ref="prev"/><name>b2_3</name></decl>, <decl><type ref="prev"/><name>b2_4</name></decl>, <decl><type ref="prev"/><name>b2_5</name></decl>, <decl><type ref="prev"/><name>b2_6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>b3_1</name></decl>, <decl><type ref="prev"/><name>b3_2</name></decl>, <decl><type ref="prev"/><name>b3_3</name></decl>, <decl><type ref="prev"/><name>b3_4</name></decl>, <decl><type ref="prev"/><name>b3_5</name></decl>, <decl><type ref="prev"/><name>b3_6</name></decl>, <decl><type ref="prev"/><name>b3_7</name></decl>, <decl><type ref="prev"/><name>b3_8</name></decl>, <decl><type ref="prev"/><name>b3_9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl>, <decl><type ref="prev"/><name>back_pitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>b0_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b1_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b2_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b3_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_bands</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>pitch</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pitch</name></expr>;</expr_stmt>


<expr_stmt><expr><name>back_pitch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>b0_ptr</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1_ptr</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2_ptr</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3_ptr</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>plane</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name><operator>+</operator><literal type="number">2</literal> <operator>&gt;=</operator> <name><name>plane</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pitch</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bands</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b0_1</name> <operator>=</operator> <name><name>b0_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b0_2</name> <operator>=</operator> <name><name>b0_ptr</name><index>[<expr><name>pitch</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bands</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b1_1</name> <operator>=</operator> <name><name>b1_ptr</name><index>[<expr><name>back_pitch</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1_2</name> <operator>=</operator> <name><name>b1_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1_3</name> <operator>=</operator> <name>b1_1</name> <operator>-</operator> <name>b1_2</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <name><name>b1_ptr</name><index>[<expr><name>pitch</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bands</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b2_2</name> <operator>=</operator> <name><name>b2_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b2_3</name> <operator>=</operator> <name>b2_2</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b2_5</name> <operator>=</operator> <name><name>b2_ptr</name><index>[<expr><name>pitch</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b2_6</name> <operator>=</operator> <name>b2_5</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bands</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b3_2</name> <operator>=</operator> <name><name>b3_ptr</name><index>[<expr><name>back_pitch</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3_3</name> <operator>=</operator> <name>b3_2</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3_5</name> <operator>=</operator> <name><name>b3_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3_6</name> <operator>=</operator> <name>b3_5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3_8</name> <operator>=</operator> <name>b3_2</name> <operator>-</operator> <name>b3_5</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <name><name>b3_ptr</name><index>[<expr><name>pitch</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3_9</name> <operator>=</operator> <name>b3_8</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>indx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>plane</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">2</literal></expr><operator>,</operator> <expr><name>indx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name><operator>+</operator><literal type="number">2</literal> <operator>&gt;=</operator> <name><name>plane</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b0_ptr</name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b1_ptr</name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b2_ptr</name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b3_ptr</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>b2_1</name> <operator>=</operator> <name>b2_2</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b2_2</name> <operator>=</operator> <name>b2_3</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b2_4</name> <operator>=</operator> <name>b2_5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b2_5</name> <operator>=</operator> <name>b2_6</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3_1</name> <operator>=</operator> <name>b3_2</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3_2</name> <operator>=</operator> <name>b3_3</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3_4</name> <operator>=</operator> <name>b3_5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3_5</name> <operator>=</operator> <name>b3_6</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3_7</name> <operator>=</operator> <name>b3_8</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3_8</name> <operator>=</operator> <name>b3_9</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>p1</name> <operator>=</operator> <name>p2</name> <operator>=</operator> <name>p3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>num_bands</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>b0_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>b0_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b0_1</name> <operator>=</operator> <name><name>b0_ptr</name><index>[<expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b0_2</name> <operator>=</operator> <name><name>b0_ptr</name><index>[<expr><name>pitch</name><operator>+</operator><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>b0_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>tmp0</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>tmp1</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><name>tmp0</name> <operator>+</operator> <name>tmp2</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p3</name> <operator>=</operator> <operator>(</operator><name>tmp1</name> <operator>+</operator> <name>tmp2</name> <operator>+</operator> <name>b0_2</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>num_bands</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>b1_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>b1_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1_2</name> <operator>=</operator> <name><name>b1_ptr</name><index>[<expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1_1</name> <operator>=</operator> <name><name>b1_ptr</name><index>[<expr><name>back_pitch</name><operator>+</operator><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp0</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <name>b1_3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1_3</name> <operator>=</operator> <name>b1_1</name> <operator>-</operator> <name>b1_2</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <name><name>b1_ptr</name><index>[<expr><name>pitch</name><operator>+</operator><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>+=</operator> <operator>(</operator><name>tmp0</name> <operator>+</operator> <name>tmp1</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>+=</operator> <operator>(</operator><name>tmp0</name> <operator>+</operator> <name>tmp1</name> <operator>+</operator> <name>b1_1</name> <operator>+</operator> <name>b1_2</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>+=</operator> <name>tmp2</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p3</name> <operator>+=</operator> <operator>(</operator><name>tmp2</name> <operator>+</operator> <name>b1_3</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>num_bands</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b2_3</name> <operator>=</operator> <name><name>b2_ptr</name><index>[<expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2_6</name> <operator>=</operator> <name><name>b2_ptr</name><index>[<expr><name>pitch</name><operator>+</operator><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>b2_1</name> <operator>+</operator> <name>b2_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>b2_1</name> <operator>-</operator> <name>b2_2</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <name>b2_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>+=</operator> <name>tmp0</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>+=</operator> <name>tmp1</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>+=</operator> <operator>(</operator><name>tmp0</name> <operator>+</operator> <name>b2_4</name> <operator>+</operator> <name>b2_5</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p3</name> <operator>+=</operator> <operator>(</operator><name>tmp1</name> <operator>+</operator> <name>b2_4</name> <operator>-</operator> <name>b2_5</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <name>b2_6</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>num_bands</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b3_6</name> <operator>=</operator> <name><name>b3_ptr</name><index>[<expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3_3</name> <operator>=</operator> <name><name>b3_ptr</name><index>[<expr><name>back_pitch</name><operator>+</operator><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>b3_1</name> <operator>+</operator> <name>b3_4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>b3_2</name> <operator>+</operator> <name>b3_5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>b3_3</name> <operator>+</operator> <name>b3_6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b3_9</name> <operator>=</operator> <name>b3_3</name> <operator>-</operator> <name>b3_6</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <name><name>b3_ptr</name><index>[<expr><name>pitch</name><operator>+</operator><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>+=</operator> <operator>(</operator><name>tmp0</name> <operator>+</operator> <name>tmp1</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>+=</operator> <operator>(</operator><name>tmp0</name> <operator>-</operator> <name>tmp1</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <name>tmp2</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>+=</operator> <operator>(</operator><name>b3_7</name> <operator>+</operator> <name>b3_8</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p3</name> <operator>+=</operator> <name>b3_7</name> <operator>-</operator> <name>b3_8</name><operator>*</operator><literal type="number">6</literal> <operator>+</operator> <name>b3_9</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>p0</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>p1</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dst_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>p2</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dst_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>p3</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_pitch</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>back_pitch</name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b0_ptr</name> <operator>+=</operator> <name>pitch</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b1_ptr</name> <operator>+=</operator> <name>pitch</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b2_ptr</name> <operator>+=</operator> <name>pitch</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b3_ptr</name> <operator>+=</operator> <name>pitch</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_recompose_haar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IVIPlaneDesc</name> <modifier>*</modifier></type><name>plane</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>dst_pitch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>indx</name></decl>, <decl><type ref="prev"/><name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>b0_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b1_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b2_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b3_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl>;</decl_stmt>


<expr_stmt><expr><name>pitch</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pitch</name></expr>;</expr_stmt>


<expr_stmt><expr><name>b0_ptr</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1_ptr</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2_ptr</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3_ptr</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>plane</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>indx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>plane</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>indx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <name><name>b0_ptr</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b1</name> <operator>=</operator> <name><name>b1_ptr</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b2</name> <operator>=</operator> <name><name>b2_ptr</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>b3</name> <operator>=</operator> <name><name>b3_ptr</name><index>[<expr><name>indx</name></expr>]</index></name></expr>;</expr_stmt> 


<expr_stmt><expr><name>p0</name> <operator>=</operator> <operator>(</operator><name>b0</name> <operator>+</operator> <name>b1</name> <operator>+</operator> <name>b2</name> <operator>+</operator> <name>b3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><name>b0</name> <operator>+</operator> <name>b1</name> <operator>-</operator> <name>b2</name> <operator>-</operator> <name>b3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><name>b0</name> <operator>-</operator> <name>b1</name> <operator>+</operator> <name>b2</name> <operator>-</operator> <name>b3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p3</name> <operator>=</operator> <operator>(</operator><name>b0</name> <operator>-</operator> <name>b1</name> <operator>-</operator> <name>b2</name> <operator>+</operator> <name>b3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>p0</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dst_pitch</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>p2</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dst_pitch</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>p3</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_pitch</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b0_ptr</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1_ptr</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2_ptr</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3_ptr</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_HAAR_BFLY</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>o1</name></type></parameter>, <parameter><type><name>o2</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t = ((s1) - (s2)) &gt;&gt; 1;o1 = ((s1) + (s2)) &gt;&gt; 1;o2 = (t);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INV_HAAR8</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s7</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s6</name></type></parameter>, <parameter><type><name>s8</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>, <parameter><type><name>d2</name></type></parameter>, <parameter><type><name>d3</name></type></parameter>, <parameter><type><name>d4</name></type></parameter>, <parameter><type><name>d5</name></type></parameter>, <parameter><type><name>d6</name></type></parameter>, <parameter><type><name>d7</name></type></parameter>, <parameter><type><name>d8</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>, <parameter><type><name>t1</name></type></parameter>, <parameter><type><name>t2</name></type></parameter>, <parameter><type><name>t3</name></type></parameter>, <parameter><type><name>t4</name></type></parameter>, <parameter><type><name>t5</name></type></parameter>, <parameter><type><name>t6</name></type></parameter>, <parameter><type><name>t7</name></type></parameter>, <parameter><type><name>t8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{t1 = (s1) * 2; t5 = (s5) * 2;IVI_HAAR_BFLY(t1, t5, t1, t5, t0); IVI_HAAR_BFLY(t1, s3, t1, t3, t0);IVI_HAAR_BFLY(t5, s7, t5, t7, t0); IVI_HAAR_BFLY(t1, s2, t1, t2, t0);IVI_HAAR_BFLY(t3, s4, t3, t4, t0); IVI_HAAR_BFLY(t5, s6, t5, t6, t0);IVI_HAAR_BFLY(t7, s8, t7, t8, t0);d1 = COMPENSATE(t1);d2 = COMPENSATE(t2);d3 = COMPENSATE(t3);d4 = COMPENSATE(t4);d5 = COMPENSATE(t5);d6 = COMPENSATE(t6);d7 = COMPENSATE(t7);d8 = COMPENSATE(t8); }</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INV_HAAR4</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s7</name></type></parameter>, <parameter><type><name>d1</name></type></parameter>, <parameter><type><name>d2</name></type></parameter>, <parameter><type><name>d3</name></type></parameter>, <parameter><type><name>d4</name></type></parameter>, <parameter><type><name>t0</name></type></parameter>, <parameter><type><name>t1</name></type></parameter>, <parameter><type><name>t2</name></type></parameter>, <parameter><type><name>t3</name></type></parameter>, <parameter><type><name>t4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{IVI_HAAR_BFLY(s1, s3, t0, t1, t4);IVI_HAAR_BFLY(t0, s5, t2, t3, t4);d1 = COMPENSATE(t2);d2 = COMPENSATE(t3);IVI_HAAR_BFLY(t1, s7, t2, t3, t4);d3 = COMPENSATE(t2);d4 = COMPENSATE(t3); }</cpp:value></cpp:define>








<function><type><name>void</name></type> <name>ff_ivi_inverse_haar_8x8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>sp1</name></decl>, <decl><type ref="prev"/><name>sp2</name></decl>, <decl><type ref="prev"/><name>sp3</name></decl>, <decl><type ref="prev"/><name>sp4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sp1</name> <operator>=</operator> <name><name>src</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sp2</name> <operator>=</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sp3</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sp4</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INV_HAAR8</name><argument_list>( <argument><expr><name>sp1</name></expr></argument>, <argument><expr><name>sp2</name></expr></argument>, <argument><expr><name>sp3</name></expr></argument>, <argument><expr><name>sp4</name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>INV_HAAR8</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_row_haar8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>INV_HAAR8</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_col_haar8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>INV_HAAR8</name><argument_list>(<argument><expr><name><name>in</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>in</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator>
<name><name>out</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator>
<name><name>out</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator>
<name><name>out</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_inverse_haar_4x4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>sp1</name></decl>, <decl><type ref="prev"/><name>sp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sp1</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sp2</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INV_HAAR4</name><argument_list>( <argument><expr><name>sp1</name></expr></argument>, <argument><expr><name>sp2</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>INV_HAAR4</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_row_haar4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>INV_HAAR4</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_col_haar4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>INV_HAAR4</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator>
<name><name>out</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_dc_haar_2d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blk_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>dc_coeff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc_coeff</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>in</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>blk_size</name></expr>;</condition> <incr><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr><operator>,</operator> <expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>blk_size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>dc_coeff</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_SLANT_BFLY</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>o1</name></type></parameter>, <parameter><type><name>o2</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t = (s1) - (s2);o1 = (s1) + (s2);o2 = (t);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_IREFLECT</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>o1</name></type></parameter>, <parameter><type><name>o2</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t = (((s1) + (s2)*2 + 2) &gt;&gt; 2) + (s1);o2 = (((s1)*2 - (s2) + 2) &gt;&gt; 2) - (s2);o1 = (t);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_SLANT_PART4</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>o1</name></type></parameter>, <parameter><type><name>o2</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t = (s2) + (((s1)*4 - (s2) + 4) &gt;&gt; 3);o2 = (s1) + ((-(s1) - (s2)*4 + 4) &gt;&gt; 3);o1 = (t);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_INV_SLANT8</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s8</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s6</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s7</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>, <parameter><type><name>d2</name></type></parameter>, <parameter><type><name>d3</name></type></parameter>, <parameter><type><name>d4</name></type></parameter>, <parameter><type><name>d5</name></type></parameter>, <parameter><type><name>d6</name></type></parameter>, <parameter><type><name>d7</name></type></parameter>, <parameter><type><name>d8</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>, <parameter><type><name>t1</name></type></parameter>, <parameter><type><name>t2</name></type></parameter>, <parameter><type><name>t3</name></type></parameter>, <parameter><type><name>t4</name></type></parameter>, <parameter><type><name>t5</name></type></parameter>, <parameter><type><name>t6</name></type></parameter>, <parameter><type><name>t7</name></type></parameter>, <parameter><type><name>t8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{IVI_SLANT_PART4(s4, s5, t4, t5, t0);IVI_SLANT_BFLY(s1, t5, t1, t5, t0); IVI_SLANT_BFLY(s2, s6, t2, t6, t0);IVI_SLANT_BFLY(s7, s3, t7, t3, t0); IVI_SLANT_BFLY(t4, s8, t4, t8, t0);IVI_SLANT_BFLY(t1, t2, t1, t2, t0); IVI_IREFLECT (t4, t3, t4, t3, t0);IVI_SLANT_BFLY(t5, t6, t5, t6, t0); IVI_IREFLECT (t8, t7, t8, t7, t0);IVI_SLANT_BFLY(t1, t4, t1, t4, t0); IVI_SLANT_BFLY(t2, t3, t2, t3, t0);IVI_SLANT_BFLY(t5, t8, t5, t8, t0); IVI_SLANT_BFLY(t6, t7, t6, t7, t0);d1 = COMPENSATE(t1);d2 = COMPENSATE(t2);d3 = COMPENSATE(t3);d4 = COMPENSATE(t4);d5 = COMPENSATE(t5);d6 = COMPENSATE(t6);d7 = COMPENSATE(t7);d8 = COMPENSATE(t8);}</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_INV_SLANT4</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>d1</name></type></parameter>, <parameter><type><name>d2</name></type></parameter>, <parameter><type><name>d3</name></type></parameter>, <parameter><type><name>d4</name></type></parameter>, <parameter><type><name>t0</name></type></parameter>, <parameter><type><name>t1</name></type></parameter>, <parameter><type><name>t2</name></type></parameter>, <parameter><type><name>t3</name></type></parameter>, <parameter><type><name>t4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{IVI_SLANT_BFLY(s1, s2, t1, t2, t0); IVI_IREFLECT (s4, s3, t4, t3, t0);IVI_SLANT_BFLY(t1, t4, t1, t4, t0); IVI_SLANT_BFLY(t2, t3, t2, t3, t0);d1 = COMPENSATE(t1);d2 = COMPENSATE(t2);d3 = COMPENSATE(t3);d4 = COMPENSATE(t4);}</cpp:value></cpp:define>








<function><type><name>void</name></type> <name>ff_ivi_inverse_slant_8x8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IVI_INV_SLANT8</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + 1)&gt;&gt;1)</cpp:value></cpp:define>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>IVI_INV_SLANT8</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_inverse_slant_4x4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IVI_INV_SLANT4</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + 1)&gt;&gt;1)</cpp:value></cpp:define>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>IVI_INV_SLANT4</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_dc_slant_2d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>dc_coeff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc_coeff</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>blk_size</name></expr>;</condition> <incr><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr><operator>,</operator> <expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>blk_size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>dc_coeff</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_row_slant8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + 1)&gt;&gt;1)</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>IVI_INV_SLANT8</name><argument_list>( <argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_dc_row_slant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>dc_coeff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc_coeff</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>blk_size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>dc_coeff</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>blk_size</name></expr>;</condition> <incr><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr><operator>,</operator> <expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>blk_size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_col_slant8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>row4</name></decl>, <decl><type ref="prev"/><name>row8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>;</decl_stmt>

<expr_stmt><expr><name>row2</name> <operator>=</operator> <name>pitch</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>row4</name> <operator>=</operator> <name>pitch</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>row8</name> <operator>=</operator> <name>pitch</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + 1)&gt;&gt;1)</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IVI_INV_SLANT8</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>row2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>row2</name> <operator>+</operator> <name>pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>row4</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><name>row4</name> <operator>+</operator> <name>pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>row4</name> <operator>+</operator> <name>row2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>row8</name> <operator>-</operator> <name>pitch</name></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>pitch</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>row2</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>row2</name> <operator>+</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>row4</name></expr>]</index></name> <operator>=</operator>
<name><name>out</name><index>[<expr><name>row4</name> <operator>+</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>row4</name> <operator>+</operator> <name>row2</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>row8</name> <operator>-</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_dc_col_slant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>dc_coeff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc_coeff</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>blk_size</name></expr>;</condition> <incr><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr><operator>,</operator> <expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dc_coeff</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>blk_size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_row_slant4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + 1)&gt;&gt;1)</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>IVI_INV_SLANT4</name><argument_list>( <argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_col_slant4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>row2</name> <operator>=</operator> <name>pitch</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPENSATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + 1)&gt;&gt;1)</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IVI_INV_SLANT4</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>row2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>row2</name> <operator>+</operator> <name>pitch</name></expr>]</index></name></expr></argument>,
<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>pitch</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>row2</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>row2</name> <operator>+</operator> <name>pitch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPENSATE</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_put_pixels_8x8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr><operator>,</operator> <expr><name>in</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ivi_put_dc_pixel_8x8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blk_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>out</name> <operator>+=</operator> <name>pitch</name></expr><operator>,</operator> <expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_MC_TEMPLATE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void ivi_mc_ ##size ##x##size ##suffix(int16_t *buf, ptrdiff_t dpitch, const int16_t *ref_buf, ptrdiff_t pitch, int mc_type) { int i, j; const int16_t *wptr; switch (mc_type) { case 0: for (i = 0; i &lt; size; i++, buf += dpitch, ref_buf += pitch) { for (j = 0; j &lt; size; j++) {OP(buf[j], ref_buf[j]); } } break; case 1: for (i = 0; i &lt; size; i++, buf += dpitch, ref_buf += pitch) for (j = 0; j &lt; size; j++) OP(buf[j], (ref_buf[j] + ref_buf[j+1]) &gt;&gt; 1); break; case 2: wptr = ref_buf + pitch; for (i = 0; i &lt; size; i++, buf += dpitch, wptr += pitch, ref_buf += pitch) for (j = 0; j &lt; size; j++) OP(buf[j], (ref_buf[j] + wptr[j]) &gt;&gt; 1); break; case 3: wptr = ref_buf + pitch; for (i = 0; i &lt; size; i++, buf += dpitch, wptr += pitch, ref_buf += pitch) for (j = 0; j &lt; size; j++) OP(buf[j], (ref_buf[j] + ref_buf[j+1] + wptr[j] + wptr[j+1]) &gt;&gt; 2); break; } } void ff_ivi_mc_ ##size ##x##size ##suffix(int16_t *buf, const int16_t *ref_buf, ptrdiff_t pitch, int mc_type) { ivi_mc_ ##size ##x##size ##suffix(buf, pitch, ref_buf, pitch, mc_type); }</cpp:value></cpp:define> 










































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_MC_AVG_TEMPLATE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_ivi_mc_avg_ ##size ##x##size ##suffix(int16_t *buf, const int16_t *ref_buf, const int16_t *ref_buf2, ptrdiff_t pitch, int mc_type, int mc_type2) { int16_t tmp[size * size]; int i, j; ivi_mc_ ##size ##x##size ##_no_delta(tmp, size, ref_buf, pitch, mc_type); ivi_mc_ ##size ##x##size ##_delta(tmp, size, ref_buf2, pitch, mc_type2); for (i = 0; i &lt; size; i++, buf += pitch) { for (j = 0; j &lt; size; j++) {OP(buf[j], tmp[i * size + j] &gt;&gt; 1); } } }</cpp:value></cpp:define> 


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_PUT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a) = (b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_ADD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a) += (b)</cpp:value></cpp:define>

<macro><name>IVI_MC_TEMPLATE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>_no_delta</argument>, <argument>OP_PUT</argument>)</argument_list></macro>
<macro><name>IVI_MC_TEMPLATE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>_delta</argument>, <argument>OP_ADD</argument>)</argument_list></macro>
<macro><name>IVI_MC_TEMPLATE</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument>_no_delta</argument>, <argument>OP_PUT</argument>)</argument_list></macro>
<macro><name>IVI_MC_TEMPLATE</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument>_delta</argument>, <argument>OP_ADD</argument>)</argument_list></macro>
<macro><name>IVI_MC_AVG_TEMPLATE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>_no_delta</argument>, <argument>OP_PUT</argument>)</argument_list></macro>
<macro><name>IVI_MC_AVG_TEMPLATE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>_delta</argument>, <argument>OP_ADD</argument>)</argument_list></macro>
<macro><name>IVI_MC_AVG_TEMPLATE</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument>_no_delta</argument>, <argument>OP_PUT</argument>)</argument_list></macro>
<macro><name>IVI_MC_AVG_TEMPLATE</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument>_delta</argument>, <argument>OP_ADD</argument>)</argument_list></macro>
</unit>
