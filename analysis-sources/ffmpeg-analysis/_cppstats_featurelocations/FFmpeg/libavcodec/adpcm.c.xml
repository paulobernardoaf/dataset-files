<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\adpcm.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adpcm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adpcm_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>






















<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>xa_adpcm_table</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">115</literal></expr>, <expr><operator>-</operator><literal type="number">52</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">98</literal></expr>, <expr><operator>-</operator><literal type="number">55</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">122</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>ea_adpcm_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">460</literal></expr>, <expr><literal type="number">392</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">208</literal></expr>, <expr><operator>-</operator><literal type="number">220</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>swf_index_tables</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>zork_index_table</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>mtf_index_table</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>



<typedef>typedef <type><struct>struct <name>ADPCMDecodeContext</name> <block>{
<decl_stmt><decl><type><name>ADPCMChannelStatus</name></type> <name><name>status</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vqa_version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>has_status</name></decl>;</decl_stmt>
}</block></struct></type> <name>ADPCMDecodeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>adpcm_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ADPCMDecodeContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>min_channels</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_channels</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_DTK</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA</name></expr>:</case>
<expr_stmt><expr><name>min_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_AFC</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R1</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R2</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R3</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_XAS</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MS</name></expr>:</case>
<expr_stmt><expr><name>max_channels</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MTAF</name></expr>:</case>
<expr_stmt><expr><name>min_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max_channels</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"channel count %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_PSX</name></expr>:</case>
<expr_stmt><expr><name>max_channels</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_DAT4</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_THP</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_THP_LE</name></expr>:</case>
<expr_stmt><expr><name>max_channels</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <name>min_channels</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>max_channels</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_CT</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>=</operator> <literal type="number">511</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_APC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_APM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vqa_version</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_ARGO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_ZORK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_AICA</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_DAT4</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_4XM</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_XA</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R1</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R2</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R3</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_XAS</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_THP</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_THP_LE</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_AFC</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_DTK</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_PSX</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MTAF</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_ARGO</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>vqa_version</name></name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>AV_SAMPLE_FMT_S16P</name></expr> </then><else>:
<expr><name>AV_SAMPLE_FMT_S16</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MS</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>AV_SAMPLE_FMT_S16P</name></expr> </then><else>:
<expr><name>AV_SAMPLE_FMT_S16</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_agm_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>nibble</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>add</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <operator>(</operator><name>delta</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>step</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>add</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>add</name> <operator>=</operator> <name>add</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nibble</name> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>pred</name> <operator>+</operator> <operator>(</operator><name>add</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32767</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>pred</name> <operator>-</operator> <operator>(</operator><name>add</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32767</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name>delta</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>step</name> <operator>*=</operator> <literal type="number">0x99</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">24576</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>pred</name></expr>;</expr_stmt>
<return>return <expr><name>pred</name></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>step</name> <operator>*=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>step</name> <operator>*=</operator> <literal type="number">0x4d</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>step</name> <operator>*=</operator> <literal type="number">0x39</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>step</name> <operator>+=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">24576</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>pred</name></expr>;</expr_stmt>
<return>return <expr><name>pred</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_ima_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>nibble</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>step_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>predictor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>ff_adpcm_step_table</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_index</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>+</operator> <name><name>ff_adpcm_index_table</name><index>[<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>nibble</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>delta</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>step</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>predictor</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>predictor</name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>predictor</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <name>step_index</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_ima_alp_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>nibble</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>step_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>predictor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>ff_adpcm_step_table</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_index</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>+</operator> <name><name>ff_adpcm_index_table</name><index>[<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>nibble</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>delta</name> <operator>*</operator> <name>step</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>predictor</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>predictor</name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>predictor</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <name>step_index</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_ima_mtf_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nibble</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>step_index</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>predictor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>ff_adpcm_step_table</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>step</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>nibble</name> <operator>-</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>predictor</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>step_index</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>+</operator> <name><name>mtf_index_table</name><index>[<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>nibble</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>predictor</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_ima_wav_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nibble</name></decl>, <decl><type ref="prev"/><name>step_index</name></decl>, <decl><type ref="prev"/><name>predictor</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>bps</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nibble</name> <operator>=</operator> <call><name>get_bits_le</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bps</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><name>step</name> <operator>=</operator> <name><name>ff_adpcm_step_table</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_index</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>+</operator> <name><name>ff_adpcm_index_tables</name><index>[<expr><name>bps</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>nibble</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>nibble</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>delta</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>step</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>predictor</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>predictor</name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>predictor</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <name>step_index</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>adpcm_ima_qt_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nibble</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>step_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>predictor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>ff_adpcm_step_table</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_index</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>+</operator> <name><name>ff_adpcm_index_table</name><index>[<expr><name>nibble</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>diff</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>diff</name> <operator>+=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>diff</name> <operator>+=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>predictor</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>-</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>predictor</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>+</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <name>step_index</name></expr>;</expr_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_ms_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nibble</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>predictor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>predictor</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sample1</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>coeff1</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sample2</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>coeff2</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>predictor</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>nibble</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>nibble</name> <operator>-</operator> <literal type="number">0x10</literal><operator>)</operator></expr></then><else>:<expr><operator>(</operator><name>nibble</name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>idelta</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sample2</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sample1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sample1</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idelta</name></name> <operator>=</operator> <operator>(</operator><name><name>ff_adpcm_AdaptationTable</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>nibble</name></expr>]</index></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>idelta</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>idelta</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idelta</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>idelta</name></name> <operator>&gt;</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">768</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"idelta overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idelta</name></name> <operator>=</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">768</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>sample1</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_ima_oki_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nibble</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>step_index</name></decl>, <decl><type ref="prev"/><name>predictor</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>ff_adpcm_oki_step_table</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_index</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>+</operator> <name><name>ff_adpcm_index_table</name><index>[<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>nibble</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>step_index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>delta</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>step</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>predictor</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>predictor</name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>predictor</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><name>predictor</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <name>step_index</name></expr>;</expr_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>*</operator> <literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_ct_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>nibble</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_step</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>delta</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>step</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>*</operator> <literal type="number">254</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><name>diff</name></expr> </then><else>: <expr><name>diff</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_step</name> <operator>=</operator> <operator>(</operator><name><name>ff_adpcm_AdaptationTable</name><index>[<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>step</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>new_step</name></expr></argument>, <argument><expr><literal type="number">511</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_sbpro_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>nibble</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>size</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>nibble</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>size</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>delta</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>+</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><name>diff</name></expr> </then><else>: <expr><name>diff</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16384</literal></expr></argument>,<argument><expr><literal type="number">16256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>size</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int16_t</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_yamaha_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nibble</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>+=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <name><name>ff_adpcm_yamaha_difflookup</name><index>[<expr><name>nibble</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <name><name>ff_adpcm_yamaha_indexscale</name><index>[<expr><name>nibble</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">24576</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_mtaf_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nibble</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>+=</operator> <name><name>ff_adpcm_mtaf_stepsize</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr>]</index><index>[<expr><name>nibble</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>+=</operator> <name><name>ff_adpcm_index_table</name><index>[<expr><name>nibble</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_zork_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nibble</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name>index</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lookup_sample</name> <init>= <expr><name><name>ff_adpcm_step_table</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name>lookup_sample</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name>lookup_sample</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name>lookup_sample</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">0x08</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name>lookup_sample</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name>lookup_sample</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name>lookup_sample</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name>lookup_sample</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample</name> <operator>=</operator> <operator>-</operator><name>sample</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>zork_index_table</name><index>[<expr><operator>(</operator><name>nibble</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<return>return <expr><name>sample</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xa_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out0</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>left</name></decl></parameter>,
<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>,<decl><type ref="prev"/><name>filter</name></decl>,<decl><type ref="prev"/><name>f0</name></decl>,<decl><type ref="prev"/><name>f1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s_1</name></decl>,<decl><type ref="prev"/><name>s_2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out0</name> <operator>+=</operator> <name>sample_offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <name>out0</name> <operator>+</operator> <literal type="number">28</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>out1</name> <operator>+=</operator> <name>sample_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">12</literal> <operator>-</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>xa_adpcm_table</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"unknown XA-ADPCM filter %d"</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>f0</name> <operator>=</operator> <name><name>xa_adpcm_table</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>xa_adpcm_table</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_1</name> <operator>=</operator> <name><name>left</name><operator>-&gt;</operator><name>sample1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_2</name> <operator>=</operator> <name><name>left</name><operator>-&gt;</operator><name>sample2</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">28</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">16</literal><operator>+</operator><name>i</name><operator>+</operator><name>j</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>s_1</name><operator>*</operator><name>f0</name> <operator>+</operator> <name>s_2</name><operator>*</operator><name>f1</name><operator>+</operator><literal type="number">32</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s_2</name> <operator>=</operator> <name>s_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_1</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>s_1</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>sample1</name></name> <operator>=</operator> <name>s_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>sample2</name></name> <operator>=</operator> <name>s_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_1</name> <operator>=</operator> <name><name>right</name><operator>-&gt;</operator><name>sample1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_2</name> <operator>=</operator> <name><name>right</name><operator>-&gt;</operator><name>sample2</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">12</literal> <operator>-</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">5</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>xa_adpcm_table</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"unknown XA-ADPCM filter %d"</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f0</name> <operator>=</operator> <name><name>xa_adpcm_table</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>xa_adpcm_table</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">28</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">16</literal><operator>+</operator><name>i</name><operator>+</operator><name>j</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>d</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>t</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>s_1</name><operator>*</operator><name>f0</name> <operator>+</operator> <name>s_2</name><operator>*</operator><name>f1</name><operator>+</operator><literal type="number">32</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s_2</name> <operator>=</operator> <name>s_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_1</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>s_1</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>right</name><operator>-&gt;</operator><name>sample1</name></name> <operator>=</operator> <name>s_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>right</name><operator>-&gt;</operator><name>sample2</name></name> <operator>=</operator> <name>s_2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>sample1</name></name> <operator>=</operator> <name>s_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>sample2</name></name> <operator>=</operator> <name>s_2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>out0</name> <operator>+=</operator> <literal type="number">28</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>channels</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>+=</operator> <literal type="number">28</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>channels</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>adpcm_swf_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ADPCMDecodeContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k0</name></decl>, <decl><type ref="prev"/><name>signmask</name></decl>, <decl><type ref="prev"/><name>nb_bits</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>buf_size</name><operator>*</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>nb_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>table</name> <operator>=</operator> <name><name>swf_index_tables</name><index>[<expr><name>nb_bits</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k0</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>nb_bits</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>signmask</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>nb_bits</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">22</literal><operator>*</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>get_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>size</name> <operator>-</operator> <name>nb_bits</name><operator>*</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <literal type="number">4095</literal></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>nb_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><name><name>ff_adpcm_step_table</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vpdiff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>k0</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&amp;</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vpdiff</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>step</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>k</name></expr>)</condition>;</do>
<expr_stmt><expr><name>vpdiff</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&amp;</operator> <name>signmask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>-=</operator> <name>vpdiff</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>+=</operator> <name>vpdiff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>+=</operator> <name><name>table</name><index>[<expr><name>delta</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>signmask</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>adpcm_argo_expand_nibble</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nibble</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sample</name> <init>= <expr><name>nibble</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>control</name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name><name>cs</name><operator>-&gt;</operator><name>sample1</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name><name>cs</name><operator>-&gt;</operator><name>sample2</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sample</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>cs</name><operator>-&gt;</operator><name>sample1</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>sample</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>sample2</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>sample1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>sample1</name></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

<return>return <expr><name>sample</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>get_nb_samples</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>coded_samples</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>approx_nb_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ADPCMDecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_coded_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_size</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>coded_samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>approx_nb_samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_XAS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">76</literal> <operator>*</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">34</literal> <operator>*</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_ARGO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">17</literal> <operator>*</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_ADPCM_CT</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_APC</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_OKI</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_AICA</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_SSI</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_APM</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_ALP</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_MTF</name></expr>:</case>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name>buf_size</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>nb_samples</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nb_samples</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>header_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_4XM</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_AGM</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_DAT4</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_ISS</name></expr>:</case> <expr_stmt><expr><name>header_size</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>ch</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_AMV</name></expr>:</case> <expr_stmt><expr><name>header_size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_SMJPEG</name></expr>:</case> <expr_stmt><expr><name>header_size</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>ch</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>header_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <name>header_size</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</return></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA</name></expr>:</case>
<expr_stmt><expr><name>has_coded_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>coded_samples</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>coded_samples</name> <operator>-=</operator> <operator>*</operator><name>coded_samples</name> <operator>%</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>/</operator> <literal type="number">30</literal> <operator>*</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_EA_EACS</name></expr>:</case>
<expr_stmt><expr><name>has_coded_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>coded_samples</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>ch</name><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_MAXIS_XA</name></expr>:</case>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <name>ch</name><operator>)</operator> <operator>/</operator> <name>ch</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R1</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R2</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R3</name></expr>:</case>


<expr_stmt><expr><name>has_coded_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R1</name></expr>:</case>
<expr_stmt><expr><name>header_size</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>coded_samples</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R2</name></expr>:</case>
<expr_stmt><expr><name>header_size</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>coded_samples</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R3</name></expr>:</case>
<expr_stmt><expr><name>header_size</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>coded_samples</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>coded_samples</name> <operator>-=</operator> <operator>*</operator><name>coded_samples</name> <operator>%</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <name>header_size</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>-=</operator> <name>nb_samples</name> <operator>%</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>approx_nb_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_DK3</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>buf_size</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_DK4</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_RAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bsize</name> <init>= <expr><name><name>ff_adpcm_ima_block_sizes</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bsamples</name> <init>= <expr><name><name>ff_adpcm_ima_block_samples</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>bsize</name> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <name>bsamples</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <literal type="number">6</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MTAF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name>ch</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>samples_per_byte</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case> <expr_stmt><expr><name>samples_per_byte</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case> <expr_stmt><expr><name>samples_per_byte</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case> <expr_stmt><expr><name>samples_per_byte</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step_index</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_samples</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>+=</operator> <name>buf_size</name> <operator>*</operator> <name>samples_per_byte</name> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SWF</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buf_bits</name> <init>= <expr><name>buf_size</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nbits</name> <init>= <expr><operator>(</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_hdr_size</name> <init>= <expr><literal type="number">22</literal> <operator>*</operator> <name>ch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_size</name> <init>= <expr><name>block_hdr_size</name> <operator>+</operator> <name>nbits</name> <operator>*</operator> <name>ch</name> <operator>*</operator> <literal type="number">4095</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nblocks</name> <init>= <expr><name>buf_bits</name> <operator>/</operator> <name>block_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits_left</name> <init>= <expr><name>buf_bits</name> <operator>-</operator> <name>nblocks</name> <operator>*</operator> <name>block_size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name>nblocks</name> <operator>*</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits_left</name> <operator>&gt;=</operator> <name>block_hdr_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb_samples</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>bits_left</name> <operator>-</operator> <name>block_hdr_size</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>nbits</name> <operator>*</operator> <name>ch</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_THP</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_THP_LE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name>buf_size</name> <operator>*</operator> <literal type="number">14</literal> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>ch</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>has_coded_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>coded_samples</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_THP_LE</name><operator>)</operator></expr> ?</condition><then>
<expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">36</literal> <operator>*</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>/=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name>buf_size</name> <operator>/</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>%</operator> <literal type="number">8</literal> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb_samples</name> <operator>+=</operator> <operator>(</operator><name>buf_size</name> <operator>%</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>approx_nb_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_AFC</name></expr>:</case>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name>buf_size</name> <operator>/</operator> <operator>(</operator><literal type="number">9</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_XA</name></expr>:</case>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <operator>(</operator><name>buf_size</name> <operator>/</operator> <literal type="number">128</literal><operator>)</operator> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_DTK</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_PSX</name></expr>:</case>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name>buf_size</name> <operator>/</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name>ch</name><operator>)</operator> <operator>*</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_ZORK</name></expr>:</case>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name>buf_size</name> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>has_coded_samples</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>coded_samples</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>coded_samples</name> <operator>&gt;</operator> <name>nb_samples</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>nb_samples</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>adpcm_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ADPCMDecodeContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>channel</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>count1</name></decl>, <decl><type ref="prev"/><name>count2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name></decl>, <decl><type ref="prev"/><name>coded_samples</name></decl>, <decl><type ref="prev"/><name>approx_nb_samples</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <call><name>get_nb_samples</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coded_samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>approx_nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_samples</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid number of samples in packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>nb_samples</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>samples_p</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>coded_samples</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>approx_nb_samples</name> <operator>&amp;&amp;</operator> <name>coded_samples</name> <operator>!=</operator> <name>nb_samples</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"mismatch in coded sample count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>nb_samples</name> <operator>=</operator> <name>coded_samples</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>


<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>predictor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step_index</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>predictor</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>step_index</name> <operator>=</operator> <name>predictor</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>predictor</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x7F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name> <operator>==</operator> <name>step_index</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>predictor</name> <operator>-</operator> <name><name>cs</name><operator>-&gt;</operator><name>predictor</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0x7f</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>update</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<label><name>update</name>:</label>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <name>step_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>predictor</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name> <operator>&gt;</operator> <literal type="number">88u</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,
<argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>m</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>m</name></expr> ]</index></name> <operator>=</operator> <call><name>adpcm_ima_qt_expand_nibble</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>adpcm_ima_qt_expand_nibble</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name> <operator>&gt;</operator> <literal type="number">88u</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>samples_per_block</name> <init>= <expr><name><name>ff_adpcm_ima_block_samples</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_size</name> <init>= <expr><name><name>ff_adpcm_ima_block_sizes</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>temp</name><index>[<expr><literal type="number">20</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>g</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>nb_samples</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>samples_per_block</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>&amp;</operator><name><name>samples_p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>n</name> <operator>*</operator> <name>samples_per_block</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>block_size</name> <operator>*</operator> <name>n</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator>
<operator>(</operator><name>j</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>j</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>samples_per_block</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>adpcm_ima_wav_expand_nibble</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>nb_samples</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>&amp;</operator><name><name>samples_p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>n</name> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>m</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>m</name></expr> ]</index></name> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_4XM</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>&gt;</operator> <literal type="number">88u</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_AGM</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><name>nb_samples</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_agm_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_agm_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block_predictor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>block_predictor</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block_predictor</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: block_predictor[%d] = %d\n"</literal></expr></argument>,
<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>block_predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>coeff1</name> <operator>=</operator> <name><name>ff_adpcm_AdaptCoeff1</name><index>[<expr><name>block_predictor</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>coeff2</name> <operator>=</operator> <name><name>ff_adpcm_AdaptCoeff2</name><index>[<expr><name>block_predictor</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>idelta</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>nb_samples</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ms_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ms_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>block_predictor</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block_predictor</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: block_predictor[0] = %d\n"</literal></expr></argument>,
<argument><expr><name>block_predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeff1</name> <operator>=</operator> <name><name>ff_adpcm_AdaptCoeff1</name><index>[<expr><name>block_predictor</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeff2</name> <operator>=</operator> <name><name>ff_adpcm_AdaptCoeff2</name><index>[<expr><name>block_predictor</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_predictor</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block_predictor</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: block_predictor[1] = %d\n"</literal></expr></argument>,
<argument><expr><name>block_predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coeff1</name> <operator>=</operator> <name><name>ff_adpcm_AdaptCoeff1</name><index>[<expr><name>block_predictor</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coeff2</name> <operator>=</operator> <name><name>ff_adpcm_AdaptCoeff2</name><index>[<expr><name>block_predictor</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>idelta</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>idelta</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sample2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sample2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sample1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sample1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>nb_samples</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ms_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name></expr></argument>, <argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ms_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MTAF</name></expr>:</case>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr> ]</index></name><operator>.</operator><name>step</name> <operator>=</operator> <call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>=</operator> <call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr> ]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><name>n</name></expr> ]</index></name> <operator>=</operator> <call><name>adpcm_mtaf_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>adpcm_mtaf_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>samples_p</name><index>[<expr><name>channel</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr> ]</index></name> <operator>=</operator> <call><name>adpcm_mtaf_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples_p</name><index>[<expr><name>channel</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>adpcm_mtaf_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_DK4</name></expr>:</case>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name> <operator>&gt;</operator> <literal type="number">88u</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,
<argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>nb_samples</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_DK3</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nibble</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decode_top_nibble_next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_channel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples_end</name> <init>= <expr><name>samples</name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>nb_samples</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>&gt;</operator> <literal type="number">88u</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>&gt;</operator> <literal type="number">88u</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: step_index = %i/%i\n"</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step_index</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>diff_channel</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>predictor</name></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DK3_GET_NEXT_NIBBLE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (decode_top_nibble_next) { nibble = last_byte &gt;&gt; 4; decode_top_nibble_next = 0; } else { last_byte = bytestream2_get_byteu(&amp;gb); nibble = last_byte &amp; 0x0F; decode_top_nibble_next = 1; }</cpp:value></cpp:define>









<while>while <condition>(<expr><name>samples</name> <operator>&lt;</operator> <name>samples_end</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>DK3_GET_NEXT_NIBBLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nibble</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DK3_GET_NEXT_NIBBLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nibble</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>diff_channel</name> <operator>=</operator> <operator>(</operator><name>diff_channel</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>predictor</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>predictor</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>predictor</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DK3_GET_NEXT_NIBBLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nibble</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>diff_channel</name> <operator>=</operator> <operator>(</operator><name>diff_channel</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>predictor</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>predictor</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>predictor</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_ISS</name></expr>:</case>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name> <operator>&gt;</operator> <literal type="number">88u</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,
<argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_DAT4</name></expr>:</case>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_APC</name></expr>:</case>
<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_SSI</name></expr>:</case>
<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_qt_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_qt_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_APM</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_qt_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>st</name></expr>]</index></name> <operator>=</operator> <call><name>adpcm_ima_qt_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_ALP</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_alp_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>st</name></expr>]</index></name> <operator>=</operator> <call><name>adpcm_ima_alp_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_OKI</name></expr>:</case>
<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_oki_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_oki_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_RAD</name></expr>:</case>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name> <operator>&gt;</operator> <literal type="number">88u</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,
<argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>byte</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>byte</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>byte</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>vqa_version</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>smp</name> <init>= <expr><name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>smp</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>smp</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>st</name></expr>]</index></name> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_XA</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out0</name> <init>= <expr><name><name>samples_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out1</name> <init>= <expr><name><name>samples_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples_per_block</name> <init>= <expr><literal type="number">28</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_remaining</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>xa_decode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>sample_offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_offset</name> <operator>+=</operator> <name>samples_per_block</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>bytes_remaining</name> <operator>=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>bytes_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_EA_EACS</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>st</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <call><name>bytestream2_get_le32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>&gt;</operator> <literal type="number">88u</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>st</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>bytestream2_get_le32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>previous_left_sample</name></decl>, <decl><type ref="prev"/><name>previous_right_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_left_sample</name></decl>, <decl><type ref="prev"/><name>current_right_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_left_sample</name></decl>, <decl><type ref="prev"/><name>next_right_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coeff1l</name></decl>, <decl><type ref="prev"/><name>coeff2l</name></decl>, <decl><type ref="prev"/><name>coeff1r</name></decl>, <decl><type ref="prev"/><name>coeff2r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift_left</name></decl>, <decl><type ref="prev"/><name>shift_right</name></decl>;</decl_stmt>




<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_left_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>previous_left_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_right_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>previous_right_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>count1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count1</name> <operator>&lt;</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">28</literal></expr>;</condition> <incr><expr><name>count1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>coeff1l</name> <operator>=</operator> <name><name>ea_adpcm_table</name><index>[ <expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff2l</name> <operator>=</operator> <name><name>ea_adpcm_table</name><index>[<expr><operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff1r</name> <operator>=</operator> <name><name>ea_adpcm_table</name><index>[ <expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff2r</name> <operator>=</operator> <name><name>ea_adpcm_table</name><index>[<expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shift_left</name> <operator>=</operator> <literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>shift_right</name> <operator>=</operator> <literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>count2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count2</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>;</condition> <incr><expr><name>count2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_left_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift_left</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>next_right_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift_right</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>next_left_sample</name> <operator>=</operator> <operator>(</operator><name>next_left_sample</name> <operator>+</operator>
<operator>(</operator><name>current_left_sample</name> <operator>*</operator> <name>coeff1l</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>previous_left_sample</name> <operator>*</operator> <name>coeff2l</name><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>next_right_sample</name> <operator>=</operator> <operator>(</operator><name>next_right_sample</name> <operator>+</operator>
<operator>(</operator><name>current_right_sample</name> <operator>*</operator> <name>coeff1r</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>previous_right_sample</name> <operator>*</operator> <name>coeff2r</name><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>previous_left_sample</name> <operator>=</operator> <name>current_left_sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_left_sample</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>next_left_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>previous_right_sample</name> <operator>=</operator> <name>current_right_sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_right_sample</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>next_right_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name>current_left_sample</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name>current_right_sample</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_MAXIS_XA</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>shift</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coeff</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ea_adpcm_table</name><index>[<expr><operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>shift</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>=</operator> <literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>count1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count1</name> <operator>&lt;</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>count1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>byte</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>-=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content> 
<for>for<control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sample</name> <init>= <expr><call><name>sign_extend</name><argument_list>(<argument><expr><name><name>byte</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>shift</name><index>[<expr><name>channel</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sample</name> <operator>=</operator> <operator>(</operator><name>sample</name> <operator>+</operator>
<name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>*</operator> <name><name>coeff</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>*</operator> <name><name>coeff</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R1</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R2</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R3</name></expr>:</case> <block>{<block_content>




<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>big_endian</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_EA_R3</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>previous_sample</name></decl>, <decl><type ref="prev"/><name>current_sample</name></decl>, <decl><type ref="prev"/><name>next_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coeff1</name></decl>, <decl><type ref="prev"/><name>coeff2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>samplesC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>offsets</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>channel</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name><operator>&lt;</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>big_endian</name></expr> ?</condition><then> <expr><call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>channel</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name><operator>&lt;</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>offsets</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>samplesC</name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_EA_R1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>previous_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>current_sample</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>predictor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>previous_sample</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>prev_sample</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>count1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count1</name> <operator>&lt;</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">28</literal></expr>;</condition> <incr><expr><name>count1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>==</operator> <literal type="number">0xEE</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>current_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>previous_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>count2</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>count2</name><operator>&lt;</operator><literal type="number">28</literal></expr>;</condition> <incr><expr><name>count2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>samplesC</name><operator>++</operator> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>coeff1</name> <operator>=</operator> <name><name>ea_adpcm_table</name><index>[ <expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff2</name> <operator>=</operator> <name><name>ea_adpcm_table</name><index>[<expr><operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>count2</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>count2</name><operator>&lt;</operator><literal type="number">28</literal></expr>;</condition> <incr><expr><name>count2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>count2</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_sample</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_sample</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>next_sample</name> <operator>+=</operator> <operator>(</operator><name>current_sample</name> <operator>*</operator> <name>coeff1</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>previous_sample</name> <operator>*</operator> <name>coeff2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>next_sample</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>next_sample</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>previous_sample</name> <operator>=</operator> <name>current_sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_sample</name> <operator>=</operator> <name>next_sample</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samplesC</name><operator>++</operator> <operator>=</operator> <name>current_sample</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count1</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>count</name> <operator>!=</operator> <name>count1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"per-channel sample count mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>count1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_ADPCM_EA_R1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <name>current_sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>prev_sample</name> <operator>=</operator> <name>previous_sample</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>count</name> <operator>*</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_XAS</name></expr>:</case>
<for>for <control>(<init><expr><name>channel</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name><operator>&lt;</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>shift</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>ea_adpcm_table</name><index>[<expr><operator>(</operator><name>val</name><operator>&amp;</operator><literal type="number">0x0F</literal><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x0F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shift</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>m</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>m</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>m</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>&amp;</operator><name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>shift</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>level</name> <operator>+</operator> <name>pred</name> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>shift</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name>level</name> <operator>+</operator> <name>pred</name> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_AMV</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>&gt;</operator> <literal type="number">88u</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: step_index = %i\n"</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_SMJPEG</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>&gt;</operator> <literal type="number">88u</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: step_index = %i\n"</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_qt_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_qt_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_CT</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ct_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ct_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <literal type="number">128</literal> <operator>*</operator> <operator>(</operator><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <literal type="number">128</literal> <operator>*</operator> <operator>(</operator><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_samples</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_SBPRO_4</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_sbpro_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_sbpro_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>,
<argument><expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_SBPRO_3</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>nb_samples</name><operator>&lt;&lt;</operator><name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_sbpro_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument> , <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_sbpro_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_sbpro_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_sbpro_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_sbpro_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_sbpro_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_sbpro_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>,
<argument><expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SWF</name></expr>:</case>
<expr_stmt><expr><call><name>adpcm_swf_decode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>st</name><operator>)</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_yamaha_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_yamaha_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_AICA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>has_status</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>step</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_yamaha_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_yamaha_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_AFC</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>samples_per_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocks</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>samples_per_block</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>=</operator> <name>nb_samples</name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>samples_per_block</name> <operator>=</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>blocks</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev1</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev2</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample2</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>+</operator> <name>m</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples_per_block</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>factor1</name> <init>= <expr><name><name>ff_adpcm_afc_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>factor2</name> <init>= <expr><name><name>ff_adpcm_afc_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sampledat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sampledat</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sampledat</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sampledat</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>prev1</name> <operator>*</operator> <name>factor1</name> <operator>+</operator> <name>prev2</name> <operator>*</operator> <name>factor2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>+</operator>
<name>sampledat</name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>sampledat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev2</name> <operator>=</operator> <name>prev1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev1</name> <operator>=</operator> <operator>*</operator><name>samples</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>=</operator> <name>prev1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>=</operator> <name>prev2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_THP</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_THP_LE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>table</name><index>[<expr><literal type="number">14</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THP_GET16</name><parameter_list>(<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sign_extend( avctx-&gt;codec-&gt;id == AV_CODEC_ID_ADPCM_THP_LE ? bytestream2_get_le16u(&amp;(g)) : bytestream2_get_be16u(&amp;(g)), 16)</cpp:value></cpp:define>





<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>tb</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing coeff table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>THP_GET16</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>THP_GET16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>has_status</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>=</operator> <call><name>THP_GET16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>=</operator> <call><name>THP_GET16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>nb_samples</name> <operator>+</operator> <literal type="number">13</literal><operator>)</operator> <operator>/</operator> <literal type="number">14</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>exp</name> <init>= <expr><name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>factor1</name> <init>= <expr><name><name>table</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>index</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>factor2</name> <init>= <expr><name><name>table</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>index</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">14</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">14</literal> <operator>+</operator> <name>n</name> <operator>&lt;</operator> <name>nb_samples</name><operator>)</operator></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sampledat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sampledat</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sampledat</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sampledat</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>*</operator> <name>factor1</name>
<operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>*</operator> <name>factor2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>+</operator> <name>sampledat</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>exp</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>sampledat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>sample1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>=</operator> <operator>*</operator><name>samples</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_DTK</name></expr>:</case>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">28</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name></decl>, <decl><type ref="prev"/><name>header</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>channel</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>-</operator> <name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sampledat</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>header</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>*</operator> <literal type="number">0x3c</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>*</operator> <literal type="number">0x73</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>*</operator> <literal type="number">0x34</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>*</operator> <literal type="number">0x62</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>*</operator> <literal type="number">0x37</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><operator>(</operator><name>prev</name> <operator>+</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channel</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sampledat</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sampledat</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>sampledat</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sampledat</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>header</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>sampledat</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>=</operator> <name>sampledat</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channel</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_PSX</name></expr>:</case>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">28</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>filter</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>flag</name></decl>, <decl><type ref="prev"/><name>byte</name></decl>;</decl_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>filter</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <name>filter</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>xa_adpcm_table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&lt;</operator> <literal type="number">0x07</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>byte</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sample</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>scale</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>*</operator> <name><name>xa_adpcm_table</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>*</operator> <name><name>xa_adpcm_table</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample2</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_ARGO</name></expr>:</case>

















<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>control</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>channel</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>status</name></name> <operator>+</operator> <name>channel</name></expr>;</expr_stmt>


<expr_stmt><expr><name>control</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>control</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sample</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_argo_expand_nibble</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><call><name>sign_extend</name><argument_list>(<argument><expr><name>sample</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>control</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_argo_expand_nibble</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><call><name>sign_extend</name><argument_list>(<argument><expr><name>sample</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>control</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_ZORK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>has_status</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_zork_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>n</name> <operator>%</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_MTF</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>nb_samples</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <call><name>adpcm_ima_mtf_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>st</name></expr>]</index></name> <operator>=</operator> <call><name>adpcm_ima_mtf_expand_nibble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Nothing consumed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overread of %d &lt; %d\n"</literal></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>adpcm_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ADPCMDecodeContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts_s16</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts_s16p</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_S16P</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts_both</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_S16P</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADPCM_DECODER</name><parameter_list>(<parameter><type><name>id_</name></type></parameter>, <parameter><type><name>sample_fmts_</name></type></parameter>, <parameter><type><name>name_</name></type></parameter>, <parameter><type><name>long_name_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AVCodec ff_ ##name_ ##_decoder = { .name = #name_, .long_name = NULL_IF_CONFIG_SMALL(long_name_), .type = AVMEDIA_TYPE_AUDIO, .id = id_, .priv_data_size = sizeof(ADPCMDecodeContext), .init = adpcm_decode_init, .decode = adpcm_decode_frame, .flush = adpcm_flush, .capabilities = AV_CODEC_CAP_DR1, .sample_fmts = sample_fmts_, }</cpp:value></cpp:define>














<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_4XM</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_4xm</name></expr></argument>, <argument><expr><literal type="string">"ADPCM 4X Movie"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_AFC</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_afc</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Nintendo Gamecube AFC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_AGM</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_agm</name></expr></argument>, <argument><expr><literal type="string">"ADPCM AmuseGraphics Movie"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_AICA</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_aica</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Yamaha AICA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_ARGO</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_argo</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Argonaut Games"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_CT</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ct</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Creative Technology"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_DTK</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_dtk</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Nintendo Gamecube DTK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_EA</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ea</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Electronic Arts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_EA_MAXIS_XA</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ea_maxis_xa</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Electronic Arts Maxis CDROM XA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_EA_R1</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_ea_r1</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Electronic Arts R1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_EA_R2</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_ea_r2</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Electronic Arts R2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_EA_R3</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_ea_r3</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Electronic Arts R3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_EA_XAS</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_ea_xas</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Electronic Arts XAS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_AMV</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_amv</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA AMV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_APC</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_apc</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA CRYO APC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_APM</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_apm</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Ubisoft APM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_DAT4</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_dat4</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Eurocom DAT4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_DK3</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_dk3</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Duck DK3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_DK4</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_dk4</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Duck DK4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_EA_EACS</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_ea_eacs</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Electronic Arts EACS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_ea_sead</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Electronic Arts SEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_ISS</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_iss</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Funcom ISS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_MTF</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_mtf</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Capcom's MT Framework"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_OKI</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_oki</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Dialogic OKI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_ima_qt</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA QuickTime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_RAD</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_rad</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Radical"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_SSI</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_ssi</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Simon &amp; Schuster Interactive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_SMJPEG</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_smjpeg</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Loki SDL MJPEG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_ALP</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_ima_alp</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA High Voltage Software ALP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_ima_wav</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA WAV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_WS</name></expr></argument>, <argument><expr><name>sample_fmts_both</name></expr></argument>, <argument><expr><name>adpcm_ima_ws</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA Westwood"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_MS</name></expr></argument>, <argument><expr><name>sample_fmts_both</name></expr></argument>, <argument><expr><name>adpcm_ms</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Microsoft"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_MTAF</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_mtaf</name></expr></argument>, <argument><expr><literal type="string">"ADPCM MTAF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_PSX</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_psx</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Playstation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_SBPRO_2</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_sbpro_2</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Sound Blaster Pro 2-bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_SBPRO_3</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_sbpro_3</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Sound Blaster Pro 2.6-bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_SBPRO_4</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_sbpro_4</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Sound Blaster Pro 4-bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_SWF</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_swf</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Shockwave Flash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_THP_LE</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_thp_le</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Nintendo THP (little-endian)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_THP</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_thp</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Nintendo THP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_XA</name></expr></argument>, <argument><expr><name>sample_fmts_s16p</name></expr></argument>, <argument><expr><name>adpcm_xa</name></expr></argument>, <argument><expr><literal type="string">"ADPCM CDROM XA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_YAMAHA</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_yamaha</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Yamaha"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_ZORK</name></expr></argument>, <argument><expr><name>sample_fmts_s16</name></expr></argument>, <argument><expr><name>adpcm_zork</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Zork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
