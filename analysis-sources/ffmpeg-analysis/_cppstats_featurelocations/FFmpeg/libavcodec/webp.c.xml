<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\webp.c">









































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp8.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8X_FLAG_ANIMATION</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8X_FLAG_XMP_METADATA</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8X_FLAG_EXIF_METADATA</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8X_FLAG_ALPHA</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8X_FLAG_ICC</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PALETTE_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CACHE_BITS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CODE_LENGTH_CODES</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUFFMAN_CODES_PER_META_CODE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_LITERAL_CODES</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_LENGTH_CODES</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_DISTANCE_CODES</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SHORT_DISTANCES</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HUFFMAN_CODE_LENGTH</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>alphabet_sizes</name><index>[<expr><name>HUFFMAN_CODES_PER_META_CODE</name></expr>]</index></name> <init>= <expr><block>{
<expr><name>NUM_LITERAL_CODES</name> <operator>+</operator> <name>NUM_LENGTH_CODES</name></expr>,
<expr><name>NUM_LITERAL_CODES</name></expr>, <expr><name>NUM_LITERAL_CODES</name></expr>, <expr><name>NUM_LITERAL_CODES</name></expr>,
<expr><name>NUM_DISTANCE_CODES</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>code_length_code_order</name><index>[<expr><name>NUM_CODE_LENGTH_CODES</name></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>lz77_distance_offsets</name><index>[<expr><name>NUM_SHORT_DISTANCES</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>AlphaCompression</name> <block>{
<decl><name>ALPHA_COMPRESSION_NONE</name></decl>,
<decl><name>ALPHA_COMPRESSION_VP8L</name></decl>,
}</block>;</enum>

<enum>enum <name>AlphaFilter</name> <block>{
<decl><name>ALPHA_FILTER_NONE</name></decl>,
<decl><name>ALPHA_FILTER_HORIZONTAL</name></decl>,
<decl><name>ALPHA_FILTER_VERTICAL</name></decl>,
<decl><name>ALPHA_FILTER_GRADIENT</name></decl>,
}</block>;</enum>

<enum>enum <name>TransformType</name> <block>{
<decl><name>PREDICTOR_TRANSFORM</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>COLOR_TRANSFORM</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>SUBTRACT_GREEN</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>COLOR_INDEXING_TRANSFORM</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>PredictionMode</name> <block>{
<decl><name>PRED_MODE_BLACK</name></decl>,
<decl><name>PRED_MODE_L</name></decl>,
<decl><name>PRED_MODE_T</name></decl>,
<decl><name>PRED_MODE_TR</name></decl>,
<decl><name>PRED_MODE_TL</name></decl>,
<decl><name>PRED_MODE_AVG_T_AVG_L_TR</name></decl>,
<decl><name>PRED_MODE_AVG_L_TL</name></decl>,
<decl><name>PRED_MODE_AVG_L_T</name></decl>,
<decl><name>PRED_MODE_AVG_TL_T</name></decl>,
<decl><name>PRED_MODE_AVG_T_TR</name></decl>,
<decl><name>PRED_MODE_AVG_AVG_L_TL_AVG_T_TR</name></decl>,
<decl><name>PRED_MODE_SELECT</name></decl>,
<decl><name>PRED_MODE_ADD_SUBTRACT_FULL</name></decl>,
<decl><name>PRED_MODE_ADD_SUBTRACT_HALF</name></decl>,
}</block>;</enum>

<enum>enum <name>HuffmanIndex</name> <block>{
<decl><name>HUFF_IDX_GREEN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>HUFF_IDX_RED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>HUFF_IDX_BLUE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>HUFF_IDX_ALPHA</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>HUFF_IDX_DIST</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block>;</enum>







<enum>enum <name>ImageRole</name> <block>{

<decl><name>IMAGE_ROLE_ARGB</name></decl>,



<decl><name>IMAGE_ROLE_ENTROPY</name></decl>,



<decl><name>IMAGE_ROLE_PREDICTOR</name></decl>,



<decl><name>IMAGE_ROLE_COLOR_TRANSFORM</name></decl>,


<decl><name>IMAGE_ROLE_COLOR_INDEXING</name></decl>,

<decl><name>IMAGE_ROLE_NB</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>HuffReader</name> <block>{
<decl_stmt><decl><type><name>VLC</name></type> <name>vlc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>simple</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_symbols</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>simple_symbols</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>HuffReader</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ImageContext</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>ImageRole</name></name></type> <name>role</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>color_cache_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>color_cache</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_huffman_groups</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HuffReader</name> <modifier>*</modifier></type><name>huffman_groups</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>size_reduction</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_alpha_primary</name></decl>;</decl_stmt>
}</block></struct></type> <name>ImageContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>WebPContext</name> <block>{
<decl_stmt><decl><type><name>VP8Context</name></type> <name>v</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>alpha_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>initialized</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>has_alpha</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>AlphaCompression</name></name></type> <name>alpha_compression</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>AlphaFilter</name></name></type> <name>alpha_filter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>alpha_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>alpha_data_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>has_exif</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>has_iccp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>lossless</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_transforms</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>TransformType</name></name></type> <name><name>transforms</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>reduced_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_huffman_groups</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ImageContext</name></type> <name><name>image</name><index>[<expr><name>IMAGE_ROLE_NB</name></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>WebPContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PIXEL</name><parameter_list>(<parameter><type><name>frame</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((frame)-&gt;data[0] + (y) * frame-&gt;linesize[0] + 4 * (x))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PIXEL_COMP</name><parameter_list>(<parameter><type><name>frame</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((frame)-&gt;data[0] + (y) * frame-&gt;linesize[0] + 4 * (x) + c))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>image_ctx_free</name><parameter_list>(<parameter><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>img</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>color_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>role</name></name> <operator>!=</operator> <name>IMAGE_ROLE_ARGB</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>img</name><operator>-&gt;</operator><name>is_alpha_primary</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>huffman_groups</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>nb_huffman_groups</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>HUFFMAN_CODES_PER_META_CODE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img</name><operator>-&gt;</operator><name>huffman_groups</name><index>[<expr><name>i</name> <operator>*</operator> <name>HUFFMAN_CODES_PER_META_CODE</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>.</operator><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>huffman_groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>img</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>webp_get_vlc</name><argument_list>(<argument><expr><name>GetBitContext</name> <operator>*</operator><name>gb</name></expr></argument>, <argument><expr><call><name>VLC_TYPE</name> <argument_list>(<argument><expr><operator>*</operator><name>table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nb_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_bits</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name><name>ff_reverse</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>nb_bits</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>huff_reader_get_symbol</name><parameter_list>(<parameter><decl><type><name>HuffReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>simple</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>nb_symbols</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>simple_symbols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>simple_symbols</name><index>[<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>webp_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>huff_reader_build_canonical</name><parameter_list>(<parameter><decl><type><name>HuffReader</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>code_lengths</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alphabet_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sym</name></decl>, <decl><type ref="prev"/><name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_code_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>codes</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>sym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sym</name> <operator>&lt;</operator> <name>alphabet_size</name></expr>;</condition> <incr><expr><name>sym</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>code_lengths</name><index>[<expr><name>sym</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>nb_symbols</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>simple_symbols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>simple</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>sym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sym</name> <operator>&lt;</operator> <name>alphabet_size</name></expr>;</condition> <incr><expr><name>sym</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_code_length</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_code_length</name></expr></argument>, <argument><expr><name><name>code_lengths</name><index>[<expr><name>sym</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>max_code_length</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>max_code_length</name> <operator>&gt;</operator> <name>MAX_HUFFMAN_CODE_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>codes</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>alphabet_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>codes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>nb_symbols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;=</operator> <name>max_code_length</name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>sym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sym</name> <operator>&lt;</operator> <name>alphabet_size</name></expr>;</condition> <incr><expr><name>sym</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>code_lengths</name><index>[<expr><name>sym</name></expr>]</index></name> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>codes</name><index>[<expr><name>sym</name></expr>]</index></name> <operator>=</operator> <name>code</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>nb_symbols</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>code</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>nb_symbols</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>alphabet_size</name></expr></argument>,
<argument><expr><name>code_lengths</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>code_lengths</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>code_lengths</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>codes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>codes</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>codes</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>simple</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_huffman_code_simple</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>HuffReader</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>nb_symbols</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>simple_symbols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>simple_symbols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hc</name><operator>-&gt;</operator><name>nb_symbols</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>simple_symbols</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>simple</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_huffman_code_normal</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>HuffReader</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alphabet_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HuffReader</name></type> <name>code_len_hc</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>code_lengths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>code_length_code_lengths</name><index>[<expr><name>NUM_CODE_LENGTH_CODES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>symbol</name></decl>, <decl><type ref="prev"/><name>max_symbol</name></decl>, <decl><type ref="prev"/><name>prev_code_len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_codes</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_codes</name> <operator>&gt;</operator> <name>NUM_CODE_LENGTH_CODES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_codes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>code_length_code_lengths</name><index>[<expr><name><name>code_length_code_order</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>huff_reader_build_canonical</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code_len_hc</name></expr></argument>, <argument><expr><name>code_length_code_lengths</name></expr></argument>,
<argument><expr><name>NUM_CODE_LENGTH_CODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code_lengths</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>alphabet_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>code_lengths</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>code_lengths</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>max_symbol</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max_symbol</name> <operator>&gt;</operator> <name>alphabet_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"max symbol %d &gt; alphabet size %d\n"</literal></expr></argument>,
<argument><expr><name>max_symbol</name></expr></argument>, <argument><expr><name>alphabet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>max_symbol</name> <operator>=</operator> <name>alphabet_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev_code_len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>symbol</name> <operator>&lt;</operator> <name>alphabet_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>max_symbol</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>code_len</name> <operator>=</operator> <call><name>huff_reader_get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code_len_hc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code_len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>code_lengths</name><index>[<expr><name>symbol</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>code_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_code_len</name> <operator>=</operator> <name>code_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>repeat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>code_len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">16</literal></expr>:</case>



<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>prev_code_len</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">17</literal></expr>:</case>


<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case>


<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">11</literal> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>+</operator> <name>repeat</name> <operator>&gt;</operator> <name>alphabet_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"invalid symbol %d + repeat %d &gt; alphabet size %d\n"</literal></expr></argument>,
<argument><expr><name>symbol</name></expr></argument>, <argument><expr><name>repeat</name></expr></argument>, <argument><expr><name>alphabet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>repeat</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>code_lengths</name><index>[<expr><name>symbol</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>huff_reader_build_canonical</name><argument_list>(<argument><expr><name>hc</name></expr></argument>, <argument><expr><name>code_lengths</name></expr></argument>, <argument><expr><name>alphabet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>code_len_hc</name><operator>.</operator><name>vlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>code_lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>decode_entropy_coded_image</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ImageRole</name></name></type> <name>role</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_BLOCK_SIZE</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { block_bits = get_bits(&amp;s-&gt;gb, 3) + 2; blocks_w = FFALIGN((w), 1 &lt;&lt; block_bits) &gt;&gt; block_bits; blocks_h = FFALIGN((h), 1 &lt;&lt; block_bits) &gt;&gt; block_bits; } while (0)</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_entropy_image</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>block_bits</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>blocks_w</name></decl>, <decl><type ref="prev"/><name>blocks_h</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reduced_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>reduced_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PARSE_BLOCK_SIZE</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_entropy_coded_image</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>IMAGE_ROLE_ENTROPY</name></expr></argument>, <argument><expr><name>blocks_w</name></expr></argument>, <argument><expr><name>blocks_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_ENTROPY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>size_reduction</name></name> <operator>=</operator> <name>block_bits</name></expr>;</expr_stmt>



<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p0</name> <init>= <expr><call><name>GET_PIXEL_COMP</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p1</name> <init>= <expr><call><name>GET_PIXEL_COMP</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>p0</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>p1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_huffman_groups</name></name> <operator>=</operator> <name>max</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_transform_predictor</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block_bits</name></decl>, <decl><type ref="prev"/><name>blocks_w</name></decl>, <decl><type ref="prev"/><name>blocks_h</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PARSE_BLOCK_SIZE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_entropy_coded_image</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>IMAGE_ROLE_PREDICTOR</name></expr></argument>, <argument><expr><name>blocks_w</name></expr></argument>,
<argument><expr><name>blocks_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_PREDICTOR</name></expr>]</index></name><operator>.</operator><name>size_reduction</name> <operator>=</operator> <name>block_bits</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_transform_color</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block_bits</name></decl>, <decl><type ref="prev"/><name>blocks_w</name></decl>, <decl><type ref="prev"/><name>blocks_h</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PARSE_BLOCK_SIZE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_entropy_coded_image</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>IMAGE_ROLE_COLOR_TRANSFORM</name></expr></argument>, <argument><expr><name>blocks_w</name></expr></argument>,
<argument><expr><name>blocks_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_COLOR_TRANSFORM</name></expr>]</index></name><operator>.</operator><name>size_reduction</name> <operator>=</operator> <name>block_bits</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_transform_color_indexing</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width_bits</name></decl>, <decl><type ref="prev"/><name>index_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ct</name></decl>;</decl_stmt>

<expr_stmt><expr><name>index_size</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index_size</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width_bits</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>index_size</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width_bits</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>index_size</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width_bits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>width_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_entropy_coded_image</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>IMAGE_ROLE_COLOR_INDEXING</name></expr></argument>,
<argument><expr><name>index_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_COLOR_INDEXING</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>size_reduction</name></name> <operator>=</operator> <name>width_bits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width_bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reduced_width</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>width_bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>width_bits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ct</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>ct</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>ct</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HuffReader</name> <modifier>*</modifier></type><name>get_huffman_group</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>img</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>gimg</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_ENTROPY</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>group</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gimg</name><operator>-&gt;</operator><name>size_reduction</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>group_x</name> <init>= <expr><name>x</name> <operator>&gt;&gt;</operator> <name><name>gimg</name><operator>-&gt;</operator><name>size_reduction</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>group_y</name> <init>= <expr><name>y</name> <operator>&gt;&gt;</operator> <name><name>gimg</name><operator>-&gt;</operator><name>size_reduction</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g0</name> <init>= <expr><call><name>GET_PIXEL_COMP</name><argument_list>(<argument><expr><name><name>gimg</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>group_x</name></expr></argument>, <argument><expr><name>group_y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g1</name> <init>= <expr><call><name>GET_PIXEL_COMP</name><argument_list>(<argument><expr><name><name>gimg</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>group_x</name></expr></argument>, <argument><expr><name>group_y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>group</name> <operator>=</operator> <name>g0</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>g1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>img</name><operator>-&gt;</operator><name>huffman_groups</name><index>[<expr><name>group</name> <operator>*</operator> <name>HUFFMAN_CODES_PER_META_CODE</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>color_cache_put</name><parameter_list>(<parameter><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>img</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cache_idx</name> <init>= <expr><operator>(</operator><literal type="number">0x1E35A7BD</literal> <operator>*</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>color_cache</name><index>[<expr><name>cache_idx</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_entropy_coded_image</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ImageRole</name></name></type> <name>role</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HuffReader</name> <modifier>*</modifier></type><name>hg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>width</name></decl>;</decl_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>role</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <name>role</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_ARGB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <name>IMAGE_ROLE_ARGB</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>img</name><operator>-&gt;</operator><name>is_alpha_primary</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>pt</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name> <operator>&gt;</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid color cache bits: %d\n"</literal></expr></argument>,
<argument><expr><name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>color_cache</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>img</name><operator>-&gt;</operator><name>color_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>img</name><operator>-&gt;</operator><name>color_cache</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>nb_huffman_groups</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <name>IMAGE_ROLE_ARGB</name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_entropy_image</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>nb_huffman_groups</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_huffman_groups</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>huffman_groups</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>nb_huffman_groups</name></name> <operator>*</operator>
<name>HUFFMAN_CODES_PER_META_CODE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>img</name><operator>-&gt;</operator><name>huffman_groups</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>img</name><operator>-&gt;</operator><name>huffman_groups</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>nb_huffman_groups</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hg</name> <operator>=</operator> <operator>&amp;</operator><name><name>img</name><operator>-&gt;</operator><name>huffman_groups</name><index>[<expr><name>i</name> <operator>*</operator> <name>HUFFMAN_CODES_PER_META_CODE</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>HUFFMAN_CODES_PER_META_CODE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alphabet_size</name> <init>= <expr><name><name>alphabet_sizes</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>j</name> <operator>&amp;&amp;</operator> <name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alphabet_size</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>read_huffman_code_simple</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hg</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_huffman_code_normal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hg</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>alphabet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <name>IMAGE_ROLE_ARGB</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>reduced_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>reduced_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>y</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hg</name> <operator>=</operator> <call><name>get_huffman_group</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>huff_reader_get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hg</name><index>[<expr><name>HUFF_IDX_GREEN</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>NUM_LITERAL_CODES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>huff_reader_get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hg</name><index>[<expr><name>HUFF_IDX_RED</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>huff_reader_get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hg</name><index>[<expr><name>HUFF_IDX_BLUE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>huff_reader_get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hg</name><index>[<expr><name>HUFF_IDX_ALPHA</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>color_cache_put</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>NUM_LITERAL_CODES</name> <operator>+</operator> <name>NUM_LENGTH_CODES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prefix_code</name></decl>, <decl><type ref="prev"/><name>length</name></decl>, <decl><type ref="prev"/><name>distance</name></decl>, <decl><type ref="prev"/><name>ref_x</name></decl>, <decl><type ref="prev"/><name>ref_y</name></decl>;</decl_stmt>


<expr_stmt><expr><name>prefix_code</name> <operator>=</operator> <name>v</name> <operator>-</operator> <name>NUM_LITERAL_CODES</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prefix_code</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>prefix_code</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>extra_bits</name> <init>= <expr><operator>(</operator><name>prefix_code</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>prefix_code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>extra_bits</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>extra_bits</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>prefix_code</name> <operator>=</operator> <call><name>huff_reader_get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hg</name><index>[<expr><name>HUFF_IDX_DIST</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prefix_code</name> <operator>&gt;</operator> <literal type="number">39U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"distance prefix code too large: %d\n"</literal></expr></argument>, <argument><expr><name>prefix_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prefix_code</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>distance</name> <operator>=</operator> <name>prefix_code</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>extra_bits</name> <init>= <expr><name>prefix_code</name> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>prefix_code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>extra_bits</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>distance</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>extra_bits</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&lt;=</operator> <name>NUM_SHORT_DISTANCES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xi</name> <init>= <expr><name><name>lz77_distance_offsets</name><index>[<expr><name>distance</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yi</name> <init>= <expr><name><name>lz77_distance_offsets</name><index>[<expr><name>distance</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>distance</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>xi</name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>distance</name> <operator>-=</operator> <name>NUM_SHORT_DISTANCES</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ref_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&lt;=</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ref_x</name> <operator>-=</operator> <name>distance</name></expr>;</expr_stmt>
<expr_stmt><expr><name>distance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ref_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>distance</name> <operator>-=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>(<expr><name>distance</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ref_y</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>distance</name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ref_x</name> <operator>=</operator> <name>width</name> <operator>-</operator> <name>distance</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_y</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ref_x</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ref_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_y</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ref_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_ref</name> <init>= <expr><call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>ref_x</name></expr></argument>, <argument><expr><name>ref_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>color_cache_put</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_x</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ref_x</name> <operator>==</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ref_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ref_y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator> <name>ref_y</name> <operator>==</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cache_idx</name> <init>= <expr><name>v</name> <operator>-</operator> <operator>(</operator><name>NUM_LITERAL_CODES</name> <operator>+</operator> <name>NUM_LENGTH_CODES</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"color cache not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cache_idx</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>color_cache_bits</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"color cache index out-of-bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>color_cache</name><index>[<expr><name>cache_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_0</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0xFF000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_1</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_5</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>p_l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>p_l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>p_l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>p_t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>p_l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_6</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>p_l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_7</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>p_l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_tl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_tl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_tl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>p_tl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_9</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>p_t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_10</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p_t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p_t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p_t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p_t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p_tr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_11</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>p_t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator>
<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>p_t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator>
<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>p_t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator>
<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>p_t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_12</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p_t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>p_tl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint8_t</name></type> <name>clamp_add_subtract_half</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>a</name> <operator>+</operator> <name>b</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <operator>(</operator><name>d</name> <operator>-</operator> <name>c</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>inv_predict_13</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>clamp_add_subtract_half</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_tl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>clamp_add_subtract_half</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_tl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>clamp_add_subtract_half</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_tl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>clamp_add_subtract_half</name><argument_list>(<argument><expr><name><name>p_l</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_tl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>inv_predict_func</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_l</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_t</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>inv_predict_func</name></type> <name><name>inverse_predict</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>inv_predict_0</name></expr>, <expr><name>inv_predict_1</name></expr>, <expr><name>inv_predict_2</name></expr>, <expr><name>inv_predict_3</name></expr>,
<expr><name>inv_predict_4</name></expr>, <expr><name>inv_predict_5</name></expr>, <expr><name>inv_predict_6</name></expr>, <expr><name>inv_predict_7</name></expr>,
<expr><name>inv_predict_8</name></expr>, <expr><name>inv_predict_9</name></expr>, <expr><name>inv_predict_10</name></expr>, <expr><name>inv_predict_11</name></expr>,
<expr><name>inv_predict_12</name></expr>, <expr><name>inv_predict_13</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>inverse_prediction</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>PredictionMode</name></name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_tl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_tr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>dec</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_l</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_tl</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_t</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_tr</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_tr</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>inverse_predict</name><index>[<expr><name>m</name></expr>]</index></name><operator>(</operator><name>p</name><operator>,</operator> <name>p_l</name><operator>,</operator> <name>p_tl</name><operator>,</operator> <name>p_t</name><operator>,</operator> <name>p_tr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_predictor_transform</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>img</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_ARGB</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>pimg</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_PREDICTOR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><name>x</name> <operator>&gt;&gt;</operator> <name><name>pimg</name><operator>-&gt;</operator><name>size_reduction</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ty</name> <init>= <expr><name>y</name> <operator>&gt;&gt;</operator> <name><name>pimg</name><operator>-&gt;</operator><name>size_reduction</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>PredictionMode</name></name></type> <name>m</name> <init>= <expr><call><name>GET_PIXEL_COMP</name><argument_list>(<argument><expr><name><name>pimg</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>PRED_MODE_BLACK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>PRED_MODE_T</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>PRED_MODE_L</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"invalid predictor mode: %d\n"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>inverse_prediction</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint8_t</name></type> <name>color_transform_delta</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>color_pred</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ff_u8_to_s8</name><argument_list>(<argument><expr><name>color_pred</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ff_u8_to_s8</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_color_transform</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>img</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cimg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_ARGB</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cimg</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_COLOR_TRANSFORM</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cx</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <name><name>cimg</name><operator>-&gt;</operator><name>size_reduction</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <name><name>cimg</name><operator>-&gt;</operator><name>size_reduction</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>cimg</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>color_transform_delta</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <call><name>color_transform_delta</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>color_transform_delta</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_subtract_green_transform</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>img</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_ARGB</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_color_indexing_transform</name><parameter_list>(<parameter><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ImageContext</name> <modifier>*</modifier></type><name>pal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_ARGB</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pal</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_COLOR_INDEXING</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pal</name><operator>-&gt;</operator><name>size_reduction</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb_g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixel_bits</name> <init>= <expr><literal type="number">8</literal> <operator>&gt;&gt;</operator> <name><name>pal</name><operator>-&gt;</operator><name>size_reduction</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb_g</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb_g</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb_g</name></expr></argument>, <argument><expr><name>pixel_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pal</name><operator>-&gt;</operator><name>size_reduction</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb_g</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">300</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><name><name>pal</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <literal type="number">1024U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>palette</name></expr></argument>, <argument><expr><call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>pal</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>palette</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>pal</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pi</name> <init>= <expr><call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>pal</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_canvas_size</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name>w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Width mismatch. %d != %d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Height mismatch. %d != %d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_lossless_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_start</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_alpha_chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>used</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_alpha_chunk</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lossless</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_ARGB</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>data_start</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_alpha_chunk</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x2F</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid WebP Lossless signature\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_canvas_size</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid WebP Lossless version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_transforms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reduced_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>TransformType</name></name></type> <name>transform</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>transform</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Transform %d used more than once\n"</literal></expr></argument>,
<argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>free_and_return</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>used</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>transform</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transforms</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_transforms</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>transform</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>transform</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PREDICTOR_TRANSFORM</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_transform_predictor</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_TRANSFORM</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_transform_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_INDEXING_TRANSFORM</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_transform_color_indexing</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_and_return</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_ARGB</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_alpha_chunk</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>IMAGE_ROLE_ARGB</name></expr>]</index></name><operator>.</operator><name>is_alpha_primary</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_entropy_coded_image</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>IMAGE_ROLE_ARGB</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_and_return</name>;</goto></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_transforms</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>transforms</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PREDICTOR_TRANSFORM</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>apply_predictor_transform</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_TRANSFORM</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>apply_color_transform</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SUBTRACT_GREEN</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>apply_subtract_green_transform</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLOR_INDEXING_TRANSFORM</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>apply_color_indexing_transform</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_and_return</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>

<label><name>free_and_return</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IMAGE_ROLE_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>image_ctx_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>image</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>alpha_inverse_prediction</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AlphaFilter</name></name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ls</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name>dec</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>dec</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dec</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>dec</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>dec</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>ls</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr><operator>,</operator> <expr><name>dec</name> <operator>+=</operator> <name>ls</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dec</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>dec</name> <operator>-</operator> <name>ls</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>


<switch>switch <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALPHA_FILTER_HORIZONTAL</name></expr>:</case>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dec</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>ls</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>dec</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dec</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>dec</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>ALPHA_FILTER_VERTICAL</name></expr>:</case>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dec</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>ls</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>dec</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dec</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>dec</name> <operator>-</operator> <name>ls</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>ALPHA_FILTER_GRADIENT</name></expr>:</case>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dec</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>ls</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>dec</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>dec</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><operator>(</operator><name>dec</name> <operator>-</operator> <name>ls</name><operator>)</operator> <operator>-</operator> <operator>*</operator><operator>(</operator><name>dec</name> <operator>-</operator> <name>ls</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_lossy_decode_alpha</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_start</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha_compression</name></name> <operator>==</operator> <name>ALPHA_COMPRESSION_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>data_start</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>y</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha_compression</name></name> <operator>==</operator> <name>ALPHA_COMPRESSION_VP8L</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alpha_got_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vp8_lossless_decode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alpha_got_frame</name></expr></argument>,
<argument><expr><name>data_start</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>alpha_got_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>GET_PIXEL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>*</operator><name>ap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ap</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>alpha_inverse_prediction</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_lossy_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_start</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_vp8_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>actually_webp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_YUVA420P</name></expr> </then><else>: <expr><name>AV_PIX_FMT_YUV420P</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lossless</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported chunk size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp8_decode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>got_frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_canvas_size</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vp8_lossy_decode_alpha</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_data</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>webp_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>chunk_type</name></decl>, <decl><type ref="prev"/><name>chunk_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vp8x_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_exif</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_iccp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing RIFF tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>chunk_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing WEBP tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>chunk_str</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>chunk_size</name> <operator>+=</operator> <name>chunk_size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>chunk_size</name></expr>)</condition> <block>{<block_content>


<break>break;</break>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>chunk_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'8'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>got_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vp8_lossy_decode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>,
<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'8'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>got_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vp8_lossless_decode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>,
<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>chunk_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>properties</name></name> <operator>|=</operator> <name>FF_CODEC_PROPERTY_LOSSLESS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'8'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator> <operator>*</operator><name>got_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Canvas dimensions are already set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vp8x_flags</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>bytestream2_get_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>bytestream2_get_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alpha_header</name></decl>, <decl><type ref="prev"/><name>filter_m</name></decl>, <decl><type ref="prev"/><name>compression</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>vp8x_flags</name> <operator>&amp;</operator> <name>VP8X_FLAG_ALPHA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"ALPHA chunk present, but alpha bit not set in the "</literal>
<literal type="string">"VP8X header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid ALPHA chunk size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>alpha_header</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_data</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_data_size</name></name> <operator>=</operator> <name>chunk_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter_m</name> <operator>=</operator> <operator>(</operator><name>alpha_header</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>compression</name> <operator>=</operator> <name>alpha_header</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>&gt;</operator> <name>ALPHA_COMPRESSION_VP8L</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"skipping unsupported ALPHA chunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_compression</name></name> <operator>=</operator> <name>compression</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_filter</name></name> <operator>=</operator> <name>filter_m</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<break>break;</break>
</block_content>}</block>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>le</name></decl>, <decl><type ref="prev"/><name>ifd_offset</name></decl>, <decl><type ref="prev"/><name>exif_offset</name> <init>= <expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>exif_metadata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>exif_gb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_exif</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Ignoring extra EXIF chunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exif_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>vp8x_flags</name> <operator>&amp;</operator> <name>VP8X_FLAG_EXIF_METADATA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"EXIF chunk present, but Exif bit not set in the "</literal>
<literal type="string">"VP8X header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_exif</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exif_gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>exif_offset</name></expr></argument>,
<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>exif_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_tdecode_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exif_gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>le</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifd_offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid TIFF header "</literal>
<literal type="string">"in Exif data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exif_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exif_gb</name></expr></argument>, <argument><expr><name>ifd_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_exif_decode_ifd</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exif_gb</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>exif_metadata</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error decoding Exif data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exif_end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>AVFrame</name> <operator>*</operator><operator>)</operator> <name>data</name><operator>)</operator><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><name>exif_metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exif_end</name>:</label>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exif_metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_iccp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Ignoring extra ICCP chunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>vp8x_flags</name> <operator>&amp;</operator> <name>VP8X_FLAG_ICC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"ICCP chunk present, but ICC Profile bit not set in the "</literal>
<literal type="string">"VP8X header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_iccp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_frame_new_side_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_ICC_PROFILE</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>chunk_str</name></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"skipping unsupported chunk: %s\n"</literal></expr></argument>,
<argument><expr><name>chunk_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>chunk_str</name></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"skipping unknown chunk: %s\n"</literal></expr></argument>,
<argument><expr><name>chunk_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>got_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"image data not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>webp_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WebPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_vp8_decode_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_webp_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"webp"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"WebP image"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WEBP</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WebPContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>webp_decode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>webp_decode_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
