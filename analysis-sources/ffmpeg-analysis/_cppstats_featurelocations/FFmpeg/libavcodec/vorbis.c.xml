<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vorbis.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vorbis.h"</cpp:file></cpp:include>





<function><type><name>unsigned</name> <name>int</name></type> <name>ff_vorbis_nth_root</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>ret</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>ret</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>*=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block> while <condition>(<expr><name>j</name> <operator>&lt;=</operator> <name>x</name></expr>)</condition>;</do>

<return>return <expr><name>ret</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>ff_vorbis_len2vlc</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>codes</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>exit_at_level</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">404</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>&lt;</operator> <name>num</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bits</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>codes</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bits</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>exit_at_level</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>num</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>bits</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>exit_at_level</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>exit_at_level</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exit_at_level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>bits</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>exit_at_level</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>code</name> <operator>+</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>codes</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">33</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>exit_at_level</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vorbis_ready_floor1_list</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>vorbis_floor1_entry</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sort</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sort</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>values</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>high</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sort</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>list</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <name><name>list</name><index>[<expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>low</name></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>low</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name><name>list</name><index>[<expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>high</name></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>high</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>values</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>values</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name><name>list</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Duplicate value found in floor 1 X coordinates\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>list</name><index>[<expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sort</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;</operator> <name><name>list</name><index>[<expr><name><name>list</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sort</name></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sort</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sort</name> <operator>=</operator> <name><name>list</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sort</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sort</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>render_line_unrolled</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>,
<parameter><decl><type><name>intptr_t</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ady</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adx</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><operator>-</operator><name>adx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>x1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>x1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>++</operator><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>+=</operator> <name>ady</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>+=</operator> <name>ady</name> <operator>-</operator> <name>adx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>sy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ff_vorbis_floor1_inverse_db_table</name><index>[<expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>ff_vorbis_floor1_inverse_db_table</name><index>[<expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>+</operator> <name>ady</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>sy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>ff_vorbis_floor1_inverse_db_table</name><index>[<expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>render_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><name>y1</name> <operator>-</operator> <name>y0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>adx</name> <init>= <expr><name>x1</name> <operator>-</operator> <name>x0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ady</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><ternary><condition><expr><name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>x0</name></expr>]</index></name> <operator>=</operator> <name><name>ff_vorbis_floor1_inverse_db_table</name><index>[<expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ady</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;=</operator> <name>adx</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>render_line_unrolled</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ady</name></expr></argument>, <argument><expr><name>adx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><name>dy</name> <operator>/</operator> <name>adx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>x0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>y0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><operator>-</operator><name>adx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ady</name> <operator>-=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>adx</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>++</operator><name>x</name> <operator>&lt;</operator> <name>x1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>+=</operator> <name>ady</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>-=</operator> <name>adx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>sy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>ff_vorbis_floor1_inverse_db_table</name><index>[<expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vorbis_floor1_render_list</name><parameter_list>(<parameter><decl><type><name>vorbis_floor1_entry</name> <modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>values</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>y_list</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>multiplier</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lx</name></decl>, <decl><type ref="prev"/><name>ly</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ly</name> <operator>=</operator> <name><name>y_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>multiplier</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>values</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sort</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>flag</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><name><name>list</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y1</name> <init>= <expr><name><name>y_list</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>*</operator> <name>multiplier</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lx</name> <operator>&lt;</operator> <name>samples</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>render_line</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lx</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lx</name> <operator>&gt;=</operator> <name>samples</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>lx</name> <operator>&lt;</operator> <name>samples</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>render_line</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
