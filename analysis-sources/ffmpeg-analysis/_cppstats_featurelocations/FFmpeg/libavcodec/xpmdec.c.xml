<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\xpmdec.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_ELEMENT</name></cpp:macro> <cpp:value>' '</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ELEMENT</name></cpp:macro> <cpp:value>0xfe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_ELEMENTS</name></cpp:macro> <cpp:value>(MAX_ELEMENT - MIN_ELEMENT + 1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>XPMContext</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixels_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>XPMDecContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ColorEntry</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rgb_color</name></decl>;</decl_stmt> 
}</block></struct></type> <name>ColorEntry</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_table_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ColorEntry</name> <operator>*</operator><operator>)</operator><name>rhs</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ColorEntry</name></type> <name><name>color_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"AliceBlue"</literal></expr>, <expr><literal type="number">0xFFF0F8FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AntiqueWhite"</literal></expr>, <expr><literal type="number">0xFFFAEBD7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Aqua"</literal></expr>, <expr><literal type="number">0xFF00FFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Aquamarine"</literal></expr>, <expr><literal type="number">0xFF7FFFD4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Azure"</literal></expr>, <expr><literal type="number">0xFFF0FFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Beige"</literal></expr>, <expr><literal type="number">0xFFF5F5DC</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Bisque"</literal></expr>, <expr><literal type="number">0xFFFFE4C4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Black"</literal></expr>, <expr><literal type="number">0xFF000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BlanchedAlmond"</literal></expr>, <expr><literal type="number">0xFFFFEBCD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Blue"</literal></expr>, <expr><literal type="number">0xFF0000FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BlueViolet"</literal></expr>, <expr><literal type="number">0xFF8A2BE2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Brown"</literal></expr>, <expr><literal type="number">0xFFA52A2A</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"BurlyWood"</literal></expr>, <expr><literal type="number">0xFFDEB887</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CadetBlue"</literal></expr>, <expr><literal type="number">0xFF5F9EA0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Chartreuse"</literal></expr>, <expr><literal type="number">0xFF7FFF00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Chocolate"</literal></expr>, <expr><literal type="number">0xFFD2691E</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Coral"</literal></expr>, <expr><literal type="number">0xFFFF7F50</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CornflowerBlue"</literal></expr>, <expr><literal type="number">0xFF6495ED</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Cornsilk"</literal></expr>, <expr><literal type="number">0xFFFFF8DC</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Crimson"</literal></expr>, <expr><literal type="number">0xFFDC143C</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Cyan"</literal></expr>, <expr><literal type="number">0xFF00FFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkBlue"</literal></expr>, <expr><literal type="number">0xFF00008B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkCyan"</literal></expr>, <expr><literal type="number">0xFF008B8B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkGoldenRod"</literal></expr>, <expr><literal type="number">0xFFB8860B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkGray"</literal></expr>, <expr><literal type="number">0xFFA9A9A9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkGreen"</literal></expr>, <expr><literal type="number">0xFF006400</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkKhaki"</literal></expr>, <expr><literal type="number">0xFFBDB76B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkMagenta"</literal></expr>, <expr><literal type="number">0xFF8B008B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkOliveGreen"</literal></expr>, <expr><literal type="number">0xFF556B2F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Darkorange"</literal></expr>, <expr><literal type="number">0xFFFF8C00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkOrchid"</literal></expr>, <expr><literal type="number">0xFF9932CC</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkRed"</literal></expr>, <expr><literal type="number">0xFF8B0000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkSalmon"</literal></expr>, <expr><literal type="number">0xFFE9967A</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkSeaGreen"</literal></expr>, <expr><literal type="number">0xFF8FBC8F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkSlateBlue"</literal></expr>, <expr><literal type="number">0xFF483D8B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkSlateGray"</literal></expr>, <expr><literal type="number">0xFF2F4F4F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkTurquoise"</literal></expr>, <expr><literal type="number">0xFF00CED1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DarkViolet"</literal></expr>, <expr><literal type="number">0xFF9400D3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DeepPink"</literal></expr>, <expr><literal type="number">0xFFFF1493</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DeepSkyBlue"</literal></expr>, <expr><literal type="number">0xFF00BFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DimGray"</literal></expr>, <expr><literal type="number">0xFF696969</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DodgerBlue"</literal></expr>, <expr><literal type="number">0xFF1E90FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"FireBrick"</literal></expr>, <expr><literal type="number">0xFFB22222</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"FloralWhite"</literal></expr>, <expr><literal type="number">0xFFFFFAF0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ForestGreen"</literal></expr>, <expr><literal type="number">0xFF228B22</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Fuchsia"</literal></expr>, <expr><literal type="number">0xFFFF00FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Gainsboro"</literal></expr>, <expr><literal type="number">0xFFDCDCDC</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GhostWhite"</literal></expr>, <expr><literal type="number">0xFFF8F8FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Gold"</literal></expr>, <expr><literal type="number">0xFFFFD700</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GoldenRod"</literal></expr>, <expr><literal type="number">0xFFDAA520</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Gray"</literal></expr>, <expr><literal type="number">0xFFBEBEBE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Green"</literal></expr>, <expr><literal type="number">0xFF00FF00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GreenYellow"</literal></expr>, <expr><literal type="number">0xFFADFF2F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"HoneyDew"</literal></expr>, <expr><literal type="number">0xFFF0FFF0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"HotPink"</literal></expr>, <expr><literal type="number">0xFFFF69B4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"IndianRed"</literal></expr>, <expr><literal type="number">0xFFCD5C5C</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Indigo"</literal></expr>, <expr><literal type="number">0xFF4B0082</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Ivory"</literal></expr>, <expr><literal type="number">0xFFFFFFF0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Khaki"</literal></expr>, <expr><literal type="number">0xFFF0E68C</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Lavender"</literal></expr>, <expr><literal type="number">0xFFE6E6FA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LavenderBlush"</literal></expr>, <expr><literal type="number">0xFFFFF0F5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LawnGreen"</literal></expr>, <expr><literal type="number">0xFF7CFC00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LemonChiffon"</literal></expr>, <expr><literal type="number">0xFFFFFACD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightBlue"</literal></expr>, <expr><literal type="number">0xFFADD8E6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightCoral"</literal></expr>, <expr><literal type="number">0xFFF08080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightCyan"</literal></expr>, <expr><literal type="number">0xFFE0FFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightGoldenRodYellow"</literal></expr>, <expr><literal type="number">0xFFFAFAD2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightGreen"</literal></expr>, <expr><literal type="number">0xFF90EE90</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightGrey"</literal></expr>, <expr><literal type="number">0xFFD3D3D3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightPink"</literal></expr>, <expr><literal type="number">0xFFFFB6C1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightSalmon"</literal></expr>, <expr><literal type="number">0xFFFFA07A</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightSeaGreen"</literal></expr>, <expr><literal type="number">0xFF20B2AA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightSkyBlue"</literal></expr>, <expr><literal type="number">0xFF87CEFA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightSlateGray"</literal></expr>, <expr><literal type="number">0xFF778899</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightSteelBlue"</literal></expr>, <expr><literal type="number">0xFFB0C4DE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LightYellow"</literal></expr>, <expr><literal type="number">0xFFFFFFE0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Lime"</literal></expr>, <expr><literal type="number">0xFF00FF00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LimeGreen"</literal></expr>, <expr><literal type="number">0xFF32CD32</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Linen"</literal></expr>, <expr><literal type="number">0xFFFAF0E6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Magenta"</literal></expr>, <expr><literal type="number">0xFFFF00FF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Maroon"</literal></expr>, <expr><literal type="number">0xFFB03060</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumAquaMarine"</literal></expr>, <expr><literal type="number">0xFF66CDAA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumBlue"</literal></expr>, <expr><literal type="number">0xFF0000CD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumOrchid"</literal></expr>, <expr><literal type="number">0xFFBA55D3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumPurple"</literal></expr>, <expr><literal type="number">0xFF9370D8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumSeaGreen"</literal></expr>, <expr><literal type="number">0xFF3CB371</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumSlateBlue"</literal></expr>, <expr><literal type="number">0xFF7B68EE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumSpringGreen"</literal></expr>, <expr><literal type="number">0xFF00FA9A</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumTurquoise"</literal></expr>, <expr><literal type="number">0xFF48D1CC</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MediumVioletRed"</literal></expr>, <expr><literal type="number">0xFFC71585</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MidnightBlue"</literal></expr>, <expr><literal type="number">0xFF191970</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MintCream"</literal></expr>, <expr><literal type="number">0xFFF5FFFA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MistyRose"</literal></expr>, <expr><literal type="number">0xFFFFE4E1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Moccasin"</literal></expr>, <expr><literal type="number">0xFFFFE4B5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NavajoWhite"</literal></expr>, <expr><literal type="number">0xFFFFDEAD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Navy"</literal></expr>, <expr><literal type="number">0xFF000080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"None"</literal></expr>, <expr><literal type="number">0x00000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"OldLace"</literal></expr>, <expr><literal type="number">0xFFFDF5E6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Olive"</literal></expr>, <expr><literal type="number">0xFF808000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"OliveDrab"</literal></expr>, <expr><literal type="number">0xFF6B8E23</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Orange"</literal></expr>, <expr><literal type="number">0xFFFFA500</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"OrangeRed"</literal></expr>, <expr><literal type="number">0xFFFF4500</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Orchid"</literal></expr>, <expr><literal type="number">0xFFDA70D6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PaleGoldenRod"</literal></expr>, <expr><literal type="number">0xFFEEE8AA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PaleGreen"</literal></expr>, <expr><literal type="number">0xFF98FB98</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PaleTurquoise"</literal></expr>, <expr><literal type="number">0xFFAFEEEE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PaleVioletRed"</literal></expr>, <expr><literal type="number">0xFFD87093</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PapayaWhip"</literal></expr>, <expr><literal type="number">0xFFFFEFD5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PeachPuff"</literal></expr>, <expr><literal type="number">0xFFFFDAB9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Peru"</literal></expr>, <expr><literal type="number">0xFFCD853F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Pink"</literal></expr>, <expr><literal type="number">0xFFFFC0CB</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Plum"</literal></expr>, <expr><literal type="number">0xFFDDA0DD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"PowderBlue"</literal></expr>, <expr><literal type="number">0xFFB0E0E6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Purple"</literal></expr>, <expr><literal type="number">0xFFA020F0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Red"</literal></expr>, <expr><literal type="number">0xFFFF0000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"RosyBrown"</literal></expr>, <expr><literal type="number">0xFFBC8F8F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"RoyalBlue"</literal></expr>, <expr><literal type="number">0xFF4169E1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SaddleBrown"</literal></expr>, <expr><literal type="number">0xFF8B4513</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Salmon"</literal></expr>, <expr><literal type="number">0xFFFA8072</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SandyBrown"</literal></expr>, <expr><literal type="number">0xFFF4A460</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SeaGreen"</literal></expr>, <expr><literal type="number">0xFF2E8B57</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SeaShell"</literal></expr>, <expr><literal type="number">0xFFFFF5EE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Sienna"</literal></expr>, <expr><literal type="number">0xFFA0522D</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Silver"</literal></expr>, <expr><literal type="number">0xFFC0C0C0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SkyBlue"</literal></expr>, <expr><literal type="number">0xFF87CEEB</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SlateBlue"</literal></expr>, <expr><literal type="number">0xFF6A5ACD</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SlateGray"</literal></expr>, <expr><literal type="number">0xFF708090</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Snow"</literal></expr>, <expr><literal type="number">0xFFFFFAFA</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SpringGreen"</literal></expr>, <expr><literal type="number">0xFF00FF7F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SteelBlue"</literal></expr>, <expr><literal type="number">0xFF4682B4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Tan"</literal></expr>, <expr><literal type="number">0xFFD2B48C</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Teal"</literal></expr>, <expr><literal type="number">0xFF008080</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Thistle"</literal></expr>, <expr><literal type="number">0xFFD8BFD8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Tomato"</literal></expr>, <expr><literal type="number">0xFFFF6347</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Turquoise"</literal></expr>, <expr><literal type="number">0xFF40E0D0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Violet"</literal></expr>, <expr><literal type="number">0xFFEE82EE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Wheat"</literal></expr>, <expr><literal type="number">0xFFF5DEB3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"White"</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"WhiteSmoke"</literal></expr>, <expr><literal type="number">0xFFF5F5F5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Yellow"</literal></expr>, <expr><literal type="number">0xFFFFFF00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"YellowGreen"</literal></expr>, <expr><literal type="number">0xFF9ACD32</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>hex_char_to_number</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>size_t</name></type> <name>mod_strcspn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reject</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>string</name> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>( <expr><name>string</name> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>||</operator> <name><name>string</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>( <expr><name>string</name> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>reject</name> <operator>&amp;&amp;</operator> <name><name>reject</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>reject</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>reject</name> <operator>&amp;&amp;</operator> <name><name>reject</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>color_string_to_rgba</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0xFF000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ColorEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>color_name</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>color_name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><call><name>hex_char_to_number</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>color_name</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color_name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><name>color_name</name></expr></argument>,
<argument><expr><name>color_table</name></expr></argument>,
<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>color_table</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ColorEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>color_table_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>rgb_color</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ascii2index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cpixel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>cpixel</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cpp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>p</name> <argument_list type="generic">&lt; <argument><expr><name>MIN_ELEMENT</name> <operator>||</operator> <operator>*</operator><name>p</name></expr></argument> &gt;</argument_list></name> <name>MAX_ELEMENT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <name>MIN_ELEMENT</name><operator>)</operator> <operator>*</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>*=</operator> <name>NB_ELEMENTS</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xpm_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XPMDecContext</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name><init>=<expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncolors</name></decl>, <decl><type ref="prev"/><name>cpp</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BGRA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>end</name> <operator>-</operator> <name>ptr</name> <operator>&gt;</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"/* XPM */"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>ptr</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing signature\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>mod_strcspn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"\"%u %u %u %u\","</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncolors</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing image parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cpp</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>cpp</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported/invalid number of chars per pixel: %d\n"</literal></expr></argument>, <argument><expr><name>cpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cpp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>*=</operator> <name>NB_ELEMENTS</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>ncolors</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ncolors</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid number of colors: %d\n"</literal></expr></argument>, <argument><expr><name>ncolors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>pixels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>pixels_size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>pixels</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>mod_strcspn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>ptr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncolors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>mod_strcspn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>ptr</name> <operator>&lt;</operator> <name>cpp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>cpp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"c "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"\" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ascii2index</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>cpp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <call><name>color_string_to_rgba</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>mod_strcspn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>ptr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>ptr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>mod_strcspn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>ptr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>ptr</name> <operator>&lt;</operator> <name>cpp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ascii2index</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>cpp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>pixels</name><index>[<expr><name>ret</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>cpp</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>mod_strcspn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xpm_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XPMDecContext</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>pixels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_xpm_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xpm"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_XPM</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XPMDecContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>xpm_decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>xpm_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <macro><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><literal type="string">"XPM (X PixMap) image"</literal></argument>)</argument_list></macro></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
