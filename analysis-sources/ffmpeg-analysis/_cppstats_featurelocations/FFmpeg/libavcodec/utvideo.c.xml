<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\utvideo.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utvideo.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>ff_ut_pred_order</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>PRED_LEFT</name></expr>, <expr><name>PRED_MEDIAN</name></expr>, <expr><name>PRED_MEDIAN</name></expr>, <expr><name>PRED_NONE</name></expr>, <expr><name>PRED_GRADIENT</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>ff_ut_rgb_order</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<function><type><name>int</name></type> <name>ff_ut_huff_cmp_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>HuffEntry</name> <modifier>*</modifier></type><name>aa</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>aa</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>bb</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>aa</name><operator>-&gt;</operator><name>sym</name></name> <operator>-</operator> <name><name>bb</name><operator>-&gt;</operator><name>sym</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_ut10_huff_cmp_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>HuffEntry</name> <modifier>*</modifier></type><name>aa</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name><name>aa</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>bb</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator><operator>*</operator><literal type="number">1024</literal> <operator>+</operator> <name><name>aa</name><operator>-&gt;</operator><name>sym</name></name> <operator>-</operator> <name><name>bb</name><operator>-&gt;</operator><name>sym</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
