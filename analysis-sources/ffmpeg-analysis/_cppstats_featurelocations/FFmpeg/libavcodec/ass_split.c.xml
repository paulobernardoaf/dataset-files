<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ass_split.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ass_split.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
<decl><name>ASS_STR</name></decl>,
<decl><name>ASS_INT</name></decl>,
<decl><name>ASS_FLT</name></decl>,
<decl><name>ASS_COLOR</name></decl>,
<decl><name>ASS_TIMESTAMP</name></decl>,
<decl><name>ASS_ALGN</name></decl>,
}</block></enum></type> <name>ASSFieldType</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>ASSFields</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fields_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASSFields</name></type> <name><name>fields</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ASSSection</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ASSSection</name></type> <name><name>ass_sections</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><operator>.</operator><name>section</name> <operator>=</operator> <literal type="string">"Script Info"</literal></expr>,
<expr><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ASS</name></expr></argument>, <argument><expr><name>script_info</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>fields</name> <operator>=</operator> <block>{<expr><block>{<expr><literal type="string">"ScriptType"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSScriptInfo</argument>, <argument>script_type</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><literal type="string">"Collisions"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSScriptInfo</argument>, <argument>collisions</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"PlayResX"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSScriptInfo</argument>, <argument>play_res_x</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"PlayResY"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSScriptInfo</argument>, <argument>play_res_y</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Timer"</literal></expr>, <expr><name>ASS_FLT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSScriptInfo</argument>, <argument>timer</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>section</name> <operator>=</operator> <literal type="string">"V4+ Styles"</literal></expr>,
<expr><operator>.</operator><name>format_header</name> <operator>=</operator> <literal type="string">"Format"</literal></expr>,
<expr><operator>.</operator><name>fields_header</name> <operator>=</operator> <literal type="string">"Style"</literal></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ASSStyle</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ASS</name></expr></argument>, <argument><expr><name>styles</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>offset_count</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ASS</name></expr></argument>, <argument><expr><name>styles_count</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>fields</name> <operator>=</operator> <block>{<expr><block>{<expr><literal type="string">"Name"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>name</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Fontname"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>font_name</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Fontsize"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>font_size</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"PrimaryColour"</literal></expr>, <expr><name>ASS_COLOR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>primary_color</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"SecondaryColour"</literal></expr>, <expr><name>ASS_COLOR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>secondary_color</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><literal type="string">"OutlineColour"</literal></expr>, <expr><name>ASS_COLOR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>outline_color</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"BackColour"</literal></expr>, <expr><name>ASS_COLOR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>back_color</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Bold"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>bold</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Italic"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>italic</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Underline"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>underline</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"StrikeOut"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>strikeout</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"ScaleX"</literal></expr>, <expr><name>ASS_FLT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>scalex</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"ScaleY"</literal></expr>, <expr><name>ASS_FLT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>scaley</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Spacing"</literal></expr>, <expr><name>ASS_FLT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>spacing</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Angle"</literal></expr>, <expr><name>ASS_FLT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>angle</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"BorderStyle"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>border_style</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Outline"</literal></expr>, <expr><name>ASS_FLT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>outline</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Shadow"</literal></expr>, <expr><name>ASS_FLT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>shadow</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Alignment"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>alignment</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"MarginL"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>margin_l</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"MarginR"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>margin_r</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"MarginV"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>margin_v</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Encoding"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>encoding</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>section</name> <operator>=</operator> <literal type="string">"V4 Styles"</literal></expr>,
<expr><operator>.</operator><name>format_header</name> <operator>=</operator> <literal type="string">"Format"</literal></expr>,
<expr><operator>.</operator><name>fields_header</name> <operator>=</operator> <literal type="string">"Style"</literal></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ASSStyle</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ASS</name></expr></argument>, <argument><expr><name>styles</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>offset_count</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ASS</name></expr></argument>, <argument><expr><name>styles_count</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>fields</name> <operator>=</operator> <block>{<expr><block>{<expr><literal type="string">"Name"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>name</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Fontname"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>font_name</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Fontsize"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>font_size</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"PrimaryColour"</literal></expr>, <expr><name>ASS_COLOR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>primary_color</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"SecondaryColour"</literal></expr>, <expr><name>ASS_COLOR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>secondary_color</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><literal type="string">"TertiaryColour"</literal></expr>, <expr><name>ASS_COLOR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>outline_color</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"BackColour"</literal></expr>, <expr><name>ASS_COLOR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>back_color</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Bold"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>bold</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Italic"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>italic</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"BorderStyle"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>border_style</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Outline"</literal></expr>, <expr><name>ASS_FLT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>outline</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Shadow"</literal></expr>, <expr><name>ASS_FLT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>shadow</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Alignment"</literal></expr>, <expr><name>ASS_ALGN</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>alignment</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"MarginL"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>margin_l</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"MarginR"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>margin_r</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"MarginV"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>margin_v</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"AlphaLevel"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>alpha_level</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Encoding"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSStyle</argument>, <argument>encoding</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><operator>.</operator><name>section</name> <operator>=</operator> <literal type="string">"Events"</literal></expr>,
<expr><operator>.</operator><name>format_header</name> <operator>=</operator> <literal type="string">"Format"</literal></expr>,
<expr><operator>.</operator><name>fields_header</name> <operator>=</operator> <literal type="string">"Dialogue"</literal></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ASSDialog</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ASS</name></expr></argument>, <argument><expr><name>dialogs</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>offset_count</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ASS</name></expr></argument>, <argument><expr><name>dialogs_count</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>fields</name> <operator>=</operator> <block>{<expr><block>{<expr><literal type="string">"Layer"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>layer</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Start"</literal></expr>, <expr><name>ASS_TIMESTAMP</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>start</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"End"</literal></expr>, <expr><name>ASS_TIMESTAMP</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>end</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Style"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>style</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Name"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>name</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"MarginL"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>margin_l</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><literal type="string">"MarginR"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>margin_r</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><literal type="string">"MarginV"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>margin_v</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><literal type="string">"Effect"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>effect</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Text"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>text</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ASSConvertFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_str</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dest</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>!</operator><name>str</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dest</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_flt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dest</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_color</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&amp;H%8x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dest</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dest</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_timestamp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>cs</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d:%02d:%02d.%02d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <literal type="number">360000</literal><operator>*</operator><name>h</name> <operator>+</operator> <literal type="number">6000</literal><operator>*</operator><name>m</name> <operator>+</operator> <literal type="number">100</literal><operator>*</operator><name>s</name> <operator>+</operator> <name>cs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>c</name> <operator>==</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_alignment</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <name>a</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>a</name><operator>&amp;</operator><literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><operator>!</operator><operator>!</operator><operator>(</operator><name>a</name><operator>&amp;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ASSConvertFunc</name></type> <name><name>convert_func</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>ASS_STR</name></expr>]</index> <operator>=</operator> <name>convert_str</name></expr>,
<expr><index>[<expr><name>ASS_INT</name></expr>]</index> <operator>=</operator> <name>convert_int</name></expr>,
<expr><index>[<expr><name>ASS_FLT</name></expr>]</index> <operator>=</operator> <name>convert_flt</name></expr>,
<expr><index>[<expr><name>ASS_COLOR</name></expr>]</index> <operator>=</operator> <name>convert_color</name></expr>,
<expr><index>[<expr><name>ASS_TIMESTAMP</name></expr>]</index> <operator>=</operator> <name>convert_timestamp</name></expr>,
<expr><index>[<expr><name>ASS_ALGN</name></expr>]</index> <operator>=</operator> <name>convert_alignment</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<struct>struct <name>ASSSplitContext</name> <block>{
<decl_stmt><decl><type><name>ASS</name></type> <name>ass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>field_number</name><index>[<expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ass_sections</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name><name>field_order</name><index>[<expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ass_sections</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>realloc_section_array</name><parameter_list>(<parameter><decl><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ASSSection</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><operator>&amp;</operator><name><name>ass_sections</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ass</name></name> <operator>+</operator> <name><name>section</name><operator>-&gt;</operator><name>offset_count</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>section_ptr</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ass</name></name> <operator>+</operator> <name><name>section</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>av_realloc_array</name><argument_list>(<argument><expr><operator>*</operator><name>section_ptr</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>count</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>section_ptr</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <operator>*</operator><name>count</name> <operator>*</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_eol</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>buf</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>buf</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>buf</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>skip_space</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>get_default_field_orders</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASSSection</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>order</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>order</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>order</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>section</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>number</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>order</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>order</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ass_split_section</name><parameter_list>(<parameter><decl><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ASSSection</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><operator>&amp;</operator><name><name>ass_sections</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>number</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>field_number</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>order</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>field_order</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_line</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">":\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>section</name><operator>-&gt;</operator><name>fields_header</name></name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>fields_header</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ass_sections</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ass_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fields_header</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ass_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fields_header</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>section</name> <operator>=</operator> <operator>&amp;</operator><name><name>ass_sections</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>number</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>field_number</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>order</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>field_order</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>format_header</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>order</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>format_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>format_header</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>is_eol</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>skip_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", \r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>order</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>number</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>order</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>order</name><index>[<expr><operator>*</operator><name>number</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>section</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>order</name><index>[<expr><operator>*</operator><name>number</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>number</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>skip_space</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>+</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>field_order</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name></expr>]</index></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
<goto>goto <name>next_line</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>fields_header</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>fields_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>fields_header</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>struct_ptr</name> <init>= <expr><call><name>realloc_section_array</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>struct_ptr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>order</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>order</name> <operator>=</operator> <call><name>get_default_field_orders</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>order</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>field_order</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name></expr>]</index></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><call><name>is_eol</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <operator>*</operator><name>number</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name>i</name> <operator>==</operator> <operator>*</operator><name>number</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>skip_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>last</name></expr> ?</condition><then> <expr><literal type="string">"\r\n"</literal></expr> </then><else>: <expr><literal type="string">",\r\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ASSFieldType</name></type> <name>type</name> <init>= <expr><name><name>section</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name><name>order</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>struct_ptr</name> <operator>+</operator> <name><name>section</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name><name>order</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>convert_func</name><index>[<expr><name>type</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>buf</name><operator>,</operator> <name>len</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>skip_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">":\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>section</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ASSFieldType</name></type> <name>type</name> <init>= <expr><name><name>section</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ass</name></name> <operator>+</operator> <name><name>section</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>section</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>skip_space</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>convert_func</name><index>[<expr><name>type</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>buf</name><operator>,</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<label><name>next_line</name>:</label>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>!</operator><operator>!</operator><operator>*</operator><name>buf</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ass_split</name><parameter_list>(<parameter><decl><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name><name>section</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ass_split_section</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"[%15[0-9A-Za-z+ ]]%c"</literal></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>!</operator><operator>!</operator><operator>*</operator><name>buf</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ass_sections</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name><name>ass_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>section</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ass_split_section</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>!</operator><operator>!</operator><operator>*</operator><name>buf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><ternary><condition><expr><name>buf</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVERROR_INVALIDDATA</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ff_ass_split</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_section</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ass_split</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_ass_split_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_section</name><parameter_list>(<parameter><decl><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASSSection</name> <modifier>*</modifier></type><name>section</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ass</name></name> <operator>+</operator> <name><name>section</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>count</name></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>format_header</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ass</name></name> <operator>+</operator> <name><name>section</name><operator>-&gt;</operator><name>offset_count</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>&amp;</operator><name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>*</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ptr</name> <operator>+=</operator> <name><name>section</name><operator>-&gt;</operator><name>size</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>section</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ASSFields</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>&amp;</operator><name><name>section</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ASS_STR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name><name>field</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>format_header</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ass</name></name> <operator>+</operator> <name><name>section</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>ASSDialog</name> <modifier>*</modifier></type><name>ff_ass_split_dialog</name><parameter_list>(<parameter><decl><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASSDialog</name> <modifier>*</modifier></type><name>dialog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ass_sections</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ass_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>section</name></expr></argument>, <argument><expr><literal type="string">"Events"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_section</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ass_sections</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ass</name><operator>.</operator><name>dialogs_count</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ass_split</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dialog</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ass</name><operator>.</operator><name>dialogs</name></name> <operator>+</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>number</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>number</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ass</name><operator>.</operator><name>dialogs_count</name></name> <operator>-</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>dialog</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ass_free_dialog</name><parameter_list>(<parameter><decl><type><name>ASSDialog</name> <modifier>*</modifier><modifier>*</modifier></type><name>dialogp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASSDialog</name> <modifier>*</modifier></type><name>dialog</name> <init>= <expr><operator>*</operator><name>dialogp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dialog</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dialog</name><operator>-&gt;</operator><name>style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dialog</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dialog</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dialog</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>dialogp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ASSDialog</name> <modifier>*</modifier></type><name>ff_ass_split_dialog2</name><parameter_list>(<parameter><decl><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ASSFields</name></type> <name><name>fields</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"ReadOrder"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>readorder</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><literal type="string">"Layer"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>layer</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Style"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>style</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Name"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>name</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"MarginL"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>margin_l</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"MarginR"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>margin_r</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"MarginV"</literal></expr>, <expr><name>ASS_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>margin_v</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Effect"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>effect</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{<expr><literal type="string">"Text"</literal></expr>, <expr><name>ASS_STR</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>ASSDialog</argument>, <argument>text</argument>)</argument_list></macro> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASSDialog</name> <modifier>*</modifier></type><name>dialog</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dialog</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dialog</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>last</name> <init>= <expr><name>i</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ASSFieldType</name></type> <name>type</name> <init>= <expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dialog</name> <operator>+</operator> <name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>skip_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>last</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_ass_free_dialog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>convert_func</name><index>[<expr><name>type</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>buf</name><operator>,</operator> <name>len</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>dialog</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ass_split_free</name><parameter_list>(<parameter><decl><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ass_sections</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free_section</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ass_sections</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>field_order</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>ff_ass_split_override_codes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASSCodesCallbacks</name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>new_line</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>text</name> <operator>&amp;&amp;</operator> <name><name>callbacks</name><operator>-&gt;</operator><name>text</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\%1[nN]"</literal></expr></argument>, <argument><expr><name>new_line</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>text</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>text_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\%1[nN]"</literal></expr></argument>, <argument><expr><name>new_line</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>new_line</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>new_line</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name><name>new_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>style</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c_num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><literal type="string">"0"</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>color</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>an</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>alpha</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>t1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\%1[bisu]%1[01\\}]%n"</literal></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>close</name> <init>= <expr><ternary><condition><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>close</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>style</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>style</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name><name>style</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\c%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\c&amp;H%X&amp;%1[\\}]%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\%1[1234]c%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>c_num</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\%1[1234]c&amp;H%X&amp;%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>c_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>color</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name><name>c_num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\alpha%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\alpha&amp;H%2X&amp;%1[\\}]%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>alpha</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\%1[1234]a%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>c_num</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\%1[1234]a&amp;H%2X&amp;%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>c_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alpha</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>alpha</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>alpha</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name><name>c_num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\fn%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\fn%127[^\\}]%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>font_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>font_name</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>tmp</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\fs%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\fs%u%1[\\}]%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>font_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>font_size</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\a%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\a%2u%1[\\}]%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>an</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\an%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\an%1u%1[\\}]%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>an</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>an</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>an</name> <operator>=</operator> <operator>(</operator><name>an</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>an</name><operator>&amp;</operator><literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><ternary><condition><expr><name>an</name><operator>&amp;</operator><literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>alignment</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>alignment</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>an</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\r%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\r%127[^\\}]%1[\\}]%n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>cancel_overrides</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>cancel_overrides</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\move(%d,%d,%d,%d)%1[\\}]%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y2</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal> <operator>||</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\move(%d,%d,%d,%d,%d,%d)%1[\\}]%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>move</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>move</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\pos(%d,%d)%1[\\}]%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>move</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>move</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\org(%d,%d)%1[\\}]%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>origin</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>origin</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"\\}"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>text_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>text_len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>text</name> <operator>&amp;&amp;</operator> <name><name>callbacks</name><operator>-&gt;</operator><name>text</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>text</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>text_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>callbacks</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>callbacks</name><operator>-&gt;</operator><name>end</name></name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ASSStyle</name> <modifier>*</modifier></type><name>ff_ass_style_get</name><parameter_list>(<parameter><decl><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASS</name> <modifier>*</modifier></type><name>ass</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ass</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>style</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>style</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <literal type="string">"Default"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>ass</name><operator>-&gt;</operator><name>styles_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ass</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ass</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ass</name><operator>-&gt;</operator><name>styles</name></name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
