<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\internal.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODEC_CAP_INIT_THREADSAFE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODEC_CAP_INIT_CLEANUP</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODEC_CAP_SETS_PKT_DTS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODEC_CAP_SKIP_FRAME_FILL_PARAM</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODEC_CAP_EXPORTS_CROPPING</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODEC_CAP_SLICE_THREAD_HAS_MF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CODEC_TAGS_END</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_tlog</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_log(ctx, AV_LOG_TRACE, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_tlog</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_DEFAULT_QUANT_BIAS</name></cpp:macro> <cpp:value>999999</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_QSCALE_TYPE_MPEG1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_QSCALE_TYPE_MPEG2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_QSCALE_TYPE_H264</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_QSCALE_TYPE_VP56</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_SANE_NB_CHANNELS</name></cpp:macro> <cpp:value>512U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_SIGNBIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;&gt; CHAR_BIT * sizeof(x) - 1)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SIMD_ALIGN_64</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRIDE_ALIGN</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_SIMD_ALIGN_32</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRIDE_ALIGN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_SIMD_ALIGN_16</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRIDE_ALIGN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRIDE_ALIGN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>FramePool</name> <block>{




<decl_stmt><decl><type><name>AVBufferPool</name> <modifier>*</modifier></type><name><name>pools</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stride_align</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>;</decl_stmt>
}</block></struct></type> <name>FramePool</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DecodeSimpleContext</name> <block>{
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>in_pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out_frame</name></decl>;</decl_stmt>
}</block></struct></type> <name>DecodeSimpleContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DecodeFilterContext</name> <block>{
<decl_stmt><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>bsfs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_bsfs</name></decl>;</decl_stmt>
}</block></struct></type> <name>DecodeFilterContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVCodecInternal</name> <block>{






<decl_stmt><decl><type><name>int</name></type> <name>is_copy</name></decl>;</decl_stmt>














<decl_stmt><decl><type><name>int</name></type> <name>allocate_progress</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>last_audio_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>to_free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FramePool</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>thread_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DecodeSimpleContext</name></type> <name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DecodeFilterContext</name></type> <name>filter</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>last_pkt_props</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>byte_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>byte_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>frame_thread_encoder</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>skip_samples</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hwaccel_priv_data</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>draining</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>buffer_pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_pkt_valid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>buffer_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>draining_done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compat_decode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compat_decode_warned</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>compat_decode_consumed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>compat_decode_partial_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>compat_decode_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>showed_multi_packet_warning</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_samples_multiplier</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>nb_draining_errors</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>changed_frames_dropped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>initial_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>initial_width</name></decl>, <name>initial_height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>initial_sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>initial_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>initial_channel_layout</name></decl>;</decl_stmt>
}</block></struct></type> <name>AVCodecInternal</name>;</typedef>

<struct>struct <name>AVCodecDefault</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_log2_run</name><index>[<expr><literal type="number">41</literal></expr>]</index></name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>ff_match_2uint16</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>size</name></expr></argument>, <argument><expr><name>int</name> <name>a</name></expr></argument>, <argument><expr><name>int</name> <name>b</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>avpriv_toupper4</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_color_frame</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MAX_EXTRADATA_SIZE</name></cpp:macro> <cpp:value>((1 &lt;&lt; 28) - AV_INPUT_BUFFER_PADDING_SIZE)</cpp:value></cpp:define>



























<function_decl><type><name>int</name></type> <name>ff_alloc_packet2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>min_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>attribute_deprecated</name> <name>int</name></type> <name>ff_alloc_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int64_t</name></type> <name>ff_samples_to_time_base</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>samples</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <macro><name>av_rescale_q</name><argument_list>(<argument>samples</argument>, <argument>(AVRational){ <literal type="number">1</literal></argument>, <argument>avctx-&gt;sample_rate }</argument>,
<argument>avctx-&gt;time_base</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>float</name></type> <name>ff_exp2fi</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">126</literal> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>av_int2float</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">127</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>INFINITY</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">150</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>av_int2float</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>x</name><operator>+</operator><literal type="number">149</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function_decl><type><name>int</name></type> <name>ff_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGET_BUFFER_FLAG_READONLY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 




<function_decl><type><name>int</name></type> <name>ff_reget_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_thread_can_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avpriv_h264_has_num_reorder_frames</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>ff_codec_open2_recursive</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>avpriv_bprint_to_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>AVBPrint</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>avpriv_find_start_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avpriv_codec_get_cap_skip_frame_fill_param</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>ff_set_dimensions</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>ff_set_sar</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>sar</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>ff_side_data_update_matrix_encoding</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVMatrixEncoding</name></name></type> <name>matrix_encoding</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>int</name></type> <name>ff_get_format</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>ff_decode_frame_props</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>ff_add_cpb_side_data</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_side_data_set_encoder_stats</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pict_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_side_data_set_prft</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> <name>ff_alloc_a53_sei</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>prefix_len</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sei_size</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int64_t</name></type> <name>ff_guess_coded_bitrate</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>ff_int_from_list_or_default</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>val_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type> <name>array_valid_values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_dvdsub_parse_palette</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>CONFIG_SHARED</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BUILDING_avcodec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_export_avcodec</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_export_avcodec</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
