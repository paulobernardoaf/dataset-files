<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\j2kenc.c">
































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpeg2000.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NMSEDEC_BITS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NMSEDEC_FRACBITS</name></cpp:macro> <cpp:value>(NMSEDEC_BITS-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WMSEDEC_SHIFT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAMBDA_SCALE</name></cpp:macro> <cpp:value>(100000000LL &lt;&lt; (WMSEDEC_SHIFT - 13))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_JP2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_J2K</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>lut_nmsedec_ref</name> <index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>NMSEDEC_BITS</name></expr>]</index></name></decl>,
<decl><type ref="prev"/><name><name>lut_nmsedec_ref0</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>NMSEDEC_BITS</name></expr>]</index></name></decl>,
<decl><type ref="prev"/><name><name>lut_nmsedec_sig</name> <index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>NMSEDEC_BITS</name></expr>]</index></name></decl>,
<decl><type ref="prev"/><name><name>lut_nmsedec_sig0</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>NMSEDEC_BITS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dwt_norms</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{ 
<expr><block>{<expr><block>{<expr><literal type="number">10000</literal></expr>, <expr><literal type="number">19650</literal></expr>, <expr><literal type="number">41770</literal></expr>, <expr><literal type="number">84030</literal></expr>, <expr><literal type="number">169000</literal></expr>, <expr><literal type="number">338400</literal></expr>, <expr><literal type="number">676900</literal></expr>, <expr><literal type="number">1353000</literal></expr>, <expr><literal type="number">2706000</literal></expr>, <expr><literal type="number">5409000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">20220</literal></expr>, <expr><literal type="number">39890</literal></expr>, <expr><literal type="number">83550</literal></expr>, <expr><literal type="number">170400</literal></expr>, <expr><literal type="number">342700</literal></expr>, <expr><literal type="number">686300</literal></expr>, <expr><literal type="number">1373000</literal></expr>, <expr><literal type="number">2746000</literal></expr>, <expr><literal type="number">5490000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">20220</literal></expr>, <expr><literal type="number">39890</literal></expr>, <expr><literal type="number">83550</literal></expr>, <expr><literal type="number">170400</literal></expr>, <expr><literal type="number">342700</literal></expr>, <expr><literal type="number">686300</literal></expr>, <expr><literal type="number">1373000</literal></expr>, <expr><literal type="number">2746000</literal></expr>, <expr><literal type="number">5490000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">20800</literal></expr>, <expr><literal type="number">38650</literal></expr>, <expr><literal type="number">83070</literal></expr>, <expr><literal type="number">171800</literal></expr>, <expr><literal type="number">347100</literal></expr>, <expr><literal type="number">695900</literal></expr>, <expr><literal type="number">1393000</literal></expr>, <expr><literal type="number">2786000</literal></expr>, <expr><literal type="number">5572000</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{<expr><literal type="number">10000</literal></expr>, <expr><literal type="number">15000</literal></expr>, <expr><literal type="number">27500</literal></expr>, <expr><literal type="number">53750</literal></expr>, <expr><literal type="number">106800</literal></expr>, <expr><literal type="number">213400</literal></expr>, <expr><literal type="number">426700</literal></expr>, <expr><literal type="number">853300</literal></expr>, <expr><literal type="number">1707000</literal></expr>, <expr><literal type="number">3413000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">10380</literal></expr>, <expr><literal type="number">15920</literal></expr>, <expr><literal type="number">29190</literal></expr>, <expr><literal type="number">57030</literal></expr>, <expr><literal type="number">113300</literal></expr>, <expr><literal type="number">226400</literal></expr>, <expr><literal type="number">452500</literal></expr>, <expr><literal type="number">904800</literal></expr>, <expr><literal type="number">1809000</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">10380</literal></expr>, <expr><literal type="number">15920</literal></expr>, <expr><literal type="number">29190</literal></expr>, <expr><literal type="number">57030</literal></expr>, <expr><literal type="number">113300</literal></expr>, <expr><literal type="number">226400</literal></expr>, <expr><literal type="number">452500</literal></expr>, <expr><literal type="number">904800</literal></expr>, <expr><literal type="number">1809000</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">7186</literal></expr>, <expr><literal type="number">9218</literal></expr>, <expr><literal type="number">15860</literal></expr>, <expr><literal type="number">30430</literal></expr>, <expr><literal type="number">60190</literal></expr>, <expr><literal type="number">120100</literal></expr>, <expr><literal type="number">240000</literal></expr>, <expr><literal type="number">479700</literal></expr>, <expr><literal type="number">959300</literal></expr>}</block></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name></decl>;</decl_stmt>
}</block></struct></type> <name>Jpeg2000Tile</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cbps</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>chroma_shift</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>planar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncomponents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_width</name></decl>, <name>tile_height</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>numXtiles</name></decl>, <name>numYtiles</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>lambda</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name></type> <name>codsty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name></type> <name>qntsty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pred</name></decl>;</decl_stmt>
}</block></struct></type> <name>Jpeg2000EncoderContext</name>;</typedef>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ifprintf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>printf</name></cpp:undef>

static void nspaces(FILE *fd, int n)
{
while(n--) putc(' ', fd);
}

static void printcomp(Jpeg2000Component *comp)
{
int i;
for (i = 0; i &lt; comp-&gt;y1 - comp-&gt;y0; i++)
ff_jpeg2000_printv(comp-&gt;i_data + i * (comp-&gt;x1 - comp-&gt;x0), comp-&gt;x1 - comp-&gt;x0);
}

static void dump(Jpeg2000EncoderContext *s, FILE *fd)
{
int tileno, compno, reslevelno, bandno, precno;
fprintf(fd, "XSiz = %d, YSiz = %d, tile_width = %d, tile_height = %d\n"
"numXtiles = %d, numYtiles = %d, ncomponents = %d\n"
"tiles:\n",
s-&gt;width, s-&gt;height, s-&gt;tile_width, s-&gt;tile_height,
s-&gt;numXtiles, s-&gt;numYtiles, s-&gt;ncomponents);
for (tileno = 0; tileno &lt; s-&gt;numXtiles * s-&gt;numYtiles; tileno++){
Jpeg2000Tile *tile = s-&gt;tile + tileno;
nspaces(fd, 2);
fprintf(fd, "tile %d:\n", tileno);
for(compno = 0; compno &lt; s-&gt;ncomponents; compno++){
Jpeg2000Component *comp = tile-&gt;comp + compno;
nspaces(fd, 4);
fprintf(fd, "component %d:\n", compno);
nspaces(fd, 4);
fprintf(fd, "x0 = %d, x1 = %d, y0 = %d, y1 = %d\n",
comp-&gt;x0, comp-&gt;x1, comp-&gt;y0, comp-&gt;y1);
for(reslevelno = 0; reslevelno &lt; s-&gt;nreslevels; reslevelno++){
Jpeg2000ResLevel *reslevel = comp-&gt;reslevel + reslevelno;
nspaces(fd, 6);
fprintf(fd, "reslevel %d:\n", reslevelno);
nspaces(fd, 6);
fprintf(fd, "x0 = %d, x1 = %d, y0 = %d, y1 = %d, nbands = %d\n",
reslevel-&gt;x0, reslevel-&gt;x1, reslevel-&gt;y0,
reslevel-&gt;y1, reslevel-&gt;nbands);
for(bandno = 0; bandno &lt; reslevel-&gt;nbands; bandno++){
Jpeg2000Band *band = reslevel-&gt;band + bandno;
nspaces(fd, 8);
fprintf(fd, "band %d:\n", bandno);
nspaces(fd, 8);
fprintf(fd, "x0 = %d, x1 = %d, y0 = %d, y1 = %d,"
"codeblock_width = %d, codeblock_height = %d cblknx = %d cblkny = %d\n",
band-&gt;x0, band-&gt;x1,
band-&gt;y0, band-&gt;y1,
band-&gt;codeblock_width, band-&gt;codeblock_height,
band-&gt;cblknx, band-&gt;cblkny);
for (precno = 0; precno &lt; reslevel-&gt;num_precincts_x * reslevel-&gt;num_precincts_y; precno++){
Jpeg2000Prec *prec = band-&gt;prec + precno;
nspaces(fd, 10);
fprintf(fd, "prec %d:\n", precno);
nspaces(fd, 10);
fprintf(fd, "xi0 = %d, xi1 = %d, yi0 = %d, yi1 = %d\n",
prec-&gt;xi0, prec-&gt;xi1, prec-&gt;yi0, prec-&gt;yi1);
}
}
}
}
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type> <name>put_bits</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name> <operator>=</operator> <operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>|=</operator> <name>val</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>put_num</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><operator>--</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <name>n</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>j2k_flush</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>tag_tree_code</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000TgtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000TgtNode</name> <modifier>*</modifier></type><name><name>stack</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>curval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>node</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>vis</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>curval</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>vis</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack</name><index>[<expr><name>sp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while<condition>(<expr><operator>--</operator><name>sp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>-&gt;</operator><name>val</name> <operator>&gt;=</operator> <name>threshold</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>threshold</name> <operator>-</operator> <name>curval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>-&gt;</operator><name>val</name> <operator>-</operator> <name>curval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curval</name> <operator>=</operator> <name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>-&gt;</operator><name>val</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>tag_tree_update</name><parameter_list>(<parameter><decl><type><name>Jpeg2000TgtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>val</name></name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lev</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_siz</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;</operator> <literal type="number">40</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>JPEG2000_SIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">38</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr>?</condition><then><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_shift</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr>?</condition><then><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_shift</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_cod</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>JPEG2000_COD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_cblk_width</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_cblk_height</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT53</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_qcd</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>qntsty</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>qntsty</name><operator>-&gt;</operator><name>quantsty</name></name> <operator>==</operator> <name>JPEG2000_QSTY_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;</operator> <name>size</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>JPEG2000_QCD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>qntsty</name><operator>-&gt;</operator><name>nguardbits</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <name><name>qntsty</name><operator>-&gt;</operator><name>quantsty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>qntsty</name><operator>-&gt;</operator><name>quantsty</name></name> <operator>==</operator> <name>JPEG2000_QSTY_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>expn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>qntsty</name><operator>-&gt;</operator><name>expn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <name><name>qntsty</name><operator>-&gt;</operator><name>mant</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_com</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;</operator> <name>size</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>JPEG2000_COM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>put_sot</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tileno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>psotptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>JPEG2000_SOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>tileno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>psotptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>psotptr</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>init_tiles</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tileno</name></decl>, <decl><type ref="prev"/><name>tilex</name></decl>, <decl><type ref="prev"/><name>tiley</name></decl>, <decl><type ref="prev"/><name>compno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>qntsty</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>=</operator> <call><name>ff_jpeg2000_ceildiv</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name> <operator>=</operator> <call><name>ff_jpeg2000_ceildiv</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Jpeg2000Tile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tile</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>tileno</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tiley</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tiley</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name></expr>;</condition> <incr><expr><name>tiley</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>tilex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tilex</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name></expr>;</condition> <incr><expr><name>tilex</name><operator>++</operator></expr><operator>,</operator> <expr><name>tileno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>+</operator> <name>tileno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Jpeg2000Component</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tilex</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>tilex</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tiley</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>tiley</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>compno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_shift</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jpeg2000_init_component</name><argument_list>(<argument><expr><name>comp</name></expr></argument>,
<argument><expr><name>codsty</name></expr></argument>,
<argument><expr><name>qntsty</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbps</name><index>[<expr><name>compno</name></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>compno</name></expr>?</condition><then><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_shift</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>compno</name></expr>?</condition><then><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_shift</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>
)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_frame</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tileno</name></decl>, <decl><type ref="prev"/><name>compno</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>tileno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tileno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name></expr>;</condition> <incr><expr><name>tileno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>+</operator> <name>tileno</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>planar</name></name></expr>)</condition><block>{<block_content>
<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>i_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>compno</name></expr>]</index></name>
<operator>+</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>compno</name></expr>]</index></name>
<operator>+</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>compno</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>+</operator> <name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name><name>i_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_quantization</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>, <decl><type ref="prev"/><name>reslevelno</name></decl>, <decl><type ref="prev"/><name>bandno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>qntsty</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>gbandno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>reslevelno</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nbands</name></decl>, <decl><type ref="prev"/><name>lev</name> <init>= <expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <name>reslevelno</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>nbands</name> <operator>=</operator> <ternary><condition><expr><name>reslevelno</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name>nbands</name></expr>;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr><operator>,</operator> <expr><name>gbandno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>expn</name></decl>, <decl><type ref="prev"/><name>mant</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT97_INT</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bandpos</name> <init>= <expr><name>bandno</name> <operator>+</operator> <operator>(</operator><name>reslevelno</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>,
<decl><type ref="prev"/><name>ss</name> <init>= <expr><literal type="number">81920000</literal> <operator>/</operator> <name><name>dwt_norms</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>bandpos</name></expr>]</index><index>[<expr><name>lev</name></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"/><name>log</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mant</name> <operator>=</operator> <operator>(</operator><literal type="number">11</literal> <operator>-</operator> <name><name>log</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>?</operator> <name>ss</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <name>log</name> <operator>-</operator> <literal type="number">11</literal> <operator>:</operator> <name>ss</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal> <operator>-</operator> <name>log</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>expn</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cbps</name><index>[<expr><name>compno</name></expr>]</index></name> <operator>-</operator> <name>log</name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>expn</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bandno</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>reslevelno</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>cbps</name><index>[<expr><name>compno</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>qntsty</name><operator>-&gt;</operator><name>expn</name><index>[<expr><name>gbandno</name></expr>]</index></name> <operator>=</operator> <name>expn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qntsty</name><operator>-&gt;</operator><name>mant</name><index>[<expr><name>gbandno</name></expr>]</index></name> <operator>=</operator> <name>mant</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_luts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>a</name></decl>,
<decl><type ref="prev"/><name>mask</name> <init>= <expr><operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>NMSEDEC_FRACBITS</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>NMSEDEC_BITS</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>lut_nmsedec_sig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>i</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">13</literal> <operator>-</operator> <name>NMSEDEC_FRACBITS</name><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">9</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lut_nmsedec_sig0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>i</name><operator>*</operator><name>i</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>NMSEDEC_FRACBITS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>NMSEDEC_BITS</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lut_nmsedec_ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">13</literal> <operator>-</operator> <name>NMSEDEC_FRACBITS</name><operator>)</operator><operator>)</operator> <operator>+</operator>
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>a</name> <operator>*</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lut_nmsedec_ref0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>*</operator> <name>i</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <name>NMSEDEC_BITS</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>NMSEDEC_FRACBITS</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>NMSEDEC_FRACBITS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>mask</name><operator>)</operator>
<operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>getnmsedec_sig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bpno</name> <operator>&gt;</operator> <name>NMSEDEC_FRACBITS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>lut_nmsedec_sig</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>bpno</name> <operator>-</operator> <name>NMSEDEC_FRACBITS</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>NMSEDEC_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>lut_nmsedec_sig0</name><index>[<expr><name>x</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>NMSEDEC_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getnmsedec_ref</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bpno</name> <operator>&gt;</operator> <name>NMSEDEC_FRACBITS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>lut_nmsedec_ref</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>bpno</name> <operator>-</operator> <name>NMSEDEC_FRACBITS</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>NMSEDEC_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>lut_nmsedec_ref0</name><index>[<expr><name>x</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>NMSEDEC_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_sigpass</name><parameter_list>(<parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bandno</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nmsedec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y0</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bpno</name> <operator>+</operator> <name>NMSEDEC_FRACBITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y0</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y0</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y0</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>y0</name><operator>+</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_NB</name><operator>)</operator></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ctxno</name> <init>= <expr><call><name>ff_jpeg2000_getsigctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bandno</name></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><type ref="prev"/><name>bit</name> <init>= <expr><ternary><condition><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_mqc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>ctxno</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bit</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xorbit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctxno</name> <init>= <expr><call><name>ff_jpeg2000_getsgnctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xorbit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_mqc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>ctxno</name></expr></argument>, <argument><expr><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>^</operator> <name>xorbit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nmsedec</name> <operator>+=</operator> <call><name>getnmsedec_sig</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>bpno</name> <operator>+</operator> <name>NMSEDEC_FRACBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_jpeg2000_set_significance</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_VIS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_refpass</name><parameter_list>(<parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nmsedec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y0</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bpno</name> <operator>+</operator> <name>NMSEDEC_FRACBITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y0</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y0</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y0</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>y0</name><operator>+</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>JPEG2000_T1_SIG</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ctxno</name> <init>= <expr><call><name>ff_jpeg2000_getrefctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>nmsedec</name> <operator>+=</operator> <call><name>getnmsedec_ref</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>bpno</name> <operator>+</operator> <name>NMSEDEC_FRACBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mqc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>ctxno</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_REF</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_clnpass</name><parameter_list>(<parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bandno</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nmsedec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y0</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bpno</name> <operator>+</operator> <name>NMSEDEC_FRACBITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y0</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y0</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y0</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>height</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator>
<operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y0</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG_NB</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name> <operator>|</operator> <name>JPEG2000_T1_SIG</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y0</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG_NB</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name> <operator>|</operator> <name>JPEG2000_T1_SIG</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y0</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG_NB</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name> <operator>|</operator> <name>JPEG2000_T1_SIG</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y0</name><operator>+</operator><literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG_NB</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name> <operator>|</operator> <name>JPEG2000_T1_SIG</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>rlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>rlen</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y0</name><operator>+</operator><name>rlen</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ff_mqc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>MQC_CX_RL</name></expr></argument>, <argument><expr><name>rlen</name> <operator>!=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_mqc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>MQC_CX_UNI</name></expr></argument>, <argument><expr><name>rlen</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mqc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>MQC_CX_UNI</name></expr></argument>, <argument><expr><name>rlen</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y0</name> <operator>+</operator> <name>rlen</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>y0</name> <operator>+</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ctxno</name> <init>= <expr><call><name>ff_jpeg2000_getsigctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bandno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>y0</name> <operator>+</operator> <name>rlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_mqc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>ctxno</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>xorbit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctxno</name> <init>= <expr><call><name>ff_jpeg2000_getsgnctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xorbit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>nmsedec</name> <operator>+=</operator> <call><name>getnmsedec_sig</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>bpno</name> <operator>+</operator> <name>NMSEDEC_FRACBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mqc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>ctxno</name></expr></argument>, <argument><expr><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>^</operator> <name>xorbit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_jpeg2000_set_significance</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>JPEG2000_T1_VIS</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y0</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>y0</name> <operator>+</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ctxno</name> <init>= <expr><call><name>ff_jpeg2000_getsigctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bandno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_mqc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>ctxno</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>xorbit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctxno</name> <init>= <expr><call><name>ff_jpeg2000_getsgnctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xorbit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>nmsedec</name> <operator>+=</operator> <call><name>getnmsedec_sig</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>bpno</name> <operator>+</operator> <name>NMSEDEC_FRACBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mqc_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>ctxno</name></expr></argument>, <argument><expr><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>^</operator> <name>xorbit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_jpeg2000_set_significance</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>JPEG2000_T1_VIS</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_cblk</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bandpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pass_t</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>passno</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>max</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nmsedec</name></decl>, <decl><type ref="prev"/><name>bpno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>wmsedec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <operator>(</operator><name>height</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SGN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>nonzerobits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bpno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block>{<block_content>
<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>nonzerobits</name></name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>NMSEDEC_FRACBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bpno</name> <operator>=</operator> <name><name>cblk</name><operator>-&gt;</operator><name>nonzerobits</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mqc_initenc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>passno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bpno</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>passno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>nmsedec</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>pass_t</name></expr>)</condition><block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><call><name>encode_sigpass</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>bandpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmsedec</name></expr></argument>, <argument><expr><name>bpno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>encode_refpass</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmsedec</name></expr></argument>, <argument><expr><name>bpno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>encode_clnpass</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>bandpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmsedec</name></expr></argument>, <argument><expr><name>bpno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name>passno</name></expr>]</index></name><operator>.</operator><name>rate</name> <operator>=</operator> <call><name>ff_mqc_flush_to</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name>passno</name></expr>]</index></name><operator>.</operator><name>flushed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name>passno</name></expr>]</index></name><operator>.</operator><name>flushed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wmsedec</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>nmsedec</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>bpno</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name>passno</name></expr>]</index></name><operator>.</operator><name>disto</name> <operator>=</operator> <name>wmsedec</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>pass_t</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>pass_t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bpno</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>npasses</name></name> <operator>=</operator> <name>passno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name> <operator>=</operator> <name>passno</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>passno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name>passno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rate</name> <operator>=</operator> <call><name>ff_mqc_flush_to</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name>passno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flushed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name>passno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flushed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>putnumpasses</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_num</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_num</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_num</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0xc</literal> <operator>|</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">36</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_num</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x1e0</literal> <operator>|</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">6</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_num</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0xff80</literal> <operator>|</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">37</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_packet</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precno</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>expn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numgbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bandno</name></decl>, <decl><type ref="prev"/><name>empty</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>nbands</name></name></expr>;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rlevel</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>bandno</name></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>bandno</name></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>bandno</name></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>bandno</name></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>empty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>!</operator><name>empty</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>j2k_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>nbands</name></name></expr>;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><name><name>rlevel</name><operator>-&gt;</operator><name>band</name></name> <operator>+</operator> <name>bandno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000Prec</name> <modifier>*</modifier></type><name>prec</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name> <operator>+</operator> <name>precno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yi</name></decl>, <decl><type ref="prev"/><name>xi</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cblknw</name> <init>= <expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>||</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>pos</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>yi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>yi</name> <operator>&lt;</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name></expr>;</condition> <incr><expr><name>yi</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>xi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>xi</name> <operator>&lt;</operator> <name>cblknw</name></expr>;</condition> <incr><expr><name>xi</name><operator>++</operator></expr><operator>,</operator> <expr><name>pos</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>cblkincl</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name><name>prec</name><operator>-&gt;</operator><name>cblk</name><index>[<expr><name>yi</name> <operator>*</operator> <name>cblknw</name> <operator>+</operator> <name>xi</name></expr>]</index></name><operator>.</operator><name>ninclpasses</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tag_tree_update</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>cblkincl</name></name> <operator>+</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>zerobits</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name><name>expn</name><index>[<expr><name>bandno</name></expr>]</index></name> <operator>+</operator> <name>numgbits</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>prec</name><operator>-&gt;</operator><name>cblk</name><index>[<expr><name>yi</name> <operator>*</operator> <name>cblknw</name> <operator>+</operator> <name>xi</name></expr>]</index></name><operator>.</operator><name>nonzerobits</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tag_tree_update</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>zerobits</name></name> <operator>+</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>pos</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>yi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>yi</name> <operator>&lt;</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name></expr>;</condition> <incr><expr><name>yi</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>xi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>xi</name> <operator>&lt;</operator> <name>cblknw</name></expr>;</condition> <incr><expr><name>xi</name><operator>++</operator></expr><operator>,</operator> <expr><name>pos</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>llen</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name> <init>= <expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>cblknw</name> <operator>+</operator> <name>xi</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>tag_tree_code</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>prec</name><operator>-&gt;</operator><name>cblkincl</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tag_tree_code</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>prec</name><operator>-&gt;</operator><name>zerobits</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putnumpasses</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llen</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>llen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>-</operator><name>llen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_num</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>j2k_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>nbands</name></name></expr>;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><name><name>rlevel</name><operator>-&gt;</operator><name>band</name></name> <operator>+</operator> <name>bandno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000Prec</name> <modifier>*</modifier></type><name>prec</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name> <operator>+</operator> <name>precno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yi</name></decl>, <decl><type ref="prev"/><name>cblknw</name> <init>= <expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>yi</name> <operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>yi</name> <operator>&lt;</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name></expr>;</condition> <incr><expr><name>yi</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xi</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>xi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>xi</name> <operator>&lt;</operator> <name>cblknw</name></expr>;</condition> <incr><expr><name>xi</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name> <init>= <expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name> <operator>+</operator> <name>yi</name> <operator>*</operator> <name>cblknw</name> <operator>+</operator> <name>xi</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;</operator> <name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rate</name>
<operator>-</operator> <name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flushed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flushed</name></expr></argument>,
<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flushed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_packets</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tileno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>, <decl><type ref="prev"/><name>reslevelno</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>qntsty</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"tier2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>reslevelno</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>precno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>reslevel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name>tileno</name></expr>]</index></name><operator>.</operator><name><name>comp</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>reslevel</name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>precno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>precno</name> <operator>&lt;</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr>;</condition> <incr><expr><name>precno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>encode_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>reslevel</name></expr></argument>, <argument><expr><name>precno</name></expr></argument>, <argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>expn</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>reslevelno</name></expr> ?</condition><then> <expr><literal type="number">3</literal><operator>*</operator><name>reslevelno</name><operator>-</operator><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>nguardbits</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"after tier2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getcut</name><parameter_list>(<parameter><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dwt_norm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>passno</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>passno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>passno</name> <operator>&lt;</operator> <name><name>cblk</name><operator>-&gt;</operator><name>npasses</name></name></expr>;</condition> <incr><expr><name>passno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dr</name> <operator>=</operator> <name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name>passno</name></expr>]</index></name><operator>.</operator><name>rate</name>
<operator>-</operator> <operator>(</operator><ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name>res</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rate</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dd</name> <operator>=</operator> <name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name>passno</name></expr>]</index></name><operator>.</operator><name>disto</name>
<operator>-</operator> <operator>(</operator><ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><name><name>cblk</name><operator>-&gt;</operator><name>passes</name><index>[<expr><name>res</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>disto</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>dd</name> <operator>*</operator> <name>dwt_norm</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>WMSEDEC_SHIFT</name><operator>)</operator> <operator>*</operator> <name>dwt_norm</name> <operator>&gt;=</operator> <name>dr</name> <operator>*</operator> <name>lambda</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>passno</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>truncpasses</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>precno</name></decl>, <decl><type ref="prev"/><name>compno</name></decl>, <decl><type ref="prev"/><name>reslevelno</name></decl>, <decl><type ref="prev"/><name>bandno</name></decl>, <decl><type ref="prev"/><name>cblkno</name></decl>, <decl><type ref="prev"/><name>lev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>lev</name> <operator>=</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>reslevelno</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr><operator>,</operator> <expr><name>lev</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>reslevel</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>precno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>precno</name> <operator>&lt;</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr>;</condition> <incr><expr><name>precno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>nbands</name></name></expr> ;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bandpos</name> <init>= <expr><name>bandno</name> <operator>+</operator> <operator>(</operator><name>reslevelno</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><name><name>reslevel</name><operator>-&gt;</operator><name>band</name></name> <operator>+</operator> <name>bandno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000Prec</name> <modifier>*</modifier></type><name>prec</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name> <operator>+</operator> <name>precno</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cblkno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cblkno</name> <operator>&lt;</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name> <operator>*</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name></expr>;</condition> <incr><expr><name>cblkno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name> <init>= <expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name> <operator>+</operator> <name>cblkno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>ninclpasses</name></name> <operator>=</operator> <call><name>getcut</name><argument_list>(<argument><expr><name>cblk</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>dwt_norms</name><index>[<expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT53</name></expr>]</index><index>[<expr><name>bandpos</name></expr>]</index><index>[<expr><name>lev</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>band</name><operator>-&gt;</operator><name>i_stepsize</name></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_tile</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tileno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>, <decl><type ref="prev"/><name>reslevelno</name></decl>, <decl><type ref="prev"/><name>bandno</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000T1Context</name></type> <name>t1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name>tileno</name></expr>]</index></name><operator>.</operator><name>comp</name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>stride</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>codsty</name><operator>-&gt;</operator><name>log2_cblk_width</name></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"dwt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_dwt_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>comp</name><operator>-&gt;</operator><name>dwt</name></name></expr></argument>, <argument><expr><name><name>comp</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"after dwt -&gt; tier1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>reslevelno</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>reslevel</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>nbands</name></name></expr> ;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><name><name>reslevel</name><operator>-&gt;</operator><name>band</name></name> <operator>+</operator> <name>bandno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000Prec</name> <modifier>*</modifier></type><name>prec</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cblkx</name></decl>, <decl><type ref="prev"/><name>cblky</name></decl>, <decl><type ref="prev"/><name>cblkno</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>xx0</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>, <decl><type ref="prev"/><name>xx1</name></decl>, <decl><type ref="prev"/><name>y0</name></decl>, <decl><type ref="prev"/><name>yy0</name></decl>, <decl><type ref="prev"/><name>yy1</name></decl>, <decl><type ref="prev"/><name>bandpos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>yy0</name> <operator>=</operator> <ternary><condition><expr><name>bandno</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>yy0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yy1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>log2_cblk_height</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_height</name></name></expr></argument>,
<argument><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>yy0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bandpos</name> <operator>=</operator> <name>bandno</name> <operator>+</operator> <operator>(</operator><name>reslevelno</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cblky</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cblky</name> <operator>&lt;</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name></expr>;</condition> <incr><expr><name>cblky</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reslevelno</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>bandno</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>xx0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>xx0</name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>xx0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xx1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>log2_cblk_width</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_width</name></name></expr></argument>,
<argument><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>xx0</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cblkx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cblkx</name> <operator>&lt;</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name></expr>;</condition> <incr><expr><name>cblkx</name><operator>++</operator></expr><operator>,</operator> <expr><name>cblkno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT53</name></expr>)</condition><block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>yy0</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>yy1</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>t1</name><operator>.</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><name>yy0</name><operator>)</operator><operator>*</operator><name><name>t1</name><operator>.</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>xx0</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>xx1</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>i_data</name><index>[<expr><operator>(</operator><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>NMSEDEC_FRACBITS</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>yy0</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>yy1</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>t1</name><operator>.</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><name>yy0</name><operator>)</operator><operator>*</operator><name><name>t1</name><operator>.</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>xx0</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>xx1</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name><name>comp</name><operator>-&gt;</operator><name>i_data</name><index>[<expr><operator>(</operator><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>*</operator><name>ptr</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><literal type="number">16384</literal> <operator>*</operator> <literal type="number">65536</literal> <operator>/</operator> <name><name>band</name><operator>-&gt;</operator><name>i_stepsize</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal> <operator>-</operator> <name>NMSEDEC_FRACBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prec</name><operator>-&gt;</operator><name>cblk</name><index>[<expr><name>cblkno</name></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name><index>[<expr><name>cblkno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prec</name><operator>-&gt;</operator><name>cblk</name><index>[<expr><name>cblkno</name></expr>]</index></name><operator>.</operator><name>passes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name><index>[<expr><name>cblkno</name></expr>]</index></name><operator>.</operator><name>passes</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>JPEG2000_MAX_PASSES</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>prec</name><operator>-&gt;</operator><name>cblk</name><index>[<expr><name>cblkno</name></expr>]</index></name><operator>.</operator><name>passes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prec</name><operator>-&gt;</operator><name>cblk</name><index>[<expr><name>cblkno</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>||</operator> <operator>!</operator><name><name>prec</name><operator>-&gt;</operator><name>cblk</name><index>[<expr><name>cblkno</name></expr>]</index></name><operator>.</operator><name>passes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>encode_cblk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name> <operator>+</operator> <name>cblkno</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>, <argument><expr><name>xx1</name> <operator>-</operator> <name>xx0</name></expr></argument>, <argument><expr><name>yy1</name> <operator>-</operator> <name>yy0</name></expr></argument>,
<argument><expr><name>bandpos</name></expr></argument>, <argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <name>reslevelno</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xx0</name> <operator>=</operator> <name>xx1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xx1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>xx1</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_width</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>yy0</name> <operator>=</operator> <name>yy1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yy1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>yy1</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_height</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"after tier1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"rate control\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>truncpasses</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>encode_packets</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>, <argument><expr><name>tileno</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"after rate control\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tileno</name></decl>, <decl><type ref="prev"/><name>compno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tileno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tileno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name></expr>;</condition> <incr><expr><name>tileno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name>tileno</name></expr>]</index></name><operator>.</operator><name>comp</name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_jpeg2000_cleanup</name><argument_list>(<argument><expr><name>comp</name></expr></argument>, <argument><expr><name>codsty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name>tileno</name></expr>]</index></name><operator>.</operator><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reinit</name><parameter_list>(<parameter><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tileno</name></decl>, <decl><type ref="prev"/><name>compno</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>tileno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tileno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name></expr>;</condition> <incr><expr><name>tileno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>+</operator> <name>tileno</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_jpeg2000_reinit</name><argument_list>(<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>+</operator> <name>compno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_size</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>end</name><operator>-</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tileno</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>chunkstart</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>jp2cstart</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>jp2hstart</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">9</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_start</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture</name></name> <operator>=</operator> <name>pict</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture</name><operator>-&gt;</operator><name>quality</name></name> <operator>*</operator> <name>LAMBDA_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reinit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>CODEC_JP2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x0000000C</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x6A502020</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x0D0A870A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunkstart</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"ftyp"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"jp2\040\040"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"jp2\040"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>chunkstart</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jp2hstart</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"jp2h"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunkstart</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"ihdr"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>chunkstart</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunkstart</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"colr"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>chunkstart</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>palette</name> <init>= <expr><name><name>pict</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>chunkstart</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"pclr"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>AVPALETTE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x070707</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AVPALETTE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>HAVE_BIGENDIAN</name></expr> ?</condition><then> <expr><call><name>AV_RB24</name><argument_list>(<argument><expr><name>palette</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RL24</name><argument_list>(<argument><expr><name>palette</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>palette</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>chunkstart</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunkstart</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"cmap"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>chunkstart</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>jp2hstart</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jp2cstart</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"jp2c"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>JPEG2000_SOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>put_siz</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>put_cod</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>put_qcd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>put_com</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>tileno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tileno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name></expr>;</condition> <incr><expr><name>tileno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>psotptr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>psotptr</name> <operator>=</operator> <call><name>put_sot</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tileno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>JPEG2000_SOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>encode_tile</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>+</operator> <name>tileno</name></expr></argument>, <argument><expr><name>tileno</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psotptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <name>psotptr</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>JPEG2000_EOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>CODEC_JP2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>jp2cstart</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>j2kenc_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>qntsty</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"init\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pred</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pred</name></name> <operator>!=</operator> <name>FF_DWT97_INT</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>CODEC_JP2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Forcing lossless jp2 for pal8\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pred</name></name> <operator>=</operator> <name>FF_DWT97_INT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>CODEC_JP2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_prec_widths</name></name></expr></argument> , <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_prec_widths</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_prec_heights</name></name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_prec_heights</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels2decode</name></name><operator>=</operator>
<name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_cblk_width</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_cblk_height</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>pred</name></name></expr> ?</condition><then> <expr><name>FF_DWT53</name></expr> </then><else>: <expr><name>FF_DWT97_INT</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qntsty</name><operator>-&gt;</operator><name>nguardbits</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Tile dimension not a power of 2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT53</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qntsty</name><operator>-&gt;</operator><name>quantsty</name></name> <operator>=</operator> <name>JPEG2000_QSTY_NONE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qntsty</name><operator>-&gt;</operator><name>quantsty</name></name> <operator>=</operator> <name>JPEG2000_QSTY_SE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block>{<block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planar</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_shift</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_shift</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_jpeg2000_init_tier1_luts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mqc_init_context_tables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_luts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_quantization</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>init_tiles</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"after init\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>j2kenc_destroy</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000EncoderContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(Jpeg2000EncoderContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"format"</literal></expr>, <expr><literal type="string">"Codec Format"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CODEC_JP2</name></expr> }</block></expr>, <expr><name>CODEC_J2K</name></expr>, <expr><name>CODEC_JP2</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"j2k"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CODEC_J2K</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jp2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CODEC_JP2</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tile_width"</literal></expr>, <expr><literal type="string">"Tile Width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tile_width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">256</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal></expr>, <expr><name>VE</name></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"tile_height"</literal></expr>, <expr><literal type="string">"Tile Height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tile_height</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">256</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal></expr>, <expr><name>VE</name></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"pred"</literal></expr>, <expr><literal type="string">"DWT Type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dwt97int"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dwt53"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>j2k_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"jpeg 2000 encoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_jpeg2000_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"jpeg2000"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"JPEG 2000"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_JPEG2000</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Jpeg2000EncoderContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>j2kenc_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>j2kenc_destroy</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_PAL8</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>j2k_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
