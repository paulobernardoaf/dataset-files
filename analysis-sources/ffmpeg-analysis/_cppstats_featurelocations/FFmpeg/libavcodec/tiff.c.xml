<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\tiff.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LZMA</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZMA_API_STATIC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lzma.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"faxcompr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tiff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tiff_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegdec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TiffContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx_mjpeg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>jpgframe</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>get_subimage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>get_page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>get_thumbnail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>TiffType</name></name></type> <name>tiff_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bpp</name></decl>, <name>bppcount</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>palette_is_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>le</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>TiffCompr</name></name></type> <name>compr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>TiffPhotometric</name></name></type> <name>photometric</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>subsampling</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fax_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>predictor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fill_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>res</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_thumbnail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_bayer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pattern</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>black_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>white_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>dng_lut</name><index>[<expr><literal type="number">65536</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sub_ifd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cur_page</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>strips</name></decl>, <name>rps</name>, <name>sstype</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stripsizesoff</name></decl>, <name>stripsize</name>, <name>stripoff</name>, <name>strippos</name>;</decl_stmt>
<decl_stmt><decl><type><name>LZWState</name> <modifier>*</modifier></type><name>lzw</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>is_tiled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_byte_counts_offset</name></decl>, <name>tile_offsets_offset</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_width</name></decl>, <name>tile_length</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_jpeg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>deinvert_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deinvert_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>yuv_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>yuv_line_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>fax_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fax_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>geotag_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TiffGeoTag</name> <modifier>*</modifier></type><name>geotags</name></decl>;</decl_stmt>
}</block></struct></type> <name>TiffContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tiff_set_type</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>TiffType</name></name></type> <name>tiff_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tiff_type</name></name> <operator>&lt;</operator> <name>tiff_type</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tiff_type</name></name> <operator>=</operator> <name>tiff_type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_geotags</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>geotags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET_GEOKEY</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>array</name></type></parameter>, <parameter><type><name>element</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (key &gt;= TIFF_##TYPE##_KEY_ID_OFFSET &amp;&amp;key - TIFF_##TYPE##_KEY_ID_OFFSET &lt; FF_ARRAY_ELEMS(ff_tiff_##array##_name_type_map))return ff_tiff_##array##_name_type_map[key - TIFF_##TYPE##_KEY_ID_OFFSET].element;</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_geokey_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>RET_GEOKEY</name><argument_list>(<argument><expr><name>VERT</name></expr></argument>, <argument><expr><name>vert</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RET_GEOKEY</name><argument_list>(<argument><expr><name>PROJ</name></expr></argument>, <argument><expr><name>proj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RET_GEOKEY</name><argument_list>(<argument><expr><name>GEOG</name></expr></argument>, <argument><expr><name>geog</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RET_GEOKEY</name><argument_list>(<argument><expr><name>CONF</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_geokey_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>RET_GEOKEY</name><argument_list>(<argument><expr><name>VERT</name></expr></argument>, <argument><expr><name>vert</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RET_GEOKEY</name><argument_list>(<argument><expr><name>PROJ</name></expr></argument>, <argument><expr><name>proj</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RET_GEOKEY</name><argument_list>(<argument><expr><name>GEOG</name></expr></argument>, <argument><expr><name>geog</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RET_GEOKEY</name><argument_list>(<argument><expr><name>CONF</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_id_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name><operator>*</operator><operator>)</operator><name>id</name> <operator>-</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>TiffGeoTagKeyName</name><operator>*</operator><operator>)</operator><name>k</name><operator>)</operator><operator>-&gt;</operator><name>key</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>search_keyval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TiffGeoTagKeyName</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TiffGeoTagKeyName</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_id_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_geokey_val</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>TIFF_GEO_KEY_UNDEFINED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"undefined"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>TIFF_GEO_KEY_USER_DEFINED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"User-Defined"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET_GEOKEY_VAL</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (val &gt;= TIFF_##TYPE##_OFFSET &amp;&amp;val - TIFF_##TYPE##_OFFSET &lt; FF_ARRAY_ELEMS(ff_tiff_##array##_codes))return av_strdup(ff_tiff_##array##_codes[val - TIFF_##TYPE##_OFFSET]);</cpp:value></cpp:define>




<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TIFF_GT_MODEL_TYPE_GEOKEY</name></expr>:</case>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>GT_MODEL_TYPE</name></expr></argument>, <argument><expr><name>gt_model_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_GT_RASTER_TYPE_GEOKEY</name></expr>:</case>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>GT_RASTER_TYPE</name></expr></argument>, <argument><expr><name>gt_raster_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_GEOG_LINEAR_UNITS_GEOKEY</name></expr>:</case>
<case>case <expr><name>TIFF_PROJ_LINEAR_UNITS_GEOKEY</name></expr>:</case>
<case>case <expr><name>TIFF_VERTICAL_UNITS_GEOKEY</name></expr>:</case>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>LINEAR_UNIT</name></expr></argument>, <argument><expr><name>linear_unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_GEOG_ANGULAR_UNITS_GEOKEY</name></expr>:</case>
<case>case <expr><name>TIFF_GEOG_AZIMUTH_UNITS_GEOKEY</name></expr>:</case>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>ANGULAR_UNIT</name></expr></argument>, <argument><expr><name>angular_unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_GEOGRAPHIC_TYPE_GEOKEY</name></expr>:</case>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>GCS_TYPE</name></expr></argument>, <argument><expr><name>gcs_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>GCSE_TYPE</name></expr></argument>, <argument><expr><name>gcse_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_GEOG_GEODETIC_DATUM_GEOKEY</name></expr>:</case>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>GEODETIC_DATUM</name></expr></argument>, <argument><expr><name>geodetic_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>GEODETIC_DATUM_E</name></expr></argument>, <argument><expr><name>geodetic_datum_e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_GEOG_ELLIPSOID_GEOKEY</name></expr>:</case>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>ELLIPSOID</name></expr></argument>, <argument><expr><name>ellipsoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_GEOG_PRIME_MERIDIAN_GEOKEY</name></expr>:</case>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>PRIME_MERIDIAN</name></expr></argument>, <argument><expr><name>prime_meridian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_PROJECTED_CS_TYPE_GEOKEY</name></expr>:</case>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><call><name>search_keyval</name><argument_list>(<argument><expr><name>ff_tiff_proj_cs_type_codes</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_tiff_proj_cs_type_codes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ap</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ap</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_PROJECTION_GEOKEY</name></expr>:</case>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><call><name>search_keyval</name><argument_list>(<argument><expr><name>ff_tiff_projection_codes</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_tiff_projection_codes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ap</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ap</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_PROJ_COORD_TRANS_GEOKEY</name></expr>:</case>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>COORD_TRANS</name></expr></argument>, <argument><expr><name>coord_trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_VERTICAL_CS_TYPE_GEOKEY</name></expr>:</case>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>VERT_CS</name></expr></argument>, <argument><expr><name>vert_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RET_GEOKEY_VAL</name><argument_list>(<argument><expr><name>ORTHO_VERT_CS</name></expr></argument>, <argument><expr><name>ortho_vert_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="string">"Unknown-%d"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ap</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>doubles2str</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ap0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>component_len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sep</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>component_len</name> <operator>=</operator> <literal type="number">24LL</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <operator>(</operator><name>INT_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name>component_len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>component_len</name> <operator>*</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ap0</name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>l</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>component_len</name></expr></argument>, <argument><expr><literal type="string">"%.15g%s"</literal></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>component_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ap0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ap</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ap0</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ap0</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>ap0</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_metadata</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>, <parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TIFF_DOUBLE</name></expr>:</case> <return>return <expr><call><name>ff_tadd_doubles_metadata</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TIFF_SHORT</name></expr> :</case> <return>return <expr><call><name>ff_tadd_shorts_metadata</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TIFF_STRING</name></expr>:</case> <return>return <expr><call><name>ff_tadd_string_metadata</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</return>
<default>default :</default> <return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name> <name>av_always_inline</name></type> <name>dng_blit</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_single_comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_u16</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name> <name>av_always_inline</name></type> <name>horizontal_fill</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bpp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>usePtr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>bpp</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<while>while <condition>(<expr><operator>--</operator><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<while>while <condition>(<expr><operator>--</operator><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<while>while <condition>(<expr><operator>--</operator><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>width</name><operator>+</operator><name>offset</name><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>usePtr</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>width</name></expr>]</index></name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<case>case <expr><literal type="number">14</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst16</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_dng</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tiff_type</name></name> <operator>==</operator> <name>TIFF_TYPE_DNG</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>tiff_type</name></name> <operator>==</operator> <name>TIFF_TYPE_CINEMADNG</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><name>is_dng</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">16</literal> <operator>-</operator> <name>bpp</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>usePtr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>deinvert_buffer</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>deinvert_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>deinvert_buf_size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>deinvert_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>deinvert_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unpack_gray</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>lnum</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unpack_yuv</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pu</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>lnum</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>lnum</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>lnum</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>pu</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pv</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if><else>else<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>lnum</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>pu</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pv</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tiff_uncompress</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>z_stream</name></type> <name>zstream</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <operator>*</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zret</name> <operator>=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zret</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Inflate init error: %d\n"</literal></expr></argument>, <argument><expr><name>zret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>zret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zret</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zstream</name></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>zstream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>zret</name> <operator>==</operator> <name>Z_STREAM_END</name></expr> ?</condition><then> <expr><name>Z_OK</name></expr> </then><else>: <expr><name>zret</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tiff_unpack_zlib</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lines</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>strip_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>zbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>line</name></decl>;</decl_stmt>
<expr_stmt><expr><name>outlen</name> <operator>=</operator> <name>width</name> <operator>*</operator> <name>lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zbuf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zbuf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fill_order</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>deinvert_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>zbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>deinvert_buf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tiff_uncompress</name><argument_list>(<argument><expr><name>zbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Uncompressing failed (%lu of %lu) with error %d\n"</literal></expr></argument>, <argument><expr><name>outlen</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>width</name> <operator>*</operator> <name>lines</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>zbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>zbuf</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>horizontal_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unpack_yuv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>strip_start</name> <operator>+</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>zbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LZMA</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tiff_uncompress_lzma</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>lzma_stream</name></type> <name>stream</name> <init>= <expr><name>LZMA_STREAM_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzma_ret</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <operator>*</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lzma_stream_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"LZMA init error: %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lzma_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>LZMA_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lzma_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <name>LZMA_STREAM_END</name></expr> ?</condition><then> <expr><name>LZMA_OK</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tiff_unpack_lzma</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lines</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>strip_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>outlen</name> <init>= <expr><name>width</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>lines</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fill_order</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>deinvert_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>deinvert_buf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tiff_uncompress_lzma</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>LZMA_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Uncompressing failed (%"</literal><name>PRIu64</name><literal type="string">" of %"</literal><name>PRIu64</name><literal type="string">") with error %d\n"</literal></expr></argument>, <argument><expr><name>outlen</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>width</name> <operator>*</operator> <name>lines</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>horizontal_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unpack_yuv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>strip_start</name> <operator>+</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tiff_unpack_fax</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lines</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fax_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fax_buffer_size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fax_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error allocating temporary buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fill_order</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>src2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>src2</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ccitt_unpack</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fax_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>horizontal_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dng_decode_strip</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tiff_unpack_strip</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strip_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lines</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>line</name></decl>, <decl><type ref="prev"/><name>pixels</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ssrc</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_yuv</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_dng</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>planar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_row</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>*</operator>
<name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yuv_line_size</name></name></expr></argument>, <argument><expr><name>bytes_per_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stride</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>width</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>width</name> <operator>&lt;=</operator> <name>bytes_per_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_bayer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY12</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yuv_line_size</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stride</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_DEFLATE</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_ADOBE_DEFLATE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>
<return>return <expr><call><name>tiff_unpack_zlib</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>,
<argument><expr><name>strip_start</name></expr></argument>, <argument><expr><name>is_yuv</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"zlib support not enabled, "</literal>
<literal type="string">"deflate compression not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_LZMA</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LZMA</name></expr></cpp:if>
<return>return <expr><call><name>tiff_unpack_lzma</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>,
<argument><expr><name>strip_start</name></expr></argument>, <argument><expr><name>is_yuv</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"LZMA support not enabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_LZW</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fill_order</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>deinvert_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ssrc</name> <operator>=</operator> <name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>deinvert_buf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Old style LZW is unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_lzw_decode_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lzw</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>FF_LZW_TIFF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing LZW decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pixels</name> <operator>=</operator> <call><name>ff_lzw_decode</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lzw</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pixels</name> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoded only %i bytes of %i\n"</literal></expr></argument>,
<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>horizontal_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unpack_yuv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>strip_start</name> <operator>+</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY12</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unpack_gray</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>strip_start</name> <operator>+</operator> <name>line</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_CCITT_RLE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_G3</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_G4</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_yuv</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY12</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>tiff_unpack_fax</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_yuv</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>yuv_line_size</name></name></expr> </then><else>: <expr><operator>(</operator><name>stride</name> <operator>*</operator> <name>lines</name><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_dng</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tiff_type</name></name> <operator>==</operator> <name>TIFF_TYPE_DNG</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>tiff_type</name></name> <operator>==</operator> <name>TIFF_TYPE_CINEMADNG</name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_NEWJPEG</name> <operator>&amp;&amp;</operator> <name>is_dng</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strips</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"More than one DNG JPEG strips unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dng_decode_strip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>lines</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src</name> <operator>-</operator> <name>ssrc</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Source data overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>bytestream2_get_eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_seek_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>stride</name> <operator>*</operator> <name>line</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TIFF_RAW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ssrc</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>src</name> <operator>&lt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fill_order</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>horizontal_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_bayer</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>is_dng</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_u16</name></decl>, <decl><type ref="prev"/><name>pixel_size_bytes</name></decl>, <decl><type ref="prev"/><name>pixel_size_bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>is_u16</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel_size_bits</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>is_u16</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel_size_bytes</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>is_u16</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dng_blit</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>dst</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>width</name> <operator>/</operator> <name>pixel_size_bytes</name> <operator>*</operator> <name>pixel_size_bits</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name></expr></argument>, 
<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>is_u16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_PACKBITS</name></expr>:</case>
<for>for <control>(<init><expr><name>pixels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixels</name> <operator>&lt;</operator> <name>width</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ssrc</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>src</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>fill_order</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int8_t</name><operator>)</operator> <name><name>ff_reverse</name><index>[<expr><operator>*</operator><name>src</name><operator>++</operator></expr>]</index></name></expr></then><else>: <expr><operator>(</operator><name>int8_t</name><operator>)</operator> <operator>*</operator><name>src</name><operator>++</operator></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pixels</name> <operator>+</operator> <name>code</name> <operator>&gt;</operator> <name>width</name> <operator>||</operator>
<name>ssrc</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>src</name> <operator>&lt;</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Copy went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>horizontal_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name><operator>)</operator></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>code</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>!=</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>code</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pixels</name> <operator>+</operator> <name>code</name> <operator>&gt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>horizontal_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name><operator>)</operator></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>code</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fill_order</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unpack_yuv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>strip_start</name> <operator>+</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY12</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unpack_gray</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>strip_start</name> <operator>+</operator> <name>line</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>uint16_t</name> <name>av_always_inline</name></type> <name>dng_process_color16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>lut</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>black_level</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>scale_factor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>value_norm</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>lut</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>lut</name><index>[<expr><name>value</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>av_clip_uint16_c</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>value</name> <operator>-</operator> <name>black_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>value_norm</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>value</name> <operator>*</operator> <name>scale_factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>av_clip_uint16_c</name><argument_list>(<argument><expr><name>value_norm</name> <operator>*</operator> <literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name> <name>av_always_inline</name></type> <name>dng_process_color8</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>lut</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>black_level</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>scale_factor</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>dng_process_color16</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>lut</name></expr></argument>, <argument><expr><name>black_level</name></expr></argument>, <argument><expr><name>scale_factor</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dng_blit</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_single_comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_u16</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale_factor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scale_factor</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>white_level</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>black_level</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_single_comp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_u16</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 



<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>height</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_u16</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>src_u16</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst_u16</name><operator>++</operator> <operator>=</operator> <call><name>dng_process_color16</name><argument_list>(<argument><expr><operator>*</operator><name>src_u16</name><operator>++</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dng_lut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>black_level</name></name></expr></argument>, <argument><expr><name>scale_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_u16</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst_u16</name><operator>++</operator> <operator>=</operator> <call><name>dng_process_color16</name><argument_list>(<argument><expr><operator>*</operator><name>src_u16</name><operator>++</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dng_lut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>black_level</name></name></expr></argument>, <argument><expr><name>scale_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>is_u16</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_u16</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>src_u16</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst_u16</name><operator>++</operator> <operator>=</operator> <call><name>dng_process_color16</name><argument_list>(<argument><expr><operator>*</operator><name>src_u16</name><operator>++</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dng_lut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>black_level</name></name></expr></argument>, <argument><expr><name>scale_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>dng_process_color8</name><argument_list>(<argument><expr><operator>*</operator><name>src</name><operator>++</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dng_lut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>black_level</name></name></expr></argument>, <argument><expr><name>scale_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dng_decode_jpeg</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tile_byte_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>jpkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dst_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_single_comp</name></decl>, <decl><type ref="prev"/><name>is_u16</name></decl>, <decl><type ref="prev"/><name>pixel_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jpkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>jpkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>tile_byte_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_bayer</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MJpegDecodeContext</name> <modifier>*</modifier></type><name>mjpegdecctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>mjpegdecctx</name><operator>-&gt;</operator><name>bayer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_send_packet</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error submitting a packet for decoding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_frame</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>jpgframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"JPEG decoding error: %s.\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>is_single_comp</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name>w</name> <operator>*</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_u16</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel_size</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>is_u16</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_single_comp</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_u16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DNGs with bpp &lt;= 8 and 1 component are unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>jpgframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_offset</name> <operator>=</operator> <name>dst_x</name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>dst_y</name> <operator>/</operator> <name>pixel_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dst_offset</name> <operator>*</operator> <name>pixel_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_data</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>jpgframe</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dng_blit</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name>dst_data</name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>pixel_size</name></expr></argument>,
<argument><expr><name>src_data</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>jpgframe</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>pixel_size</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>,
<argument><expr><name>is_single_comp</name></expr></argument>,
<argument><expr><name>is_u16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>jpgframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dng_decode_tiles</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_offset_offset</name></decl>, <decl><type ref="prev"/><name>tile_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_byte_count_offset</name></decl>, <decl><type ref="prev"/><name>tile_byte_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_count_x</name></decl>, <decl><type ref="prev"/><name>tile_count_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_width</name></decl>, <decl><type ref="prev"/><name>tile_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_width_leftover</name></decl>, <decl><type ref="prev"/><name>has_height_leftover</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tile_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>jpgframe</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>jpgframe</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>has_width_leftover</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>has_height_leftover</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_length</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>tile_count_x</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tile_count_y</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_length</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>tile_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tile_idx</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_count</name></name></expr>;</condition> <incr><expr><name>tile_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tile_x</name> <operator>=</operator> <name>tile_idx</name> <operator>%</operator> <name>tile_count_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tile_y</name> <operator>=</operator> <name>tile_idx</name> <operator>/</operator> <name>tile_count_x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_width_leftover</name> <operator>&amp;&amp;</operator> <name>tile_x</name> <operator>==</operator> <name>tile_count_x</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>tile_width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tile_width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_height_leftover</name> <operator>&amp;&amp;</operator> <name>tile_y</name> <operator>==</operator> <name>tile_count_y</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>tile_length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_length</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tile_length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_length</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>tile_offset_offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_offsets_offset</name></name> <operator>+</operator> <name>tile_idx</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>tile_offset_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tile_offset</name> <operator>=</operator> <call><name>ff_tget_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>tile_byte_count_offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_byte_counts_offset</name></name> <operator>+</operator> <name>tile_idx</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>tile_byte_count_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tile_byte_count</name> <operator>=</operator> <call><name>ff_tget_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>tile_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dng_decode_jpeg</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>tile_byte_count</name></expr></argument>, <argument><expr><name>pos_x</name></expr></argument>, <argument><expr><name>pos_y</name></expr></argument>, <argument><expr><name>tile_width</name></expr></argument>, <argument><expr><name>tile_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>pos_x</name> <operator>+=</operator> <name>tile_width</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tile_x</name> <operator>==</operator> <name>tile_count_x</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>pos_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_y</name> <operator>+=</operator> <name>tile_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dng_decode_strip</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>jpgframe</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>jpgframe</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>dng_decode_jpeg</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>stripsize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_image</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>create_gray_palette</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>&gt;=</operator> <literal type="number">100</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported image parameters: bpp=%d, bppcount=%d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>planar</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>is_bayer</name></name> <operator>*</operator> <literal type="number">10000</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">11</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>palette_is_set</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_MONOBLACK</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<case>case <expr><literal type="number">21</literal></expr>:</case>
<case>case <expr><literal type="number">41</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>palette_is_set</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>create_gray_palette</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">81</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>palette_is_set</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_PAL8</name></expr> </then><else>: <expr><name>AV_PIX_FMT_GRAY8</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">121</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY12</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10081</literal></expr>:</case>
<switch>switch <condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x02010100</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BAYER_RGGB8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x00010102</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BAYER_BGGR8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x01000201</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BAYER_GBRG8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x01020001</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BAYER_GRBG8</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported Bayer pattern: 0x%X\n"</literal></expr></argument>,
<argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">10101</literal></expr>:</case>
<case>case <expr><literal type="number">10121</literal></expr>:</case>
<case>case <expr><literal type="number">10141</literal></expr>:</case>
<case>case <expr><literal type="number">10161</literal></expr>:</case>
<switch>switch <condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x02010100</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BAYER_RGGB16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x00010102</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BAYER_BGGR16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x01000201</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BAYER_GBRG16</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x01020001</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BAYER_GRBG16</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported Bayer pattern: 0x%X\n"</literal></expr></argument>,
<argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">243</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_YCBCR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV411P</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV440P</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV410P</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported YCbCr subsampling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB24</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">161</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_GRAY16LE</name></expr> </then><else>: <expr><name>AV_PIX_FMT_GRAY16BE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">162</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YA8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">322</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_YA16LE</name></expr> </then><else>: <expr><name>AV_PIX_FMT_YA16BE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">324</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_SEPARATED</name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_RGB0</name></expr> </then><else>: <expr><name>AV_PIX_FMT_RGBA</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">405</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_SEPARATED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGBA</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"bpp=40 without PHOTOMETRIC_SEPARATED is unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">483</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_RGB48LE</name></expr> </then><else>: <expr><name>AV_PIX_FMT_RGB48BE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">644</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_RGBA64LE</name></expr> </then><else>: <expr><name>AV_PIX_FMT_RGBA64BE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1243</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1324</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1483</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_GBRP16LE</name></expr> </then><else>: <expr><name>AV_PIX_FMT_GBRP16BE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1644</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_GBRAP16LE</name></expr> </then><else>: <expr><name>AV_PIX_FMT_GBRAP16BE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"This format is not supported (bpp=%d, bppcount=%d)\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_YCBCR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name><operator>)</operator> <operator>||</operator>
<name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported YCbCr variant\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>create_gray_palette</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name>i</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x010101</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_sar</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>den</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><ternary><condition><expr><name>tag</name> <operator>==</operator> <name>TIFF_YRES</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res</name><index>[<expr><name>offset</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>res</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>num</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>den</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>res</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>||</operator> <name>den</name> <operator>&gt;</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <name>den</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tiff_decode_tag</name><parameter_list>(<parameter><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb_temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tag</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>off</name></decl>, <decl><type ref="prev"/><name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>value2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_tread_tag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TIFF_BYTE</name></expr>:</case>
<case>case <expr><name>TIFF_SHORT</name></expr>:</case>
<case>case <expr><name>TIFF_LONG</name></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_RATIONAL</name></expr>:</case>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>TIFF_LONG</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>TIFF_LONG</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid denominator in rational\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<case>case <expr><name>TIFF_STRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<default>default:</default>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TIFF_SUBFILE</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_thumbnail</name></name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_WIDTH</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_HEIGHT</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_BPP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">5U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"This format is not supported (bpp=%d, %d components)\n"</literal></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TIFF_BYTE</name></expr>:</case>
<case>case <expr><name>TIFF_SHORT</name></expr>:</case>
<case>case <expr><name>TIFF_LONG</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>type_sizes</name><index>[<expr><name>type</name></expr>]</index></name> <operator>*</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>+=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_SAMPLES_PER_PIXEL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Samples per pixel requires a single value, many provided\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">5U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Samples per pixel %d is too large\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>*=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_COMPR</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"compression: %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TIFF_RAW</name></expr>:</case>
<case>case <expr><name>TIFF_PACKBITS</name></expr>:</case>
<case>case <expr><name>TIFF_LZW</name></expr>:</case>
<case>case <expr><name>TIFF_CCITT_RLE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>TIFF_G3</name></expr>:</case>
<case>case <expr><name>TIFF_G4</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fax_opts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_DEFLATE</name></expr>:</case>
<case>case <expr><name>TIFF_ADOBE_DEFLATE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Deflate: ZLib not compiled in\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>TIFF_JPEG</name></expr>:</case>
<case>case <expr><name>TIFF_NEWJPEG</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_jpeg</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_LZMA</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LZMA</name></expr></cpp:if>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"LZMA not compiled in\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown compression method %i\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>TIFF_ROWSPERSTRIP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>TIFF_LONG</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>==</operator> <name>UINT_MAX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_STRIP_OFFS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"strippos %u too large\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strippos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stripoff</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strippos</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strips</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strips</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sot</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_STRIP_SIZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"stripsize %u too large\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stripsizesoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stripsize</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strips</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stripsizesoff</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strips</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sstype</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_XRES</name></expr>:</case>
<case>case <expr><name>TIFF_YRES</name></expr>:</case>
<expr_stmt><expr><call><name>set_sar</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_TILE_OFFSETS</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile_offsets_offset</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_tiled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_TILE_BYTE_COUNTS</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile_byte_counts_offset</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_TILE_LENGTH</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile_length</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_TILE_WIDTH</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_PREDICTOR</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_SUB_IFDS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sub_ifd</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sub_ifd</name></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>TIFF_LONG</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<break>break;</break>
<case>case <expr><name>DNG_LINEARIZATION_TABLE</name></expr>:</case>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dng_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>DNG_BLACK_LEVEL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TIFF_RATIONAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>TIFF_LONG</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>TIFF_LONG</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid black level denominator\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>black_level</name></name> <operator>=</operator> <name>value</name> <operator>/</operator> <name>value2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>black_level</name></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Assuming black level pattern values are identical\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>black_level</name></name> <operator>=</operator> <name>value</name> <operator>/</operator> <name>value2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>DNG_WHITE_LEVEL</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>white_level</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_CFA_PATTERN_DIM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CFA Pattern dimensions are not 2x2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_CFA_PATTERN</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_bayer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_PHOTOMETRIC</name></expr>:</case>
<switch>switch <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TIFF_PHOTOMETRIC_WHITE_IS_ZERO</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_BLACK_IS_ZERO</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_RGB</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_PALETTE</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_SEPARATED</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_YCBCR</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_CFA</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_LINEAR_RAW</name></expr>:</case> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_PHOTOMETRIC_ALPHA_MASK</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_CIE_LAB</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_ICC_LAB</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_ITU_LAB</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_LOG_L</name></expr>:</case>
<case>case <expr><name>TIFF_PHOTOMETRIC_LOG_LUV</name></expr>:</case>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,
<argument><expr><literal type="string">"PhotometricInterpretation 0x%04X"</literal></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PhotometricInterpretation %u is "</literal>
<literal type="string">"unknown\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>TIFF_FILL_ORDER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unknown FillOrder value %d, trying default one\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill_order</name></name> <operator>=</operator> <name>value</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_PAL</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name><name>pal_gb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>type_sizes</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>/</operator> <literal type="number">3</literal> <operator>&gt;</operator> <literal type="number">256</literal> <operator>||</operator>
<call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>count</name> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <name>off</name> <operator>*</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pal_gb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pal_gb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pal_gb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pal_gb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>count</name> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pal_gb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>count</name> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <name>off</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name><name>type_sizes</name><index>[<expr><name>type</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <literal type="number">31U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"palette shift %d is out of range\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>/</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>p</name> <init>= <expr><literal type="number">0xFF000000</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>|=</operator> <operator>(</operator><call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pal_gb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>off</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>|=</operator> <operator>(</operator><call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pal_gb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>off</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>|=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pal_gb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette_is_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>TIFF_PLANAR</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planar</name></name> <operator>=</operator> <name>value</name> <operator>==</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_YCBCR_SUBSAMPLING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"subsample count invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"subsampling %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>TIFF_T4OPTIONS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_G3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fax_opts</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_T6OPTIONS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_G4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fax_opts</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_METADATA</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>sep</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if ((ret = add_metadata(count, type, name, sep, s, frame)) &lt; 0) {av_log(s-&gt;avctx, AV_LOG_ERROR, "Error allocating temporary buffer\n");goto end;}</cpp:value></cpp:define>




<case>case <expr><name>TIFF_MODEL_PIXEL_SCALE</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"ModelPixelScaleTag"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_MODEL_TRANSFORMATION</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"ModelTransformationTag"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_MODEL_TIEPOINT</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"ModelTiepointTag"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_GEO_KEY_DIRECTORY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Multiple geo key directories\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"GeoTIFF_Version"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"GeoTIFF_Key_Revision"</literal></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name> <operator>=</operator> <call><name>ff_tget_short</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name> <operator>&gt;</operator> <name>count</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name> <operator>=</operator> <name>count</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GeoTIFF key directory buffer shorter than specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TiffGeoTag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>geotags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating temporary buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <call><name>ff_tget_short</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <call><name>ff_tget_short</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <call><name>ff_tget_short</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <call><name>get_geokey_val</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><call><name>ff_tget_short</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>ff_tget_short</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>TIFF_GEO_DOUBLE_PARAMS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating temporary buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ff_tget_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TIFF_GEO_DOUBLE_PARAMS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid GeoTIFF key %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Duplicate GeoTIFF key %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ap</name> <init>= <expr><call><name>doubles2str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating temporary buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_GEO_ASCII_PARAMS</name></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TIFF_GEO_ASCII_PARAMS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid GeoTIFF key %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating temporary buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_get_bufferu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ap</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>TIFF_ICC_PROFILE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>TIFF_UNDEFINED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gb_temp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb_temp</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb_temp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_frame_new_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_ICC_PROFILE</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_get_bufferu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb_temp</name></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_ARTIST</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"artist"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_COPYRIGHT</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"copyright"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_DATE</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"date"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_DOCUMENT_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"document_name"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_HOST_COMPUTER</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"computer"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_IMAGE_DESCRIPTION</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_MAKE</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"make"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_MODEL</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"model"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_PAGE_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"page_name"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_PAGE_NUMBER</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"page_number"</literal></expr></argument>, <argument><expr><literal type="string">" / "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>-</operator><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_page</name></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>TIFF_SHORT</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIFF_SOFTWARE_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>ADD_METADATA</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="string">"software"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DNG_VERSION</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>ver</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ver</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ver</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"DNG file, version %u.%u.%u.%u\n"</literal></expr></argument>,
<argument><expr><name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ver</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ver</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tiff_set_type</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_TYPE_DNG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CINEMADNG_TIME_CODES</name></expr>:</case>
<case>case <expr><name>CINEMADNG_FRAME_RATE</name></expr>:</case>
<case>case <expr><name>CINEMADNG_T_STOP</name></expr>:</case>
<case>case <expr><name>CINEMADNG_REEL_NAME</name></expr>:</case>
<case>case <expr><name>CINEMADNG_CAMERA_LABEL</name></expr>:</case>
<expr_stmt><expr><call><name>tiff_set_type</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_TYPE_CINEMADNG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unknown or unsupported tag %d/0x%0X\n"</literal></expr></argument>,
<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>&gt;</operator> <literal type="number">64U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"This format is not supported (bpp=%d, %d components)\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TiffContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>frame</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>last_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>le</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>, <decl><type ref="prev"/><name>planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>entries</name></decl>, <decl><type ref="prev"/><name>stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>soff</name></decl>, <decl><type ref="prev"/><name>ssize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>stripsizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>stripdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry_for_subifd</name></decl>, <decl><type ref="prev"/><name>retry_for_page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_dng</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_tdecode_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>le</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid TIFF header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name>UINT_MAX</name> <operator>-</operator> <literal type="number">14</literal> <operator>||</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>off</name> <operator>+</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"IFD offset is greater than image size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>le</name></name> <operator>=</operator> <name>le</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tiff_type</name></name> <operator>=</operator> <name>TIFF_TYPE_TIFF</name></expr>;</expr_stmt>
<label><name>again</name>:</label>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_thumbnail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>=</operator> <name>TIFF_PHOTOMETRIC_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>=</operator> <name>TIFF_RAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill_order</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>white_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_bayer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_tiled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_jpeg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_page</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dng_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free_geotags</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stripsizesoff</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>strippos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>ff_tget_short</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>entries</name> <operator>*</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tiff_decode_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>get_thumbnail</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_thumbnail</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"No embedded thumbnail present\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>retry_for_subifd</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sub_ifd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>get_subimage</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>get_thumbnail</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_thumbnail</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>retry_for_page</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>get_page</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_page</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>get_page</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>last_off</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retry_for_page</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>ff_tget_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>retry_for_subifd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sub_ifd</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>retry_for_subifd</name> <operator>||</operator> <name>retry_for_page</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Requested entry not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;=</operator> <name>last_off</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"non increasing IFD offset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name>UINT_MAX</name> <operator>-</operator> <literal type="number">14</literal> <operator>||</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>off</name> <operator>+</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"IFD offset is greater than image size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sub_ifd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>is_dng</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tiff_type</name></name> <operator>==</operator> <name>TIFF_TYPE_DNG</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>tiff_type</name></name> <operator>==</operator> <name>TIFF_TYPE_CINEMADNG</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>geotag_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><call><name>get_geokey_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keyname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unknown or unsupported GeoTIFF key %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_geokey_type</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Type of GeoTIFF key %d is wrong\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>geotags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Writing metadata with key '%s' failed\n"</literal></expr></argument>, <argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>is_dng</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>white_level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>white_level</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>white_level</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>black_level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"BlackLevel (%"</literal><name>PRId32</name><literal type="string">") must be less than WhiteLevel (%"</literal><name>PRId32</name><literal type="string">")\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>black_level</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>white_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_tiled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>strippos</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>stripoff</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Image data is missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_image</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_tiled</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strips</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>stripsize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Image data size missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stripsize</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>stripoff</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stripsizesoff</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stripsizesoff</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stripsizes</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>stripsizesoff</name></name></expr></argument>,
<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>stripsizesoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strippos</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strippos</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stripdata</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>strippos</name></name></expr></argument>,
<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>strippos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"rps %d invalid\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_LINEAR_RAW</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_CFA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_LINEAR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_BLACK_IS_ZERO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_GAMMA22</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>is_dng</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_tiled</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_jpeg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"DNG uncompressed tiled images"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_bayer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"DNG JPG-compressed tiled non-bayer-encoded images"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dng_decode_tiles</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>(</operator><name>AVFrame</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>planes</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>planar</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>five_planes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remaining</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decoded_height</name></decl>;</decl_stmt>
<expr_stmt><expr><name>stride</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_SEPARATED</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGBA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stride</name> <operator>=</operator> <name>stride</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>five_planes</name> <operator>=</operator>
<name>dst</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>stride</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stripsizesoff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ssize</name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stripsizes</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sstype</name></name></expr></argument>, <argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ssize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>stripsize</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strippos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>soff</name> <operator>=</operator> <call><name>ff_tget</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stripdata</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sot</name></name></expr></argument>, <argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>soff</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>stripoff</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>soff</name> <operator>&gt;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>ssize</name> <operator>&gt;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>soff</name> <operator>||</operator> <name>ssize</name> <operator>&gt;</operator> <name>remaining</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid strip size/offset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>five_planes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>ssize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tiff_unpack_strip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>soff</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rps</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>five_planes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>decoded_height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>predictor</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_YCBCR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"predictor == 2 with YUV is unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <ternary><condition><expr><name>five_planes</name></expr> ?</condition><then> <expr><name>five_planes</name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>soff</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>planar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>soff</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>soff</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ssize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name>soff</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB48LE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGBA64LE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY16LE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YA16LE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBRP16LE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP16LE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>decoded_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>soff</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ssize</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>soff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB48BE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGBA64BE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY16BE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YA16BE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBRP16BE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP16BE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>decoded_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>soff</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ssize</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>soff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>decoded_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>soff</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ssize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>dst</name><index>[<expr><name>j</name> <operator>-</operator> <name>soff</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_WHITE_IS_ZERO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>stride</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_SEPARATED</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB0</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGBA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB0</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><ternary><condition><expr><name>five_planes</name></expr> ?</condition><then> <expr><name>five_planes</name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">255</literal> <operator>-</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <name>j</name></expr> ]</index></name><operator>)</operator> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>j</name></expr> ]</index></name> <operator>=</operator> <name>r</name> <operator>*</operator> <literal type="number">257</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name> <operator>*</operator> <literal type="number">257</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>*</operator> <literal type="number">257</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGBA</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>x</name> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>five_planes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>photometric</name></name> <operator>==</operator> <name>TIFF_PHOTOMETRIC_SEPARATED</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGBA64BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>k</name> <init>= <expr><literal type="number">65535</literal> <operator>-</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name> <init>= <expr><operator>(</operator><literal type="number">65535</literal> <operator>-</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>j</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>g</name> <init>= <expr><operator>(</operator><literal type="number">65535</literal> <operator>-</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><literal type="number">65535</literal> <operator>-</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>j</name></expr></argument> , <argument><expr><name>r</name> <operator>*</operator> <literal type="number">65537</literal> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>g</name> <operator>*</operator> <literal type="number">65537</literal> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <literal type="number">65537</literal> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>planar</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>bppcount</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_bayer</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>white_level</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_dng</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>white_level</name></name><operator>)</operator> <operator>*</operator> <literal type="number">65535</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>tiff_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TiffContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_lzw_decode_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lzw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>lzw</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_ccitt_unpack_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>jpgframe</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>jpgframe</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name>AV_CODEC_ID_MJPEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name></name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name><operator>-&gt;</operator><name>flags2</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name><operator>-&gt;</operator><name>dct_algo</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>dct_algo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_codec_open2_recursive</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>tiff_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TiffContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_geotags</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_lzw_decode_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lzw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>deinvert_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>deinvert_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_line_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fax_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fax_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>jpgframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>avctx_mjpeg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TiffContext, x)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>tiff_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"subimage"</literal></expr>, <expr><literal type="string">"decode subimage instead if available"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>get_subimage</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_VIDEO_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"thumbnail"</literal></expr>, <expr><literal type="string">"decode embedded thumbnail subimage instead if available"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>get_thumbnail</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_VIDEO_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"page"</literal></expr>, <expr><literal type="string">"page number of multi-page image to decode (starting from 1)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>get_page</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT16_MAX</name></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_VIDEO_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>tiff_decoder_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"TIFF decoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>tiff_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_tiff_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tiff"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"TIFF image"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TIFF</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TiffContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>tiff_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>tiff_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>tiff_init</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>tiff_decoder_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
