<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\mpegvideoenc_qns_template.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inline_asm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ABS</name></cpp:macro> <cpp:value>(512 &gt;&gt; (SCALE_OFFSET&gt;0 ? SCALE_OFFSET : 0))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name> <name>DEF</name></type>(<name>try_8x8basis</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>rem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>weight</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>basis</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MAX_ABS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name><operator>&lt;&lt;=</operator> <literal type="number">16</literal> <operator>+</operator> <name>SCALE_OFFSET</name> <operator>-</operator> <name>BASIS_SHIFT</name> <operator>+</operator> <name>RECON_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_RND</name><argument_list>(<argument><expr><name>mm6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"pxor %%mm7, %%mm7 \n\t"
"movd %4, %%mm5 \n\t"
"punpcklwd %%mm5, %%mm5 \n\t"
"punpcklwd %%mm5, %%mm5 \n\t"
".p2align 4 \n\t"
"1: \n\t"
"movq (%1, %0), %%mm0 \n\t"
"movq 8(%1, %0), %%mm1 \n\t"
PMULHRW(%%mm0, %%mm1, %%mm5, %%mm6)
"paddw (%2, %0), %%mm0 \n\t"
"paddw 8(%2, %0), %%mm1 \n\t"
"psraw $6, %%mm0 \n\t"
"psraw $6, %%mm1 \n\t"
"pmullw (%3, %0), %%mm0 \n\t"
"pmullw 8(%3, %0), %%mm1 \n\t"
"pmaddwd %%mm0, %%mm0 \n\t"
"pmaddwd %%mm1, %%mm1 \n\t"
"paddd %%mm1, %%mm0 \n\t"
"psrld $4, %%mm0 \n\t"
"paddd %%mm0, %%mm7 \n\t"
"add $16, %0 \n\t"
"cmp $128, %0 \n\t" 
" jb 1b \n\t"
PHADDD(%%mm7, %%mm6)
"psrld $2, %%mm7 \n\t"
"movd %%mm7, %0 \n\t"

: "+r" (i)
: "r"(basis), "r"(rem), "r"(weight), "g"(scale)
);</asm>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>DEF</name></type>(<name>add_8x8basis</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>rem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>basis</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MAX_ABS</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>scale</name><operator>&lt;&lt;=</operator> <literal type="number">16</literal> <operator>+</operator> <name>SCALE_OFFSET</name> <operator>-</operator> <name>BASIS_SHIFT</name> <operator>+</operator> <name>RECON_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_RND</name><argument_list>(<argument><expr><name>mm6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"movd %3, %%mm5 \n\t"
"punpcklwd %%mm5, %%mm5 \n\t"
"punpcklwd %%mm5, %%mm5 \n\t"
".p2align 4 \n\t"
"1: \n\t"
"movq (%1, %0), %%mm0 \n\t"
"movq 8(%1, %0), %%mm1 \n\t"
PMULHRW(%%mm0, %%mm1, %%mm5, %%mm6)
"paddw (%2, %0), %%mm0 \n\t"
"paddw 8(%2, %0), %%mm1 \n\t"
"movq %%mm0, (%2, %0) \n\t"
"movq %%mm1, 8(%2, %0) \n\t"
"add $16, %0 \n\t"
"cmp $128, %0 \n\t" 
" jb 1b \n\t"

: "+r" (i)
: "r"(basis), "r"(rem), "g"(scale)
);</asm>
</block_content>}</block></if><else>else<block>{<block_content>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>rem</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>basis</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>scale</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>BASIS_SHIFT</name> <operator>-</operator> <name>RECON_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>BASIS_SHIFT</name> <operator>-</operator> <name>RECON_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
