<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\h264dsp_init.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h264dsp.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_ADD_FUNC</name><parameter_list>(<parameter><type><name>NUM</name></type></parameter>, <parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_h264_idct ##NUM ##_add_ ##DEPTH ##_ ##OPT(uint8_t *dst, int16_t *block, int stride);</cpp:value></cpp:define>




<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument/>, <argument><literal type="number">8</literal></argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument/>, <argument><literal type="number">8</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument/>, <argument><literal type="number">8</literal></argument>, <argument>avx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument/>, <argument><literal type="number">10</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument>_dc</argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument>_dc</argument>, <argument><literal type="number">8</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument>_dc</argument>, <argument><literal type="number">8</literal></argument>, <argument>avx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument>_dc</argument>, <argument><literal type="number">10</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument><literal type="number">8_dc</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument><literal type="number">8_dc</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument/>, <argument><literal type="number">10</literal></argument>, <argument>avx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument><literal type="number">8_dc</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>avx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>avx</argument>)</argument_list></macro>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_ADD_REP_FUNC</name><parameter_list>(<parameter><type><name>NUM</name></type></parameter>, <parameter><type><name>REP</name></type></parameter>, <parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_h264_idct ##NUM ##_add ##REP ##_ ##DEPTH ##_ ##OPT (uint8_t *dst, const int *block_offset, int16_t *block, int stride, const uint8_t nnzc[6 * 8]);</cpp:value></cpp:define>




<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>avx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument/>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument/>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument/>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument/>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument/>, <argument><literal type="complex">16intra</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument/>, <argument><literal type="complex">16intra</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument/>, <argument><literal type="complex">16intra</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument/>, <argument><literal type="complex">16intra</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument/>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>avx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC</name><argument_list>(<argument/>, <argument><literal type="complex">16intra</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>avx</argument>)</argument_list></macro>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_ADD_REP_FUNC2</name><parameter_list>(<parameter><type><name>NUM</name></type></parameter>, <parameter><type><name>REP</name></type></parameter>, <parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_h264_idct ##NUM ##_add ##REP ##_ ##DEPTH ##_ ##OPT (uint8_t **dst, const int *block_offset, int16_t *block, int stride, const uint8_t nnzc[6 * 8]);</cpp:value></cpp:define>




<macro><name>IDCT_ADD_REP_FUNC2</name><argument_list>(<argument/>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC2</name><argument_list>(<argument/>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC2</name><argument_list>(<argument/>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC2</name><argument_list>(<argument/>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC2</name><argument_list>(<argument/>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>avx</argument>)</argument_list></macro>

<macro><name>IDCT_ADD_REP_FUNC2</name><argument_list>(<argument/>, <argument><literal type="number">8_422</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>mmx</argument>)</argument_list></macro>

<macro><name>IDCT_ADD_REP_FUNC2</name><argument_list>(<argument/>, <argument><literal type="number">8_422</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>IDCT_ADD_REP_FUNC2</name><argument_list>(<argument/>, <argument><literal type="number">8_422</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>avx</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>ff_h264_luma_dc_dequant_idct_mmx</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qmul</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_h264_luma_dc_dequant_idct_sse2</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qmul</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>ff_h264_loop_filter_strength_mmxext</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>bS</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>nnz</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int8_t</name></type> <name><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bidir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>edges</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mask_mv0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask_mv1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LF_FUNC</name><parameter_list>(<parameter><type><name>DIR</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_deblock_ ##DIR ##_ ##TYPE ##_ ##DEPTH ##_ ##OPT(uint8_t *pix, ptrdiff_t stride, int alpha, int beta, int8_t *tc0);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LF_IFUNC</name><parameter_list>(<parameter><type><name>DIR</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_deblock_ ##DIR ##_ ##TYPE ##_ ##DEPTH ##_ ##OPT(uint8_t *pix, ptrdiff_t stride, int alpha, int beta);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LF_FUNCS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LF_FUNC(h, chroma, depth, mmxext) LF_IFUNC(h, chroma_intra, depth, mmxext) LF_FUNC(h, chroma422, depth, mmxext) LF_IFUNC(h, chroma422_intra, depth, mmxext) LF_FUNC(v, chroma, depth, mmxext) LF_IFUNC(v, chroma_intra, depth, mmxext) LF_FUNC(h, luma, depth, mmxext) LF_IFUNC(h, luma_intra, depth, mmxext) LF_FUNC(h, luma, depth, sse2) LF_IFUNC(h, luma_intra, depth, sse2) LF_FUNC(v, luma, depth, sse2) LF_IFUNC(v, luma_intra, depth, sse2) LF_FUNC(h, chroma, depth, sse2) LF_IFUNC(h, chroma_intra, depth, sse2) LF_FUNC(h, chroma422, depth, sse2) LF_IFUNC(h, chroma422_intra, depth, sse2) LF_FUNC(v, chroma, depth, sse2) LF_IFUNC(v, chroma_intra, depth, sse2) LF_FUNC(h, luma, depth, avx) LF_IFUNC(h, luma_intra, depth, avx) LF_FUNC(v, luma, depth, avx) LF_IFUNC(v, luma_intra, depth, avx) LF_FUNC(h, chroma, depth, avx) LF_IFUNC(h, chroma_intra, depth, avx) LF_FUNC(h, chroma422, depth, avx) LF_IFUNC(h, chroma422_intra, depth, avx) LF_FUNC(v, chroma, depth, avx) LF_IFUNC(v, chroma_intra, depth, avx)</cpp:value></cpp:define>





























<macro><name>LF_FUNC</name><argument_list>(<argument>h</argument>, <argument>luma_mbaff</argument>, <argument><literal type="number">8</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>LF_FUNC</name><argument_list>(<argument>h</argument>, <argument>luma_mbaff</argument>, <argument><literal type="number">8</literal></argument>, <argument>avx</argument>)</argument_list></macro>

<macro><name>LF_FUNCS</name><argument_list>(<argument>uint8_t</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>LF_FUNCS</name><argument_list>(<argument>uint16_t</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name> <operator>&amp;&amp;</operator> <name>HAVE_MMXEXT_EXTERNAL</name></expr></cpp:if>
<macro><name>LF_FUNC</name><argument_list>(<argument>v8</argument>, <argument>luma</argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>void</name></type> <name>deblock_v_luma_8_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tc0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>tc0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_deblock_v8_luma_8_mmxext</name><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tc0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>tc0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_deblock_v8_luma_8_mmxext</name><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<macro><name>LF_IFUNC</name><argument_list>(<argument>v8</argument>, <argument>luma_intra</argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>void</name></type> <name>deblock_v_luma_intra_8_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_deblock_v8_luma_intra_8_mmxext</name><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_deblock_v8_luma_intra_8_mmxext</name><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<macro><name>LF_FUNC</name><argument_list>(<argument>v</argument>, <argument>luma</argument>, <argument><literal type="number">10</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>LF_IFUNC</name><argument_list>(<argument>v</argument>, <argument>luma_intra</argument>, <argument><literal type="number">10</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_WEIGHT</name><parameter_list>(<parameter><type><name>W</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_h264_weight_ ##W ##_ ##OPT(uint8_t *dst, ptrdiff_t stride, int height, int log2_denom, int weight, int offset);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_BIWEIGHT</name><parameter_list>(<parameter><type><name>W</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_h264_biweight_ ##W ##_ ##OPT(uint8_t *dst, uint8_t *src, ptrdiff_t stride, int height, int log2_denom, int weightd, int weights, int offset);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_BIWEIGHT_MMX</name><parameter_list>(<parameter><type><name>W</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H264_WEIGHT(W, mmxext) H264_BIWEIGHT(W, mmxext)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_BIWEIGHT_MMX_SSE</name><parameter_list>(<parameter><type><name>W</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H264_BIWEIGHT_MMX(W) H264_WEIGHT(W, sse2) H264_BIWEIGHT(W, sse2) H264_BIWEIGHT(W, ssse3)</cpp:value></cpp:define>





<macro><name>H264_BIWEIGHT_MMX_SSE</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>H264_BIWEIGHT_MMX_SSE</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>H264_BIWEIGHT_MMX</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_WEIGHT_10</name><parameter_list>(<parameter><type><name>W</name></type></parameter>, <parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_h264_weight_ ##W ##_ ##DEPTH ##_ ##OPT(uint8_t *dst, ptrdiff_t stride, int height, int log2_denom, int weight, int offset);</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_BIWEIGHT_10</name><parameter_list>(<parameter><type><name>W</name></type></parameter>, <parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_h264_biweight_ ##W ##_ ##DEPTH ##_ ##OPT(uint8_t *dst, uint8_t *src, ptrdiff_t stride, int height, int log2_denom, int weightd, int weights, int offset);</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_BIWEIGHT_10_SSE</name><parameter_list>(<parameter><type><name>W</name></type></parameter>, <parameter><type><name>DEPTH</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H264_WEIGHT_10(W, DEPTH, sse2) H264_WEIGHT_10(W, DEPTH, sse4) H264_BIWEIGHT_10(W, DEPTH, sse2) H264_BIWEIGHT_10(W, DEPTH, sse4)</cpp:value></cpp:define>





<macro><name>H264_BIWEIGHT_10_SSE</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>H264_BIWEIGHT_10_SSE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>H264_BIWEIGHT_10_SSE</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264dsp_init_x86</name><parameter_list>(<parameter><decl><type><name>H264DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_loop_filter_strength</name></name> <operator>=</operator> <name>ff_h264_loop_filter_strength_mmxext</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_dc_add</name></name> <operator>=</operator>
<name><name>c</name><operator>-&gt;</operator><name>h264_idct_add</name></name> <operator>=</operator> <name>ff_h264_idct_add_8_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_dc_add</name></name> <operator>=</operator>
<name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add</name></name> <operator>=</operator> <name>ff_h264_idct8_add_8_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16</name></name> <operator>=</operator> <name>ff_h264_idct_add16_8_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add4</name></name> <operator>=</operator> <name>ff_h264_idct8_add4_8_mmx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_8_mmx</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_422_8_mmx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16intra</name></name> <operator>=</operator> <name>ff_h264_idct_add16intra_8_mmx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_CMOV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_luma_dc_dequant_idct</name></name> <operator>=</operator> <name>ff_h264_luma_dc_dequant_idct_mmx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_dc_add</name></name> <operator>=</operator> <name>ff_h264_idct_dc_add_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_dc_add</name></name> <operator>=</operator> <name>ff_h264_idct8_dc_add_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16</name></name> <operator>=</operator> <name>ff_h264_idct_add16_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add4</name></name> <operator>=</operator> <name>ff_h264_idct8_add4_8_mmxext</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_8_mmxext</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16intra</name></name> <operator>=</operator> <name>ff_h264_idct_add16intra_8_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_intra_8_mmxext</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_chroma_intra_8_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma422_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_chroma422_intra_8_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name> <operator>&amp;&amp;</operator> <name>HAVE_MMXEXT_EXTERNAL</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma</name></name> <operator>=</operator> <name>deblock_v_luma_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_h_luma_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma_intra</name></name> <operator>=</operator> <name>deblock_v_luma_intra_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_luma_intra_8_mmxext</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_16_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_4_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_16_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_4_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add</name></name> <operator>=</operator> <name>ff_h264_idct8_add_8_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16</name></name> <operator>=</operator> <name>ff_h264_idct_add16_8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add4</name></name> <operator>=</operator> <name>ff_h264_idct8_add4_8_sse2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_8_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16intra</name></name> <operator>=</operator> <name>ff_h264_idct_add16intra_8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_luma_dc_dequant_idct</name></name> <operator>=</operator> <name>ff_h264_luma_dc_dequant_idct_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_16_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_8_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_16_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_8_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_v_luma_8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_h_luma_8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_luma_intra_8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_luma_intra_8_sse2</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_mbaff</name></name> <operator>=</operator> <name>ff_deblock_h_luma_mbaff_8_sse2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_intra_8_sse2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma_8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_chroma_intra_8_sse2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma422_8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_chroma422_intra_8_sse2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add</name></name> <operator>=</operator> <name>ff_h264_idct_add_8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_dc_add</name></name> <operator>=</operator> <name>ff_h264_idct_dc_add_8_sse2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_16_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_8_ssse3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_v_luma_8_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_h_luma_8_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_luma_intra_8_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_luma_intra_8_avx</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_mbaff</name></name> <operator>=</operator> <name>ff_deblock_h_luma_mbaff_8_avx</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_8_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_intra_8_avx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma_8_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_chroma_intra_8_avx</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma422_8_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_chroma422_intra_8_avx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add</name></name> <operator>=</operator> <name>ff_h264_idct_add_8_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_dc_add</name></name> <operator>=</operator> <name>ff_h264_idct_dc_add_8_avx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_10_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_intra_10_mmxext</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma_10_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma422_10_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_v_luma_10_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_h_luma_10_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_luma_intra_10_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_luma_intra_10_mmxext</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_dc_add</name></name> <operator>=</operator> <name>ff_h264_idct_dc_add_10_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add</name></name> <operator>=</operator> <name>ff_h264_idct_add_10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_dc_add</name></name> <operator>=</operator> <name>ff_h264_idct8_dc_add_10_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16</name></name> <operator>=</operator> <name>ff_h264_idct_add16_10_sse2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_10_sse2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_422_10_sse2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16intra</name></name> <operator>=</operator> <name>ff_h264_idct_add16intra_10_sse2</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALIGNED_STACK</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add</name></name> <operator>=</operator> <name>ff_h264_idct8_add_10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add4</name></name> <operator>=</operator> <name>ff_h264_idct8_add4_10_sse2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_16_10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_8_10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_4_10_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_16_10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_8_10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_4_10_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_intra_10_sse2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma_10_sse2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma422_10_sse2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALIGNED_STACK</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_v_luma_10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_h_luma_10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_luma_intra_10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_luma_intra_10_sse2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE4</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_16_10_sse4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_8_10_sse4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_h264_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_weight_4_10_sse4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_16_10_sse4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_8_10_sse4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_h264_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_h264_biweight_4_10_sse4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_dc_add</name></name> <operator>=</operator>
<name><name>c</name><operator>-&gt;</operator><name>h264_idct_add</name></name> <operator>=</operator> <name>ff_h264_idct_add_10_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_dc_add</name></name> <operator>=</operator> <name>ff_h264_idct8_dc_add_10_avx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16</name></name> <operator>=</operator> <name>ff_h264_idct_add16_10_avx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_10_avx</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add8</name></name> <operator>=</operator> <name>ff_h264_idct_add8_422_10_avx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct_add16intra</name></name> <operator>=</operator> <name>ff_h264_idct_add16intra_10_avx</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALIGNED_STACK</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add</name></name> <operator>=</operator> <name>ff_h264_idct8_add_10_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_idct8_add4</name></name> <operator>=</operator> <name>ff_h264_idct8_add4_10_avx</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_10_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_chroma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_chroma_intra_10_avx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma_10_avx</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_chroma</name></name> <operator>=</operator> <name>ff_deblock_h_chroma422_10_avx</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALIGNED_STACK</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_v_luma_10_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma</name></name> <operator>=</operator> <name>ff_deblock_h_luma_10_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_v_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_v_luma_intra_10_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h264_h_loop_filter_luma_intra</name></name> <operator>=</operator> <name>ff_deblock_h_luma_intra_10_avx</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
