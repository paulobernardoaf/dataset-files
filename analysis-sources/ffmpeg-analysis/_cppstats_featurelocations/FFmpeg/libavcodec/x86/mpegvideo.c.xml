<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\mpegvideo.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegvideodata.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_h263_intra_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>qmul</name></decl>, <decl><type ref="prev"/><name>qadd</name></decl>, <decl><type ref="prev"/><name>nCoeffs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qmul</name> <operator>=</operator> <name>qscale</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>qadd</name> <operator>=</operator> <operator>(</operator><name>qscale</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>qadd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name><operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ac_pred</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nCoeffs</name><operator>=</operator><literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>raster_end</name><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"movd %1, %%mm6 \n\t" 
"packssdw %%mm6, %%mm6 \n\t"
"packssdw %%mm6, %%mm6 \n\t"
"movd %2, %%mm5 \n\t" 
"pxor %%mm7, %%mm7 \n\t"
"packssdw %%mm5, %%mm5 \n\t"
"packssdw %%mm5, %%mm5 \n\t"
"psubw %%mm5, %%mm7 \n\t"
"pxor %%mm4, %%mm4 \n\t"
".p2align 4 \n\t"
"1: \n\t"
"movq (%0, %3), %%mm0 \n\t"
"movq 8(%0, %3), %%mm1 \n\t"

"pmullw %%mm6, %%mm0 \n\t"
"pmullw %%mm6, %%mm1 \n\t"

"movq (%0, %3), %%mm2 \n\t"
"movq 8(%0, %3), %%mm3 \n\t"

"pcmpgtw %%mm4, %%mm2 \n\t" 
"pcmpgtw %%mm4, %%mm3 \n\t" 

"pxor %%mm2, %%mm0 \n\t"
"pxor %%mm3, %%mm1 \n\t"

"paddw %%mm7, %%mm0 \n\t"
"paddw %%mm7, %%mm1 \n\t"

"pxor %%mm0, %%mm2 \n\t"
"pxor %%mm1, %%mm3 \n\t"

"pcmpeqw %%mm7, %%mm0 \n\t" 
"pcmpeqw %%mm7, %%mm1 \n\t" 

"pandn %%mm2, %%mm0 \n\t"
"pandn %%mm3, %%mm1 \n\t"

"movq %%mm0, (%0, %3) \n\t"
"movq %%mm1, 8(%0, %3) \n\t"

"add $16, %3 \n\t"
"jng 1b \n\t"
::"r" (block+nCoeffs), "rm"(qmul), "rm" (qadd), "r" (2*(-nCoeffs))
: "memory"
);</asm>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>level</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_h263_inter_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>qmul</name></decl>, <decl><type ref="prev"/><name>qadd</name></decl>, <decl><type ref="prev"/><name>nCoeffs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qmul</name> <operator>=</operator> <name>qscale</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qadd</name> <operator>=</operator> <operator>(</operator><name>qscale</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name><operator>.</operator><name>raster_end</name><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"movd %1, %%mm6 \n\t" 
"packssdw %%mm6, %%mm6 \n\t"
"packssdw %%mm6, %%mm6 \n\t"
"movd %2, %%mm5 \n\t" 
"pxor %%mm7, %%mm7 \n\t"
"packssdw %%mm5, %%mm5 \n\t"
"packssdw %%mm5, %%mm5 \n\t"
"psubw %%mm5, %%mm7 \n\t"
"pxor %%mm4, %%mm4 \n\t"
".p2align 4 \n\t"
"1: \n\t"
"movq (%0, %3), %%mm0 \n\t"
"movq 8(%0, %3), %%mm1 \n\t"

"pmullw %%mm6, %%mm0 \n\t"
"pmullw %%mm6, %%mm1 \n\t"

"movq (%0, %3), %%mm2 \n\t"
"movq 8(%0, %3), %%mm3 \n\t"

"pcmpgtw %%mm4, %%mm2 \n\t" 
"pcmpgtw %%mm4, %%mm3 \n\t" 

"pxor %%mm2, %%mm0 \n\t"
"pxor %%mm3, %%mm1 \n\t"

"paddw %%mm7, %%mm0 \n\t"
"paddw %%mm7, %%mm1 \n\t"

"pxor %%mm0, %%mm2 \n\t"
"pxor %%mm1, %%mm3 \n\t"

"pcmpeqw %%mm7, %%mm0 \n\t" 
"pcmpeqw %%mm7, %%mm1 \n\t" 

"pandn %%mm2, %%mm0 \n\t"
"pandn %%mm3, %%mm1 \n\t"

"movq %%mm0, (%0, %3) \n\t"
"movq %%mm1, 8(%0, %3) \n\t"

"add $16, %3 \n\t"
"jng 1b \n\t"
::"r" (block+nCoeffs), "rm"(qmul), "rm" (qadd), "r" (2*(-nCoeffs))
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_mpeg1_intra_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>nCoeffs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block0</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>raster_end</name><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr> ]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>block0</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>block0</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlw $15, %%mm7 \n\t"
"movd %2, %%mm6 \n\t"
"packssdw %%mm6, %%mm6 \n\t"
"packssdw %%mm6, %%mm6 \n\t"
"mov %3, %%"FF_REG_a" \n\t"
".p2align 4 \n\t"
"1: \n\t"
"movq (%0, %%"FF_REG_a"), %%mm0 \n\t"
"movq 8(%0, %%"FF_REG_a"), %%mm1\n\t"
"movq (%1, %%"FF_REG_a"), %%mm4 \n\t"
"movq 8(%1, %%"FF_REG_a"), %%mm5\n\t"
"pmullw %%mm6, %%mm4 \n\t" 
"pmullw %%mm6, %%mm5 \n\t" 
"pxor %%mm2, %%mm2 \n\t"
"pxor %%mm3, %%mm3 \n\t"
"pcmpgtw %%mm0, %%mm2 \n\t" 
"pcmpgtw %%mm1, %%mm3 \n\t" 
"pxor %%mm2, %%mm0 \n\t"
"pxor %%mm3, %%mm1 \n\t"
"psubw %%mm2, %%mm0 \n\t" 
"psubw %%mm3, %%mm1 \n\t" 
"pmullw %%mm4, %%mm0 \n\t" 
"pmullw %%mm5, %%mm1 \n\t" 
"pxor %%mm4, %%mm4 \n\t"
"pxor %%mm5, %%mm5 \n\t" 
"pcmpeqw (%0, %%"FF_REG_a"), %%mm4 \n\t" 
"pcmpeqw 8(%0, %%"FF_REG_a"), %%mm5\n\t" 
"psraw $3, %%mm0 \n\t"
"psraw $3, %%mm1 \n\t"
"psubw %%mm7, %%mm0 \n\t"
"psubw %%mm7, %%mm1 \n\t"
"por %%mm7, %%mm0 \n\t"
"por %%mm7, %%mm1 \n\t"
"pxor %%mm2, %%mm0 \n\t"
"pxor %%mm3, %%mm1 \n\t"
"psubw %%mm2, %%mm0 \n\t"
"psubw %%mm3, %%mm1 \n\t"
"pandn %%mm0, %%mm4 \n\t"
"pandn %%mm1, %%mm5 \n\t"
"movq %%mm4, (%0, %%"FF_REG_a") \n\t"
"movq %%mm5, 8(%0, %%"FF_REG_a")\n\t"

"add $16, %%"FF_REG_a" \n\t"
"js 1b \n\t"
::"r" (block+nCoeffs), "r"(quant_matrix+nCoeffs), "rm" (qscale), "g" (-2*nCoeffs)
: "%"FF_REG_a, "memory"
);</asm>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>block0</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_mpeg1_inter_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>nCoeffs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>raster_end</name><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr> ]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlw $15, %%mm7 \n\t"
"movd %2, %%mm6 \n\t"
"packssdw %%mm6, %%mm6 \n\t"
"packssdw %%mm6, %%mm6 \n\t"
"mov %3, %%"FF_REG_a" \n\t"
".p2align 4 \n\t"
"1: \n\t"
"movq (%0, %%"FF_REG_a"), %%mm0 \n\t"
"movq 8(%0, %%"FF_REG_a"), %%mm1\n\t"
"movq (%1, %%"FF_REG_a"), %%mm4 \n\t"
"movq 8(%1, %%"FF_REG_a"), %%mm5\n\t"
"pmullw %%mm6, %%mm4 \n\t" 
"pmullw %%mm6, %%mm5 \n\t" 
"pxor %%mm2, %%mm2 \n\t"
"pxor %%mm3, %%mm3 \n\t"
"pcmpgtw %%mm0, %%mm2 \n\t" 
"pcmpgtw %%mm1, %%mm3 \n\t" 
"pxor %%mm2, %%mm0 \n\t"
"pxor %%mm3, %%mm1 \n\t"
"psubw %%mm2, %%mm0 \n\t" 
"psubw %%mm3, %%mm1 \n\t" 
"paddw %%mm0, %%mm0 \n\t" 
"paddw %%mm1, %%mm1 \n\t" 
"paddw %%mm7, %%mm0 \n\t" 
"paddw %%mm7, %%mm1 \n\t" 
"pmullw %%mm4, %%mm0 \n\t" 
"pmullw %%mm5, %%mm1 \n\t" 
"pxor %%mm4, %%mm4 \n\t"
"pxor %%mm5, %%mm5 \n\t" 
"pcmpeqw (%0, %%"FF_REG_a"), %%mm4 \n\t" 
"pcmpeqw 8(%0, %%"FF_REG_a"), %%mm5\n\t" 
"psraw $4, %%mm0 \n\t"
"psraw $4, %%mm1 \n\t"
"psubw %%mm7, %%mm0 \n\t"
"psubw %%mm7, %%mm1 \n\t"
"por %%mm7, %%mm0 \n\t"
"por %%mm7, %%mm1 \n\t"
"pxor %%mm2, %%mm0 \n\t"
"pxor %%mm3, %%mm1 \n\t"
"psubw %%mm2, %%mm0 \n\t"
"psubw %%mm3, %%mm1 \n\t"
"pandn %%mm0, %%mm4 \n\t"
"pandn %%mm1, %%mm5 \n\t"
"movq %%mm4, (%0, %%"FF_REG_a") \n\t"
"movq %%mm5, 8(%0, %%"FF_REG_a")\n\t"

"add $16, %%"FF_REG_a" \n\t"
"js 1b \n\t"
::"r" (block+nCoeffs), "r"(quant_matrix+nCoeffs), "rm" (qscale), "g" (-2*nCoeffs)
: "%"FF_REG_a, "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_mpeg2_intra_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>nCoeffs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block0</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qscale</name> <operator>=</operator> <name><name>ff_mpeg2_non_linear_qscale</name><index>[<expr><name>qscale</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>qscale</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alternate_scan</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>raster_end</name><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>block0</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>block0</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>quant_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlw $15, %%mm7 \n\t"
"movd %2, %%mm6 \n\t"
"packssdw %%mm6, %%mm6 \n\t"
"packssdw %%mm6, %%mm6 \n\t"
"mov %3, %%"FF_REG_a" \n\t"
".p2align 4 \n\t"
"1: \n\t"
"movq (%0, %%"FF_REG_a"), %%mm0 \n\t"
"movq 8(%0, %%"FF_REG_a"), %%mm1\n\t"
"movq (%1, %%"FF_REG_a"), %%mm4 \n\t"
"movq 8(%1, %%"FF_REG_a"), %%mm5\n\t"
"pmullw %%mm6, %%mm4 \n\t" 
"pmullw %%mm6, %%mm5 \n\t" 
"pxor %%mm2, %%mm2 \n\t"
"pxor %%mm3, %%mm3 \n\t"
"pcmpgtw %%mm0, %%mm2 \n\t" 
"pcmpgtw %%mm1, %%mm3 \n\t" 
"pxor %%mm2, %%mm0 \n\t"
"pxor %%mm3, %%mm1 \n\t"
"psubw %%mm2, %%mm0 \n\t" 
"psubw %%mm3, %%mm1 \n\t" 
"pmullw %%mm4, %%mm0 \n\t" 
"pmullw %%mm5, %%mm1 \n\t" 
"pxor %%mm4, %%mm4 \n\t"
"pxor %%mm5, %%mm5 \n\t" 
"pcmpeqw (%0, %%"FF_REG_a"), %%mm4 \n\t" 
"pcmpeqw 8(%0, %%"FF_REG_a"), %%mm5\n\t" 
"psraw $4, %%mm0 \n\t"
"psraw $4, %%mm1 \n\t"
"pxor %%mm2, %%mm0 \n\t"
"pxor %%mm3, %%mm1 \n\t"
"psubw %%mm2, %%mm0 \n\t"
"psubw %%mm3, %%mm1 \n\t"
"pandn %%mm0, %%mm4 \n\t"
"pandn %%mm1, %%mm5 \n\t"
"movq %%mm4, (%0, %%"FF_REG_a") \n\t"
"movq %%mm5, 8(%0, %%"FF_REG_a")\n\t"

"add $16, %%"FF_REG_a" \n\t"
"jng 1b \n\t"
::"r" (block+nCoeffs), "r"(quant_matrix+nCoeffs), "rm" (qscale), "g" (-2*nCoeffs)
: "%"FF_REG_a, "memory"
);</asm>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>block0</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_mpeg2_inter_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>nCoeffs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qscale</name> <operator>=</operator> <name><name>ff_mpeg2_non_linear_qscale</name><index>[<expr><name>qscale</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>qscale</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alternate_scan</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>raster_end</name><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlq $48, %%mm7 \n\t"
"movd %2, %%mm6 \n\t"
"packssdw %%mm6, %%mm6 \n\t"
"packssdw %%mm6, %%mm6 \n\t"
"mov %3, %%"FF_REG_a" \n\t"
".p2align 4 \n\t"
"1: \n\t"
"movq (%0, %%"FF_REG_a"), %%mm0 \n\t"
"movq 8(%0, %%"FF_REG_a"), %%mm1\n\t"
"movq (%1, %%"FF_REG_a"), %%mm4 \n\t"
"movq 8(%1, %%"FF_REG_a"), %%mm5\n\t"
"pmullw %%mm6, %%mm4 \n\t" 
"pmullw %%mm6, %%mm5 \n\t" 
"pxor %%mm2, %%mm2 \n\t"
"pxor %%mm3, %%mm3 \n\t"
"pcmpgtw %%mm0, %%mm2 \n\t" 
"pcmpgtw %%mm1, %%mm3 \n\t" 
"pxor %%mm2, %%mm0 \n\t"
"pxor %%mm3, %%mm1 \n\t"
"psubw %%mm2, %%mm0 \n\t" 
"psubw %%mm3, %%mm1 \n\t" 
"paddw %%mm0, %%mm0 \n\t" 
"paddw %%mm1, %%mm1 \n\t" 
"pmullw %%mm4, %%mm0 \n\t" 
"pmullw %%mm5, %%mm1 \n\t" 
"paddw %%mm4, %%mm0 \n\t" 
"paddw %%mm5, %%mm1 \n\t" 
"pxor %%mm4, %%mm4 \n\t"
"pxor %%mm5, %%mm5 \n\t" 
"pcmpeqw (%0, %%"FF_REG_a"), %%mm4 \n\t" 
"pcmpeqw 8(%0, %%"FF_REG_a"), %%mm5\n\t" 
"psrlw $5, %%mm0 \n\t"
"psrlw $5, %%mm1 \n\t"
"pxor %%mm2, %%mm0 \n\t"
"pxor %%mm3, %%mm1 \n\t"
"psubw %%mm2, %%mm0 \n\t"
"psubw %%mm3, %%mm1 \n\t"
"pandn %%mm0, %%mm4 \n\t"
"pandn %%mm1, %%mm5 \n\t"
"pxor %%mm4, %%mm7 \n\t"
"pxor %%mm5, %%mm7 \n\t"
"movq %%mm4, (%0, %%"FF_REG_a") \n\t"
"movq %%mm5, 8(%0, %%"FF_REG_a")\n\t"

"add $16, %%"FF_REG_a" \n\t"
"jng 1b \n\t"
"movd 124(%0, %3), %%mm0 \n\t"
"movq %%mm7, %%mm6 \n\t"
"psrlq $32, %%mm7 \n\t"
"pxor %%mm6, %%mm7 \n\t"
"movq %%mm7, %%mm6 \n\t"
"psrlq $16, %%mm7 \n\t"
"pxor %%mm6, %%mm7 \n\t"
"pslld $31, %%mm7 \n\t"
"psrlq $15, %%mm7 \n\t"
"pxor %%mm7, %%mm0 \n\t"
"movd %%mm0, 124(%0, %3) \n\t"

::"r" (block+nCoeffs), "r"(quant_matrix+nCoeffs), "rm" (qscale), "r" (-2*nCoeffs)
: "%"FF_REG_a, "memory"
);</asm>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpv_common_init_x86</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_h263_intra</name></name> <operator>=</operator> <name>dct_unquantize_h263_intra_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_h263_inter</name></name> <operator>=</operator> <name>dct_unquantize_h263_inter_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg1_intra</name></name> <operator>=</operator> <name>dct_unquantize_mpeg1_intra_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg1_inter</name></name> <operator>=</operator> <name>dct_unquantize_mpeg1_inter_mmx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg2_intra</name></name> <operator>=</operator> <name>dct_unquantize_mpeg2_intra_mmx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg2_inter</name></name> <operator>=</operator> <name>dct_unquantize_mpeg2_inter_mmx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
