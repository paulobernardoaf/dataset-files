<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\lpc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/lpc.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>pd_1</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>pd_2</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr> }</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE2_INLINE</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lpc_apply_welch_window_sse2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>w_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>c</name> <init>= <expr><literal type="number">2.0</literal> <operator>/</operator> <operator>(</operator><name>len</name><operator>-</operator><literal type="number">1.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>len</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>i</name> <init>= <expr><operator>-</operator><name>n2</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>j</name> <init>= <expr><name>n2</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"movsd %4, %%xmm7 \n\t"
"movapd "MANGLE(pd_1)", %%xmm6 \n\t"
"movapd "MANGLE(pd_2)", %%xmm5 \n\t"
"movlhps %%xmm7, %%xmm7 \n\t"
"subpd %%xmm5, %%xmm7 \n\t"
"addsd %%xmm6, %%xmm7 \n\t"
"test $1, %5 \n\t"
"jz 2f \n\t"
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WELCH</name><parameter_list>(<parameter><type><name>MOVPD</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"1: \n\t""movapd %%xmm7, %%xmm1 \n\t""mulpd %%xmm1, %%xmm1 \n\t""movapd %%xmm6, %%xmm0 \n\t""subpd %%xmm1, %%xmm0 \n\t""pshufd $0x4e, %%xmm0, %%xmm1 \n\t""cvtpi2pd (%3,%0), %%xmm2 \n\t""cvtpi2pd "#offset"*4(%3,%1), %%xmm3 \n\t""mulpd %%xmm0, %%xmm2 \n\t""mulpd %%xmm1, %%xmm3 \n\t""movapd %%xmm2, (%2,%0,2) \n\t"MOVPD" %%xmm3, "#offset"*8(%2,%1,2) \n\t""subpd %%xmm5, %%xmm7 \n\t""sub $8, %1 \n\t""add $8, %0 \n\t""jl 1b \n\t"
</cpp:value></cpp:define>
















WELCH("movupd", -1)
"jmp 3f \n\t"
"2: \n\t"
WELCH("movapd", -2)
"3: \n\t"
:"+&amp;r"(i), "+&amp;r"(j)
:"r"(w_data+n2), "r"(data+n2), "m"(c), "r"(len)
NAMED_CONSTRAINTS_ARRAY_ADD(pd_1,pd_2)
XMM_CLOBBERS_ONLY("%xmm0", "%xmm1", "%xmm2", "%xmm3",
"%xmm5", "%xmm6", "%xmm7")
);</asm>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WELCH</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lpc_compute_autocorr_sse2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lag</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>autoc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>x86_reg</name><operator>)</operator><name>data</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>lag</name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>i</name> <init>= <expr><operator>-</operator><name>len</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>j</name> <operator>==</operator> <name>lag</name><operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
"movsd "MANGLE(pd_1)", %%xmm0 \n\t"
"movsd "MANGLE(pd_1)", %%xmm1 \n\t"
"movsd "MANGLE(pd_1)", %%xmm2 \n\t"
"1: \n\t"
"movapd (%2,%0), %%xmm3 \n\t"
"movupd -8(%3,%0), %%xmm4 \n\t"
"movapd (%3,%0), %%xmm5 \n\t"
"mulpd %%xmm3, %%xmm4 \n\t"
"mulpd %%xmm3, %%xmm5 \n\t"
"mulpd -16(%3,%0), %%xmm3 \n\t"
"addpd %%xmm4, %%xmm1 \n\t"
"addpd %%xmm5, %%xmm0 \n\t"
"addpd %%xmm3, %%xmm2 \n\t"
"add $16, %0 \n\t"
"jl 1b \n\t"
"movhlps %%xmm0, %%xmm3 \n\t"
"movhlps %%xmm1, %%xmm4 \n\t"
"movhlps %%xmm2, %%xmm5 \n\t"
"addsd %%xmm3, %%xmm0 \n\t"
"addsd %%xmm4, %%xmm1 \n\t"
"addsd %%xmm5, %%xmm2 \n\t"
"movsd %%xmm0, (%1) \n\t"
"movsd %%xmm1, 8(%1) \n\t"
"movsd %%xmm2, 16(%1) \n\t"
:"+&amp;r"(i)
:"r"(autoc+j), "r"(data+len), "r"(data+len-j)
NAMED_CONSTRAINTS_ARRAY_ADD(pd_1)
:"memory"
);</asm>
</block_content>}</block></if> <else>else <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
"movsd "MANGLE(pd_1)", %%xmm0 \n\t"
"movsd "MANGLE(pd_1)", %%xmm1 \n\t"
"1: \n\t"
"movapd (%3,%0), %%xmm3 \n\t"
"movupd -8(%4,%0), %%xmm4 \n\t"
"mulpd %%xmm3, %%xmm4 \n\t"
"mulpd (%4,%0), %%xmm3 \n\t"
"addpd %%xmm4, %%xmm1 \n\t"
"addpd %%xmm3, %%xmm0 \n\t"
"add $16, %0 \n\t"
"jl 1b \n\t"
"movhlps %%xmm0, %%xmm3 \n\t"
"movhlps %%xmm1, %%xmm4 \n\t"
"addsd %%xmm3, %%xmm0 \n\t"
"addsd %%xmm4, %%xmm1 \n\t"
"movsd %%xmm0, %1 \n\t"
"movsd %%xmm1, %2 \n\t"
:"+&amp;r"(i), "=m"(autoc[j]), "=m"(autoc[j+1])
:"r"(data+len), "r"(data+len-j)
NAMED_CONSTRAINTS_ARRAY_ADD(pd_1)
);</asm>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_lpc_init_x86</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE2_INLINE</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INLINE_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>INLINE_SSE2_SLOW</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lpc_apply_welch_window</name></name> <operator>=</operator> <name>lpc_apply_welch_window_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lpc_compute_autocorr</name></name> <operator>=</operator> <name>lpc_compute_autocorr_sse2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
