<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\vc1dsp_mmx.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vc1dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fpel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1dsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_6REGS</name> <operator>&amp;&amp;</operator> <name>HAVE_INLINE_ASM</name> <operator>&amp;&amp;</operator> <name>HAVE_MMX_EXTERNAL</name></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>ff_vc1_put_ver_16b_shift2_mmx</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_put_hor_16b_shift2_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_avg_hor_16b_shift2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_PUT</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>D</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_AVG</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>D</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pavgb " #S ", " #D " \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORMALIZE_MMX</name><parameter_list>(<parameter><type><name>SHIFT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"paddw %%mm7, %%mm3 \n\t" "paddw %%mm7, %%mm4 \n\t" "psraw "SHIFT", %%mm3 \n\t" "psraw "SHIFT", %%mm4 \n\t"</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_DO_PACK</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"packuswb %%mm4, %%mm3 \n\t" OP((%2), %%mm3) "movq %%mm3, (%2) \n\t"</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_DONT_PACK</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OP(0(%2), %%mm3) OP(8(%2), %%mm4) "movq %%mm3, 0(%2) \n\t" "movq %%mm4, 8(%2) \n\t"</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_UNPACK</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"punpcklbw %%mm0, " reg "\n\t"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONT_UNPACK</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_ROUNDER_MMX</name><parameter_list>(<parameter><type><name>ROUND</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movd "ROUND", %%mm7 \n\t" "punpcklwd %%mm7, %%mm7 \n\t" "punpckldq %%mm7, %%mm7 \n\t"</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC1_SHIFT2</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>OPNAME</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void OPNAME ##vc1_shift2_mmx(uint8_t *dst, const uint8_t *src,x86_reg stride, int rnd, x86_reg offset){rnd = 8-rnd;__asm__ volatile("mov $8, %%"FF_REG_c" \n\t"LOAD_ROUNDER_MMX("%5")"movq "MANGLE(ff_pw_9)", %%mm6\n\t""1: \n\t""movd 0(%0 ), %%mm3 \n\t""movd 4(%0 ), %%mm4 \n\t""movd 0(%0,%2), %%mm1 \n\t""movd 4(%0,%2), %%mm2 \n\t""add %2, %0 \n\t""punpcklbw %%mm0, %%mm3 \n\t""punpcklbw %%mm0, %%mm4 \n\t""punpcklbw %%mm0, %%mm1 \n\t""punpcklbw %%mm0, %%mm2 \n\t""paddw %%mm1, %%mm3 \n\t""paddw %%mm2, %%mm4 \n\t""movd 0(%0,%3), %%mm1 \n\t""movd 4(%0,%3), %%mm2 \n\t""pmullw %%mm6, %%mm3 \n\t" /* 0,9,9,0*/"pmullw %%mm6, %%mm4 \n\t" /* 0,9,9,0*/"punpcklbw %%mm0, %%mm1 \n\t""punpcklbw %%mm0, %%mm2 \n\t""psubw %%mm1, %%mm3 \n\t" /*-1,9,9,0*/"psubw %%mm2, %%mm4 \n\t" /*-1,9,9,0*/"movd 0(%0,%2), %%mm1 \n\t""movd 4(%0,%2), %%mm2 \n\t""punpcklbw %%mm0, %%mm1 \n\t""punpcklbw %%mm0, %%mm2 \n\t""psubw %%mm1, %%mm3 \n\t" /*-1,9,9,-1*/"psubw %%mm2, %%mm4 \n\t" /*-1,9,9,-1*/NORMALIZE_MMX("$4")"packuswb %%mm4, %%mm3 \n\t"OP((%1), %%mm3)"movq %%mm3, (%1) \n\t""add %6, %0 \n\t""add %4, %1 \n\t""dec %%"FF_REG_c" \n\t""jnz 1b \n\t": "+r"(src), "+r"(dst): "r"(offset), "r"(-2*offset), "g"(stride), "m"(rnd),"g"(stride-offset)NAMED_CONSTRAINTS_ADD(ff_pw_9): "%"FF_REG_c, "memory");}</cpp:value></cpp:define>


















































<macro><name>VC1_SHIFT2</name><argument_list>(<argument>OP_PUT</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>VC1_SHIFT2</name><argument_list>(<argument>OP_AVG</argument>, <argument>avg_</argument>)</argument_list></macro>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSPEL_FILTER13_CORE</name><parameter_list>(<parameter><type><name>UNPACK</name></type></parameter>, <parameter><type><name>MOVQ</name></type></parameter>, <parameter><type><name>A1</name></type></parameter>, <parameter><type><name>A2</name></type></parameter>, <parameter><type><name>A3</name></type></parameter>, <parameter><type><name>A4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MOVQ "*0+"A1", %%mm1 \n\t" MOVQ "*4+"A1", %%mm2 \n\t" UNPACK("%%mm1") UNPACK("%%mm2") "pmullw "MANGLE(ff_pw_3)", %%mm1\n\t" "pmullw "MANGLE(ff_pw_3)", %%mm2\n\t" MOVQ "*0+"A2", %%mm3 \n\t" MOVQ "*4+"A2", %%mm4 \n\t" UNPACK("%%mm3") UNPACK("%%mm4") "pmullw %%mm6, %%mm3 \n\t" "pmullw %%mm6, %%mm4 \n\t" "psubw %%mm1, %%mm3 \n\t" "psubw %%mm2, %%mm4 \n\t" MOVQ "*0+"A4", %%mm1 \n\t" MOVQ "*4+"A4", %%mm2 \n\t" UNPACK("%%mm1") UNPACK("%%mm2") "psllw $2, %%mm1 \n\t" "psllw $2, %%mm2 \n\t" "psubw %%mm1, %%mm3 \n\t" "psubw %%mm2, %%mm4 \n\t" MOVQ "*0+"A3", %%mm1 \n\t" MOVQ "*4+"A3", %%mm2 \n\t" UNPACK("%%mm1") UNPACK("%%mm2") "pmullw %%mm5, %%mm1 \n\t" "pmullw %%mm5, %%mm2 \n\t" "paddw %%mm1, %%mm3 \n\t" "paddw %%mm2, %%mm4 \n\t"</cpp:value></cpp:define> 







































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSPEL_FILTER13_VER_16B</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>A1</name></type></parameter>, <parameter><type><name>A2</name></type></parameter>, <parameter><type><name>A3</name></type></parameter>, <parameter><type><name>A4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void vc1_put_ver_16b_ ##NAME ##_mmx(int16_t *dst, const uint8_t *src, x86_reg src_stride, int rnd, int64_t shift) { int h = 8; src -= src_stride; __asm__ volatile( LOAD_ROUNDER_MMX("%5") "movq "MANGLE(ff_pw_53)", %%mm5\n\t" "movq "MANGLE(ff_pw_18)", %%mm6\n\t" ".p2align 3 \n\t" "1: \n\t" MSPEL_FILTER13_CORE(DO_UNPACK, "movd 1", A1, A2, A3, A4) NORMALIZE_MMX("%6") TRANSFER_DONT_PACK(OP_PUT) "movd 8+"A1", %%mm1 \n\t" DO_UNPACK("%%mm1") "movq %%mm1, %%mm3 \n\t" "paddw %%mm1, %%mm1 \n\t" "paddw %%mm3, %%mm1 \n\t" "movd 8+"A2", %%mm3 \n\t" DO_UNPACK("%%mm3") "pmullw %%mm6, %%mm3 \n\t" "psubw %%mm1, %%mm3 \n\t" "movd 8+"A3", %%mm1 \n\t" DO_UNPACK("%%mm1") "pmullw %%mm5, %%mm1 \n\t" "paddw %%mm1, %%mm3 \n\t" "movd 8+"A4", %%mm1 \n\t" DO_UNPACK("%%mm1") "psllw $2, %%mm1 \n\t" "psubw %%mm1, %%mm3 \n\t" "paddw %%mm7, %%mm3 \n\t" "psraw %6, %%mm3 \n\t" "movq %%mm3, 16(%2) \n\t" "add %3, %1 \n\t" "add $24, %2 \n\t" "decl %0 \n\t" "jnz 1b \n\t" : "+r"(h), "+r" (src), "+r" (dst) : "r"(src_stride), "r"(3*src_stride), "m"(rnd), "m"(shift) NAMED_CONSTRAINTS_ADD(ff_pw_3,ff_pw_53,ff_pw_18) : "memory" ); }</cpp:value></cpp:define>
























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSPEL_FILTER13_HOR_16B</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>A1</name></type></parameter>, <parameter><type><name>A2</name></type></parameter>, <parameter><type><name>A3</name></type></parameter>, <parameter><type><name>A4</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>OPNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##vc1_hor_16b_ ##NAME ##_mmx(uint8_t *dst, x86_reg stride, const int16_t *src, int rnd) { int h = 8; src -= 1; rnd -= (-4+58+13-3)*256; __asm__ volatile( LOAD_ROUNDER_MMX("%4") "movq "MANGLE(ff_pw_18)", %%mm6 \n\t" "movq "MANGLE(ff_pw_53)", %%mm5 \n\t" ".p2align 3 \n\t" "1: \n\t" MSPEL_FILTER13_CORE(DONT_UNPACK, "movq 2", A1, A2, A3, A4) NORMALIZE_MMX("$7") "paddw "MANGLE(ff_pw_128)", %%mm3 \n\t" "paddw "MANGLE(ff_pw_128)", %%mm4 \n\t" TRANSFER_DO_PACK(OP) "add $24, %1 \n\t" "add %3, %2 \n\t" "decl %0 \n\t" "jnz 1b \n\t" : "+r"(h), "+r" (src), "+r" (dst) : "r"(stride), "m"(rnd) NAMED_CONSTRAINTS_ADD(ff_pw_3,ff_pw_18,ff_pw_53,ff_pw_128) : "memory" ); }</cpp:value></cpp:define>






































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSPEL_FILTER13_8B</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>A1</name></type></parameter>, <parameter><type><name>A2</name></type></parameter>, <parameter><type><name>A3</name></type></parameter>, <parameter><type><name>A4</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>OPNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##vc1_##NAME ##_mmx(uint8_t *dst, const uint8_t *src, x86_reg stride, int rnd, x86_reg offset) { int h = 8; src -= offset; rnd = 32-rnd; __asm__ volatile ( LOAD_ROUNDER_MMX("%6") "movq "MANGLE(ff_pw_53)", %%mm5 \n\t" "movq "MANGLE(ff_pw_18)", %%mm6 \n\t" ".p2align 3 \n\t" "1: \n\t" MSPEL_FILTER13_CORE(DO_UNPACK, "movd 1", A1, A2, A3, A4) NORMALIZE_MMX("$6") TRANSFER_DO_PACK(OP) "add %5, %1 \n\t" "add %5, %2 \n\t" "decl %0 \n\t" "jnz 1b \n\t" : "+r"(h), "+r" (src), "+r" (dst) : "r"(offset), "r"(3*offset), "g"(stride), "m"(rnd) NAMED_CONSTRAINTS_ADD(ff_pw_53,ff_pw_18,ff_pw_3) : "memory" ); }</cpp:value></cpp:define>




























<macro><name>MSPEL_FILTER13_8B</name> <argument_list>(<argument>shift1</argument>, <argument><literal type="string">"0(%1,%4 )"</literal></argument>, <argument><literal type="string">"0(%1,%3,2)"</literal></argument>, <argument><literal type="string">"0(%1,%3 )"</literal></argument>, <argument><literal type="string">"0(%1 )"</literal></argument>, <argument>OP_PUT</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_8B</name> <argument_list>(<argument>shift1</argument>, <argument><literal type="string">"0(%1,%4 )"</literal></argument>, <argument><literal type="string">"0(%1,%3,2)"</literal></argument>, <argument><literal type="string">"0(%1,%3 )"</literal></argument>, <argument><literal type="string">"0(%1 )"</literal></argument>, <argument>OP_AVG</argument>, <argument>avg_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_VER_16B</name><argument_list>(<argument>shift1</argument>, <argument><literal type="string">"0(%1,%4 )"</literal></argument>, <argument><literal type="string">"0(%1,%3,2)"</literal></argument>, <argument><literal type="string">"0(%1,%3 )"</literal></argument>, <argument><literal type="string">"0(%1 )"</literal></argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_HOR_16B</name><argument_list>(<argument>shift1</argument>, <argument><literal type="string">"2*3(%1)"</literal></argument>, <argument><literal type="string">"2*2(%1)"</literal></argument>, <argument><literal type="string">"2*1(%1)"</literal></argument>, <argument><literal type="string">"2*0(%1)"</literal></argument>, <argument>OP_PUT</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_HOR_16B</name><argument_list>(<argument>shift1</argument>, <argument><literal type="string">"2*3(%1)"</literal></argument>, <argument><literal type="string">"2*2(%1)"</literal></argument>, <argument><literal type="string">"2*1(%1)"</literal></argument>, <argument><literal type="string">"2*0(%1)"</literal></argument>, <argument>OP_AVG</argument>, <argument>avg_</argument>)</argument_list></macro>


<macro><name>MSPEL_FILTER13_8B</name> <argument_list>(<argument>shift3</argument>, <argument><literal type="string">"0(%1 )"</literal></argument>, <argument><literal type="string">"0(%1,%3 )"</literal></argument>, <argument><literal type="string">"0(%1,%3,2)"</literal></argument>, <argument><literal type="string">"0(%1,%4 )"</literal></argument>, <argument>OP_PUT</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_8B</name> <argument_list>(<argument>shift3</argument>, <argument><literal type="string">"0(%1 )"</literal></argument>, <argument><literal type="string">"0(%1,%3 )"</literal></argument>, <argument><literal type="string">"0(%1,%3,2)"</literal></argument>, <argument><literal type="string">"0(%1,%4 )"</literal></argument>, <argument>OP_AVG</argument>, <argument>avg_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_VER_16B</name><argument_list>(<argument>shift3</argument>, <argument><literal type="string">"0(%1 )"</literal></argument>, <argument><literal type="string">"0(%1,%3 )"</literal></argument>, <argument><literal type="string">"0(%1,%3,2)"</literal></argument>, <argument><literal type="string">"0(%1,%4 )"</literal></argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_HOR_16B</name><argument_list>(<argument>shift3</argument>, <argument><literal type="string">"2*0(%1)"</literal></argument>, <argument><literal type="string">"2*1(%1)"</literal></argument>, <argument><literal type="string">"2*2(%1)"</literal></argument>, <argument><literal type="string">"2*3(%1)"</literal></argument>, <argument>OP_PUT</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_HOR_16B</name><argument_list>(<argument>shift3</argument>, <argument><literal type="string">"2*0(%1)"</literal></argument>, <argument><literal type="string">"2*1(%1)"</literal></argument>, <argument><literal type="string">"2*2(%1)"</literal></argument>, <argument><literal type="string">"2*3(%1)"</literal></argument>, <argument>OP_AVG</argument>, <argument>avg_</argument>)</argument_list></macro>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>vc1_mspel_mc_filter_ver_16bits</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>vc1_mspel_mc_filter_hor_16bits</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>vc1_mspel_mc_filter_8bits</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC1_MSPEL_MC</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>INSTR</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void OP ##vc1_mspel_mc(uint8_t *dst, const uint8_t *src, int stride,int hmode, int vmode, int rnd){static const vc1_mspel_mc_filter_ver_16bits vc1_put_shift_ver_16bits[] ={ NULL, vc1_put_ver_16b_shift1_mmx, ff_vc1_put_ver_16b_shift2_mmx, vc1_put_ver_16b_shift3_mmx };static const vc1_mspel_mc_filter_hor_16bits vc1_put_shift_hor_16bits[] ={ NULL, OP ##vc1_hor_16b_shift1_mmx, ff_vc1_ ##OP ##hor_16b_shift2_ ##INSTR, OP ##vc1_hor_16b_shift3_mmx };static const vc1_mspel_mc_filter_8bits vc1_put_shift_8bits[] ={ NULL, OP ##vc1_shift1_mmx, OP ##vc1_shift2_mmx, OP ##vc1_shift3_mmx };__asm__ volatile("pxor %%mm0, %%mm0 \n\t"::: "memory");if (vmode) { if (hmode) { static const int shift_value[] = { 0, 5, 1, 5 };int shift = (shift_value[hmode]+shift_value[vmode])&gt;&gt;1;int r;LOCAL_ALIGNED(16, int16_t, tmp, [12*8]);r = (1&lt;&lt;(shift-1)) + rnd-1;vc1_put_shift_ver_16bits[vmode](tmp, src-1, stride, r, shift);vc1_put_shift_hor_16bits[hmode](dst, stride, tmp+1, 64-rnd);return;}else { vc1_put_shift_8bits[vmode](dst, src, stride, 1-rnd, stride);return;}}vc1_put_shift_8bits[hmode](dst, src, stride, rnd, 1);} static void OP ##vc1_mspel_mc_16(uint8_t *dst, const uint8_t *src, int stride, int hmode, int vmode, int rnd){ OP ##vc1_mspel_mc(dst + 0, src + 0, stride, hmode, vmode, rnd); OP ##vc1_mspel_mc(dst + 8, src + 8, stride, hmode, vmode, rnd); dst += 8*stride; src += 8*stride; OP ##vc1_mspel_mc(dst + 0, src + 0, stride, hmode, vmode, rnd); OP ##vc1_mspel_mc(dst + 8, src + 8, stride, hmode, vmode, rnd); }</cpp:value></cpp:define>















































<macro><name>VC1_MSPEL_MC</name><argument_list>(<argument>put_</argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>VC1_MSPEL_MC</name><argument_list>(<argument>avg_</argument>, <argument>mmxext</argument>)</argument_list></macro>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_FUNCTION</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void put_vc1_mspel_mc ##a ##b ##_mmx(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { put_vc1_mspel_mc(dst, src, stride, a, b, rnd); }static void avg_vc1_mspel_mc ##a ##b ##_mmxext(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { avg_vc1_mspel_mc(dst, src, stride, a, b, rnd); }static void put_vc1_mspel_mc ##a ##b ##_16_mmx(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { put_vc1_mspel_mc_16(dst, src, stride, a, b, rnd); }static void avg_vc1_mspel_mc ##a ##b ##_16_mmxext(uint8_t *dst, const uint8_t *src,ptrdiff_t stride, int rnd) { avg_vc1_mspel_mc_16(dst, src, stride, a, b, rnd); }</cpp:value></cpp:define>





























<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_ASSIGN</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>INSN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;OP##vc1_mspel_pixels_tab[1][X+4*Y] = OP##vc1_mspel_mc##X##Y##INSN; dsp-&gt;OP##vc1_mspel_pixels_tab[0][X+4*Y] = OP##vc1_mspel_mc##X##Y##_16##INSN</cpp:value></cpp:define>



<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vc1dsp_init_mmx</name><parameter_list>(<parameter><decl><type><name>VC1DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>put_</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vc1dsp_init_mmxext</name><parameter_list>(<parameter><decl><type><name>VC1DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><name>avg_</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>_mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
