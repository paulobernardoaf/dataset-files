<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\mpegvideoenc_template.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdct.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MMREG_WIDTH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MM</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MOVQ</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SPREADW</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PMAXW</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PMAX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SAVE_SIGN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RESTORE_SIGN</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_SSE2</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMREG_WIDTH</name></cpp:macro> <cpp:value>"16"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM</name></cpp:macro> <cpp:value>"%%xmm"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVQ</name></cpp:macro> <cpp:value>"movdqa"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPREADW</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pshuflw $0, "a", "a" \n\t""punpcklwd "a", "a" \n\t"
</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMAXW</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pmaxsw "a", "b" \n\t"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movhlps "a", "b" \n\t"PMAXW(b, a)"pshuflw $0x0E, "a", "b" \n\t"PMAXW(b, a)"pshuflw $0x01, "a", "b" \n\t"PMAXW(b, a)</cpp:value></cpp:define>






<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMREG_WIDTH</name></cpp:macro> <cpp:value>"8"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM</name></cpp:macro> <cpp:value>"%%mm"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVQ</name></cpp:macro> <cpp:value>"movq"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_MMXEXT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPREADW</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pshufw $0, "a", "a" \n\t"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMAXW</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pmaxsw "a", "b" \n\t"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pshufw $0x0E, "a", "b" \n\t"PMAXW(b, a)"pshufw $0x01, "a", "b" \n\t"PMAXW(b, a)</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPREADW</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"punpcklwd "a", "a" \n\t""punpcklwd "a", "a" \n\t"
</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMAXW</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"psubusw "a", "b" \n\t""paddw "a", "b" \n\t"
</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq "a", "b" \n\t""psrlq $32, "a" \n\t"PMAXW(b, a)"movq "a", "b" \n\t""psrlq $16, "a" \n\t"PMAXW(b, a)</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_SSSE3</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVE_SIGN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movdqa "b", "a" \n\t""pabsw "b", "b" \n\t"
</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTORE_SIGN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"psignw "a", "b" \n\t"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVE_SIGN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pxor "a", "a" \n\t""pcmpgtw "b", "a" \n\t" /* block[i] &lt;= 0 ? 0xFF : 0x00 */"pxor "a", "b" \n\t""psubw "a", "b" \n\t" /* ABS(block[i]) */</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTORE_SIGN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pxor "a", "b" \n\t""psubw "a", "b" \n\t" // out=((ABS(block[i])*qmat[0] - bias[0]*qmat[0])&gt;&gt;16)*sign(block[i])</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name> <name>RENAME</name></type>(<name>dct_quantize</name>)<parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>last_non_zero_p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>qmat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bias</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>temp_block</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">7</literal><operator>&amp;</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>temp_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<function_decl><type><name>RENAME_FDCT</name></type>(<name>ff_fdct</name>)<parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dct_error_sum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>denoise_dct</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bias</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qmat</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bias</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qmat</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
"mul %%ecx \n\t"
: "=d" (level), "=a"(dummy)
: "a" ((block[0]&gt;&gt;2) + q), "c" (ff_inverse[q&lt;&lt;1])
);</asm>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>last_non_zero_p1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>last_non_zero_p1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bias</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_inter_matrix16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qmat</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_inter_matrix16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mpeg_quant</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(
"movd %%"FF_REG_a", "MM"3 \n\t" 
SPREADW(MM"3")
"pxor "MM"7, "MM"7 \n\t" 
"pxor "MM"4, "MM"4 \n\t" 
MOVQ" (%2), "MM"5 \n\t" 
"pxor "MM"6, "MM"6 \n\t"
"psubw (%3), "MM"6 \n\t" 
"mov $-128, %%"FF_REG_a" \n\t"
".p2align 4 \n\t"
"1: \n\t"
MOVQ" (%1, %%"FF_REG_a"), "MM"0 \n\t" 
SAVE_SIGN(MM"1", MM"0") 
"psubusw "MM"6, "MM"0 \n\t" 
"pmulhw "MM"5, "MM"0 \n\t" 
"por "MM"0, "MM"4 \n\t"
RESTORE_SIGN(MM"1", MM"0") 
MOVQ" "MM"0, (%5, %%"FF_REG_a") \n\t"
"pcmpeqw "MM"7, "MM"0 \n\t" 
MOVQ" (%4, %%"FF_REG_a"), "MM"1 \n\t"
MOVQ" "MM"7, (%1, %%"FF_REG_a") \n\t" 
"pandn "MM"1, "MM"0 \n\t"
PMAXW(MM"0", MM"3")
"add $"MMREG_WIDTH", %%"FF_REG_a" \n\t"
" js 1b \n\t"
PMAX(MM"3", MM"0")
"movd "MM"3, %%"FF_REG_a" \n\t"
"movzbl %%al, %%eax \n\t" 
: "+a" (last_non_zero_p1)
: "r" (block+64), "r" (qmat), "r" (bias),
"r" (inv_zigzag_direct16 + 64), "r" (temp_block + 64)
XMM_CLOBBERS_ONLY("%xmm0", "%xmm1", "%xmm2", "%xmm3",
"%xmm4", "%xmm5", "%xmm6", "%xmm7")
);</asm>
</block_content>}</block></if><else>else<block>{<block_content> 
<asm>__asm__ <specifier>volatile</specifier>(
"movd %%"FF_REG_a", "MM"3 \n\t" 
SPREADW(MM"3")
"pxor "MM"7, "MM"7 \n\t" 
"pxor "MM"4, "MM"4 \n\t" 
"mov $-128, %%"FF_REG_a" \n\t"
".p2align 4 \n\t"
"1: \n\t"
MOVQ" (%1, %%"FF_REG_a"), "MM"0 \n\t" 
SAVE_SIGN(MM"1", MM"0") 
MOVQ" (%3, %%"FF_REG_a"), "MM"6 \n\t" 
"paddusw "MM"6, "MM"0 \n\t" 
MOVQ" (%2, %%"FF_REG_a"), "MM"5 \n\t" 
"pmulhw "MM"5, "MM"0 \n\t" 
"por "MM"0, "MM"4 \n\t"
RESTORE_SIGN(MM"1", MM"0") 
MOVQ" "MM"0, (%5, %%"FF_REG_a") \n\t"
"pcmpeqw "MM"7, "MM"0 \n\t" 
MOVQ" (%4, %%"FF_REG_a"), "MM"1 \n\t"
MOVQ" "MM"7, (%1, %%"FF_REG_a") \n\t" 
"pandn "MM"1, "MM"0 \n\t"
PMAXW(MM"0", MM"3")
"add $"MMREG_WIDTH", %%"FF_REG_a" \n\t"
" js 1b \n\t"
PMAX(MM"3", MM"0")
"movd "MM"3, %%"FF_REG_a" \n\t"
"movzbl %%al, %%eax \n\t" 
: "+a" (last_non_zero_p1)
: "r" (block+64), "r" (qmat+64), "r" (bias+64),
"r" (inv_zigzag_direct16 + 64), "r" (temp_block + 64)
XMM_CLOBBERS_ONLY("%xmm0", "%xmm1", "%xmm2", "%xmm3",
"%xmm4", "%xmm5", "%xmm6", "%xmm7")
);</asm>
</block_content>}</block></else></if_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"movd %1, "MM"1 \n\t" 
SPREADW(MM"1")
"psubusw "MM"1, "MM"4 \n\t"
"packuswb "MM"4, "MM"4 \n\t"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_SSE2</name></expr></cpp:if>
"packsswb "MM"4, "MM"4 \n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"movd "MM"4, %0 \n\t" 
: "=g" (*overflow)
: "g" (s-&gt;max_qcoeff)
);</asm>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>level</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>==</operator> <name>FF_IDCT_PERM_SIMPLE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x08</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x10</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x08</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x10</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x09</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x04</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x02</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x09</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x03</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x14</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x28</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x02</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x19</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x24</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x19</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0B</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x01</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x04</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x05</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x11</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0C</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x29</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x13</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x16</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x21</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x30</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x28</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x22</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x30</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x38</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x29</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x06</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x22</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1B</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x21</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x14</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x05</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x06</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x07</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x15</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0E</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x15</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x13</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1C</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x23</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x34</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2A</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x31</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x32</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x38</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x39</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x26</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x32</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x39</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2B</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x03</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x24</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x25</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x16</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x17</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x17</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1E</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x25</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x31</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2C</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x33</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">48</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x36</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3B</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x23</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x34</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2D</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x07</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x26</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1F</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x27</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x35</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2E</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">56</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x35</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x33</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3C</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x27</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x36</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2F</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x37</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x37</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3E</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>==</operator> <name>FF_IDCT_PERM_LIBMPEG2</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x04</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x08</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x08</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x10</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x10</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x09</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x01</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x02</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x05</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x03</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x09</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x14</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x19</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x11</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0B</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x02</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x04</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x06</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x05</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0C</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x15</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x13</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x19</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x24</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x21</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x28</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x28</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x30</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x30</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x29</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x21</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x22</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1B</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x14</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x03</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x06</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x07</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x07</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0E</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x16</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x15</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1C</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x25</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x23</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x29</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2A</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x34</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x31</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x38</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x38</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x39</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x31</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x32</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2B</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x22</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x24</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x13</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x16</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x17</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x17</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1E</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x26</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x25</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2C</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x35</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x33</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">48</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x39</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3B</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x32</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x34</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2D</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x23</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x26</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1F</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x27</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x27</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2E</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">56</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x36</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x35</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3C</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x33</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x36</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2F</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x37</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x37</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3E</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>==</operator> <name>FF_IDCT_PERM_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x01</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x08</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x08</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x10</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x10</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x09</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x09</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x02</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x02</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x03</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x03</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x11</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x19</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x19</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0B</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x04</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x04</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x05</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x05</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0C</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x13</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x13</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x21</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x21</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x28</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x28</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x30</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x30</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x29</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x29</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x22</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x22</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1B</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x14</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x14</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x06</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x06</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x07</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x07</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0E</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x15</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x15</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1C</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x23</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x23</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2A</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x31</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x31</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x38</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x38</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x39</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x39</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x32</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x32</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2B</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x24</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x24</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x16</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x16</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x17</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x17</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1E</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x25</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x25</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2C</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x33</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x33</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">48</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3B</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x34</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x34</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2D</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x26</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x26</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1F</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x27</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x27</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2E</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">56</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x35</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x35</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3C</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x36</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x36</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2F</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x37</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x37</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3E</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>==</operator> <name>FF_IDCT_PERM_TRANSPOSE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x08</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x01</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x08</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x02</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x10</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x09</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x09</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x10</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x02</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x03</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x11</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x03</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x04</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x19</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x19</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0B</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x04</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x28</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x05</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x21</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0C</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x13</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x13</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x21</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x05</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x28</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x06</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x30</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x29</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x14</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x22</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1B</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x22</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x14</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x29</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x30</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x06</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x38</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x07</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x31</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0E</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x15</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x23</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1C</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x23</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x15</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2A</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x31</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x07</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x38</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x0F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x39</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x16</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x32</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2B</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x24</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x24</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x32</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x16</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x39</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3A</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x17</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x33</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1E</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x25</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x25</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2C</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x33</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">48</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x17</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3A</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x1F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3B</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x26</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x34</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2D</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x34</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x26</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3B</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x1F</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3C</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x27</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x35</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2E</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>last_non_zero_p1</name> <operator>&lt;=</operator> <literal type="number">56</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x35</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x27</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3C</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x2F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3D</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x36</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x36</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3D</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x2F</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3E</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x37</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x37</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3E</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0x3F</literal></expr>]</index></name> <operator>=</operator> <name><name>temp_block</name><index>[<expr><literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"s-&gt;idsp.perm_type: %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>==</operator> <name>FF_IDCT_PERM_NONE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>==</operator> <name>FF_IDCT_PERM_LIBMPEG2</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>==</operator> <name>FF_IDCT_PERM_SIMPLE</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>==</operator> <name>FF_IDCT_PERM_TRANSPOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<label><name>end</name>:</label>
<return>return <expr><name>last_non_zero_p1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
