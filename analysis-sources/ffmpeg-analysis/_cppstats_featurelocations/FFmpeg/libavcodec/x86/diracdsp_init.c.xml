<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\diracdsp_init.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/diracdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fpel.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DECL_DIRAC_PIXOP</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECL_DIRAC_PIXOP</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECL_DIRAC_PIXOP</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>ff_put_dirac_pixels16_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_dirac_pixels16_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_dirac_pixels32_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_dirac_pixels32_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_add_rect_clamped_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_add_rect_clamped_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_add_dirac_obmc8_mmx</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc_weight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yblen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_add_dirac_obmc16_mmx</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc_weight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yblen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_add_dirac_obmc32_mmx</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc_weight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yblen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_add_dirac_obmc16_sse2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc_weight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yblen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_add_dirac_obmc32_sse2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc_weight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yblen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_rect_clamped_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_rect_clamped_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_signed_rect_clamped_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_signed_rect_clamped_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_signed_rect_clamped_10_sse4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_dequant_subband_32_sse4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>qf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>qs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tot_v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tot_h</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HPEL_FILTER</name><parameter_list>(<parameter><type><name>MMSIZE</name></type></parameter>, <parameter><type><name>EXT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_dirac_hpel_filter_v_ ##EXT(uint8_t *, const uint8_t *, int, int); void ff_dirac_hpel_filter_h_ ##EXT(uint8_t *, const uint8_t *, int); static void dirac_hpel_filter_ ##EXT(uint8_t *dsth, uint8_t *dstv, uint8_t *dstc, const uint8_t *src, int stride, int width, int height) { while( height-- ) { ff_dirac_hpel_filter_v_ ##EXT(dstv-MMSIZE, src-MMSIZE, stride, width+MMSIZE+5); ff_dirac_hpel_filter_h_ ##EXT(dsth, src, width); ff_dirac_hpel_filter_h_ ##EXT(dstc, dstv, width); dsth += stride; dstv += stride; dstc += stride; src += stride; } }</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXFUNC</name><parameter_list>(<parameter><type><name>PFX</name></type></parameter>, <parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>EXT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;PFX ##_dirac_pixels_tab[1][IDX] = ff_ ##PFX ##_dirac_pixels16_ ##EXT; c-&gt;PFX ##_dirac_pixels_tab[2][IDX] = ff_ ##PFX ##_dirac_pixels32_ ##EXT</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRAC_PIXOP</name><parameter_list>(<parameter><type><name>OPNAME2</name></type></parameter>, <parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>EXT</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>void ff_ ##OPNAME2 ##_dirac_pixels8_ ##EXT(uint8_t *dst, const uint8_t *src[5], int stride, int h){if (h&amp;3)ff_ ##OPNAME2 ##_dirac_pixels8_c(dst, src, stride, h);elseOPNAME ##_pixels8_ ##EXT(dst, src[0], stride, h);}void ff_ ##OPNAME2 ##_dirac_pixels16_ ##EXT(uint8_t *dst, const uint8_t *src[5], int stride, int h){if (h&amp;3)ff_ ##OPNAME2 ##_dirac_pixels16_c(dst, src, stride, h);elseOPNAME ##_pixels16_ ##EXT(dst, src[0], stride, h);}void ff_ ##OPNAME2 ##_dirac_pixels32_ ##EXT(uint8_t *dst, const uint8_t *src[5], int stride, int h){if (h&amp;3) {ff_ ##OPNAME2 ##_dirac_pixels32_c(dst, src, stride, h);} else {OPNAME ##_pixels16_ ##EXT(dst , src[0] , stride, h);OPNAME ##_pixels16_ ##EXT(dst+16, src[0]+16, stride, h);}}</cpp:value></cpp:define>
























<macro><name>DIRAC_PIXOP</name><argument_list>(<argument>put</argument>, <argument>ff_put</argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>DIRAC_PIXOP</name><argument_list>(<argument>avg</argument>, <argument>ff_avg</argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>DIRAC_PIXOP</name><argument_list>(<argument>avg</argument>, <argument>ff_avg</argument>, <argument>mmxext</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>ff_put_dirac_pixels16_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>h</name><operator>&amp;</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_put_dirac_pixels16_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_put_pixels16_sse2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ff_avg_dirac_pixels16_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>h</name><operator>&amp;</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_avg_dirac_pixels16_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_avg_pixels16_sse2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ff_put_dirac_pixels32_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>h</name><operator>&amp;</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_put_dirac_pixels32_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_put_pixels16_sse2</name><argument_list>(<argument><expr><name>dst</name></expr></argument> , <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> , <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels16_sse2</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ff_avg_dirac_pixels32_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>h</name><operator>&amp;</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_dirac_pixels32_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_pixels16_sse2</name><argument_list>(<argument><expr><name>dst</name></expr></argument> , <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> , <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels16_sse2</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HPEL_FILTER</name><parameter_list>(<parameter><type><name>MMSIZE</name></type></parameter>, <parameter><type><name>EXT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void dirac_hpel_filter_ ##EXT(uint8_t *dsth, uint8_t *dstv, uint8_t *dstc, const uint8_t *src, int stride, int width, int height);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXFUNC</name><parameter_list>(<parameter><type><name>PFX</name></type></parameter>, <parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>EXT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCH_X86_64</name></expr></cpp:if>
<macro><name>HPEL_FILTER</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>mmx</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>HPEL_FILTER</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>sse2</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>ff_diracdsp_init_x86</name><parameter_list>(<parameter><decl><type><name>DiracDSPContext</name><modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mm_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_dirac_obmc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_add_dirac_obmc8_mmx</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCH_X86_64</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_dirac_obmc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_add_dirac_obmc16_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_dirac_obmc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_add_dirac_obmc32_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dirac_hpel_filter</name></name> <operator>=</operator> <name>dirac_hpel_filter_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_rect_clamped</name></name> <operator>=</operator> <name>ff_add_rect_clamped_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_signed_rect_clamped</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ff_put_signed_rect_clamped_mmx</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PIXFUNC</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PIXFUNC</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PIXFUNC</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dirac_hpel_filter</name></name> <operator>=</operator> <name>dirac_hpel_filter_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_rect_clamped</name></name> <operator>=</operator> <name>ff_add_rect_clamped_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_signed_rect_clamped</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ff_put_signed_rect_clamped_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_dirac_obmc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_add_dirac_obmc16_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_dirac_obmc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_add_dirac_obmc32_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_dirac_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_dirac_pixels16_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_dirac_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_dirac_pixels16_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_dirac_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_dirac_pixels32_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_dirac_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_dirac_pixels32_sse2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE4</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dequant_subband</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_dequant_subband_32_sse4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_signed_rect_clamped</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_signed_rect_clamped_10_sse4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
