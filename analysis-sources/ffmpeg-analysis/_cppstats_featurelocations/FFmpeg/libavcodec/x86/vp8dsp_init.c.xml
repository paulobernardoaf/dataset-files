<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\vp8dsp_init.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp8dsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>




<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel4_h4_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel4_h6_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel4_v4_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel4_v6_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel8_h4_sse2</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel8_h6_sse2</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel8_v4_sse2</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel8_v6_sse2</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel4_h4_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel4_h6_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel4_v4_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel4_v6_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel8_h4_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel8_h6_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel8_v4_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_epel8_v6_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_vp8_bilinear4_h_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_bilinear8_h_sse2</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_bilinear4_h_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_bilinear8_h_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_vp8_bilinear4_v_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_bilinear8_v_sse2</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_bilinear4_v_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_bilinear8_v_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ff_put_vp8_pixels8_mmx</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_pixels16_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vp8_pixels16_sse</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dststride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcstride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAP_W16</name><parameter_list>(<parameter><type><name>OPT</name></type></parameter>, <parameter><type><name>FILTERTYPE</name></type></parameter>, <parameter><type><name>TAPTYPE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void ff_put_vp8_ ##FILTERTYPE ##16_ ##TAPTYPE ##_ ##OPT( uint8_t *dst, ptrdiff_t dststride, uint8_t *src, ptrdiff_t srcstride, int height, int mx, int my) { ff_put_vp8_ ##FILTERTYPE ##8_ ##TAPTYPE ##_ ##OPT( dst, dststride, src, srcstride, height, mx, my); ff_put_vp8_ ##FILTERTYPE ##8_ ##TAPTYPE ##_ ##OPT( dst + 8, dststride, src + 8, srcstride, height, mx, my); }</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAP_W8</name><parameter_list>(<parameter><type><name>OPT</name></type></parameter>, <parameter><type><name>FILTERTYPE</name></type></parameter>, <parameter><type><name>TAPTYPE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void ff_put_vp8_ ##FILTERTYPE ##8_ ##TAPTYPE ##_ ##OPT( uint8_t *dst, ptrdiff_t dststride, uint8_t *src, ptrdiff_t srcstride, int height, int mx, int my) { ff_put_vp8_ ##FILTERTYPE ##4_ ##TAPTYPE ##_ ##OPT( dst, dststride, src, srcstride, height, mx, my); ff_put_vp8_ ##FILTERTYPE ##4_ ##TAPTYPE ##_ ##OPT( dst + 4, dststride, src + 4, srcstride, height, mx, my); }</cpp:value></cpp:define>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<macro><name>TAP_W8</name> <argument_list>(<argument>mmxext</argument>, <argument>epel</argument>, <argument>h4</argument>)</argument_list></macro>
<macro><name>TAP_W8</name> <argument_list>(<argument>mmxext</argument>, <argument>epel</argument>, <argument>h6</argument>)</argument_list></macro>
<macro><name>TAP_W16</name><argument_list>(<argument>mmxext</argument>, <argument>epel</argument>, <argument>h6</argument>)</argument_list></macro>
<macro><name>TAP_W8</name> <argument_list>(<argument>mmxext</argument>, <argument>epel</argument>, <argument>v4</argument>)</argument_list></macro>
<macro><name>TAP_W8</name> <argument_list>(<argument>mmxext</argument>, <argument>epel</argument>, <argument>v6</argument>)</argument_list></macro>
<macro><name>TAP_W16</name><argument_list>(<argument>mmxext</argument>, <argument>epel</argument>, <argument>v6</argument>)</argument_list></macro>
<macro><name>TAP_W8</name> <argument_list>(<argument>mmxext</argument>, <argument>bilinear</argument>, <argument>h</argument>)</argument_list></macro>
<macro><name>TAP_W16</name><argument_list>(<argument>mmxext</argument>, <argument>bilinear</argument>, <argument>h</argument>)</argument_list></macro>
<macro><name>TAP_W8</name> <argument_list>(<argument>mmxext</argument>, <argument>bilinear</argument>, <argument>v</argument>)</argument_list></macro>
<macro><name>TAP_W16</name><argument_list>(<argument>mmxext</argument>, <argument>bilinear</argument>, <argument>v</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>TAP_W16</name><argument_list>(<argument>sse2</argument>, <argument>epel</argument>, <argument>h6</argument>)</argument_list></macro>
<macro><name>TAP_W16</name><argument_list>(<argument>sse2</argument>, <argument>epel</argument>, <argument>v6</argument>)</argument_list></macro>
<macro><name>TAP_W16</name><argument_list>(<argument>sse2</argument>, <argument>bilinear</argument>, <argument>h</argument>)</argument_list></macro>
<macro><name>TAP_W16</name><argument_list>(<argument>sse2</argument>, <argument>bilinear</argument>, <argument>v</argument>)</argument_list></macro>

<macro><name>TAP_W16</name><argument_list>(<argument>ssse3</argument>, <argument>epel</argument>, <argument>h6</argument>)</argument_list></macro>
<macro><name>TAP_W16</name><argument_list>(<argument>ssse3</argument>, <argument>epel</argument>, <argument>v6</argument>)</argument_list></macro>
<macro><name>TAP_W16</name><argument_list>(<argument>ssse3</argument>, <argument>bilinear</argument>, <argument>h</argument>)</argument_list></macro>
<macro><name>TAP_W16</name><argument_list>(<argument>ssse3</argument>, <argument>bilinear</argument>, <argument>v</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVTAP</name><parameter_list>(<parameter><type><name>OPT</name></type></parameter>, <parameter><type><name>ALIGN</name></type></parameter>, <parameter><type><name>TAPNUMX</name></type></parameter>, <parameter><type><name>TAPNUMY</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>MAXHEIGHT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void ff_put_vp8_epel ##SIZE ##_h ##TAPNUMX ##v ##TAPNUMY ##_ ##OPT( uint8_t *dst, ptrdiff_t dststride, uint8_t *src, ptrdiff_t srcstride, int height, int mx, int my) { LOCAL_ALIGNED(ALIGN, uint8_t, tmp, [SIZE * (MAXHEIGHT + TAPNUMY - 1)]); uint8_t *tmpptr = tmp + SIZE * (TAPNUMY / 2 - 1); src -= srcstride * (TAPNUMY / 2 - 1); ff_put_vp8_epel ##SIZE ##_h ##TAPNUMX ##_ ##OPT( tmp, SIZE, src, srcstride, height + TAPNUMY - 1, mx, my); ff_put_vp8_epel ##SIZE ##_v ##TAPNUMY ##_ ##OPT( dst, dststride, tmpptr, SIZE, height, mx, my); }</cpp:value></cpp:define>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVTAPMMX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HVTAP(mmxext, 8, x, y, 4, 8) HVTAP(mmxext, 8, x, y, 8, 16)</cpp:value></cpp:define>



<macro><name>HVTAP</name><argument_list>(<argument>mmxext</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVTAPMMX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HVTAP(mmxext, 8, x, y, 4, 8)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>HVTAPMMX</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>HVTAPMMX</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>HVTAPMMX</name><argument_list>(<argument><literal type="number">6</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>HVTAPMMX</name><argument_list>(<argument><literal type="number">6</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVTAPSSE2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HVTAP(sse2, 16, x, y, w, 16) HVTAP(ssse3, 16, x, y, w, 16)</cpp:value></cpp:define>



<macro><name>HVTAPSSE2</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>HVTAPSSE2</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>HVTAPSSE2</name><argument_list>(<argument><literal type="number">6</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>HVTAPSSE2</name><argument_list>(<argument><literal type="number">6</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>HVTAPSSE2</name><argument_list>(<argument><literal type="number">6</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>HVTAP</name><argument_list>(<argument>ssse3</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>HVTAP</name><argument_list>(<argument>ssse3</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>HVTAP</name><argument_list>(<argument>ssse3</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>HVTAP</name><argument_list>(<argument>ssse3</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVBILIN</name><parameter_list>(<parameter><type><name>OPT</name></type></parameter>, <parameter><type><name>ALIGN</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>MAXHEIGHT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void ff_put_vp8_bilinear ##SIZE ##_hv_ ##OPT( uint8_t *dst, ptrdiff_t dststride, uint8_t *src, ptrdiff_t srcstride, int height, int mx, int my) { LOCAL_ALIGNED(ALIGN, uint8_t, tmp, [SIZE * (MAXHEIGHT + 2)]); ff_put_vp8_bilinear ##SIZE ##_h_ ##OPT( tmp, SIZE, src, srcstride, height + 1, mx, my); ff_put_vp8_bilinear ##SIZE ##_v_ ##OPT( dst, dststride, tmp, SIZE, height, mx, my); }</cpp:value></cpp:define>











<macro><name>HVBILIN</name><argument_list>(<argument>mmxext</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<macro><name>HVBILIN</name><argument_list>(<argument>mmxext</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>HVBILIN</name><argument_list>(<argument>mmxext</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>HVBILIN</name><argument_list>(<argument>sse2</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>HVBILIN</name><argument_list>(<argument>sse2</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>HVBILIN</name><argument_list>(<argument>ssse3</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>HVBILIN</name><argument_list>(<argument>ssse3</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>HVBILIN</name><argument_list>(<argument>ssse3</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>ff_vp8_idct_dc_add_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp8_idct_dc_add_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp8_idct_dc_add_sse4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp8_idct_dc_add4y_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp8_idct_dc_add4y_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp8_idct_dc_add4uv_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp8_luma_dc_wht_mmx</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>dc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp8_luma_dc_wht_sse</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>dc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp8_idct_add_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vp8_idct_add_sse</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_LOOP_FILTER</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp8_v_loop_filter_simple_ ##NAME(uint8_t *dst, ptrdiff_t stride, int flim); void ff_vp8_h_loop_filter_simple_ ##NAME(uint8_t *dst, ptrdiff_t stride, int flim); void ff_vp8_v_loop_filter16y_inner_ ##NAME (uint8_t *dst, ptrdiff_t stride, int e, int i, int hvt); void ff_vp8_h_loop_filter16y_inner_ ##NAME (uint8_t *dst, ptrdiff_t stride, int e, int i, int hvt); void ff_vp8_v_loop_filter8uv_inner_ ##NAME (uint8_t *dstU, uint8_t *dstV, ptrdiff_t s, int e, int i, int hvt); void ff_vp8_h_loop_filter8uv_inner_ ##NAME (uint8_t *dstU, uint8_t *dstV, ptrdiff_t s, int e, int i, int hvt); void ff_vp8_v_loop_filter16y_mbedge_ ##NAME(uint8_t *dst, ptrdiff_t stride, int e, int i, int hvt); void ff_vp8_h_loop_filter16y_mbedge_ ##NAME(uint8_t *dst, ptrdiff_t stride, int e, int i, int hvt); void ff_vp8_v_loop_filter8uv_mbedge_ ##NAME(uint8_t *dstU, uint8_t *dstV, ptrdiff_t s, int e, int i, int hvt); void ff_vp8_h_loop_filter8uv_mbedge_ ##NAME(uint8_t *dstU, uint8_t *dstV, ptrdiff_t s, int e, int i, int hvt);</cpp:value></cpp:define>



































<macro><name>DECLARE_LOOP_FILTER</name><argument_list>(<argument>mmx</argument>)</argument_list></macro>
<macro><name>DECLARE_LOOP_FILTER</name><argument_list>(<argument>mmxext</argument>)</argument_list></macro>
<macro><name>DECLARE_LOOP_FILTER</name><argument_list>(<argument>sse2</argument>)</argument_list></macro>
<macro><name>DECLARE_LOOP_FILTER</name><argument_list>(<argument>ssse3</argument>)</argument_list></macro>
<macro><name>DECLARE_LOOP_FILTER</name><argument_list>(<argument>sse4</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_LUMA_MC_FUNC</name><parameter_list>(<parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;put_vp8_epel_pixels_tab[IDX][0][2] = ff_put_vp8_epel ##SIZE ##_h6_ ##OPT; c-&gt;put_vp8_epel_pixels_tab[IDX][2][0] = ff_put_vp8_epel ##SIZE ##_v6_ ##OPT; c-&gt;put_vp8_epel_pixels_tab[IDX][2][2] = ff_put_vp8_epel ##SIZE ##_h6v6_ ##OPT</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_MC_FUNC</name><parameter_list>(<parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;put_vp8_epel_pixels_tab[IDX][0][1] = ff_put_vp8_epel ##SIZE ##_h4_ ##OPT; c-&gt;put_vp8_epel_pixels_tab[IDX][1][0] = ff_put_vp8_epel ##SIZE ##_v4_ ##OPT; c-&gt;put_vp8_epel_pixels_tab[IDX][1][1] = ff_put_vp8_epel ##SIZE ##_h4v4_ ##OPT; c-&gt;put_vp8_epel_pixels_tab[IDX][1][2] = ff_put_vp8_epel ##SIZE ##_h6v4_ ##OPT; c-&gt;put_vp8_epel_pixels_tab[IDX][2][1] = ff_put_vp8_epel ##SIZE ##_h4v6_ ##OPT; VP8_LUMA_MC_FUNC(IDX, SIZE, OPT)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_BILINEAR_MC_FUNC</name><parameter_list>(<parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;put_vp8_bilinear_pixels_tab[IDX][0][1] = ff_put_vp8_bilinear ##SIZE ##_h_ ##OPT; c-&gt;put_vp8_bilinear_pixels_tab[IDX][0][2] = ff_put_vp8_bilinear ##SIZE ##_h_ ##OPT; c-&gt;put_vp8_bilinear_pixels_tab[IDX][1][0] = ff_put_vp8_bilinear ##SIZE ##_v_ ##OPT; c-&gt;put_vp8_bilinear_pixels_tab[IDX][1][1] = ff_put_vp8_bilinear ##SIZE ##_hv_ ##OPT; c-&gt;put_vp8_bilinear_pixels_tab[IDX][1][2] = ff_put_vp8_bilinear ##SIZE ##_hv_ ##OPT; c-&gt;put_vp8_bilinear_pixels_tab[IDX][2][0] = ff_put_vp8_bilinear ##SIZE ##_v_ ##OPT; c-&gt;put_vp8_bilinear_pixels_tab[IDX][2][1] = ff_put_vp8_bilinear ##SIZE ##_hv_ ##OPT; c-&gt;put_vp8_bilinear_pixels_tab[IDX][2][2] = ff_put_vp8_bilinear ##SIZE ##_hv_ ##OPT</cpp:value></cpp:define>










<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vp78dsp_init_x86</name><parameter_list>(<parameter><decl><type><name>VP8DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>c</name><operator>-&gt;</operator><name>put_vp8_bilinear_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_vp8_pixels16_mmx</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>c</name><operator>-&gt;</operator><name>put_vp8_bilinear_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_vp8_pixels8_mmx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VP8_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_BILINEAR_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<expr_stmt><expr><call><name>VP8_LUMA_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_BILINEAR_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_BILINEAR_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_vp8_epel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>c</name><operator>-&gt;</operator><name>put_vp8_bilinear_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_vp8_pixels16_sse</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>EXTERNAL_SSE2_SLOW</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VP8_LUMA_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_BILINEAR_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_BILINEAR_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VP8_LUMA_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_BILINEAR_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_BILINEAR_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_BILINEAR_MC_FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vp8dsp_init_x86</name><parameter_list>(<parameter><decl><type><name>VP8DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_idct_dc_add4uv</name></name> <operator>=</operator> <name>ff_vp8_idct_dc_add4uv_mmx</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_idct_dc_add</name></name> <operator>=</operator> <name>ff_vp8_idct_dc_add_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_idct_dc_add4y</name></name> <operator>=</operator> <name>ff_vp8_idct_dc_add4y_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_idct_add</name></name> <operator>=</operator> <name>ff_vp8_idct_add_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_luma_dc_wht</name></name> <operator>=</operator> <name>ff_vp8_luma_dc_wht_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter_simple</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter_simple_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter_simple</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter_simple_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y_inner</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter16y_inner_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y_inner</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter16y_inner_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv_inner</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter8uv_inner_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv_inner</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter8uv_inner_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter16y_mbedge_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter16y_mbedge_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter8uv_mbedge_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter8uv_mbedge_mmx</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter_simple</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter_simple_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter_simple</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter_simple_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y_inner</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter16y_inner_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y_inner</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter16y_inner_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv_inner</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter8uv_inner_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv_inner</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter8uv_inner_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter16y_mbedge_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter16y_mbedge_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter8uv_mbedge_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter8uv_mbedge_mmxext</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_idct_add</name></name> <operator>=</operator> <name>ff_vp8_idct_add_sse</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_luma_dc_wht</name></name> <operator>=</operator> <name>ff_vp8_luma_dc_wht_sse</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>EXTERNAL_SSE2_SLOW</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter_simple</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter_simple_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y_inner</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter16y_inner_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv_inner</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter8uv_inner_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter16y_mbedge_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter8uv_mbedge_sse2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_idct_dc_add</name></name> <operator>=</operator> <name>ff_vp8_idct_dc_add_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_idct_dc_add4y</name></name> <operator>=</operator> <name>ff_vp8_idct_dc_add4y_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter_simple</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter_simple_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y_inner</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter16y_inner_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv_inner</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter8uv_inner_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter16y_mbedge_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter8uv_mbedge_sse2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter_simple</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter_simple_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter_simple</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter_simple_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y_inner</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter16y_inner_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y_inner</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter16y_inner_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv_inner</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter8uv_inner_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv_inner</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter8uv_inner_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter16y</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter16y_mbedge_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter16y_mbedge_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_v_loop_filter8uv</name></name> <operator>=</operator> <name>ff_vp8_v_loop_filter8uv_mbedge_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter8uv_mbedge_ssse3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE4</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_idct_dc_add</name></name> <operator>=</operator> <name>ff_vp8_idct_dc_add_sse4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter_simple</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter_simple_sse4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter16y</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter16y_mbedge_sse4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vp8_h_loop_filter8uv</name></name> <operator>=</operator> <name>ff_vp8_h_loop_filter8uv_mbedge_sse4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
