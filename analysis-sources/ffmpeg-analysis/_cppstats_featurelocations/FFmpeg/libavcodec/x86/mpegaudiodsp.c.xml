<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\mpegaudiodsp.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegaudiodsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL</name><parameter_list>(<parameter><type><name>CPU</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void imdct36_blocks_ ##CPU(float *out, float *buf, float *in, int count, int switch_point, int block_type);void ff_imdct36_float_ ##CPU(float *out, float *buf, float *in, float *win);</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<macro><name>DECL</name><argument_list>(<argument>sse</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>DECL</name><argument_list>(<argument>sse2</argument>)</argument_list></macro>
<macro><name>DECL</name><argument_list>(<argument>sse3</argument>)</argument_list></macro>
<macro><name>DECL</name><argument_list>(<argument>ssse3</argument>)</argument_list></macro>
<macro><name>DECL</name><argument_list>(<argument>avx</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>void</name></type> <name>ff_four_imdct36_float_sse</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>tmpbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_four_imdct36_float_avx</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>tmpbuf</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>static</specifier> <name>float</name></expr></argument>, <argument><expr><name>mdct_win_sse</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">40</literal></expr>]</index></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_6REGS</name> <operator>&amp;&amp;</operator> <name>HAVE_SSE_INLINE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MACS</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>, <parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rt+=(ra)*(rb)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLSS</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>, <parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rt-=(ra)*(rb)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUM8</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>sum</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ op(sum, (w)[0 * 64], (p)[0 * 64]); op(sum, (w)[1 * 64], (p)[1 * 64]); op(sum, (w)[2 * 64], (p)[2 * 64]); op(sum, (w)[3 * 64], (p)[3 * 64]); op(sum, (w)[4 * 64], (p)[4 * 64]); op(sum, (w)[5 * 64], (p)[5 * 64]); op(sum, (w)[6 * 64], (p)[6 * 64]); op(sum, (w)[7 * 64], (p)[7 * 64]); }</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_window</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>win1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>win2</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sum1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sum2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>count</name> <init>= <expr><operator>-</operator> <literal type="number">4</literal><operator>*</operator><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>win1a</name> <init>= <expr><name>win1</name><operator>+</operator><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>win2a</name> <init>= <expr><name>win2</name><operator>+</operator><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>bufa</name> <init>= <expr><name>buf</name><operator>+</operator><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>sum1a</name> <init>= <expr><name>sum1</name><operator>+</operator><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>sum2a</name> <init>= <expr><name>sum2</name><operator>+</operator><name>len</name></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movaps " #a "(%1,%0), %%xmm1 \n\t" "movaps " #a "(%3,%0), %%xmm2 \n\t" "mulps %%xmm2, %%xmm1 \n\t" "subps %%xmm1, %%xmm0 \n\t" "mulps " #b "(%2,%0), %%xmm2 \n\t" "subps %%xmm2, %%xmm4 \n\t"</cpp:value></cpp:define> 







<asm>__asm__ <specifier>volatile</specifier>(
"1: \n\t"
"xorps %%xmm0, %%xmm0 \n\t"
"xorps %%xmm4, %%xmm4 \n\t"

MULT( 0, 0)
MULT( 256, 64)
MULT( 512, 128)
MULT( 768, 192)
MULT(1024, 256)
MULT(1280, 320)
MULT(1536, 384)
MULT(1792, 448)

"movaps %%xmm0, (%4,%0) \n\t"
"movaps %%xmm4, (%5,%0) \n\t"
"add $16, %0 \n\t"
"jl 1b \n\t"
:"+&amp;r"(count)
:"r"(win1a), "r"(win2a), "r"(bufa), "r"(sum1a), "r"(sum2a)
);</asm>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MULT</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_window_mp3</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>incr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>suma</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">17</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>sumb</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">17</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>sumc</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">17</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>sumd</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">17</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name></decl>;</decl_stmt>


<asm>__asm__ <specifier>volatile</specifier>(
"movaps 0(%0), %%xmm0 \n\t" \
"movaps 16(%0), %%xmm1 \n\t" \
"movaps 32(%0), %%xmm2 \n\t" \
"movaps 48(%0), %%xmm3 \n\t" \
"movaps %%xmm0, 0(%1) \n\t" \
"movaps %%xmm1, 16(%1) \n\t" \
"movaps %%xmm2, 32(%1) \n\t" \
"movaps %%xmm3, 48(%1) \n\t" \
"movaps 64(%0), %%xmm0 \n\t" \
"movaps 80(%0), %%xmm1 \n\t" \
"movaps 96(%0), %%xmm2 \n\t" \
"movaps 112(%0), %%xmm3 \n\t" \
"movaps %%xmm0, 64(%1) \n\t" \
"movaps %%xmm1, 80(%1) \n\t" \
"movaps %%xmm2, 96(%1) \n\t" \
"movaps %%xmm3, 112(%1) \n\t"
::"r"(in), "r"(in+512)
:"memory"
);</asm>

<expr_stmt><expr><call><name>apply_window</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>win</name></expr></argument> , <argument><expr><name>win</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name>suma</name></expr></argument>, <argument><expr><name>sumc</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_window</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>win</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>win</name> <operator>+</operator> <literal type="number">640</literal></expr></argument>, <argument><expr><name>sumb</name></expr></argument>, <argument><expr><name>sumd</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUM8</name><argument_list>(<argument><expr><name>MACS</name></expr></argument>, <argument><expr><name><name>suma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>win</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sumc</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sumb</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sumd</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUMS</name><parameter_list>(<parameter><type><name>suma</name></type></parameter>, <parameter><type><name>sumb</name></type></parameter>, <parameter><type><name>sumc</name></type></parameter>, <parameter><type><name>sumd</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movups " #sumd "(%4), %%xmm0 \n\t" "shufps $0x1b, %%xmm0, %%xmm0 \n\t" "subps " #suma "(%1), %%xmm0 \n\t" "movaps %%xmm0," #out1 "(%0) \n\t" "movups " #sumc "(%3), %%xmm0 \n\t" "shufps $0x1b, %%xmm0, %%xmm0 \n\t" "addps " #sumb "(%2), %%xmm0 \n\t" "movaps %%xmm0," #out2 "(%0) \n\t"</cpp:value></cpp:define>










<if_stmt><if>if <condition>(<expr><name>incr</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
SUMS( 0, 48, 4, 52, 0, 112)
SUMS(16, 32, 20, 36, 16, 96)
SUMS(32, 16, 36, 20, 32, 80)
SUMS(48, 0, 52, 4, 48, 64)

:"+&amp;r"(out)
:"r"(&amp;suma[0]), "r"(&amp;sumb[0]), "r"(&amp;sumc[0]), "r"(&amp;sumd[0])
:"memory"
);</asm>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">16</literal><operator>*</operator><name>incr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out2</name> <init>= <expr><name>out</name> <operator>+</operator> <literal type="number">32</literal> <operator>*</operator> <name>incr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator> <operator>-</operator><name><name>suma</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>-=</operator> <name>incr</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>-</operator><name><name>suma</name><index>[ <expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>sumd</name><index>[<expr><literal type="number">16</literal><operator>-</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out2</name> <operator>=</operator> <name><name>sumb</name><index>[<expr><literal type="number">16</literal><operator>-</operator><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>sumc</name><index>[ <expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>-=</operator> <name>incr</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUM8</name><argument_list>(<argument><expr><name>MLSS</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>win</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_IMDCT_BLOCKS</name><parameter_list>(<parameter><type><name>CPU1</name></type></parameter>, <parameter><type><name>CPU2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void imdct36_blocks_ ##CPU1(float *out, float *buf, float *in, int count, int switch_point, int block_type) { int align_end = count - (count &amp; 3); int j; for (j = 0; j &lt; align_end; j+= 4) { LOCAL_ALIGNED_16(float, tmpbuf, [1024]); float *win = mdct_win_sse[switch_point &amp;&amp; j &lt; 4][block_type]; ff_four_imdct36_float_ ##CPU2(out, buf, in, win, tmpbuf); in += 4*18; buf += 4*18; out += 4; } for (; j &lt; count; j++) { int win_idx = (switch_point &amp;&amp; j &lt; 2) ? 0 : block_type; float *win = ff_mdct_win_float[win_idx + (4 &amp; -(j &amp; 1))]; ff_imdct36_float_ ##CPU1(out, buf, in, win); in += 18; buf++; out++; } }</cpp:value></cpp:define>































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<macro><name>DECL_IMDCT_BLOCKS</name><argument_list>(<argument>sse</argument>,<argument>sse</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>DECL_IMDCT_BLOCKS</name><argument_list>(<argument>sse2</argument>,<argument>sse</argument>)</argument_list></macro>
<macro><name>DECL_IMDCT_BLOCKS</name><argument_list>(<argument>sse3</argument>,<argument>sse</argument>)</argument_list></macro>
<macro><name>DECL_IMDCT_BLOCKS</name><argument_list>(<argument>ssse3</argument>,<argument>sse</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX_EXTERNAL</name></expr></cpp:if>
<macro><name>DECL_IMDCT_BLOCKS</name><argument_list>(<argument>avx</argument>,<argument>avx</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpadsp_init_x86</name><parameter_list>(<parameter><decl><type><name>MPADSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>av_unused</name> <name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mdct_win_sse</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>ff_mdct_win_float</name><index>[<expr><name>j</name></expr> ]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mdct_win_sse</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_mdct_win_float</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mdct_win_sse</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_mdct_win_float</name><index>[<expr><name>j</name></expr> ]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mdct_win_sse</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_mdct_win_float</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mdct_win_sse</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>ff_mdct_win_float</name><index>[<expr><literal type="number">0</literal></expr> ]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mdct_win_sse</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_mdct_win_float</name><index>[<expr><literal type="number">4</literal></expr> ]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mdct_win_sse</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_mdct_win_float</name><index>[<expr><name>j</name></expr> ]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mdct_win_sse</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_mdct_win_float</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_6REGS</name> <operator>&amp;&amp;</operator> <name>HAVE_SSE_INLINE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_SSE</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>apply_window_float</name></name> <operator>=</operator> <name>apply_window_mp3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct36_blocks_float</name></name> <operator>=</operator> <name>imdct36_blocks_sse</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct36_blocks_float</name></name> <operator>=</operator> <name>imdct36_blocks_sse2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct36_blocks_float</name></name> <operator>=</operator> <name>imdct36_blocks_sse3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct36_blocks_float</name></name> <operator>=</operator> <name>imdct36_blocks_ssse3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX_EXTERNAL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct36_blocks_float</name></name> <operator>=</operator> <name>imdct36_blocks_avx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
