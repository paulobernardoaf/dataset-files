<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\dirac_dwt_init.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dirac_dwt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPOSE_VERTICAL</name><parameter_list>(<parameter><type><name>ext</name></type></parameter>, <parameter><type><name>align</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vertical_compose53iL0##ext(int16_t *b0, int16_t *b1, int16_t *b2, int width); void ff_vertical_compose_dirac53iH0##ext(int16_t *b0, int16_t *b1, int16_t *b2, int width); void ff_vertical_compose_dd137iL0##ext(int16_t *b0, int16_t *b1, int16_t *b2, int16_t *b3, int16_t *b4, int width); void ff_vertical_compose_dd97iH0##ext(int16_t *b0, int16_t *b1, int16_t *b2, int16_t *b3, int16_t *b4, int width); void ff_vertical_compose_haar##ext(int16_t *b0, int16_t *b1, int width); void ff_horizontal_compose_haar0i##ext(int16_t *b, int16_t *tmp, int w);void ff_horizontal_compose_haar1i##ext(int16_t *b, int16_t *tmp, int w);static void vertical_compose53iL0##ext(uint8_t *_b0, uint8_t *_b1, uint8_t *_b2, int width) { int i, width_align = width&amp;~(align-1); int16_t *b0 = (int16_t *)_b0; int16_t *b1 = (int16_t *)_b1; int16_t *b2 = (int16_t *)_b2; for(i=width_align; i&lt;width; i++) b1[i] = COMPOSE_53iL0(b0[i], b1[i], b2[i]); ff_vertical_compose53iL0##ext(b0, b1, b2, width_align); } static void vertical_compose_dirac53iH0##ext(uint8_t *_b0, uint8_t *_b1, uint8_t *_b2, int width) { int i, width_align = width&amp;~(align-1); int16_t *b0 = (int16_t *)_b0; int16_t *b1 = (int16_t *)_b1; int16_t *b2 = (int16_t *)_b2; for(i=width_align; i&lt;width; i++) b1[i] = COMPOSE_DIRAC53iH0(b0[i], b1[i], b2[i]); ff_vertical_compose_dirac53iH0##ext(b0, b1, b2, width_align); } static void vertical_compose_dd137iL0##ext(uint8_t *_b0, uint8_t *_b1, uint8_t *_b2, uint8_t *_b3, uint8_t *_b4, int width) { int i, width_align = width&amp;~(align-1); int16_t *b0 = (int16_t *)_b0; int16_t *b1 = (int16_t *)_b1; int16_t *b2 = (int16_t *)_b2; int16_t *b3 = (int16_t *)_b3; int16_t *b4 = (int16_t *)_b4; for(i=width_align; i&lt;width; i++) b2[i] = COMPOSE_DD137iL0(b0[i], b1[i], b2[i], b3[i], b4[i]); ff_vertical_compose_dd137iL0##ext(b0, b1, b2, b3, b4, width_align); } static void vertical_compose_dd97iH0##ext(uint8_t *_b0, uint8_t *_b1, uint8_t *_b2, uint8_t *_b3, uint8_t *_b4, int width) { int i, width_align = width&amp;~(align-1); int16_t *b0 = (int16_t *)_b0; int16_t *b1 = (int16_t *)_b1; int16_t *b2 = (int16_t *)_b2; int16_t *b3 = (int16_t *)_b3; int16_t *b4 = (int16_t *)_b4; for(i=width_align; i&lt;width; i++) b2[i] = COMPOSE_DD97iH0(b0[i], b1[i], b2[i], b3[i], b4[i]); ff_vertical_compose_dd97iH0##ext(b0, b1, b2, b3, b4, width_align); } static void vertical_compose_haar##ext(uint8_t *_b0, uint8_t *_b1, int width) { int i, width_align = width&amp;~(align-1); int16_t *b0 = (int16_t *)_b0; int16_t *b1 = (int16_t *)_b1; for(i=width_align; i&lt;width; i++) { b0[i] = COMPOSE_HAARiL0(b0[i], b1[i]); b1[i] = COMPOSE_HAARiH0(b1[i], b0[i]); } ff_vertical_compose_haar##ext(b0, b1, width_align); } static void horizontal_compose_haar0i##ext(uint8_t *_b, uint8_t *_tmp, int w){int w2= w&gt;&gt;1;int x= w2 - (w2&amp;(align-1));int16_t *b = (int16_t *)_b; int16_t *tmp = (int16_t *)_tmp; ff_horizontal_compose_haar0i##ext(b, tmp, w);for (; x &lt; w2; x++) {b[2*x ] = tmp[x];b[2*x+1] = COMPOSE_HAARiH0(b[x+w2], tmp[x]);}}static void horizontal_compose_haar1i##ext(uint8_t *_b, uint8_t *_tmp, int w){int w2= w&gt;&gt;1;int x= w2 - (w2&amp;(align-1));int16_t *b = (int16_t *)_b; int16_t *tmp = (int16_t *)_tmp; ff_horizontal_compose_haar1i##ext(b, tmp, w);for (; x &lt; w2; x++) {b[2*x ] = (tmp[x] + 1)&gt;&gt;1;b[2*x+1] = (COMPOSE_HAARiH0(b[x+w2], tmp[x]) + 1)&gt;&gt;1;}}</cpp:value></cpp:define>












































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCH_X86_64</name></expr></cpp:if>
<macro><name>COMPOSE_VERTICAL</name><argument_list>(<argument>_mmx</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>COMPOSE_VERTICAL</name><argument_list>(<argument>_sse2</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>


<function_decl><type><name>void</name></type> <name>ff_horizontal_compose_dd97i_ssse3</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_tmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horizontal_compose_dd97i_ssse3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_tmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w2</name><init>= <expr><name>w</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>= <expr><name>w2</name> <operator>-</operator> <operator>(</operator><name>w2</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_tmp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_horizontal_compose_dd97i_ssse3</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>COMPOSE_DD97iH0</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name><operator>+</operator><name>w2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>ff_spatial_idwt_init_x86</name><parameter_list>(<parameter><decl><type><name>DWTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dwt_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>mm_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCH_X86_64</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mm_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_MMX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DWT_DIRAC_DD9_7</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose53iL0_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_dd97iH0_mmx</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DWT_DIRAC_LEGALL5_3</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose53iL0_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_dirac53iH0_mmx</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DWT_DIRAC_DD13_7</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_dd137iL0_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_dd97iH0_mmx</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DWT_DIRAC_HAAR0</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_haar_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <name>horizontal_compose_haar0i_mmx</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DWT_DIRAC_HAAR1</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_haar_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <name>horizontal_compose_haar1i_mmx</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mm_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSE2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DWT_DIRAC_DD9_7</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose53iL0_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_dd97iH0_sse2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DWT_DIRAC_LEGALL5_3</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose53iL0_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_dirac53iH0_sse2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DWT_DIRAC_DD13_7</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_l0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_dd137iL0_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose_h0</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_dd97iH0_sse2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DWT_DIRAC_HAAR0</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_haar_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <name>horizontal_compose_haar0i_sse2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DWT_DIRAC_HAAR1</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>vertical_compose</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>vertical_compose_haar_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <name>horizontal_compose_haar1i_sse2</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mm_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSSE3</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DWT_DIRAC_DD9_7</name></expr>:</case>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>horizontal_compose</name></name> <operator>=</operator> <name>horizontal_compose_dd97i_ssse3</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
