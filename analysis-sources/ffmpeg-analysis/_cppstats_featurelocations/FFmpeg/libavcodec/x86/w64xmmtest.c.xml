<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\w64xmmtest.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/w64xmmtest.h"</cpp:file></cpp:include>

<macro><name>wrap</name><argument_list>(<argument>avcodec_open2(AVCodecContext *avctx,
const AVCodec *codec,
AVDictionary **options)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>testxmmclobbers</name><argument_list>(<argument><expr><name>avcodec_open2</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>wrap</name><argument_list>(<argument>avcodec_decode_audio4(AVCodecContext *avctx,
AVFrame *frame,
int *got_frame_ptr,
AVPacket *avpkt)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>testxmmclobbers</name><argument_list>(<argument><expr><name>avcodec_decode_audio4</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>,
<argument><expr><name>got_frame_ptr</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>wrap</name><argument_list>(<argument>avcodec_decode_video2(AVCodecContext *avctx,
AVFrame *picture,
int *got_picture_ptr,
AVPacket *avpkt)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>testxmmclobbers</name><argument_list>(<argument><expr><name>avcodec_decode_video2</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>,
<argument><expr><name>got_picture_ptr</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>wrap</name><argument_list>(<argument>avcodec_decode_subtitle2(AVCodecContext *avctx,
AVSubtitle *sub,
int *got_sub_ptr,
AVPacket *avpkt)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>testxmmclobbers</name><argument_list>(<argument><expr><name>avcodec_decode_subtitle2</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>,
<argument><expr><name>got_sub_ptr</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>wrap</name><argument_list>(<argument>avcodec_encode_audio2(AVCodecContext *avctx,
AVPacket *avpkt,
const AVFrame *frame,
int *got_packet_ptr)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>testxmmclobbers</name><argument_list>(<argument><expr><name>avcodec_encode_audio2</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>,
<argument><expr><name>got_packet_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>wrap</name><argument_list>(<argument>avcodec_encode_subtitle(AVCodecContext *avctx,
uint8_t *buf, int buf_size,
const AVSubtitle *sub)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>testxmmclobbers</name><argument_list>(<argument><expr><name>avcodec_encode_subtitle</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>wrap</name><argument_list>(<argument>avcodec_encode_video2(AVCodecContext *avctx, AVPacket *avpkt,
const AVFrame *frame, int *got_packet_ptr)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>testxmmclobbers</name><argument_list>(<argument><expr><name>avcodec_encode_video2</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>got_packet_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>wrap</name><argument_list>(<argument>avcodec_send_packet(AVCodecContext *avctx, const AVPacket *avpkt)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>testxmmclobbers</name><argument_list>(<argument><expr><name>avcodec_send_packet</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>wrap</name><argument_list>(<argument>avcodec_receive_packet(AVCodecContext *avctx, AVPacket *avpkt)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>testxmmclobbers</name><argument_list>(<argument><expr><name>avcodec_receive_packet</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>wrap</name><argument_list>(<argument>avcodec_send_frame(AVCodecContext *avctx, const AVFrame *frame)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>testxmmclobbers</name><argument_list>(<argument><expr><name>avcodec_send_frame</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>wrap</name><argument_list>(<argument>avcodec_receive_frame(AVCodecContext *avctx, AVFrame *frame)</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>testxmmclobbers</name><argument_list>(<argument><expr><name>avcodec_receive_frame</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
