<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\inline_asm.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_X86_INLINE_ASM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_X86_INLINE_ASM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constants.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVQ_WONE</name><parameter_list>(<parameter><type><name>regd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ volatile ( "pcmpeqd %%" #regd ", %%" #regd " \n\t" "psrlw $15, %%" #regd ::)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMPALIGN</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__asm__ volatile (".p2align 3"::)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVQ_ZERO</name><parameter_list>(<parameter><type><name>regd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ volatile ("pxor %%"#regd", %%"#regd ::)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVQ_BFE</name><parameter_list>(<parameter><type><name>regd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ volatile ( "pcmpeqd %%"#regd", %%"#regd" \n\t" "paddb %%"#regd", %%"#regd" \n\t" ::)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVQ_WTWO</name><parameter_list>(<parameter><type><name>regd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ volatile ("movq %0, %%"#regd" \n\t" :: "m"(ff_pw_2))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVQ_WTWO</name><parameter_list>(<parameter><type><name>regd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ volatile ( "pcmpeqd %%"#regd", %%"#regd" \n\t" "psrlw $15, %%"#regd" \n\t" "psllw $1, %%"#regd" \n\t"::)</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAVGB_MMX_NO_RND</name><parameter_list>(<parameter><type><name>rega</name></type></parameter>, <parameter><type><name>regb</name></type></parameter>, <parameter><type><name>regr</name></type></parameter>, <parameter><type><name>regfe</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq "#rega", "#regr" \n\t" "pand "#regb", "#regr" \n\t" "pxor "#rega", "#regb" \n\t" "pand "#regfe", "#regb" \n\t" "psrlq $1, "#regb" \n\t" "paddb "#regb", "#regr" \n\t"</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAVGB_MMX</name><parameter_list>(<parameter><type><name>rega</name></type></parameter>, <parameter><type><name>regb</name></type></parameter>, <parameter><type><name>regr</name></type></parameter>, <parameter><type><name>regfe</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq "#rega", "#regr" \n\t" "por "#regb", "#regr" \n\t" "pxor "#rega", "#regb" \n\t" "pand "#regfe", "#regb" \n\t" "psrlq $1, "#regb" \n\t" "psubb "#regb", "#regr" \n\t"</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAVGBP_MMX_NO_RND</name><parameter_list>(<parameter><type><name>rega</name></type></parameter>, <parameter><type><name>regb</name></type></parameter>, <parameter><type><name>regr</name></type></parameter>, <parameter><type><name>regc</name></type></parameter>, <parameter><type><name>regd</name></type></parameter>, <parameter><type><name>regp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq "#rega", "#regr" \n\t" "movq "#regc", "#regp" \n\t" "pand "#regb", "#regr" \n\t" "pand "#regd", "#regp" \n\t" "pxor "#rega", "#regb" \n\t" "pxor "#regc", "#regd" \n\t" "pand %%mm6, "#regb" \n\t" "pand %%mm6, "#regd" \n\t" "psrlq $1, "#regb" \n\t" "psrlq $1, "#regd" \n\t" "paddb "#regb", "#regr" \n\t" "paddb "#regd", "#regp" \n\t"</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAVGBP_MMX</name><parameter_list>(<parameter><type><name>rega</name></type></parameter>, <parameter><type><name>regb</name></type></parameter>, <parameter><type><name>regr</name></type></parameter>, <parameter><type><name>regc</name></type></parameter>, <parameter><type><name>regd</name></type></parameter>, <parameter><type><name>regp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq "#rega", "#regr" \n\t" "movq "#regc", "#regp" \n\t" "por "#regb", "#regr" \n\t" "por "#regd", "#regp" \n\t" "pxor "#rega", "#regb" \n\t" "pxor "#regc", "#regd" \n\t" "pand %%mm6, "#regb" \n\t" "pand %%mm6, "#regd" \n\t" "psrlq $1, "#regd" \n\t" "psrlq $1, "#regb" \n\t" "psubb "#regb", "#regr" \n\t" "psubb "#regd", "#regp" \n\t"</cpp:value></cpp:define>













<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
