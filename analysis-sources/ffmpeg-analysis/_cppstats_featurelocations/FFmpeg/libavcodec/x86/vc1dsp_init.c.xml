<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\vc1dsp_init.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vc1dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fpel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOP_FILTER</name><parameter_list>(<parameter><type><name>EXT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vc1_v_loop_filter4_ ##EXT(uint8_t *src, int stride, int pq); void ff_vc1_h_loop_filter4_ ##EXT(uint8_t *src, int stride, int pq); void ff_vc1_v_loop_filter8_ ##EXT(uint8_t *src, int stride, int pq); void ff_vc1_h_loop_filter8_ ##EXT(uint8_t *src, int stride, int pq); static void vc1_v_loop_filter16_ ##EXT(uint8_t *src, int stride, int pq) { ff_vc1_v_loop_filter8_ ##EXT(src, stride, pq); ff_vc1_v_loop_filter8_ ##EXT(src+8, stride, pq); } static void vc1_h_loop_filter16_ ##EXT(uint8_t *src, int stride, int pq) { ff_vc1_h_loop_filter8_ ##EXT(src, stride, pq); ff_vc1_h_loop_filter8_ ##EXT(src+8*stride, stride, pq); }</cpp:value></cpp:define>

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<macro><name>LOOP_FILTER</name><argument_list>(<argument>mmxext</argument>)</argument_list></macro>
<macro><name>LOOP_FILTER</name><argument_list>(<argument>sse2</argument>)</argument_list></macro>
<macro><name>LOOP_FILTER</name><argument_list>(<argument>ssse3</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>ff_vc1_h_loop_filter8_sse4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_h_loop_filter16_sse4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_vc1_h_loop_filter8_sse4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vc1_h_loop_filter8_sse4</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">8</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_FUNCTION</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>INSN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OP##vc1_mspel_mc00_##DEPTH##INSN(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { ff_ ##OP ##pixels ##DEPTH ##INSN(dst, src, stride, DEPTH); }</cpp:value></cpp:define>






<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">8</literal></argument>, <argument>_mmx</argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">16</literal></argument>, <argument>_mmx</argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">8</literal></argument>, <argument>_mmx</argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">16</literal></argument>, <argument>_mmx</argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">8</literal></argument>, <argument>_mmxext</argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">16</literal></argument>, <argument>_mmxext</argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">16</literal></argument>, <argument>_sse2</argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">16</literal></argument>, <argument>_sse2</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>void</name></type> <name>ff_put_vc1_chroma_mc8_nornd_mmx</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_vc1_chroma_mc8_nornd_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_vc1_chroma_mc8_nornd_3dnow</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_vc1_chroma_mc8_nornd_ssse3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_vc1_chroma_mc8_nornd_ssse3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_inv_trans_4x4_dc_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_inv_trans_4x8_dc_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_inv_trans_8x4_dc_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_inv_trans_8x8_dc_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vc1dsp_init_x86</name><parameter_list>(<parameter><decl><type><name>VC1DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_6REGS</name> <operator>&amp;&amp;</operator> <call><name>INLINE_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vc1dsp_init_mmx</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_6REGS</name> <operator>&amp;&amp;</operator> <call><name>INLINE_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vc1dsp_init_mmxext</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN_LF</name><parameter_list>(<parameter><type><name>EXT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;vc1_v_loop_filter4 = ff_vc1_v_loop_filter4_ ##EXT; dsp-&gt;vc1_h_loop_filter4 = ff_vc1_h_loop_filter4_ ##EXT; dsp-&gt;vc1_v_loop_filter8 = ff_vc1_v_loop_filter8_ ##EXT; dsp-&gt;vc1_h_loop_filter8 = ff_vc1_h_loop_filter8_ ##EXT; dsp-&gt;vc1_v_loop_filter16 = vc1_v_loop_filter16_ ##EXT; dsp-&gt;vc1_h_loop_filter16 = vc1_h_loop_filter16_ ##EXT</cpp:value></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>put_no_rnd_vc1_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_vc1_chroma_mc8_nornd_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>put_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_vc1_mspel_mc00_8_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>put_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_vc1_mspel_mc00_16_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_vc1_mspel_mc00_8_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_vc1_mspel_mc00_16_mmx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AMD3DNOW</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_no_rnd_vc1_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_vc1_chroma_mc8_nornd_3dnow</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSIGN_LF</name><argument_list>(<argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_no_rnd_vc1_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_vc1_chroma_mc8_nornd_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_vc1_mspel_mc00_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_vc1_mspel_mc00_16_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_8x8_dc</name></name> <operator>=</operator> <name>ff_vc1_inv_trans_8x8_dc_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_4x8_dc</name></name> <operator>=</operator> <name>ff_vc1_inv_trans_4x8_dc_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_8x4_dc</name></name> <operator>=</operator> <name>ff_vc1_inv_trans_8x4_dc_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_4x4_dc</name></name> <operator>=</operator> <name>ff_vc1_inv_trans_4x4_dc_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_v_loop_filter8</name></name> <operator>=</operator> <name>ff_vc1_v_loop_filter8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_h_loop_filter8</name></name> <operator>=</operator> <name>ff_vc1_h_loop_filter8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_v_loop_filter16</name></name> <operator>=</operator> <name>vc1_v_loop_filter16_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_h_loop_filter16</name></name> <operator>=</operator> <name>vc1_h_loop_filter16_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>put_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_vc1_mspel_mc00_16_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_vc1_mspel_mc00_16_sse2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSIGN_LF</name><argument_list>(<argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>put_no_rnd_vc1_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_vc1_chroma_mc8_nornd_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_no_rnd_vc1_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_vc1_chroma_mc8_nornd_ssse3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE4</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_h_loop_filter8</name></name> <operator>=</operator> <name>ff_vc1_h_loop_filter8_sse4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_h_loop_filter16</name></name> <operator>=</operator> <name>vc1_h_loop_filter16_sse4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
