<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\cabac.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_X86_CABAC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_X86_CABAC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/cabac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__clang_major__</name><operator>&lt;</operator><literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>__clang_major__</name><operator>==</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>__clang_minor__</name><operator>&lt;</operator><literal type="number">10</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>||</operator> <operator>(</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__llvm__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name><operator>==</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>__GNUC_MINOR__</name><operator>==</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>__GNUC_PATCHLEVEL__</name><operator>&lt;=</operator><literal type="number">1</literal><operator>)</operator><operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROKEN_COMPILER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROKEN_COMPILER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNCHECKED_BITSTREAM_READER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCHECKED_BITSTREAM_READER</name></cpp:macro> <cpp:value>!CONFIG_SAFE_BITSTREAM_READER</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UNCHECKED_BITSTREAM_READER</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_CHECK</name><parameter_list>(<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_CHECK</name><parameter_list>(<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"cmp "end" , %%"FF_REG_c" \n\t""jge 1f \n\t"
</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROKEN_RELOCATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLES_ARG</name></cpp:macro> <cpp:value>, "r"(tables)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_CMOV</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCHLESS_GET_CABAC_UPDATE</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>retq</name></type></parameter>, <parameter><type><name>low</name></type></parameter>, <parameter><type><name>range</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"cmp "low" , "tmp" \n\t""cmova %%ecx , "range" \n\t""sbb %%rcx , %%rcx \n\t""and %%ecx , "tmp" \n\t""xor %%rcx , "retq" \n\t""sub "tmp" , "low" \n\t"
</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCHLESS_GET_CABAC_UPDATE</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>retq</name></type></parameter>, <parameter><type><name>low</name></type></parameter>, <parameter><type><name>range</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"sub "low" , "tmp" \n\t""sar $31 , "tmp" \n\t""sub %%ecx , "range" \n\t""and "tmp" , "range" \n\t""add %%ecx , "range" \n\t""shl $17 , %%ecx \n\t""and "tmp" , %%ecx \n\t""sub %%ecx , "low" \n\t""xor "tmp" , "ret" \n\t""movslq "ret" , "retq" \n\t"
</cpp:value></cpp:define>










<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_FAST_CMOV */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCHLESS_GET_CABAC</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>retq</name></type></parameter>, <parameter><type><name>statep</name></type></parameter>, <parameter><type><name>low</name></type></parameter>, <parameter><type><name>lowword</name></type></parameter>, <parameter><type><name>range</name></type></parameter>, <parameter><type><name>rangeq</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>, <parameter><type><name>tmpbyte</name></type></parameter>, <parameter><type><name>byte</name></type></parameter>, <parameter><type><name>end</name></type></parameter>, <parameter><type><name>norm_off</name></type></parameter>, <parameter><type><name>lps_off</name></type></parameter>, <parameter><type><name>mlps_off</name></type></parameter>, <parameter><type><name>tables</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movzbl "statep" , "ret" \n\t""mov "range" , "tmp" \n\t""and $0xC0 , "range" \n\t""lea ("ret", "range", 2), %%ecx \n\t""movzbl "lps_off"("tables", %%rcx), "range" \n\t""sub "range" , "tmp" \n\t""mov "tmp" , %%ecx \n\t""shl $17 , "tmp" \n\t"BRANCHLESS_GET_CABAC_UPDATE(ret, retq, low, range, tmp) "movzbl "norm_off"("tables", "rangeq"), %%ecx \n\t""shl %%cl , "range" \n\t""movzbl "mlps_off"+128("tables", "retq"), "tmp" \n\t""shl %%cl , "low" \n\t""mov "tmpbyte" , "statep" \n\t""test "lowword" , "lowword" \n\t""jnz 2f \n\t""mov "byte" , %%"FF_REG_c" \n\t"END_CHECK(end)"add"FF_OPSIZE" $2 , "byte" \n\t""1: \n\t""movzwl (%%"FF_REG_c") , "tmp" \n\t""lea -1("low") , %%ecx \n\t""xor "low" , %%ecx \n\t""shr $15 , %%ecx \n\t""bswap "tmp" \n\t""shr $15 , "tmp" \n\t""movzbl "norm_off"("tables", %%rcx), %%ecx \n\t""sub $0xFFFF , "tmp" \n\t""neg %%ecx \n\t""add $7 , %%ecx \n\t""shl %%cl , "tmp" \n\t""add "tmp" , "low" \n\t""2: \n\t"
</cpp:value></cpp:define>

































<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* BROKEN_RELOCATIONS */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLES_ARG</name></cpp:macro> <cpp:value>NAMED_CONSTRAINTS_ARRAY_ADD(ff_h264_cabac_tables)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIP_ARG</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_CMOV</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCHLESS_GET_CABAC_UPDATE</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>low</name></type></parameter>, <parameter><type><name>range</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"mov "tmp" , %%ecx \n\t""shl $17 , "tmp" \n\t""cmp "low" , "tmp" \n\t""cmova %%ecx , "range" \n\t""sbb %%ecx , %%ecx \n\t""and %%ecx , "tmp" \n\t""xor %%ecx , "ret" \n\t""sub "tmp" , "low" \n\t"
</cpp:value></cpp:define>







<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* HAVE_FAST_CMOV */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCHLESS_GET_CABAC_UPDATE</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>low</name></type></parameter>, <parameter><type><name>range</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"mov "tmp" , %%ecx \n\t""shl $17 , "tmp" \n\t""sub "low" , "tmp" \n\t""sar $31 , "tmp" \n\t" /*lps_mask*/"sub %%ecx , "range" \n\t" /*RangeLPS - range*/"and "tmp" , "range" \n\t" /*(RangeLPS - range)&amp;lps_mask*/"add %%ecx , "range" \n\t" /*new range*/"shl $17 , %%ecx \n\t""and "tmp" , %%ecx \n\t""sub %%ecx , "low" \n\t""xor "tmp" , "ret" \n\t"
</cpp:value></cpp:define>










<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_FAST_CMOV */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCHLESS_GET_CABAC</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>retq</name></type></parameter>, <parameter><type><name>statep</name></type></parameter>, <parameter><type><name>low</name></type></parameter>, <parameter><type><name>lowword</name></type></parameter>, <parameter><type><name>range</name></type></parameter>, <parameter><type><name>rangeq</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>, <parameter><type><name>tmpbyte</name></type></parameter>, <parameter><type><name>byte</name></type></parameter>, <parameter><type><name>end</name></type></parameter>, <parameter><type><name>norm_off</name></type></parameter>, <parameter><type><name>lps_off</name></type></parameter>, <parameter><type><name>mlps_off</name></type></parameter>, <parameter><type><name>tables</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movzbl "statep" , "ret" \n\t""mov "range" , "tmp" \n\t""and $0xC0 , "range" \n\t""movzbl "MANGLE(ff_h264_cabac_tables)"+"lps_off"("ret", "range", 2), "range" \n\t""sub "range" , "tmp" \n\t"BRANCHLESS_GET_CABAC_UPDATE(ret, low, range, tmp) "movzbl "MANGLE(ff_h264_cabac_tables)"+"norm_off"("range"), %%ecx \n\t""shl %%cl , "range" \n\t""movzbl "MANGLE(ff_h264_cabac_tables)"+"mlps_off"+128("ret"), "tmp" \n\t""shl %%cl , "low" \n\t""mov "tmpbyte" , "statep" \n\t""test "lowword" , "lowword" \n\t"" jnz 2f \n\t""mov "byte" , %%"FF_REG_c" \n\t"END_CHECK(end)"add"FF_OPSIZE" $2 , "byte" \n\t""1: \n\t""movzwl (%%"FF_REG_c") , "tmp" \n\t""lea -1("low") , %%ecx \n\t""xor "low" , %%ecx \n\t""shr $15 , %%ecx \n\t""bswap "tmp" \n\t""shr $15 , "tmp" \n\t""movzbl "MANGLE(ff_h264_cabac_tables)"+"norm_off"(%%ecx), %%ecx \n\t""sub $0xFFFF , "tmp" \n\t""neg %%ecx \n\t""add $7 , %%ecx \n\t""shl %%cl , "tmp" \n\t""add "tmp" , "low" \n\t""2: \n\t"
</cpp:value></cpp:define>






























<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BROKEN_RELOCATIONS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_7REGS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>BROKEN_COMPILER</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_cabac_inline</name></cpp:macro> <cpp:value>get_cabac_inline_x86</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>get_cabac_inline_x86</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROKEN_RELOCATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"lea "MANGLE(ff_h264_cabac_tables)", %0 \n\t"
: "=&amp;r"(tables)
: NAMED_CONSTRAINTS_ARRAY(ff_h264_cabac_tables)
);</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<asm>__asm__ <specifier>volatile</specifier>(
BRANCHLESS_GET_CABAC("%0", "%q0", "(%4)", "%1", "%w1",
"%2", "%q2", "%3", "%b3",
"%c6(%5)", "%c7(%5)",
AV_STRINGIFY(H264_NORM_SHIFT_OFFSET),
AV_STRINGIFY(H264_LPS_RANGE_OFFSET),
AV_STRINGIFY(H264_MLPS_STATE_OFFSET),
"%8")
: "=&amp;r"(bit), "=&amp;r"(c-&gt;low), "=&amp;r"(c-&gt;range), "=&amp;q"(tmp)
: "r"(state), "r"(c),
"i"(offsetof(CABACContext, bytestream)),
"i"(offsetof(CABACContext, bytestream_end))
TABLES_ARG
,"1"(c-&gt;low), "2"(c-&gt;range)
: "%"FF_REG_c, "memory"
);</asm>
<return>return <expr><name>bit</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_7REGS &amp;&amp; !BROKEN_COMPILER */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BROKEN_COMPILER</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_cabac_bypass_sign</name></cpp:macro> <cpp:value>get_cabac_bypass_sign_x86</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>get_cabac_bypass_sign_x86</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>tmp</name></decl>;</decl_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"movl %c6(%2), %k1 \n\t"
"movl %c3(%2), %%eax \n\t"
"shl $17, %k1 \n\t"
"add %%eax, %%eax \n\t"
"sub %k1, %%eax \n\t"
"cdq \n\t"
"and %%edx, %k1 \n\t"
"add %k1, %%eax \n\t"
"xor %%edx, %%ecx \n\t"
"sub %%edx, %%ecx \n\t"
"test %%ax, %%ax \n\t"
"jnz 1f \n\t"
"mov %c4(%2), %1 \n\t"
"subl $0xFFFF, %%eax \n\t"
"movzwl (%1), %%edx \n\t"
"bswap %%edx \n\t"
"shrl $15, %%edx \n\t"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UNCHECKED_BITSTREAM_READER</name></expr></cpp:if>
"add $2, %1 \n\t"
"addl %%edx, %%eax \n\t"
"mov %1, %c4(%2) \n\t"
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
"addl %%edx, %%eax \n\t"
"cmp %c5(%2), %1 \n\t"
"jge 1f \n\t"
"add"FF_OPSIZE" $2, %c4(%2) \n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"1: \n\t"
"movl %%eax, %c3(%2) \n\t"

: "+c"(val), "=&amp;r"(tmp)
: "r"(c),
"i"(offsetof(CABACContext, low)),
"i"(offsetof(CABACContext, bytestream)),
"i"(offsetof(CABACContext, bytestream_end)),
"i"(offsetof(CABACContext, range))
: "%eax", "%edx", "memory"
);</asm>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_cabac_bypass</name></cpp:macro> <cpp:value>get_cabac_bypass_x86</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>get_cabac_bypass_x86</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"movl %c6(%2), %k1 \n\t"
"movl %c3(%2), %%eax \n\t"
"shl $17, %k1 \n\t"
"add %%eax, %%eax \n\t"
"sub %k1, %%eax \n\t"
"cdq \n\t"
"and %%edx, %k1 \n\t"
"add %k1, %%eax \n\t"
"inc %%edx \n\t"
"test %%ax, %%ax \n\t"
"jnz 1f \n\t"
"mov %c4(%2), %1 \n\t"
"subl $0xFFFF, %%eax \n\t"
"movzwl (%1), %%ecx \n\t"
"bswap %%ecx \n\t"
"shrl $15, %%ecx \n\t"
"addl %%ecx, %%eax \n\t"
"cmp %c5(%2), %1 \n\t"
"jge 1f \n\t"
"add"FF_OPSIZE" $2, %c4(%2) \n\t"
"1: \n\t"
"movl %%eax, %c3(%2) \n\t"

: "=&amp;d"(res), "=&amp;r"(tmp)
: "r"(c),
"i"(offsetof(CABACContext, low)),
"i"(offsetof(CABACContext, bytestream)),
"i"(offsetof(CABACContext, bytestream_end)),
"i"(offsetof(CABACContext, range))
: "%eax", "%ecx", "memory"
);</asm>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !BROKEN_COMPILER */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_INLINE_ASM */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AVCODEC_X86_CABAC_H */</comment>
</unit>
