<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\idctdsp_init.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_idct.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>simple_mmx_permutation</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x1D</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x2D</literal></expr>,
<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x1F</literal></expr>,
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x3D</literal></expr>,
<expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x2F</literal></expr>,
<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x3F</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>idct_sse2_row_perm</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_init_scantable_permutation_x86</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>idct_permutation</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>idct_permutation_type</name></name></type> <name>perm_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>perm_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_IDCT_PERM_SIMPLE</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>idct_permutation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>simple_mmx_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FF_IDCT_PERM_SSE2</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>idct_permutation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x38</literal><operator>)</operator> <operator>|</operator> <name><name>idct_sse2_row_perm</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_idctdsp_init_x86</name><parameter_list>(<parameter><decl><type><name>IDCTDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>high_bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_signed_pixels_clamped</name></name> <operator>=</operator> <name>ff_put_signed_pixels_clamped_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_clamped</name></name> <operator>=</operator> <name>ff_put_pixels_clamped_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_pixels_clamped</name></name> <operator>=</operator> <name>ff_add_pixels_clamped_mmx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_bit_depth</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_AUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLEAUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLEMMX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>ff_simple_idct_put_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>ff_simple_idct_add_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct</name></name> <operator>=</operator> <name>ff_simple_idct_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>perm_type</name></name> <operator>=</operator> <name>FF_IDCT_PERM_SIMPLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_signed_pixels_clamped</name></name> <operator>=</operator> <name>ff_put_signed_pixels_clamped_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_clamped</name></name> <operator>=</operator> <name>ff_put_pixels_clamped_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_pixels_clamped</name></name> <operator>=</operator> <name>ff_add_pixels_clamped_sse2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_bit_depth</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_AUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLEAUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLEMMX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>ff_simple_idct_put_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>ff_simple_idct_add_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>perm_type</name></name> <operator>=</operator> <name>FF_IDCT_PERM_SIMPLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86_64</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name>high_bit_depth</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_AUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLEAUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLEMMX</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct</name></name> <operator>=</operator> <name>ff_simple_idct8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>ff_simple_idct8_put_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>ff_simple_idct8_add_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>perm_type</name></name> <operator>=</operator> <name>FF_IDCT_PERM_TRANSPOSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86_64</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><name>high_bit_depth</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_AUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLEAUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLEMMX</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct</name></name> <operator>=</operator> <name>ff_simple_idct8_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>ff_simple_idct8_put_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>ff_simple_idct8_add_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>perm_type</name></name> <operator>=</operator> <name>FF_IDCT_PERM_TRANSPOSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_AUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLEAUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>ff_simple_idct10_put_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct</name></name> <operator>=</operator> <name>ff_simple_idct10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>perm_type</name></name> <operator>=</operator> <name>FF_IDCT_PERM_TRANSPOSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>ff_simple_idct10_put_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct</name></name> <operator>=</operator> <name>ff_simple_idct10_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>perm_type</name></name> <operator>=</operator> <name>FF_IDCT_PERM_TRANSPOSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_AUTO</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>==</operator> <name>FF_IDCT_SIMPLEMMX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>ff_simple_idct12_put_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct</name></name> <operator>=</operator> <name>ff_simple_idct12_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>perm_type</name></name> <operator>=</operator> <name>FF_IDCT_PERM_TRANSPOSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>ff_simple_idct12_put_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct</name></name> <operator>=</operator> <name>ff_simple_idct12_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>perm_type</name></name> <operator>=</operator> <name>FF_IDCT_PERM_TRANSPOSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
