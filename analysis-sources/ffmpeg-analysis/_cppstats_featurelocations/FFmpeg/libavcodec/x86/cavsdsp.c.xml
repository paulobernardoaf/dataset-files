<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\cavsdsp.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/cavsdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fpel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_EXTERNAL</name></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>ff_cavs_idct8_mmx</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cavs_idct8_add_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_cavs_idct8_mmx</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_add_pixels_clamped_mmx</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>ff_cavs_idct8_sse2</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cavs_idct8_add_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_cavs_idct8_sse2</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_add_pixels_clamped_sse2</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>HAVE_MMXEXT_INLINE</name> <operator>||</operator> <name>HAVE_AMD3DNOW_INLINE</name><operator>)</operator></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_CAVSV1</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>,<parameter><type><name>D</name></type></parameter>,<parameter><type><name>E</name></type></parameter>,<parameter><type><name>F</name></type></parameter>,<parameter><type><name>OP</name></type></parameter>,<parameter><type><name>ADD</name></type></parameter>, <parameter><type><name>MUL1</name></type></parameter>, <parameter><type><name>MUL2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movd (%0), "#F" \n\t""movq "#C", %%mm6 \n\t""pmullw "MANGLE(MUL1)", %%mm6\n\t""movq "#D", %%mm7 \n\t""pmullw "MANGLE(MUL2)", %%mm7\n\t""psllw $3, "#E" \n\t""psubw "#E", %%mm6 \n\t""psraw $3, "#E" \n\t""paddw %%mm7, %%mm6 \n\t""paddw "#E", %%mm6 \n\t""paddw "#B", "#B" \n\t""pxor %%mm7, %%mm7 \n\t""add %2, %0 \n\t""punpcklbw %%mm7, "#F" \n\t""psubw "#B", %%mm6 \n\t""psraw $1, "#B" \n\t""psubw "#A", %%mm6 \n\t""paddw "MANGLE(ADD)", %%mm6 \n\t""psraw $7, %%mm6 \n\t""packuswb %%mm6, %%mm6 \n\t"OP(%%mm6, (%1), A, d) "add %3, %1 \n\t"
</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_CAVSV2</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>,<parameter><type><name>D</name></type></parameter>,<parameter><type><name>E</name></type></parameter>,<parameter><type><name>F</name></type></parameter>,<parameter><type><name>OP</name></type></parameter>,<parameter><type><name>ADD</name></type></parameter>, <parameter><type><name>MUL1</name></type></parameter>, <parameter><type><name>MUL2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movd (%0), "#F" \n\t""movq "#C", %%mm6 \n\t""paddw "#D", %%mm6 \n\t""pmullw "MANGLE(MUL1)", %%mm6\n\t""add %2, %0 \n\t""punpcklbw %%mm7, "#F" \n\t""psubw "#B", %%mm6 \n\t""psubw "#E", %%mm6 \n\t""paddw "MANGLE(ADD)", %%mm6 \n\t""psraw $3, %%mm6 \n\t""packuswb %%mm6, %%mm6 \n\t"OP(%%mm6, (%1), A, d) "add %3, %1 \n\t"
</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_CAVSV3</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>,<parameter><type><name>D</name></type></parameter>,<parameter><type><name>E</name></type></parameter>,<parameter><type><name>F</name></type></parameter>,<parameter><type><name>OP</name></type></parameter>,<parameter><type><name>ADD</name></type></parameter>, <parameter><type><name>MUL1</name></type></parameter>, <parameter><type><name>MUL2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movd (%0), "#F" \n\t""movq "#C", %%mm6 \n\t""pmullw "MANGLE(MUL2)", %%mm6\n\t""movq "#D", %%mm7 \n\t""pmullw "MANGLE(MUL1)", %%mm7\n\t""psllw $3, "#B" \n\t""psubw "#B", %%mm6 \n\t""psraw $3, "#B" \n\t""paddw %%mm7, %%mm6 \n\t""paddw "#B", %%mm6 \n\t""paddw "#E", "#E" \n\t""pxor %%mm7, %%mm7 \n\t""add %2, %0 \n\t""punpcklbw %%mm7, "#F" \n\t""psubw "#E", %%mm6 \n\t""psraw $1, "#E" \n\t""psubw "#F", %%mm6 \n\t""paddw "MANGLE(ADD)", %%mm6 \n\t""psraw $7, %%mm6 \n\t""packuswb %%mm6, %%mm6 \n\t"OP(%%mm6, (%1), A, d) "add %3, %1 \n\t"
</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_CAVSVNUM</name><parameter_list>(<parameter><type><name>VOP</name></type></parameter>,<parameter><type><name>OP</name></type></parameter>,<parameter><type><name>ADD</name></type></parameter>,<parameter><type><name>MUL1</name></type></parameter>,<parameter><type><name>MUL2</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>int w= 2;src -= 2*srcStride;while(w--){__asm__ volatile("pxor %%mm7, %%mm7 \n\t""movd (%0), %%mm0 \n\t""add %2, %0 \n\t""movd (%0), %%mm1 \n\t""add %2, %0 \n\t""movd (%0), %%mm2 \n\t""add %2, %0 \n\t""movd (%0), %%mm3 \n\t""add %2, %0 \n\t""movd (%0), %%mm4 \n\t""add %2, %0 \n\t""punpcklbw %%mm7, %%mm0 \n\t""punpcklbw %%mm7, %%mm1 \n\t""punpcklbw %%mm7, %%mm2 \n\t""punpcklbw %%mm7, %%mm3 \n\t""punpcklbw %%mm7, %%mm4 \n\t"VOP(%%mm0, %%mm1, %%mm2, %%mm3, %%mm4, %%mm5, OP, ADD, MUL1, MUL2)VOP(%%mm1, %%mm2, %%mm3, %%mm4, %%mm5, %%mm0, OP, ADD, MUL1, MUL2)VOP(%%mm2, %%mm3, %%mm4, %%mm5, %%mm0, %%mm1, OP, ADD, MUL1, MUL2)VOP(%%mm3, %%mm4, %%mm5, %%mm0, %%mm1, %%mm2, OP, ADD, MUL1, MUL2)VOP(%%mm4, %%mm5, %%mm0, %%mm1, %%mm2, %%mm3, OP, ADD, MUL1, MUL2)VOP(%%mm5, %%mm0, %%mm1, %%mm2, %%mm3, %%mm4, OP, ADD, MUL1, MUL2)VOP(%%mm0, %%mm1, %%mm2, %%mm3, %%mm4, %%mm5, OP, ADD, MUL1, MUL2)VOP(%%mm1, %%mm2, %%mm3, %%mm4, %%mm5, %%mm0, OP, ADD, MUL1, MUL2): "+a"(src), "+c"(dst): "S"((x86_reg)srcStride), "r"((x86_reg)dstStride)NAMED_CONSTRAINTS_ADD(ADD,MUL1,MUL2): "memory");if(h==16){__asm__ volatile(VOP(%%mm2, %%mm3, %%mm4, %%mm5, %%mm0, %%mm1, OP, ADD, MUL1, MUL2)VOP(%%mm3, %%mm4, %%mm5, %%mm0, %%mm1, %%mm2, OP, ADD, MUL1, MUL2)VOP(%%mm4, %%mm5, %%mm0, %%mm1, %%mm2, %%mm3, OP, ADD, MUL1, MUL2)VOP(%%mm5, %%mm0, %%mm1, %%mm2, %%mm3, %%mm4, OP, ADD, MUL1, MUL2)VOP(%%mm0, %%mm1, %%mm2, %%mm3, %%mm4, %%mm5, OP, ADD, MUL1, MUL2)VOP(%%mm1, %%mm2, %%mm3, %%mm4, %%mm5, %%mm0, OP, ADD, MUL1, MUL2)VOP(%%mm2, %%mm3, %%mm4, %%mm5, %%mm0, %%mm1, OP, ADD, MUL1, MUL2)VOP(%%mm3, %%mm4, %%mm5, %%mm0, %%mm1, %%mm2, OP, ADD, MUL1, MUL2): "+a"(src), "+c"(dst): "S"((x86_reg)srcStride), "r"((x86_reg)dstStride)NAMED_CONSTRAINTS_ADD(ADD,MUL1,MUL2): "memory");}src += 4-(h+5)*srcStride;dst += 4-h*dstStride;}</cpp:value></cpp:define>
























































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_CAVS</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void OPNAME ##cavs_qpel8_h_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){int h=8;__asm__ volatile("pxor %%mm7, %%mm7 \n\t""movq "MANGLE(ff_pw_5)", %%mm6\n\t""1: \n\t""movq (%0), %%mm0 \n\t""movq 1(%0), %%mm2 \n\t""movq %%mm0, %%mm1 \n\t""movq %%mm2, %%mm3 \n\t""punpcklbw %%mm7, %%mm0 \n\t""punpckhbw %%mm7, %%mm1 \n\t""punpcklbw %%mm7, %%mm2 \n\t""punpckhbw %%mm7, %%mm3 \n\t""paddw %%mm2, %%mm0 \n\t""paddw %%mm3, %%mm1 \n\t""pmullw %%mm6, %%mm0 \n\t""pmullw %%mm6, %%mm1 \n\t""movq -1(%0), %%mm2 \n\t""movq 2(%0), %%mm4 \n\t""movq %%mm2, %%mm3 \n\t""movq %%mm4, %%mm5 \n\t""punpcklbw %%mm7, %%mm2 \n\t""punpckhbw %%mm7, %%mm3 \n\t""punpcklbw %%mm7, %%mm4 \n\t""punpckhbw %%mm7, %%mm5 \n\t""paddw %%mm4, %%mm2 \n\t""paddw %%mm3, %%mm5 \n\t""psubw %%mm2, %%mm0 \n\t""psubw %%mm5, %%mm1 \n\t""movq "MANGLE(ff_pw_4)", %%mm5\n\t""paddw %%mm5, %%mm0 \n\t""paddw %%mm5, %%mm1 \n\t""psraw $3, %%mm0 \n\t""psraw $3, %%mm1 \n\t""packuswb %%mm1, %%mm0 \n\t"OP(%%mm0, (%1),%%mm5, q) "add %3, %0 \n\t""add %4, %1 \n\t""decl %2 \n\t"" jnz 1b \n\t": "+a"(src), "+c"(dst), "+m"(h): "d"((x86_reg)srcStride), "S"((x86_reg)dstStride)NAMED_CONSTRAINTS_ADD(ff_pw_4,ff_pw_5): "memory");}static inline void OPNAME ##cavs_qpel8or16_v1_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride, int h){ QPEL_CAVSVNUM(QPEL_CAVSV1,OP,ff_pw_64,ff_pw_96,ff_pw_42) }static inline void OPNAME ##cavs_qpel8or16_v2_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride, int h){ QPEL_CAVSVNUM(QPEL_CAVSV2,OP,ff_pw_4,ff_pw_5,ff_pw_42) }static inline void OPNAME ##cavs_qpel8or16_v3_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride, int h){ QPEL_CAVSVNUM(QPEL_CAVSV3,OP,ff_pw_64,ff_pw_96,ff_pw_42) }static void OPNAME ##cavs_qpel8_v1_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){ OPNAME ##cavs_qpel8or16_v1_ ##MMX(dst , src , dstStride, srcStride, 8);}static void OPNAME ##cavs_qpel16_v1_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){ OPNAME ##cavs_qpel8or16_v1_ ##MMX(dst , src , dstStride, srcStride, 16);OPNAME ##cavs_qpel8or16_v1_ ##MMX(dst+8, src+8, dstStride, srcStride, 16);}static void OPNAME ##cavs_qpel8_v2_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){ OPNAME ##cavs_qpel8or16_v2_ ##MMX(dst , src , dstStride, srcStride, 8);}static void OPNAME ##cavs_qpel16_v2_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){ OPNAME ##cavs_qpel8or16_v2_ ##MMX(dst , src , dstStride, srcStride, 16);OPNAME ##cavs_qpel8or16_v2_ ##MMX(dst+8, src+8, dstStride, srcStride, 16);}static void OPNAME ##cavs_qpel8_v3_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){ OPNAME ##cavs_qpel8or16_v3_ ##MMX(dst , src , dstStride, srcStride, 8);}static void OPNAME ##cavs_qpel16_v3_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){ OPNAME ##cavs_qpel8or16_v3_ ##MMX(dst , src , dstStride, srcStride, 16);OPNAME ##cavs_qpel8or16_v3_ ##MMX(dst+8, src+8, dstStride, srcStride, 16);}static void OPNAME ##cavs_qpel16_h_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){ OPNAME ##cavs_qpel8_h_ ##MMX(dst , src , dstStride, srcStride);OPNAME ##cavs_qpel8_h_ ##MMX(dst+8, src+8, dstStride, srcStride);src += 8*srcStride;dst += 8*dstStride;OPNAME ##cavs_qpel8_h_ ##MMX(dst , src , dstStride, srcStride);OPNAME ##cavs_qpel8_h_ ##MMX(dst+8, src+8, dstStride, srcStride);}</cpp:value></cpp:define>








































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAVS_MC</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##cavs_qpel ##SIZE ##_mc20_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_qpel ##SIZE ##_h_ ##MMX(dst, src, stride, stride);}static void OPNAME ##cavs_qpel ##SIZE ##_mc01_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_qpel ##SIZE ##_v1_ ##MMX(dst, src, stride, stride);}static void OPNAME ##cavs_qpel ##SIZE ##_mc02_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_qpel ##SIZE ##_v2_ ##MMX(dst, src, stride, stride);}static void OPNAME ##cavs_qpel ##SIZE ##_mc03_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_qpel ##SIZE ##_v3_ ##MMX(dst, src, stride, stride);}</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_OP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>temp</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"mov" #size " " #a ", " #b " \n\t"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG_3DNOW_OP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>temp</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"mov" #size " " #b ", " #temp " \n\t""pavgusb " #temp ", " #a " \n\t""mov" #size " " #a ", " #b " \n\t"
</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG_MMXEXT_OP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>temp</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"mov" #size " " #b ", " #temp " \n\t""pavgb " #temp ", " #a " \n\t""mov" #size " " #a ", " #b " \n\t"
</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_EXTERNAL</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>put_cavs_qpel8_mc00_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_put_pixels8_mmx</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_cavs_qpel8_mc00_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_pixels8_mmx</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_cavs_qpel8_mc00_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_pixels8_mmxext</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_cavs_qpel16_mc00_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_put_pixels16_mmx</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_cavs_qpel16_mc00_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_pixels16_mmx</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_cavs_qpel16_mc00_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_pixels16_mmxext</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_cavs_qpel16_mc00_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_put_pixels16_sse2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_cavs_qpel16_mc00_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_pixels16_sse2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>cavsdsp_init_mmx</name><parameter_list>(<parameter><decl><type><name>CAVSDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_EXTERNAL</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_cavs_qpel16_mc00_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_cavs_qpel8_mc00_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_cavs_qpel16_mc00_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_cavs_qpel8_mc00_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cavs_idct8_add</name></name> <operator>=</operator> <name>cavs_idct8_add_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_perm</name></name> <operator>=</operator> <name>FF_IDCT_PERM_TRANSPOSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSPFUNC</name><parameter_list>(<parameter><type><name>PFX</name></type></parameter>, <parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>NUM</name></type></parameter>, <parameter><type><name>EXT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;PFX ##_cavs_qpel_pixels_tab[IDX][ 2] = PFX ##_cavs_qpel ##NUM ##_mc20_ ##EXT; c-&gt;PFX ##_cavs_qpel_pixels_tab[IDX][ 4] = PFX ##_cavs_qpel ##NUM ##_mc01_ ##EXT; c-&gt;PFX ##_cavs_qpel_pixels_tab[IDX][ 8] = PFX ##_cavs_qpel ##NUM ##_mc02_ ##EXT; c-&gt;PFX ##_cavs_qpel_pixels_tab[IDX][12] = PFX ##_cavs_qpel ##NUM ##_mc03_ ##EXT;</cpp:value></cpp:define> 





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMXEXT_INLINE</name></expr></cpp:if>
<macro><name>QPEL_CAVS</name><argument_list>(<argument>put_</argument>, <argument>PUT_OP</argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>QPEL_CAVS</name><argument_list>(<argument>avg_</argument>, <argument>AVG_MMXEXT_OP</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>CAVS_MC</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>CAVS_MC</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">16</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>CAVS_MC</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>CAVS_MC</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">16</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AMD3DNOW_INLINE</name></expr></cpp:if>
<macro><name>QPEL_CAVS</name><argument_list>(<argument>put_</argument>, <argument>PUT_OP</argument>, <argument><literal type="number">3dnow</literal></argument>)</argument_list></macro>
<macro><name>QPEL_CAVS</name><argument_list>(<argument>avg_</argument>, <argument>AVG_3DNOW_OP</argument>, <argument><literal type="number">3dnow</literal></argument>)</argument_list></macro>

<macro><name>CAVS_MC</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">3dnow</literal></argument>)</argument_list></macro>
<macro><name>CAVS_MC</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">16</literal></argument>,<argument><literal type="number">3dnow</literal></argument>)</argument_list></macro>
<macro><name>CAVS_MC</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">3dnow</literal></argument>)</argument_list></macro>
<macro><name>CAVS_MC</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">16</literal></argument>,<argument><literal type="number">3dnow</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>cavsdsp_init_3dnow</name><parameter_list>(<parameter><decl><type><name>CAVSDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DSPFUNC</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">3dnow</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSPFUNC</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">3dnow</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSPFUNC</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">3dnow</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSPFUNC</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">3dnow</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_cavsdsp_init_x86</name><parameter_list>(<parameter><decl><type><name>CAVSDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>av_unused</name> <name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>X86_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cavsdsp_init_mmx</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AMD3DNOW_INLINE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_AMD3DNOW</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cavsdsp_init_3dnow</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMXEXT_INLINE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DSPFUNC</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSPFUNC</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSPFUNC</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSPFUNC</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_EXTERNAL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_cavs_qpel16_mc00_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_cavs_qpel8_mc00_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE2_EXTERNAL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_cavs_qpel16_mc00_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_cavs_qpel16_mc00_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cavs_idct8_add</name></name> <operator>=</operator> <name>cavs_idct8_add_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_perm</name></name> <operator>=</operator> <name>FF_IDCT_PERM_TRANSPOSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
