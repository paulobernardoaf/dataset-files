<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\rv40dsp_init.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/rv34dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_FN</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>insn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void op##_rv40_qpel##size##_mc33_##insn(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { ff_##op##_pixels##size##_xy2_##insn(dst, src, stride, size); }</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>ff_put_rv40_chroma_mc8_mmx</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_rv40_chroma_mc8_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_rv40_chroma_mc8_3dnow</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_rv40_chroma_mc4_mmx</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_rv40_chroma_mc4_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_rv40_chroma_mc4_3dnow</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_WEIGHT</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_rv40_weight_func_rnd_16_##opt(uint8_t *dst, uint8_t *src1, uint8_t *src2, int w1, int w2, ptrdiff_t stride); void ff_rv40_weight_func_rnd_8_##opt (uint8_t *dst, uint8_t *src1, uint8_t *src2, int w1, int w2, ptrdiff_t stride); void ff_rv40_weight_func_nornd_16_##opt(uint8_t *dst, uint8_t *src1, uint8_t *src2, int w1, int w2, ptrdiff_t stride); void ff_rv40_weight_func_nornd_8_##opt (uint8_t *dst, uint8_t *src1, uint8_t *src2, int w1, int w2, ptrdiff_t stride);</cpp:value></cpp:define>








<macro><name>DECLARE_WEIGHT</name><argument_list>(<argument>mmxext</argument>)</argument_list></macro>
<macro><name>DECLARE_WEIGHT</name><argument_list>(<argument>sse2</argument>)</argument_list></macro>
<macro><name>DECLARE_WEIGHT</name><argument_list>(<argument>ssse3</argument>)</argument_list></macro>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_FUNC_DECL</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>PH</name></type></parameter>, <parameter><type><name>PV</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OP ##rv40_qpel ##SIZE ##_mc ##PH ##PV ##OPT(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { int i; if (PH &amp;&amp; PV) { LOCAL_ALIGNED(16, uint8_t, tmp, [SIZE * (SIZE + 5)]); uint8_t *tmpptr = tmp + SIZE * 2; src -= stride * 2; for (i = 0; i &lt; SIZE; i += LOOPSIZE) ff_put_rv40_qpel_h ##OPT(tmp + i, SIZE, src + i, stride, SIZE + 5, HCOFF(PH)); for (i = 0; i &lt; SIZE; i += LOOPSIZE) ff_ ##OP ##rv40_qpel_v ##OPT(dst + i, stride, tmpptr + i, SIZE, SIZE, VCOFF(PV)); } else if (PV) { for (i = 0; i &lt; SIZE; i += LOOPSIZE) ff_ ##OP ##rv40_qpel_v ##OPT(dst + i, stride, src + i, stride, SIZE, VCOFF(PV)); } else { for (i = 0; i &lt; SIZE; i += LOOPSIZE) ff_ ##OP ##rv40_qpel_h ##OPT(dst + i, stride, src + i, stride, SIZE, HCOFF(PH)); } }</cpp:value></cpp:define>





























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_FUNCS_DECL</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>PH</name></type></parameter>, <parameter><type><name>PV</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>QPEL_FUNC_DECL(OP, 8, PH, PV, OPT) QPEL_FUNC_DECL(OP, 16, PH, PV, OPT)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_MC_DECL</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_ ##OP ##rv40_qpel_h ##OPT(uint8_t *dst, ptrdiff_t dstStride, const uint8_t *src, ptrdiff_t srcStride, int len, int m); void ff_ ##OP ##rv40_qpel_v ##OPT(uint8_t *dst, ptrdiff_t dstStride, const uint8_t *src, ptrdiff_t srcStride, int len, int m); QPEL_FUNCS_DECL(OP, 0, 1, OPT) QPEL_FUNCS_DECL(OP, 0, 3, OPT) QPEL_FUNCS_DECL(OP, 1, 0, OPT) QPEL_FUNCS_DECL(OP, 1, 1, OPT) QPEL_FUNCS_DECL(OP, 1, 2, OPT) QPEL_FUNCS_DECL(OP, 1, 3, OPT) QPEL_FUNCS_DECL(OP, 2, 1, OPT) QPEL_FUNCS_DECL(OP, 2, 2, OPT) QPEL_FUNCS_DECL(OP, 2, 3, OPT) QPEL_FUNCS_DECL(OP, 3, 0, OPT) QPEL_FUNCS_DECL(OP, 3, 1, OPT) QPEL_FUNCS_DECL(OP, 3, 2, OPT)</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOPSIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCOFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(32 * ((x) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCOFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(32 * ((x) - 1))</cpp:value></cpp:define>
<macro><name>QPEL_MC_DECL</name><argument_list>(<argument>put_</argument>, <argument>_ssse3</argument>)</argument_list></macro>
<macro><name>QPEL_MC_DECL</name><argument_list>(<argument>avg_</argument>, <argument>_ssse3</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOOPSIZE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HCOFF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VCOFF</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOPSIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCOFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(64 * ((x) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCOFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(64 * ((x) - 1))</cpp:value></cpp:define>
<macro><name>QPEL_MC_DECL</name><argument_list>(<argument>put_</argument>, <argument>_sse2</argument>)</argument_list></macro>
<macro><name>QPEL_MC_DECL</name><argument_list>(<argument>avg_</argument>, <argument>_sse2</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOOPSIZE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HCOFF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VCOFF</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOPSIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCOFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(64 * ((x) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCOFF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(64 * ((x) - 1))</cpp:value></cpp:define>

<macro><name>QPEL_MC_DECL</name><argument_list>(<argument>put_</argument>, <argument>_mmx</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_rv40_qpel_h_mmxext</name></cpp:macro> <cpp:value>ff_put_rv40_qpel_h_mmx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_rv40_qpel_v_mmxext</name></cpp:macro> <cpp:value>ff_put_rv40_qpel_v_mmx</cpp:value></cpp:define>
<macro><name>QPEL_MC_DECL</name><argument_list>(<argument>avg_</argument>, <argument>_mmxext</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_rv40_qpel_h_3dnow</name></cpp:macro> <cpp:value>ff_put_rv40_qpel_h_mmx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_rv40_qpel_v_3dnow</name></cpp:macro> <cpp:value>ff_put_rv40_qpel_v_mmx</cpp:value></cpp:define>
<macro><name>QPEL_MC_DECL</name><argument_list>(<argument>avg_</argument>, <argument>_3dnow</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_FUNC_SET</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>PH</name></type></parameter>, <parameter><type><name>PV</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt; OP ##pixels_tab[2 - SIZE / 8][4 * PV + PH] = OP ##rv40_qpel ##SIZE ##_mc ##PH ##PV ##OPT;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_FUNCS_SET</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>PH</name></type></parameter>, <parameter><type><name>PV</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>QPEL_FUNC_SET(OP, 8, PH, PV, OPT) QPEL_FUNC_SET(OP, 16, PH, PV, OPT)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_MC_SET</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>QPEL_FUNCS_SET (OP, 0, 1, OPT) QPEL_FUNCS_SET (OP, 0, 3, OPT) QPEL_FUNCS_SET (OP, 1, 0, OPT) QPEL_FUNCS_SET (OP, 1, 1, OPT) QPEL_FUNCS_SET (OP, 1, 2, OPT) QPEL_FUNCS_SET (OP, 1, 3, OPT) QPEL_FUNCS_SET (OP, 2, 1, OPT) QPEL_FUNCS_SET (OP, 2, 2, OPT) QPEL_FUNCS_SET (OP, 2, 3, OPT) QPEL_FUNCS_SET (OP, 3, 0, OPT) QPEL_FUNCS_SET (OP, 3, 1, OPT) QPEL_FUNCS_SET (OP, 3, 2, OPT)</cpp:value></cpp:define>














<macro><name>DEFINE_FN</name><argument_list>(<argument>put</argument>, <argument><literal type="number">8</literal></argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>DEFINE_FN</name><argument_list>(<argument>put</argument>, <argument><literal type="number">16</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>DEFINE_FN</name><argument_list>(<argument>put</argument>, <argument><literal type="number">16</literal></argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>DEFINE_FN</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>DEFINE_FN</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">8</literal></argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>DEFINE_FN</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">16</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>DEFINE_FN</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">16</literal></argument>, <argument>ssse3</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>
<macro><name>DEFINE_FN</name><argument_list>(<argument>put</argument>, <argument><literal type="number">8</literal></argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>DEFINE_FN</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">8</literal></argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>DEFINE_FN</name><argument_list>(<argument>put</argument>, <argument><literal type="number">16</literal></argument>, <argument>mmx</argument>)</argument_list></macro>
<macro><name>DEFINE_FN</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">16</literal></argument>, <argument>mmx</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_rv40dsp_init_x86</name><parameter_list>(<parameter><decl><type><name>RV34DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>av_unused</name> <name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc33_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc33_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc33_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc33_mmx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_rv40_chroma_mc8_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_rv40_chroma_mc4_mmx</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<macro><name>QPEL_MC_SET</name><argument_list>(<argument>put_</argument>, <argument>_mmx</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AMD3DNOW</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_rv40_chroma_mc8_3dnow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_rv40_chroma_mc4_3dnow</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<macro><name>QPEL_MC_SET</name><argument_list>(<argument>avg_</argument>, <argument>_3dnow</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc33_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_rv40_chroma_mc8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_rv40_chroma_mc4_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_rnd_16_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_rnd_8_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_nornd_16_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_nornd_8_mmxext</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<macro><name>QPEL_MC_SET</name><argument_list>(<argument>avg_</argument>, <argument>_mmxext</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc33_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc33_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_rnd_16_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_rnd_8_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_nornd_16_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_nornd_8_sse2</name></expr>;</expr_stmt>
<macro><name>QPEL_MC_SET</name><argument_list>(<argument>put_</argument>, <argument>_sse2</argument>)</argument_list></macro>
<macro><name>QPEL_MC_SET</name><argument_list>(<argument>avg_</argument>, <argument>_sse2</argument>)</argument_list></macro>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc33_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc33_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc33_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc33_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_rnd_16_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_rnd_8_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_nornd_16_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_rv40_weight_func_nornd_8_ssse3</name></expr>;</expr_stmt>
<macro><name>QPEL_MC_SET</name><argument_list>(<argument>put_</argument>, <argument>_ssse3</argument>)</argument_list></macro>
<macro><name>QPEL_MC_SET</name><argument_list>(<argument>avg_</argument>, <argument>_ssse3</argument>)</argument_list></macro>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
