<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\qpeldsp_init.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/pixels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/qpeldsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fpel.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ff_put_pixels8_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_no_rnd_pixels8_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_pixels8_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_pixels16_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_pixels16_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_no_rnd_pixels16_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_mpeg4_qpel16_h_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_mpeg4_qpel16_h_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_no_rnd_mpeg4_qpel16_h_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_mpeg4_qpel8_h_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_mpeg4_qpel8_h_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_no_rnd_mpeg4_qpel8_h_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_mpeg4_qpel16_v_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_mpeg4_qpel16_v_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_no_rnd_mpeg4_qpel16_v_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_mpeg4_qpel8_v_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_mpeg4_qpel8_v_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_no_rnd_mpeg4_qpel8_v_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_no_rnd_pixels16_mmxext</name></cpp:macro> <cpp:value>ff_put_pixels16_mmx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_no_rnd_pixels8_mmxext</name></cpp:macro> <cpp:value>ff_put_pixels8_mmx</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_pixels16_mmxext</name></cpp:macro> <cpp:value>ff_put_pixels16_mmx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_pixels8_mmxext</name></cpp:macro> <cpp:value>ff_put_pixels8_mmx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_OP</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>RND</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##qpel8_mc00_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { ff_ ##OPNAME ##pixels8_ ##MMX(dst, src, stride, 8); } static void OPNAME ##qpel8_mc10_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t temp[8]; uint8_t *const half = (uint8_t *) temp; ff_put ##RND ##mpeg4_qpel8_h_lowpass_ ##MMX(half, src, 8, stride, 8); ff_ ##OPNAME ##pixels8_l2_ ##MMX(dst, src, half, stride, stride, 8); } static void OPNAME ##qpel8_mc20_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { ff_ ##OPNAME ##mpeg4_qpel8_h_lowpass_ ##MMX(dst, src, stride, stride, 8); } static void OPNAME ##qpel8_mc30_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t temp[8]; uint8_t *const half = (uint8_t *) temp; ff_put ##RND ##mpeg4_qpel8_h_lowpass_ ##MMX(half, src, 8, stride, 8); ff_ ##OPNAME ##pixels8_l2_ ##MMX(dst, src + 1, half, stride, stride, 8); } static void OPNAME ##qpel8_mc01_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t temp[8]; uint8_t *const half = (uint8_t *) temp; ff_put ##RND ##mpeg4_qpel8_v_lowpass_ ##MMX(half, src, 8, stride); ff_ ##OPNAME ##pixels8_l2_ ##MMX(dst, src, half, stride, stride, 8); } static void OPNAME ##qpel8_mc02_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { ff_ ##OPNAME ##mpeg4_qpel8_v_lowpass_ ##MMX(dst, src, stride, stride); } static void OPNAME ##qpel8_mc03_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t temp[8]; uint8_t *const half = (uint8_t *) temp; ff_put ##RND ##mpeg4_qpel8_v_lowpass_ ##MMX(half, src, 8, stride); ff_ ##OPNAME ##pixels8_l2_ ##MMX(dst, src + stride, half, stride,stride, 8); } static void OPNAME ##qpel8_mc11_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[8 + 9]; uint8_t *const halfH = (uint8_t *) half + 64; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel8_h_lowpass_ ##MMX(halfH, src, 8, stride, 9); ff_put ##RND ##pixels8_l2_ ##MMX(halfH, src, halfH, 8, stride, 9); ff_put ##RND ##mpeg4_qpel8_v_lowpass_ ##MMX(halfHV, halfH, 8, 8);ff_ ##OPNAME ##pixels8_l2_ ##MMX(dst, halfH, halfHV, stride, 8, 8); } static void OPNAME ##qpel8_mc31_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[8 + 9]; uint8_t *const halfH = (uint8_t *) half + 64; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel8_h_lowpass_ ##MMX(halfH, src, 8, stride, 9); ff_put ##RND ##pixels8_l2_ ##MMX(halfH, src + 1, halfH, 8, stride, 9); ff_put ##RND ##mpeg4_qpel8_v_lowpass_ ##MMX(halfHV, halfH, 8, 8);ff_ ##OPNAME ##pixels8_l2_ ##MMX(dst, halfH, halfHV, stride, 8, 8); } static void OPNAME ##qpel8_mc13_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[8 + 9]; uint8_t *const halfH = (uint8_t *) half + 64; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel8_h_lowpass_ ##MMX(halfH, src, 8, stride, 9); ff_put ##RND ##pixels8_l2_ ##MMX(halfH, src, halfH, 8, stride, 9); ff_put ##RND ##mpeg4_qpel8_v_lowpass_ ##MMX(halfHV, halfH, 8, 8);ff_ ##OPNAME ##pixels8_l2_ ##MMX(dst, halfH + 8, halfHV, stride, 8, 8); } static void OPNAME ##qpel8_mc33_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[8 + 9]; uint8_t *const halfH = (uint8_t *) half + 64; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel8_h_lowpass_ ##MMX(halfH, src, 8, stride, 9); ff_put ##RND ##pixels8_l2_ ##MMX(halfH, src + 1, halfH, 8, stride, 9); ff_put ##RND ##mpeg4_qpel8_v_lowpass_ ##MMX(halfHV, halfH, 8, 8);ff_ ##OPNAME ##pixels8_l2_ ##MMX(dst, halfH + 8, halfHV, stride, 8, 8); } static void OPNAME ##qpel8_mc21_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[8 + 9]; uint8_t *const halfH = (uint8_t *) half + 64; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel8_h_lowpass_ ##MMX(halfH, src, 8, stride, 9); ff_put ##RND ##mpeg4_qpel8_v_lowpass_ ##MMX(halfHV, halfH, 8, 8);ff_ ##OPNAME ##pixels8_l2_ ##MMX(dst, halfH, halfHV, stride, 8, 8); } static void OPNAME ##qpel8_mc23_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[8 + 9]; uint8_t *const halfH = (uint8_t *) half + 64; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel8_h_lowpass_ ##MMX(halfH, src, 8, stride, 9); ff_put ##RND ##mpeg4_qpel8_v_lowpass_ ##MMX(halfHV, halfH, 8, 8);ff_ ##OPNAME ##pixels8_l2_ ##MMX(dst, halfH + 8, halfHV, stride, 8, 8); } static void OPNAME ##qpel8_mc12_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[8 + 9]; uint8_t *const halfH = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel8_h_lowpass_ ##MMX(halfH, src, 8, stride, 9); ff_put ##RND ##pixels8_l2_ ##MMX(halfH, src, halfH, 8, stride, 9); ff_ ##OPNAME ##mpeg4_qpel8_v_lowpass_ ##MMX(dst, halfH, stride, 8); } static void OPNAME ##qpel8_mc32_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[8 + 9]; uint8_t *const halfH = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel8_h_lowpass_ ##MMX(halfH, src, 8, stride, 9); ff_put ##RND ##pixels8_l2_ ##MMX(halfH, src + 1, halfH, 8, stride, 9); ff_ ##OPNAME ##mpeg4_qpel8_v_lowpass_ ##MMX(dst, halfH, stride, 8); } static void OPNAME ##qpel8_mc22_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[9]; uint8_t *const halfH = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel8_h_lowpass_ ##MMX(halfH, src, 8, stride, 9); ff_ ##OPNAME ##mpeg4_qpel8_v_lowpass_ ##MMX(dst, halfH, stride, 8); } static void OPNAME ##qpel16_mc00_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { ff_ ##OPNAME ##pixels16_ ##MMX(dst, src, stride, 16); } static void OPNAME ##qpel16_mc10_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t temp[32]; uint8_t *const half = (uint8_t *) temp; ff_put ##RND ##mpeg4_qpel16_h_lowpass_ ##MMX(half, src, 16, stride, 16); ff_ ##OPNAME ##pixels16_l2_ ##MMX(dst, src, half, stride, stride, 16); } static void OPNAME ##qpel16_mc20_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { ff_ ##OPNAME ##mpeg4_qpel16_h_lowpass_ ##MMX(dst, src, stride, stride, 16);} static void OPNAME ##qpel16_mc30_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t temp[32]; uint8_t *const half = (uint8_t*) temp; ff_put ##RND ##mpeg4_qpel16_h_lowpass_ ##MMX(half, src, 16, stride, 16); ff_ ##OPNAME ##pixels16_l2_ ##MMX(dst, src + 1, half, stride, stride, 16); } static void OPNAME ##qpel16_mc01_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t temp[32]; uint8_t *const half = (uint8_t *) temp; ff_put ##RND ##mpeg4_qpel16_v_lowpass_ ##MMX(half, src, 16, stride); ff_ ##OPNAME ##pixels16_l2_ ##MMX(dst, src, half, stride, stride, 16); } static void OPNAME ##qpel16_mc02_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { ff_ ##OPNAME ##mpeg4_qpel16_v_lowpass_ ##MMX(dst, src, stride, stride); } static void OPNAME ##qpel16_mc03_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t temp[32]; uint8_t *const half = (uint8_t *) temp; ff_put ##RND ##mpeg4_qpel16_v_lowpass_ ##MMX(half, src, 16, stride); ff_ ##OPNAME ##pixels16_l2_ ##MMX(dst, src+stride, half, stride, stride, 16); } static void OPNAME ##qpel16_mc11_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[16 * 2 + 17 * 2]; uint8_t *const halfH = (uint8_t *) half + 256; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel16_h_lowpass_ ##MMX(halfH, src, 16, stride, 17); ff_put ##RND ##pixels16_l2_ ##MMX(halfH, src, halfH, 16, stride, 17); ff_put ##RND ##mpeg4_qpel16_v_lowpass_ ##MMX(halfHV, halfH, 16, 16); ff_ ##OPNAME ##pixels16_l2_ ##MMX(dst, halfH, halfHV, stride, 16, 16); } static void OPNAME ##qpel16_mc31_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[16 * 2 + 17 * 2]; uint8_t *const halfH = (uint8_t *) half + 256; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel16_h_lowpass_ ##MMX(halfH, src, 16, stride, 17); ff_put ##RND ##pixels16_l2_ ##MMX(halfH, src + 1, halfH, 16, stride, 17); ff_put ##RND ##mpeg4_qpel16_v_lowpass_ ##MMX(halfHV, halfH, 16, 16); ff_ ##OPNAME ##pixels16_l2_ ##MMX(dst, halfH, halfHV, stride, 16, 16); } static void OPNAME ##qpel16_mc13_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[16 * 2 + 17 * 2]; uint8_t *const halfH = (uint8_t *) half + 256; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel16_h_lowpass_ ##MMX(halfH, src, 16, stride, 17); ff_put ##RND ##pixels16_l2_ ##MMX(halfH, src, halfH, 16, stride, 17); ff_put ##RND ##mpeg4_qpel16_v_lowpass_ ##MMX(halfHV, halfH, 16, 16); ff_ ##OPNAME ##pixels16_l2_ ##MMX(dst, halfH + 16, halfHV, stride, 16, 16); } static void OPNAME ##qpel16_mc33_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[16 * 2 + 17 * 2]; uint8_t *const halfH = (uint8_t *) half + 256; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel16_h_lowpass_ ##MMX(halfH, src, 16, stride, 17); ff_put ##RND ##pixels16_l2_ ##MMX(halfH, src + 1, halfH, 16, stride, 17); ff_put ##RND ##mpeg4_qpel16_v_lowpass_ ##MMX(halfHV, halfH, 16, 16); ff_ ##OPNAME ##pixels16_l2_ ##MMX(dst, halfH + 16, halfHV, stride, 16, 16); } static void OPNAME ##qpel16_mc21_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[16 * 2 + 17 * 2]; uint8_t *const halfH = (uint8_t *) half + 256; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel16_h_lowpass_ ##MMX(halfH, src, 16, stride, 17); ff_put ##RND ##mpeg4_qpel16_v_lowpass_ ##MMX(halfHV, halfH, 16, 16); ff_ ##OPNAME ##pixels16_l2_ ##MMX(dst, halfH, halfHV, stride, 16, 16); } static void OPNAME ##qpel16_mc23_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[16 * 2 + 17 * 2]; uint8_t *const halfH = (uint8_t *) half + 256; uint8_t *const halfHV = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel16_h_lowpass_ ##MMX(halfH, src, 16, stride, 17); ff_put ##RND ##mpeg4_qpel16_v_lowpass_ ##MMX(halfHV, halfH, 16, 16); ff_ ##OPNAME ##pixels16_l2_ ##MMX(dst, halfH + 16, halfHV, stride, 16, 16); } static void OPNAME ##qpel16_mc12_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[17 * 2]; uint8_t *const halfH = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel16_h_lowpass_ ##MMX(halfH, src, 16, stride, 17); ff_put ##RND ##pixels16_l2_ ##MMX(halfH, src, halfH, 16, stride, 17); ff_ ##OPNAME ##mpeg4_qpel16_v_lowpass_ ##MMX(dst, halfH, stride, 16); } static void OPNAME ##qpel16_mc32_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[17 * 2]; uint8_t *const halfH = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel16_h_lowpass_ ##MMX(halfH, src, 16, stride, 17); ff_put ##RND ##pixels16_l2_ ##MMX(halfH, src + 1, halfH, 16, stride, 17); ff_ ##OPNAME ##mpeg4_qpel16_v_lowpass_ ##MMX(dst, halfH, stride, 16); } static void OPNAME ##qpel16_mc22_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride) { uint64_t half[17 * 2]; uint8_t *const halfH = (uint8_t *) half; ff_put ##RND ##mpeg4_qpel16_h_lowpass_ ##MMX(halfH, src, 16, stride, 17); ff_ ##OPNAME ##mpeg4_qpel16_v_lowpass_ ##MMX(dst, halfH, stride, 16); }</cpp:value></cpp:define>




























































































































































































































































































































































































































<macro><name>QPEL_OP</name><argument_list>(<argument>put_</argument>, <argument>_</argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>QPEL_OP</name><argument_list>(<argument>avg_</argument>, <argument>_</argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>QPEL_OP</name><argument_list>(<argument>put_no_rnd_</argument>, <argument>_no_rnd_</argument>, <argument>mmxext</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_QPEL_FUNCS</name><parameter_list>(<parameter><type><name>PFX</name></type></parameter>, <parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>CPU</name></type></parameter>, <parameter><type><name>PREFIX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { c-&gt;PFX ##_pixels_tab[IDX][ 0] = PREFIX ##PFX ##SIZE ##_mc00_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 1] = PREFIX ##PFX ##SIZE ##_mc10_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 2] = PREFIX ##PFX ##SIZE ##_mc20_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 3] = PREFIX ##PFX ##SIZE ##_mc30_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 4] = PREFIX ##PFX ##SIZE ##_mc01_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 5] = PREFIX ##PFX ##SIZE ##_mc11_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 6] = PREFIX ##PFX ##SIZE ##_mc21_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 7] = PREFIX ##PFX ##SIZE ##_mc31_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 8] = PREFIX ##PFX ##SIZE ##_mc02_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 9] = PREFIX ##PFX ##SIZE ##_mc12_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][10] = PREFIX ##PFX ##SIZE ##_mc22_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][11] = PREFIX ##PFX ##SIZE ##_mc32_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][12] = PREFIX ##PFX ##SIZE ##_mc03_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][13] = PREFIX ##PFX ##SIZE ##_mc13_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][14] = PREFIX ##PFX ##SIZE ##_mc23_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][15] = PREFIX ##PFX ##SIZE ##_mc33_ ##CPU; } while (0)</cpp:value></cpp:define>



















<function><type><name>av_cold</name> <name>void</name></type> <name>ff_qpeldsp_init_x86</name><parameter_list>(<parameter><decl><type><name>QpelDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>X86_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMXEXT_EXTERNAL</name></expr></cpp:if>
<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>avg_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>avg_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_no_rnd_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_no_rnd_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
