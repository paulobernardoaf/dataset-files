<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\mpegvideodsp.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegvideodsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/videodsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gmc_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ox</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oy</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dxx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dxy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dyx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dyy</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ix</name> <init>= <expr><name>ox</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iy</name> <init>= <expr><name>oy</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>oxs</name> <init>= <expr><name>ox</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>oys</name> <init>= <expr><name>oy</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dxxs</name> <init>= <expr><name>dxx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dxys</name> <init>= <expr><name>dxy</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dyxs</name> <init>= <expr><name>dyx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dyys</name> <init>= <expr><name>dyy</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>r4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>r</name></expr>, <expr><name>r</name></expr>, <expr><name>r</name></expr>, <expr><name>r</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>dxy4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>dxys</name></expr>, <expr><name>dxys</name></expr>, <expr><name>dxys</name></expr>, <expr><name>dxys</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>dyy4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>dyys</name></expr>, <expr><name>dyys</name></expr>, <expr><name>dyys</name></expr>, <expr><name>dyys</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>shift2</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>shift</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STRIDE</name></cpp:macro> <cpp:value>4096U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_H</name></cpp:macro> <cpp:value>8U</cpp:value></cpp:define>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>edge_buf</name><index>[<expr><operator>(</operator><name>MAX_H</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>MAX_STRIDE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dxw</name> <init>= <expr><operator>(</operator><name>dxx</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>shift</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dyh</name> <init>= <expr><operator>(</operator><name>dyy</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>shift</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dxh</name> <init>= <expr><name>dxy</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dyw</name> <init>= <expr><name>dyx</name> <operator>*</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_emu</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>ix</name> <operator>&gt;=</operator> <name>width</name> <operator>-</operator> <name>w</name> <operator>||</operator> <name>width</name> <operator>&lt;</operator> <name>w</name> <operator>||</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator> <name>iy</name> <operator>&gt;=</operator> <name>height</name> <operator>-</operator> <name>h</name> <operator>||</operator> <name>height</name><operator>&lt;</operator> <name>h</name></expr></init></decl>
;</decl_stmt>

<if_stmt><if>if <condition>( 
<expr><operator>(</operator><operator>(</operator><name>ox</name> <operator>^</operator> <operator>(</operator><name>ox</name> <operator>+</operator> <name>dxw</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>ox</name> <operator>^</operator> <operator>(</operator><name>ox</name> <operator>+</operator> <name>dxh</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>ox</name> <operator>^</operator> <operator>(</operator><name>ox</name> <operator>+</operator> <name>dxw</name> <operator>+</operator> <name>dxh</name><operator>)</operator><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>oy</name> <operator>^</operator> <operator>(</operator><name>oy</name> <operator>+</operator> <name>dyw</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>oy</name> <operator>^</operator> <operator>(</operator><name>oy</name> <operator>+</operator> <name>dyh</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>oy</name> <operator>^</operator> <operator>(</operator><name>oy</name> <operator>+</operator> <name>dyw</name> <operator>+</operator> <name>dyh</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>shift</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>dxx</name> <operator>|</operator> <name>dxy</name> <operator>|</operator> <name>dyx</name> <operator>|</operator> <name>dyy</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal> <operator>||</operator>
<operator>(</operator><name>need_emu</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>h</name> <operator>&gt;</operator> <name>MAX_H</name> <operator>||</operator> <name>stride</name> <operator>&gt;</operator> <name>MAX_STRIDE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_gmc_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>ox</name></expr></argument>, <argument><expr><name>oy</name></expr></argument>, <argument><expr><name>dxx</name></expr></argument>, <argument><expr><name>dxy</name></expr></argument>, <argument><expr><name>dyx</name></expr></argument>, <argument><expr><name>dyy</name></expr></argument>,
<argument><expr><name>shift</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>ix</name> <operator>+</operator> <name>iy</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_emu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_emulated_edge_mc_8</name><argument_list>(<argument><expr><name>edge_buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ix</name></expr></argument>, <argument><expr><name>iy</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>edge_buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"movd %0, %%mm6 \n\t"
"pxor %%mm7, %%mm7 \n\t"
"punpcklwd %%mm6, %%mm6 \n\t"
"punpcklwd %%mm6, %%mm6 \n\t"
:: "r" (1 &lt;&lt; shift));</asm>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>dx4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>oxs</name> <operator>-</operator> <name>dxys</name> <operator>+</operator> <name>dxxs</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr>,
<expr><name>oxs</name> <operator>-</operator> <name>dxys</name> <operator>+</operator> <name>dxxs</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>,
<expr><name>oxs</name> <operator>-</operator> <name>dxys</name> <operator>+</operator> <name>dxxs</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>,
<expr><name>oxs</name> <operator>-</operator> <name>dxys</name> <operator>+</operator> <name>dxxs</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>dy4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>oys</name> <operator>-</operator> <name>dyys</name> <operator>+</operator> <name>dyxs</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr>,
<expr><name>oys</name> <operator>-</operator> <name>dyys</name> <operator>+</operator> <name>dyxs</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>,
<expr><name>oys</name> <operator>-</operator> <name>dyys</name> <operator>+</operator> <name>dyxs</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>,
<expr><name>oys</name> <operator>-</operator> <name>dyys</name> <operator>+</operator> <name>dyxs</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
"movq %0, %%mm4 \n\t"
"movq %1, %%mm5 \n\t"
"paddw %2, %%mm4 \n\t"
"paddw %3, %%mm5 \n\t"
"movq %%mm4, %0 \n\t"
"movq %%mm5, %1 \n\t"
"psrlw $12, %%mm4 \n\t"
"psrlw $12, %%mm5 \n\t"
: "+m" (*dx4), "+m" (*dy4)
: "m" (*dxy4), "m" (*dyy4));</asm>

<asm>__asm__ <specifier>volatile</specifier> (
"movq %%mm6, %%mm2 \n\t"
"movq %%mm6, %%mm1 \n\t"
"psubw %%mm4, %%mm2 \n\t"
"psubw %%mm5, %%mm1 \n\t"
"movq %%mm2, %%mm0 \n\t"
"movq %%mm4, %%mm3 \n\t"
"pmullw %%mm1, %%mm0 \n\t" 
"pmullw %%mm5, %%mm3 \n\t" 
"pmullw %%mm5, %%mm2 \n\t" 
"pmullw %%mm4, %%mm1 \n\t" 

"movd %4, %%mm5 \n\t"
"movd %3, %%mm4 \n\t"
"punpcklbw %%mm7, %%mm5 \n\t"
"punpcklbw %%mm7, %%mm4 \n\t"
"pmullw %%mm5, %%mm3 \n\t" 
"pmullw %%mm4, %%mm2 \n\t" 

"movd %2, %%mm5 \n\t"
"movd %1, %%mm4 \n\t"
"punpcklbw %%mm7, %%mm5 \n\t"
"punpcklbw %%mm7, %%mm4 \n\t"
"pmullw %%mm5, %%mm1 \n\t" 
"pmullw %%mm4, %%mm0 \n\t" 
"paddw %5, %%mm1 \n\t"
"paddw %%mm3, %%mm2 \n\t"
"paddw %%mm1, %%mm0 \n\t"
"paddw %%mm2, %%mm0 \n\t"

"psrlw %6, %%mm0 \n\t"
"packuswb %%mm0, %%mm0 \n\t"
"movd %%mm0, %0 \n\t"

: "=m" (dst[x + y * stride])
: "m" (src[0]), "m" (src[1]),
"m" (src[stride]), "m" (src[stride + 1]),
"m" (*r4), "m" (shift2));</asm>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name>h</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpegvideodsp_init_x86</name><parameter_list>(<parameter><decl><type><name>MpegVideoDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>gmc</name></name> <operator>=</operator> <name>gmc_mmx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
