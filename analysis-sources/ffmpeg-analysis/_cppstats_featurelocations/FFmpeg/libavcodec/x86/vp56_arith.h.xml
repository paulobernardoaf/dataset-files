<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\vp56_arith.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_X86_VP56_ARITH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_X86_VP56_ARITH_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name> <operator>&amp;&amp;</operator> <name>HAVE_FAST_CMOV</name> <operator>&amp;&amp;</operator> <name>HAVE_6REGS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp56_rac_get_prob</name></cpp:macro> <cpp:value>vp56_rac_get_prob</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vp56_rac_get_prob</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>prob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code_word</name> <init>= <expr><call><name>vp56_rac_renorm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>low</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>high</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>prob</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>low_shift</name> <init>= <expr><name>low</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>code_word</name></name> <operator>=</operator> <name>code_word</name></expr>;</expr_stmt>

<asm>__asm__(
"subl %4, %1 \n\t"
"subl %3, %2 \n\t"
"setae %b0 \n\t"
"cmovb %4, %1 \n\t"
"cmovb %5, %2 \n\t"
: "+q"(bit), "+&amp;r"(c-&gt;high), "+&amp;r"(c-&gt;code_word)
: "r"(low_shift), "r"(low), "r"(code_word)
);</asm>

<return>return <expr><name>bit</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
