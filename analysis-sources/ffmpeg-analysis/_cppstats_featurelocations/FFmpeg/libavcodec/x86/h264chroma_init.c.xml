<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\x86\h264chroma_init.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h264chroma.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ff_put_h264_chroma_mc8_rnd_mmx</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_h264_chroma_mc8_rnd_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_h264_chroma_mc8_rnd_3dnow</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_h264_chroma_mc4_mmx</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_h264_chroma_mc4_mmxext</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_h264_chroma_mc4_3dnow</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_h264_chroma_mc2_mmxext</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_h264_chroma_mc2_mmxext</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_h264_chroma_mc8_rnd_ssse3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_put_h264_chroma_mc4_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_avg_h264_chroma_mc8_rnd_ssse3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_avg_h264_chroma_mc4_ssse3</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_MC</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>NUM</name></type></parameter>, <parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_ ##OP ##_h264_chroma_mc ##NUM ##_ ##DEPTH ##_ ##OPT (uint8_t *dst, uint8_t *src, ptrdiff_t stride, int h, int x, int y);</cpp:value></cpp:define>




<macro><name>CHROMA_MC</name><argument_list>(<argument>put</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>CHROMA_MC</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>CHROMA_MC</name><argument_list>(<argument>put</argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>CHROMA_MC</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>mmxext</argument>)</argument_list></macro>
<macro><name>CHROMA_MC</name><argument_list>(<argument>put</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>CHROMA_MC</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>sse2</argument>)</argument_list></macro>
<macro><name>CHROMA_MC</name><argument_list>(<argument>put</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>avx</argument>)</argument_list></macro>
<macro><name>CHROMA_MC</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>avx</argument>)</argument_list></macro>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264chroma_init_x86</name><parameter_list>(<parameter><decl><type><name>H264ChromaContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>high_bit_depth</name> <init>= <expr><name>bit_depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_h264_chroma_mc8_rnd_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_h264_chroma_mc4_mmx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AMD3DNOW</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_h264_chroma_mc8_rnd_3dnow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_h264_chroma_mc4_3dnow</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_h264_chroma_mc8_rnd_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_h264_chroma_mc4_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_h264_chroma_mc2_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_h264_chroma_mc2_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bit_depth</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>bit_depth</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_h264_chroma_mc2_10_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_h264_chroma_mc2_10_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_h264_chroma_mc4_10_mmxext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_h264_chroma_mc4_10_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bit_depth</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>bit_depth</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_h264_chroma_mc8_10_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_h264_chroma_mc8_10_sse2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_h264_chroma_mc8_rnd_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_h264_chroma_mc8_rnd_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_h264_chroma_mc4_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_h264_chroma_mc4_ssse3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bit_depth</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>bit_depth</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_h264_chroma_mc8_10_avx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_h264_chroma_mc8_10_avx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
