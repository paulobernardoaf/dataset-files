<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\intrax8.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msmpeg4data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intrax8huf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intrax8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intrax8dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TABLE_DEPTH</name><parameter_list>(<parameter><type><name>table_bits</name></type></parameter>, <parameter><type><name>max_bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((max_bits + table_bits - 1) / table_bits)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_VLC_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_VLC_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR_VLC_BITS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_VLC_MTD</name></cpp:macro> <cpp:value>MAX_TABLE_DEPTH(DC_VLC_BITS, MAX_DC_VLC_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_VLC_MTD</name></cpp:macro> <cpp:value>MAX_TABLE_DEPTH(AC_VLC_BITS, MAX_AC_VLC_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR_VLC_MTD</name></cpp:macro> <cpp:value>MAX_TABLE_DEPTH(OR_VLC_BITS, MAX_OR_VLC_BITS)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>j_ac_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>j_dc_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>j_orient_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>x8_vlc_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sizeidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>sizes</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">576</literal></expr>, <expr><literal type="number">548</literal></expr>, <expr><literal type="number">582</literal></expr>, <expr><literal type="number">618</literal></expr>, <expr><literal type="number">546</literal></expr>, <expr><literal type="number">616</literal></expr>, <expr><literal type="number">560</literal></expr>, <expr><literal type="number">642</literal></expr>,
<expr><literal type="number">584</literal></expr>, <expr><literal type="number">582</literal></expr>, <expr><literal type="number">704</literal></expr>, <expr><literal type="number">664</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">544</literal></expr>, <expr><literal type="number">656</literal></expr>, <expr><literal type="number">640</literal></expr>,
<expr><literal type="number">512</literal></expr>, <expr><literal type="number">648</literal></expr>, <expr><literal type="number">582</literal></expr>, <expr><literal type="number">566</literal></expr>, <expr><literal type="number">532</literal></expr>, <expr><literal type="number">614</literal></expr>, <expr><literal type="number">596</literal></expr>, <expr><literal type="number">648</literal></expr>,
<expr><literal type="number">586</literal></expr>, <expr><literal type="number">552</literal></expr>, <expr><literal type="number">584</literal></expr>, <expr><literal type="number">590</literal></expr>, <expr><literal type="number">544</literal></expr>, <expr><literal type="number">578</literal></expr>, <expr><literal type="number">584</literal></expr>, <expr><literal type="number">624</literal></expr>,

<expr><literal type="number">528</literal></expr>, <expr><literal type="number">528</literal></expr>, <expr><literal type="number">526</literal></expr>, <expr><literal type="number">528</literal></expr>, <expr><literal type="number">536</literal></expr>, <expr><literal type="number">528</literal></expr>, <expr><literal type="number">526</literal></expr>, <expr><literal type="number">544</literal></expr>,
<expr><literal type="number">544</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">528</literal></expr>, <expr><literal type="number">528</literal></expr>, <expr><literal type="number">544</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">544</literal></expr>,

<expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>table</name><index>[<expr><literal type="number">28150</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_ac_vlc</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dst.table = &amp;table[offset]; dst.table_allocated = sizes[sizeidx]; offset += sizes[sizeidx++]; init_vlc(&amp;dst, AC_VLC_BITS, 77, &amp;src[1], 4, 2, &amp;src[0], 4, 2, INIT_VLC_USE_NEW_STATIC); } while(0)</cpp:value></cpp:define>








<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>init_ac_vlc</name><argument_list>(<argument><expr><name><name>j_ac_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x8_ac0_highquant_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_ac_vlc</name><argument_list>(<argument><expr><name><name>j_ac_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x8_ac1_highquant_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_ac_vlc</name><argument_list>(<argument><expr><name><name>j_ac_vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x8_ac0_lowquant_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_ac_vlc</name><argument_list>(<argument><expr><name><name>j_ac_vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x8_ac1_lowquant_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_ac_vlc</name></cpp:undef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_dc_vlc</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dst.table = &amp;table[offset]; dst.table_allocated = sizes[sizeidx]; offset += sizes[sizeidx++]; init_vlc(&amp;dst, DC_VLC_BITS, 34, &amp;src[1], 4, 2, &amp;src[0], 4, 2, INIT_VLC_USE_NEW_STATIC); } while(0)</cpp:value></cpp:define>








<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>init_dc_vlc</name><argument_list>(<argument><expr><name><name>j_dc_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x8_dc_highquant_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_dc_vlc</name><argument_list>(<argument><expr><name><name>j_dc_vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x8_dc_lowquant_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_dc_vlc</name></cpp:undef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_or_vlc</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dst.table = &amp;table[offset]; dst.table_allocated = sizes[sizeidx]; offset += sizes[sizeidx++]; init_vlc(&amp;dst, OR_VLC_BITS, 12, &amp;src[1], 4, 2, &amp;src[0], 4, 2, INIT_VLC_USE_NEW_STATIC); } while(0)</cpp:value></cpp:define>








<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_or_vlc</name><argument_list>(<argument><expr><name><name>j_orient_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x8_orient_highquant_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_or_vlc</name><argument_list>(<argument><expr><name><name>j_orient_vlc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x8_orient_lowquant_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_or_vlc</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_TYPE</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"table size %"</literal><name>SIZE_SPECIFIER</name><literal type="string">" does not match needed %i\n"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_TYPE</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x8_reset_vlc_tables</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>j_dc_vlc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>j_dc_vlc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>j_ac_vlc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>j_ac_vlc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>j_orient_vlc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>x8_select_ac_table</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>table_index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>mode</name> <operator>&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>j_ac_vlc</name><index>[<expr><name>mode</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>table_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>j_ac_vlc</name><index>[<expr><name>mode</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>j_ac_vlc</name><index>[<expr><name><name>w</name><operator>-&gt;</operator><name>quant</name></name> <operator>&lt;</operator> <literal type="number">13</literal></expr>]</index><index>[<expr><name>mode</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>table_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>j_ac_vlc</name><index>[<expr><name>mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>x8_get_orient_vlc</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>j_orient_vlc</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>table_index</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>quant</name></name> <operator>&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>j_orient_vlc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>j_orient_vlc</name><index>[<expr><name><name>w</name><operator>-&gt;</operator><name>quant</name></name> <operator>&lt;</operator> <literal type="number">13</literal></expr>]</index><index>[<expr><name>table_index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>get_vlc2</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>j_orient_vlc</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>OR_VLC_BITS</name></expr></argument>, <argument><expr><name>OR_VLC_MTD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extra_bits</name><parameter_list>(<parameter><type><name>eb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(eb)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extra_run</name></cpp:macro> <cpp:value>(0xFF &lt;&lt; 8)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extra_level</name></cpp:macro> <cpp:value>(0x00 &lt;&lt; 8)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>run_offset</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((r) &lt;&lt; 16)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>level_offset</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l) &lt;&lt; 24)</cpp:value></cpp:define> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>ac_decode_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_run</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>extra_bits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>extra_level</name> <operator>|</operator> <call><name>run_offset</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>level_offset</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>extra_bits</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>extra_run</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>extra_level</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>run_offset</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>level_offset</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x8_get_ac_rlf</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>final</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>j_ac_vlc</name><index>[<expr><name>mode</name></expr>]</index></name><operator>-&gt;</operator><name>table</name></expr></argument>, <argument><expr><name>AC_VLC_BITS</name></expr></argument>, <argument><expr><name>AC_VLC_MTD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">46</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator>
<operator>*</operator><name>final</name> <operator>=</operator> 
<operator>*</operator><name>run</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> 
<return>return;</return>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><operator>*</operator><name>final</name> <operator>=</operator>
<name>t</name> <operator>=</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">23</literal> <operator>*</operator> <name>t</name></expr>;</expr_stmt>



<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><literal type="number">0xE50000</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x1E</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt> 



<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0x01030F</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>l</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>run</name> <operator>=</operator> <name>i</name> <operator>&amp;</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">73</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">46</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sm</name> <operator>=</operator> <name><name>ac_decode_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>sm</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sm</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>sm</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sm</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>run</name> <operator>=</operator> <operator>(</operator><name>sm</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>e</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator> <operator>(</operator><name>sm</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>e</name> <operator>&amp;</operator> <operator>~</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>final</name> <operator>=</operator> <name>i</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">58</literal> <operator>-</operator> <literal type="number">46</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">75</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>crazy_mix_runlevel</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x63</literal></expr>,
<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x83</literal></expr>,
<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x64</literal></expr>,
<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>final</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>run</name> <operator>=</operator> <name><name>crazy_mix_runlevel</name><index>[<expr><name>e</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator> <name><name>crazy_mix_runlevel</name><index>[<expr><name>e</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>run</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>final</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dc_index_offset</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">193</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x8_get_dc_rlf</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>final</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>mode</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>j_dc_vlc</name><index>[<expr><name>mode</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>table_index</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>j_dc_vlc</name><index>[<expr><name>mode</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>j_dc_vlc</name><index>[<expr><name><name>w</name><operator>-&gt;</operator><name>quant</name></name> <operator>&lt;</operator> <literal type="number">13</literal></expr>]</index><index>[<expr><name>table_index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>j_dc_vlc</name><index>[<expr><name>mode</name></expr>]</index></name><operator>-&gt;</operator><name>table</name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><name>DC_VLC_MTD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>final</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">17</literal> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>c</name> <operator>-=</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>dc_index_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>^</operator> <name>e</name><operator>)</operator> <operator>-</operator> <name>e</name></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>x8_setup_spatial_predictor</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>w</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>setup_spatial_compensation</name></name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>chroma</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>scratchpad</name></name></expr></argument>,
<argument><expr><name><name>w</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>chroma</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>chroma_orient</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>quant</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>quant_dc_chroma</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>quant</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>quant</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>flat_dc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>range</name> <operator>&lt;</operator> <name>quant</name> <operator>||</operator> <name>range</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>range</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>flat_dc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>predicted_dc</name></name> <operator>=</operator> <name>sum</name> <operator>*</operator> <literal type="number">6899</literal> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>range</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>quant</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>raw_orient</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>prediction_table</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>raw_orient</name></name> <operator>=</operator> <call><name>x8_get_orient_vlc</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>raw_orient</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>raw_orient</name></name> <operator>&lt;</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name><operator>=</operator><name><name>prediction_table</name><index>[<expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name></expr>]</index><index>[<expr><name><name>w</name><operator>-&gt;</operator><name>raw_orient</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x8_update_predictions</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>orient</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>est_run</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>prediction_table</name><index>[<expr><name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>est_run</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <operator>(</operator><name>orient</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>orient</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>




</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x8_get_prediction_chroma</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>*</operator> <operator>!</operator><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>|=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>!</operator><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>|=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>raw_orient</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>chroma_orient</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">0xCC</literal> <operator>&gt;&gt;</operator> <name><name>w</name><operator>-&gt;</operator><name>edges</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>chroma_orient</name></name> <operator>=</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>prediction_table</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x8_get_prediction</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>*</operator> <operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>|=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>|=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>est_run</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>prediction_table</name><index>[<expr><operator>!</operator><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>est_run</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>prediction_table</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>est_run</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>prediction_table</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <operator>!</operator><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>prediction_table</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>prediction_table</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <operator>!</operator><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>est_run</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>est_run</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>est_run</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>est_run</name></name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><literal type="number">0xFFEAF4C4</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>b</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>a</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0xFFEAD8</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>c</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>quant</name></name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



















</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x8_ac_compensation</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>direction</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dc_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>w-&gt;block[0][w-&gt;idct_permutation[(x) + (y) * 8]]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * dc_level + 0x8000) &gt;&gt; 16;</cpp:value></cpp:define>
<switch>switch <condition>(<expr><name>direction</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">3811</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">487</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">506</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">135</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">173</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">1084</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">6269</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">708</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">172</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">73</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">6269</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">708</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">172</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <call><name>T</name><argument_list>(<argument><expr><literal type="number">73</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>B</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dsp_x8_put_solidcolor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>pix</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>quant_table</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">256</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">259</literal></expr>, <expr><literal type="number">262</literal></expr>,
<expr><literal type="number">265</literal></expr>, <expr><literal type="number">269</literal></expr>, <expr><literal type="number">272</literal></expr>, <expr><literal type="number">275</literal></expr>, <expr><literal type="number">278</literal></expr>, <expr><literal type="number">282</literal></expr>, <expr><literal type="number">285</literal></expr>, <expr><literal type="number">288</literal></expr>,
<expr><literal type="number">292</literal></expr>, <expr><literal type="number">295</literal></expr>, <expr><literal type="number">299</literal></expr>, <expr><literal type="number">303</literal></expr>, <expr><literal type="number">306</literal></expr>, <expr><literal type="number">310</literal></expr>, <expr><literal type="number">314</literal></expr>, <expr><literal type="number">317</literal></expr>,
<expr><literal type="number">321</literal></expr>, <expr><literal type="number">325</literal></expr>, <expr><literal type="number">329</literal></expr>, <expr><literal type="number">333</literal></expr>, <expr><literal type="number">337</literal></expr>, <expr><literal type="number">341</literal></expr>, <expr><literal type="number">345</literal></expr>, <expr><literal type="number">349</literal></expr>,
<expr><literal type="number">353</literal></expr>, <expr><literal type="number">358</literal></expr>, <expr><literal type="number">362</literal></expr>, <expr><literal type="number">366</literal></expr>, <expr><literal type="number">371</literal></expr>, <expr><literal type="number">375</literal></expr>, <expr><literal type="number">379</literal></expr>, <expr><literal type="number">384</literal></expr>,
<expr><literal type="number">389</literal></expr>, <expr><literal type="number">393</literal></expr>, <expr><literal type="number">398</literal></expr>, <expr><literal type="number">403</literal></expr>, <expr><literal type="number">408</literal></expr>, <expr><literal type="number">413</literal></expr>, <expr><literal type="number">417</literal></expr>, <expr><literal type="number">422</literal></expr>,
<expr><literal type="number">428</literal></expr>, <expr><literal type="number">433</literal></expr>, <expr><literal type="number">438</literal></expr>, <expr><literal type="number">443</literal></expr>, <expr><literal type="number">448</literal></expr>, <expr><literal type="number">454</literal></expr>, <expr><literal type="number">459</literal></expr>, <expr><literal type="number">465</literal></expr>,
<expr><literal type="number">470</literal></expr>, <expr><literal type="number">476</literal></expr>, <expr><literal type="number">482</literal></expr>, <expr><literal type="number">488</literal></expr>, <expr><literal type="number">493</literal></expr>, <expr><literal type="number">499</literal></expr>, <expr><literal type="number">505</literal></expr>, <expr><literal type="number">511</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x8_decode_intra_mb</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>final</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ac_mode</name></decl>, <decl><type ref="prev"/><name>dc_mode</name></decl>, <decl><type ref="prev"/><name>est_run</name></decl>, <decl><type ref="prev"/><name>dc_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zeros_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_quant_matrix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>&lt;</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>w</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dc_mode</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dc_mode</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>est_run</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>x8_get_dc_rlf</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>dc_mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dc_level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>final</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>zeros_only</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>final</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>use_quant_matrix</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>use_quant_matrix</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ac_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>est_run</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>raw_orient</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_quant_matrix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>raw_orient</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ac_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>est_run</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>est_run</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ac_mode</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>est_run</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>est_run</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ac_mode</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>est_run</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>x8_select_ac_table</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>ac_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>scantable</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>scantable</name><index>[<expr><operator>(</operator><literal type="number">0x928548</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>orient</name></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>permutated</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>est_run</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ac_mode</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>x8_select_ac_table</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>x8_get_ac_rlf</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>ac_mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>run</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>final</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>run</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>dquant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>+=</operator> <name><name>w</name><operator>-&gt;</operator><name>qsum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_quant_matrix</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>*</operator> <name><name>quant_table</name><index>[<expr><name>pos</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scantable</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><name>final</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>flat_dc</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>dc_level</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int32_t</name></type> <name>divide_quant</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>chroma</name></expr> ?</condition><then> <expr><name><name>w</name><operator>-&gt;</operator><name>divide_quant_dc_luma</name></name></expr>
</then><else>: <expr><name><name>w</name><operator>-&gt;</operator><name>divide_quant_dc_chroma</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>dc_quant</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>chroma</name></expr> ?</condition><then> <expr><name><name>w</name><operator>-&gt;</operator><name>quant</name></name></expr>
</then><else>: <expr><name><name>w</name><operator>-&gt;</operator><name>quant_dc_chroma</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>dc_level</name> <operator>+=</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>predicted_dc</name></name> <operator>*</operator> <name>divide_quant</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dsp_x8_put_solidcolor</name><argument_list>(<argument><expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>dc_level</name> <operator>*</operator> <name>dc_quant</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>chroma</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>w</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>!</operator><operator>!</operator><name>chroma</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>block_placed</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zeros_only</name> <operator>=</operator> <name>dc_level</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chroma</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dc_level</name> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>quant</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>dc_level</name> <operator>*</operator> <name><name>w</name><operator>-&gt;</operator><name>quant_dc_chroma</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>dc_level</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>direction</name></decl>;</decl_stmt>


<expr_stmt><expr><name>direction</name> <operator>=</operator> <operator>(</operator><literal type="number">0x6A017C</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>x8_ac_compensation</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>flat_dc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dsp_x8_put_solidcolor</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>predicted_dc</name></name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>chroma</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>w</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>!</operator><operator>!</operator><name>chroma</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>spatial_compensation</name><index>[<expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name></expr>]</index></name><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>scratchpad</name></name><operator>,</operator>
<name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>chroma</name></expr>]</index></name><operator>,</operator>
<name><name>w</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>!</operator><operator>!</operator><name>chroma</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zeros_only</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>w</name><operator>-&gt;</operator><name>wdsp</name><operator>.</operator><name>idct_add</name></name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>chroma</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>w</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>!</operator><operator>!</operator><name>chroma</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>w</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>block_placed</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chroma</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>x8_update_predictions</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>orient</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>loopfilter</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>chroma</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize</name> <init>= <expr><name><name>w</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>!</operator><operator>!</operator><name>chroma</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>zeros_only</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>|</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>w</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>h_loop_filter</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>quant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>edges</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>zeros_only</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>orient</name></name> <operator>|</operator> <literal type="number">8</literal><operator>)</operator> <operator>==</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>w</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>v_loop_filter</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>quant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>x8_init_block_index</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>uvlinesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name>linesize</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>uvlinesize</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>uvlinesize</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>av_cold</name> <name>int</name></type> <name>ff_intrax8_common_init</name><argument_list>(<argument><expr><name>AVCodecContext</name> <operator>*</operator><name>avctx</name></expr></argument>,
<argument><expr><name>IntraX8Context</name> <operator>*</operator><name>w</name></expr></argument>, <argument><expr><name>IDCTDSPContext</name> <operator>*</operator><name>idsp</name></expr></argument>,
<argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>,
<argument><expr><name>int</name> <name><name>block_last_index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>int</name> <name>mb_width</name></expr></argument>, <argument><expr><name>int</name> <name>mb_height</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>x8_vlc_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>idsp</name></name> <operator>=</operator> <operator>*</operator><name>idsp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <name>mb_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <name>mb_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>block_last_index</name></name> <operator>=</operator> <name>block_last_index</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>prediction_table</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>prediction_table</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_wmv2dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>wdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_scantable_permutation</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>idct_permutation</name></name></expr></argument>,
<argument><expr><name><name>w</name><operator>-&gt;</operator><name>wdsp</name><operator>.</operator><name>idct_perm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>scantable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>scantable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>scantable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ff_wmv1_scantable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_intrax8dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_blockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_intrax8_common_end</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>w</name><operator>-&gt;</operator><name>prediction_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_intrax8_decode_picture</name><parameter_list>(<parameter><decl><type><name>IntraX8Context</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>,
<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mb_y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dquant</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quant_offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>loopfilter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lowdelay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_xy</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name> <operator>=</operator> <name>gb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>dquant</name></name> <operator>=</operator> <name>dquant</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>quant</name></name> <operator>=</operator> <name>dquant</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>qsum</name></name> <operator>=</operator> <name>quant_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name><name>pict</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>loopfilter</name></name> <operator>=</operator> <name>loopfilter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>use_quant_matrix</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <operator>*</operator><name>mb_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <operator>*</operator><name>mb_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>divide_quant_dc_luma</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>quant</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>w</name><operator>-&gt;</operator><name>quant</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>quant</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>quant_dc_chroma</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>quant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>divide_quant_dc_chroma</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>divide_quant_dc_luma</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>quant_dc_chroma</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>quant</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>quant</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>divide_quant_dc_chroma</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>quant_dc_chroma</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>w</name><operator>-&gt;</operator><name>quant_dc_chroma</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>x8_reset_vlc_tables</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&lt;</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>x8_init_block_index</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_xy</name> <operator>=</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&lt;</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>x8_get_prediction</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>x8_setup_spatial_predictor</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>x8_decode_intra_mb</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>x8_get_prediction_chroma</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>x8_setup_spatial_predictor</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>x8_decode_intra_mb</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>x8_setup_spatial_predictor</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>x8_decode_intra_mb</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pict</name><operator>-&gt;</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>quant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_xy</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_draw_horiz_band</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name>PICT_FRAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lowdelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<label><name>error</name>:</label>
<expr_stmt><expr><operator>*</operator><name>mb_x</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mb_y</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
