<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\hqx.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"canopus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hqx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hqxdsp.h"</cpp:file></cpp:include>


<enum>enum <name>HQXFormat</name> <block>{
<decl><name>HQX_422</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>HQX_444</name></decl>,
<decl><name>HQX_422A</name></decl>,
<decl><name>HQX_444A</name></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HQX_HEADER_SIZE</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>hqx_quants</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0xC</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0xC</literal></expr>, <expr><literal type="number">0x18</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0xC</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x30</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x40</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xA</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x50</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xC</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x60</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xC0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x100</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x180</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x100</literal></expr>, <expr><literal type="number">0x200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x180</literal></expr>, <expr><literal type="number">0x300</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x100</literal></expr>, <expr><literal type="number">0x200</literal></expr>, <expr><literal type="number">0x400</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>hqx_quant_luma</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">45</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">48</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">49</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">101</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">104</literal></expr>,
<expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">116</literal></expr>,
<expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">123</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>hqx_quant_chroma</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">91</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">96</literal></expr>,
<expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">197</literal></expr>,
<expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">203</literal></expr>,
<expr><literal type="number">26</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">177</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">209</literal></expr>,
<expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">232</literal></expr>,
<expr><literal type="number">44</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">246</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>put_blocks</name><parameter_list>(<parameter><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ilace</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block0</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>quant</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fields</name> <init>= <expr><ternary><condition><expr><name>ilace</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lsize</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>hqxdsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>lsize</name><operator>)</operator></expr></argument>,
<argument><expr><name>lsize</name> <operator>*</operator> <name>fields</name></expr></argument>, <argument><expr><name>block0</name></expr></argument>, <argument><expr><name>quant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>hqxdsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>ilace</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>*</operator> <name>lsize</name><operator>)</operator></expr></argument>,
<argument><expr><name>lsize</name> <operator>*</operator> <name>fields</name></expr></argument>, <argument><expr><name>block1</name></expr></argument>, <argument><expr><name>quant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hqx_get_ac</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HQXAC</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>run</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>show_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>lut_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb2</name> <init>= <expr><operator>*</operator><name>gb</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb2</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>lut_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>lev</name> <operator>+</operator> <call><name>show_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb2</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>extra_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>run</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>run</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lev</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>lev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_block</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>quants</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dcb</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>last_dc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ac_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>, <decl><type ref="prev"/><name>lev</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>HQX_DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>last_dc</name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><operator>*</operator><name>last_dc</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">12</literal> <operator>-</operator> <name>dcb</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>quants</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ac_idx</name> <operator>=</operator> <name>HQX_AC_Q128</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ac_idx</name> <operator>=</operator> <name>HQX_AC_Q64</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ac_idx</name> <operator>=</operator> <name>HQX_AC_Q32</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ac_idx</name> <operator>=</operator> <name>HQX_AC_Q16</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>q</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ac_idx</name> <operator>=</operator> <name>HQX_AC_Q8</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ac_idx</name> <operator>=</operator> <name>HQX_AC_Q0</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>hqx_get_ac</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ff_hqx_ac</name><index>[<expr><name>ac_idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>run</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>ff_zigzag_direct</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>lev</name> <operator>*</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hqx_decode_422</name><parameter_list>(<parameter><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_no</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HQXSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name>slice_no</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>quants</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>quants</name> <operator>=</operator> <name><name>hqx_quants</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vlc_index</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>dcb</name></name> <operator>-</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_dc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_block</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dc_vlc</name><index>[<expr><name>vlc_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>quants</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dcb</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hqx_decode_422a</name><parameter_list>(<parameter><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_no</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HQXSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name>slice_no</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>quants</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbp_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbp_vlc</name><operator>.</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>slice</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0x800</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>cbp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>quants</name> <operator>=</operator> <name><name>hqx_quants</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cbp</name> <operator>|=</operator> <name>cbp</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>cbp</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>cbp</name> <operator>|=</operator> <literal type="number">0x500</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cbp</name> <operator>&amp;</operator> <literal type="number">0xC</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>cbp</name> <operator>|=</operator> <literal type="number">0xA00</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_dc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cbp</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vlc_index</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>dcb</name></name> <operator>-</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_block</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dc_vlc</name><index>[<expr><name>vlc_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>quants</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dcb</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hqx_decode_444</name><parameter_list>(<parameter><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_no</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HQXSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name>slice_no</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>quants</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>quants</name> <operator>=</operator> <name><name>hqx_quants</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vlc_index</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>dcb</name></name> <operator>-</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_dc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_block</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dc_vlc</name><index>[<expr><name>vlc_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>quants</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dcb</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hqx_decode_444a</name><parameter_list>(<parameter><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_no</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HQXSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name>slice_no</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>quants</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cbp</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbp_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbp_vlc</name><operator>.</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>slice</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0x800</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>cbp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>quants</name> <operator>=</operator> <name><name>hqx_quants</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cbp</name> <operator>|=</operator> <name>cbp</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>cbp</name> <operator>|=</operator> <name>cbp</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_dc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cbp</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vlc_index</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>dcb</name></name> <operator>-</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_block</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dc_vlc</name><index>[<expr><name>vlc_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>quants</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dcb</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_blocks</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hqx_quant_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>shuffle_16</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_slice</name><parameter_list>(<parameter><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_no</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_w</name> <init>= <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_h</name> <init>= <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>grp_w</name> <init>= <expr><operator>(</operator><name>mb_w</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>grp_h</name> <init>= <expr><operator>(</operator><name>mb_h</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>grp_h_edge</name> <init>= <expr><name>grp_w</name> <operator>*</operator> <operator>(</operator><name>mb_w</name> <operator>/</operator> <name>grp_w</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>grp_v_edge</name> <init>= <expr><name>grp_h</name> <operator>*</operator> <operator>(</operator><name>mb_h</name> <operator>/</operator> <name>grp_h</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>grp_v_rest</name> <init>= <expr><name>mb_w</name> <operator>-</operator> <name>grp_h_edge</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>grp_h_rest</name> <init>= <expr><name>mb_h</name> <operator>-</operator> <name>grp_v_edge</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_mbs</name> <init>= <expr><name>mb_w</name> <operator>*</operator> <name>mb_h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_tiles</name> <init>= <expr><operator>(</operator><name>num_mbs</name> <operator>+</operator> <literal type="number">479</literal><operator>)</operator> <operator>/</operator> <literal type="number">480</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>std_tile_blocks</name> <init>= <expr><name>num_mbs</name> <operator>/</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name>num_tiles</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g_tile</name> <init>= <expr><name>slice_no</name> <operator>*</operator> <name>num_tiles</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blk_addr</name></decl>, <decl><type ref="prev"/><name>loc_addr</name></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>loc_row</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_blocks</name></decl>, <decl><type ref="prev"/><name>tile_limit</name></decl>, <decl><type ref="prev"/><name>tile_no</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tile_no</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tile_no</name> <operator>&lt;</operator> <name>num_tiles</name></expr>;</condition> <incr><expr><name>tile_no</name><operator>++</operator></expr><operator>,</operator> <expr><name>g_tile</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tile_blocks</name> <operator>=</operator> <name>std_tile_blocks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tile_limit</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g_tile</name> <operator>&lt;</operator> <name>num_mbs</name> <operator>-</operator> <name>std_tile_blocks</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name>num_tiles</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tile_limit</name> <operator>=</operator> <name>num_mbs</name> <operator>/</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name>num_tiles</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tile_blocks</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tile_blocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>tile_limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blk_addr</name> <operator>=</operator> <name>g_tile</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>num_tiles</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>blk_addr</name> <operator>=</operator> <name>tile_no</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>num_tiles</name> <operator>*</operator> <name>i</name> <operator>+</operator>
<name>num_tiles</name> <operator>*</operator> <name><name>shuffle_16</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>slice_no</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>loc_row</name> <operator>=</operator> <name>grp_h</name> <operator>*</operator> <operator>(</operator><name>blk_addr</name> <operator>/</operator> <operator>(</operator><name>grp_h</name> <operator>*</operator> <name>mb_w</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>loc_addr</name> <operator>=</operator> <name>blk_addr</name> <operator>%</operator> <operator>(</operator><name>grp_h</name> <operator>*</operator> <name>mb_w</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>loc_row</name> <operator>&gt;=</operator> <name>grp_v_edge</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_x</name> <operator>=</operator> <name>grp_w</name> <operator>*</operator> <operator>(</operator><name>loc_addr</name> <operator>/</operator> <operator>(</operator><name>grp_h_rest</name> <operator>*</operator> <name>grp_w</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>loc_addr</name> <operator>%</operator> <operator>(</operator><name>grp_h_rest</name> <operator>*</operator> <name>grp_w</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mb_x</name> <operator>=</operator> <name>grp_w</name> <operator>*</operator> <operator>(</operator><name>loc_addr</name> <operator>/</operator> <operator>(</operator><name>grp_h</name> <operator>*</operator> <name>grp_w</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>loc_addr</name> <operator>%</operator> <operator>(</operator><name>grp_h</name> <operator>*</operator> <name>grp_w</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&gt;=</operator> <name>grp_h_edge</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_x</name> <operator>+=</operator> <name>pos</name> <operator>%</operator> <name>grp_v_rest</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_y</name> <operator>=</operator> <name>loc_row</name> <operator>+</operator> <operator>(</operator><name>pos</name> <operator>/</operator> <name>grp_v_rest</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mb_x</name> <operator>+=</operator> <name>pos</name> <operator>%</operator> <name>grp_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_y</name> <operator>=</operator> <name>loc_row</name> <operator>+</operator> <operator>(</operator><name>pos</name> <operator>/</operator> <name>grp_w</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>decode_func</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>slice_no</name></expr></argument>, <argument><expr><name>mb_x</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>mb_y</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_slice_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>slice_no</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>slice_off</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_off</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice_off</name><index>[<expr><name>slice_no</name></expr>]</index></name> <operator>&lt;</operator> <name>HQX_HEADER_SIZE</name> <operator>||</operator>
<name><name>slice_off</name><index>[<expr><name>slice_no</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>slice_off</name><index>[<expr><name>slice_no</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>||</operator>
<name><name>slice_off</name><index>[<expr><name>slice_no</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid slice size %d.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name>slice_no</name></expr>]</index></name><operator>.</operator><name>gb</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <name><name>slice_off</name><index>[<expr><name>slice_no</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>slice_off</name><index>[<expr><name>slice_no</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>slice_off</name><index>[<expr><name>slice_no</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>decode_slice</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>slice_no</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hqx_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_picture_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>frame</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>info_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame is too small %d.\n"</literal></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>info_tag</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>info_tag</name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>info_offset</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>info_offset</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name>info_offset</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid INFO header offset: 0x%08"</literal><name>PRIX32</name><literal type="string">" is too large.\n"</literal></expr></argument>,
<argument><expr><name>info_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_canopus_parse_info_tag</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>info_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info_offset</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>info_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_start</name> <operator>=</operator> <name>src</name> <operator>-</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>data_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&lt;</operator> <name>HQX_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'H'</literal> <operator>||</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not an HQX frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dcb</name></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_off</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RB24</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>dcb</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid DC precision %d.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dcb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid stored dimensions %dx%d.\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>/</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator>
<operator>(</operator><literal type="number">100</literal> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>discard_damaged_percentage</name></name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal> <operator>&gt;</operator> <literal type="number">4LL</literal> <operator>*</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HQX_422</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_func</name></name> <operator>=</operator> <name>hqx_decode_422</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HQX_444</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_func</name></name> <operator>=</operator> <name>hqx_decode_444</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HQX_422A</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_func</name></name> <operator>=</operator> <name>hqx_decode_422a</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HQX_444A</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_func</name></name> <operator>=</operator> <name>hqx_decode_444a</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid format: %d.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>decode_slice_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_picture_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>hqx_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>is_copy</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cbp_vlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dc_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>hqx_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_hqxdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hqxdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_hqx_init_vlcs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_hqx_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hqx"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Canopus HQX"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HQX</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HQXContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>hqx_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>hqx_decode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>hqx_decode_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name> <operator>|</operator>
<name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>
<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
