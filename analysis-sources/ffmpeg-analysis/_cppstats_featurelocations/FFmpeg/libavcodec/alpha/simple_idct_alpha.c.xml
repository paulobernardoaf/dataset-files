<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\alpha\simple_idct_alpha.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp_alpha.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asm.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W1</name></cpp:macro> <cpp:value>22725</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W2</name></cpp:macro> <cpp:value>21407</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W3</name></cpp:macro> <cpp:value>19266</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W4</name></cpp:macro> <cpp:value>16383</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W5</name></cpp:macro> <cpp:value>12873</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W6</name></cpp:macro> <cpp:value>8867</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W7</name></cpp:macro> <cpp:value>4520</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_SHIFT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_SHIFT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>idct_row</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <name>W4</name> <operator>*</operator> <call><name>sextw</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ROW_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>l</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffffUL</literal><operator>)</operator> <operator>|</operator> <name>r</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a0</name> <operator>&gt;&gt;=</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>|=</operator> <name>t2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>|=</operator> <name>t2</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>=</operator> <name>a0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>extwl</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sextw</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>W2</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>W6</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>-=</operator> <name>W6</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>-=</operator> <name>W2</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>extwl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sextw</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>W4</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>-=</operator> <name>W4</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>-=</operator> <name>W4</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>+=</operator> <name>W4</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>extwl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sextw</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>W6</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>-=</operator> <name>W2</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>+=</operator> <name>W2</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>-=</operator> <name>W6</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>extwl</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sextw</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b0</name> <operator>=</operator> <name>W1</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <name>W3</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <name>W5</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>=</operator> <name>W7</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>b0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>extwl</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sextw</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b0</name> <operator>+=</operator> <name>W3</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>-=</operator> <name>W7</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>-=</operator> <name>W1</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>-=</operator> <name>W5</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>extwl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sextw</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b0</name> <operator>+=</operator> <name>W5</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>-=</operator> <name>W1</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>+=</operator> <name>W7</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>+=</operator> <name>W3</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>extwl</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sextw</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b0</name> <operator>+=</operator> <name>W7</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>-=</operator> <name>W5</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>+=</operator> <name>W3</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>-=</operator> <name>W1</name> <operator>*</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>+</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a3</name> <operator>+</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a3</name> <operator>-</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>-</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>-</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>row</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>-</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ROW_SHIFT</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>idct_col</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>COL_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>W4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <name>W4</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>W4</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>W4</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>=</operator> <name>W4</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>W2</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>W6</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>-=</operator> <name>W6</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>-=</operator> <name>W2</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>W4</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>-=</operator> <name>W4</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>-=</operator> <name>W4</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>+=</operator> <name>W4</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>W6</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>-=</operator> <name>W2</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>+=</operator> <name>W2</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a3</name> <operator>-=</operator> <name>W6</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b0</name> <operator>=</operator> <name>W1</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <name>W3</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <name>W5</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>=</operator> <name>W7</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>b0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b0</name> <operator>+=</operator> <name>W3</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>-=</operator> <name>W7</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>-=</operator> <name>W1</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>-=</operator> <name>W5</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b0</name> <operator>+=</operator> <name>W5</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>-=</operator> <name>W1</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>+=</operator> <name>W7</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>+=</operator> <name>W3</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b0</name> <operator>+=</operator> <name>W7</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>-=</operator> <name>W5</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>+=</operator> <name>W3</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>-=</operator> <name>W1</name> <operator>*</operator> <name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>-</operator> <name>b0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>+</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>-</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>-</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a3</name> <operator>+</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a3</name> <operator>-</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>idct_col2</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a0</name> <init>= <expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>COL_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>W4</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a0</name> <operator>*=</operator> <name>W4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a0</name> <operator>&gt;&gt;</operator> <name>COL_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_simple_idct_axp</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rowsZero</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>rowsConstant</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sparseness</name> <init>= <expr><call><name>idct_row</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sparseness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rowsZero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sparseness</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rowsConstant</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>rowsZero</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>idct_col2</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rowsConstant</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>idct_col</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>|=</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>|=</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>|=</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stq</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_col</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_simple_idct_put_axp</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_simple_idct_axp</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_pixels_clamped_axp_p</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_simple_idct_add_axp</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_simple_idct_axp</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pixels_clamped_axp_p</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
