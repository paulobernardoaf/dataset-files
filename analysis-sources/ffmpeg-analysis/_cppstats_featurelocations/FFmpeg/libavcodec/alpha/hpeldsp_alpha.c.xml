<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\alpha\hpeldsp_alpha.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/hpeldsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp_alpha.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asm.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>avg2_no_rnd</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <name>b</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>^</operator> <name>b</name><operator>)</operator> <operator>&amp;</operator> <call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>avg2</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>a</name> <operator>|</operator> <name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>^</operator> <name>b</name><operator>)</operator> <operator>&amp;</operator> <call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>


static inline uint64_t avg4(uint64_t l1, uint64_t l2, uint64_t l3, uint64_t l4)
{
uint64_t r1 = ((l1 &amp; ~BYTE_VEC(0x03)) &gt;&gt; 2)
+ ((l2 &amp; ~BYTE_VEC(0x03)) &gt;&gt; 2)
+ ((l3 &amp; ~BYTE_VEC(0x03)) &gt;&gt; 2)
+ ((l4 &amp; ~BYTE_VEC(0x03)) &gt;&gt; 2);
uint64_t r2 = (( (l1 &amp; BYTE_VEC(0x03))
+ (l2 &amp; BYTE_VEC(0x03))
+ (l3 &amp; BYTE_VEC(0x03))
+ (l4 &amp; BYTE_VEC(0x03))
+ BYTE_VEC(0x02)) &gt;&gt; 2) &amp; BYTE_VEC(0x03);
return r1 + r2;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>LOAD</name></type></parameter>, <parameter><type><name>STORE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { STORE(LOAD(pixels), block); pixels += line_size; block += line_size; } while (--h)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_X2</name><parameter_list>(<parameter><type><name>LOAD</name></type></parameter>, <parameter><type><name>STORE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint64_t pix1, pix2; pix1 = LOAD(pixels); pix2 = pix1 &gt;&gt; 8 | ((uint64_t) pixels[8] &lt;&lt; 56); STORE(AVG2(pix1, pix2), block); pixels += line_size; block += line_size; } while (--h)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_Y2</name><parameter_list>(<parameter><type><name>LOAD</name></type></parameter>, <parameter><type><name>STORE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint64_t pix = LOAD(pixels); do { uint64_t next_pix; pixels += line_size; next_pix = LOAD(pixels); STORE(AVG2(pix, next_pix), block); block += line_size; pix = next_pix; } while (--h); } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_XY2</name><parameter_list>(<parameter><type><name>LOAD</name></type></parameter>, <parameter><type><name>STORE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint64_t pix1 = LOAD(pixels); uint64_t pix2 = pix1 &gt;&gt; 8 | ((uint64_t) pixels[8] &lt;&lt; 56); uint64_t pix_l = (pix1 &amp; BYTE_VEC(0x03)) + (pix2 &amp; BYTE_VEC(0x03)); uint64_t pix_h = ((pix1 &amp; ~BYTE_VEC(0x03)) &gt;&gt; 2) + ((pix2 &amp; ~BYTE_VEC(0x03)) &gt;&gt; 2); do { uint64_t npix1, npix2; uint64_t npix_l, npix_h; uint64_t avg; pixels += line_size; npix1 = LOAD(pixels); npix2 = npix1 &gt;&gt; 8 | ((uint64_t) pixels[8] &lt;&lt; 56); npix_l = (npix1 &amp; BYTE_VEC(0x03)) + (npix2 &amp; BYTE_VEC(0x03)); npix_h = ((npix1 &amp; ~BYTE_VEC(0x03)) &gt;&gt; 2) + ((npix2 &amp; ~BYTE_VEC(0x03)) &gt;&gt; 2); avg = (((pix_l + npix_l + AVG4_ROUNDER) &gt;&gt; 2) &amp; BYTE_VEC(0x03)) + pix_h + npix_h; STORE(avg, block); block += line_size; pix_l = npix_l; pix_h = npix_h; } while (--h); } while (0)</cpp:value></cpp:define>






























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_OP</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>SUFF</name></type></parameter>, <parameter><type><name>OPKIND</name></type></parameter>, <parameter><type><name>STORE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##_pixels ##SUFF ##_axp (uint8_t *restrict block, const uint8_t *restrict pixels, ptrdiff_t line_size, int h) { if ((size_t) pixels &amp; 0x7) { OPKIND(uldq, STORE); } else { OPKIND(ldq, STORE); } } static void OPNAME ##_pixels16 ##SUFF ##_axp (uint8_t *restrict block, const uint8_t *restrict pixels, ptrdiff_t line_size, int h) { OPNAME ##_pixels ##SUFF ##_axp(block, pixels, line_size, h); OPNAME ##_pixels ##SUFF ##_axp(block + 8, pixels + 8, line_size, h); }</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXOP</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>STORE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MAKE_OP(OPNAME, , OP, STORE) MAKE_OP(OPNAME, _x2, OP_X2, STORE) MAKE_OP(OPNAME, _y2, OP_Y2, STORE) MAKE_OP(OPNAME, _xy2, OP_XY2, STORE)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG2</name></cpp:macro> <cpp:value>avg2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG4</name></cpp:macro> <cpp:value>avg4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG4_ROUNDER</name></cpp:macro> <cpp:value>BYTE_VEC(0x02)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stq(l, b)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>PIXOP</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><name>STORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STORE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stq(AVG2(l, ldq(b)), b);</cpp:value></cpp:define>
<expr_stmt><expr><call><name>PIXOP</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><name>STORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVG2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVG4</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVG4_ROUNDER</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STORE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG2</name></cpp:macro> <cpp:value>avg2_no_rnd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG4</name></cpp:macro> <cpp:value>avg4_no_rnd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG4_ROUNDER</name></cpp:macro> <cpp:value>BYTE_VEC(0x01)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stq(l, b)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>PIXOP</name><argument_list>(<argument><expr><name>put_no_rnd</name></expr></argument>, <argument><expr><name>STORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STORE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stq(AVG2(l, ldq(b)), b);</cpp:value></cpp:define>
<expr_stmt><expr><call><name>PIXOP</name><argument_list>(<argument><expr><name>avg_no_rnd</name></expr></argument>, <argument><expr><name>STORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_pixels16_axp_asm</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_pixels_axp_asm</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_pixels_axp_asm</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pixels</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_hpeldsp_init_alpha</name><parameter_list>(<parameter><decl><type><name>HpelDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels16_axp_asm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels16_x2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels16_y2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels16_xy2_axp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels16_axp_asm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_no_rnd_pixels16_x2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_no_rnd_pixels16_y2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>put_no_rnd_pixels16_xy2_axp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels16_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels16_x2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels16_y2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels16_xy2_axp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_no_rnd_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_no_rnd_pixels16_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_no_rnd_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avg_no_rnd_pixels16_x2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_no_rnd_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>avg_no_rnd_pixels16_y2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_no_rnd_pixels_tab</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>avg_no_rnd_pixels16_xy2_axp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels_axp_asm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels_x2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels_y2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels_xy2_axp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels_axp_asm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_no_rnd_pixels_x2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_no_rnd_pixels_y2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>put_no_rnd_pixels_xy2_axp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels_x2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels_y2_axp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels_xy2_axp</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
