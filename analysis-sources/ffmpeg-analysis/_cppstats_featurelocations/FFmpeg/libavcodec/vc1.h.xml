<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vc1.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_VC1_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_VC1_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intrax8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1dsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_VLC_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>



<enum>enum <name>QuantMode</name> <block>{
<decl><name>QUANT_FRAME_IMPLICIT</name></decl>, 
<decl><name>QUANT_FRAME_EXPLICIT</name></decl>, 
<decl><name>QUANT_NON_UNIFORM</name></decl>, 
<decl><name>QUANT_UNIFORM</name></decl> 
}</block>;</enum>




<enum>enum <name>DQProfile</name> <block>{
<decl><name>DQPROFILE_FOUR_EDGES</name></decl>,
<decl><name>DQPROFILE_DOUBLE_EDGES</name></decl>,
<decl><name>DQPROFILE_SINGLE_EDGE</name></decl>,
<decl><name>DQPROFILE_ALL_MBS</name></decl>
}</block>;</enum>





<enum>enum <name>DQSingleEdge</name> <block>{
<decl><name>DQSINGLE_BEDGE_LEFT</name></decl>,
<decl><name>DQSINGLE_BEDGE_TOP</name></decl>,
<decl><name>DQSINGLE_BEDGE_RIGHT</name></decl>,
<decl><name>DQSINGLE_BEDGE_BOTTOM</name></decl>
}</block>;</enum>




<enum>enum <name>DQDoubleEdge</name> <block>{
<decl><name>DQDOUBLE_BEDGE_TOPLEFT</name></decl>,
<decl><name>DQDOUBLE_BEDGE_TOPRIGHT</name></decl>,
<decl><name>DQDOUBLE_BEDGE_BOTTOMRIGHT</name></decl>,
<decl><name>DQDOUBLE_BEDGE_BOTTOMLEFT</name></decl>
}</block>;</enum>




<enum>enum <name>MVModes</name> <block>{
<decl><name>MV_PMODE_1MV_HPEL_BILIN</name></decl>,
<decl><name>MV_PMODE_1MV</name></decl>,
<decl><name>MV_PMODE_1MV_HPEL</name></decl>,
<decl><name>MV_PMODE_MIXED_MV</name></decl>,
<decl><name>MV_PMODE_INTENSITY_COMP</name></decl>
}</block>;</enum>




<enum>enum <name>MBModesIntfr</name> <block>{
<decl><name>MV_PMODE_INTFR_1MV</name></decl>,
<decl><name>MV_PMODE_INTFR_2MV_FIELD</name></decl>,
<decl><name>MV_PMODE_INTFR_2MV</name></decl>,
<decl><name>MV_PMODE_INTFR_4MV_FIELD</name></decl>,
<decl><name>MV_PMODE_INTFR_4MV</name></decl>,
<decl><name>MV_PMODE_INTFR_INTRA</name></decl>,
}</block>;</enum>




<enum>enum <name>BMVTypes</name> <block>{
<decl><name>BMV_TYPE_BACKWARD</name></decl>,
<decl><name>BMV_TYPE_FORWARD</name></decl>,
<decl><name>BMV_TYPE_INTERPOLATED</name></decl>,
<decl><name>BMV_TYPE_DIRECT</name></decl>
}</block>;</enum>




<enum>enum <name>TransformTypes</name> <block>{
<decl><name>TT_8X8</name></decl>,
<decl><name>TT_8X4_BOTTOM</name></decl>,
<decl><name>TT_8X4_TOP</name></decl>,
<decl><name>TT_8X4</name></decl>, 
<decl><name>TT_4X8_RIGHT</name></decl>,
<decl><name>TT_4X8_LEFT</name></decl>,
<decl><name>TT_4X8</name></decl>, 
<decl><name>TT_4X4</name></decl>
}</block>;</enum>


<enum>enum <name>CodingSet</name> <block>{
<decl><name>CS_HIGH_MOT_INTRA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CS_HIGH_MOT_INTER</name></decl>,
<decl><name>CS_LOW_MOT_INTRA</name></decl>,
<decl><name>CS_LOW_MOT_INTER</name></decl>,
<decl><name>CS_MID_RATE_INTRA</name></decl>,
<decl><name>CS_MID_RATE_INTER</name></decl>,
<decl><name>CS_HIGH_RATE_INTRA</name></decl>,
<decl><name>CS_HIGH_RATE_INTER</name></decl>
}</block>;</enum>



<enum>enum <name>COTypes</name> <block>{
<decl><name>CONDOVER_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CONDOVER_ALL</name></decl>,
<decl><name>CONDOVER_SELECT</name></decl>
}</block>;</enum>







<enum>enum <name>FrameCodingMode</name> <block>{
<decl><name>PROGRESSIVE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>ILACE_FRAME</name></decl>, 
<decl><name>ILACE_FIELD</name></decl> 
}</block>;</enum>





<enum>enum <name>Imode</name> <block>{
<decl><name>IMODE_RAW</name></decl>,
<decl><name>IMODE_NORM2</name></decl>,
<decl><name>IMODE_DIFF2</name></decl>,
<decl><name>IMODE_NORM6</name></decl>,
<decl><name>IMODE_DIFF6</name></decl>,
<decl><name>IMODE_ROWSKIP</name></decl>,
<decl><name>IMODE_COLSKIP</name></decl>
}</block>;</enum>






<typedef>typedef <type><struct>struct <name>VC1Context</name><block>{
<decl_stmt><decl><type><name>MpegEncContext</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IntraX8Context</name></type> <name>x8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264ChromaContext</name></type> <name>h264chroma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VC1DSPContext</name></type> <name>vc1dsp</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>res_sprite</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>res_y411</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>res_x8</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>multires</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>res_fasttx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>res_transtab</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>rangered</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>res_rtm_flag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>reserved</name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>chromaformat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>postprocflag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>broadcast</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>interlace</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tfcntrflag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>panscanflag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>refdist_flag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>extended_dmv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>color_prim</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>transfer_char</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>matrix_coef</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>hrd_param_flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>psf</name></decl>;</decl_stmt> 






<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frmrtq_postproc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bitrtq_postproc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>max_coded_width</name></decl>, <name>max_coded_height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fastuvmc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>extended_mv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dquant</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>vstransform</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>overlap</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>quantizer_mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>finterpflag</name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>uint8_t</name></type> <name>mv_mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>mv_mode2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>k_x</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>k_y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>range_x</name></decl>, <name>range_y</name>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pq</name></decl>, <name>altpq</name>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>zz_8x8</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>left_blk_sh</name></decl>, <name>top_blk_sh</name>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>zz_8x4</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>zz_4x8</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint8_t</name></type> <name>dquantfrm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dqprofile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dqsbedge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dqbilevel</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>c_ac_table_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>y_ac_table_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ttfrm</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ttmbf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ttblk_base</name></decl>, <modifier>*</modifier><name>ttblk</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>codingset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>codingset2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pqindex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>a_avail</name></decl>, <name>c_avail</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mb_type_base</name></decl>, <modifier>*</modifier><name><name>mb_type</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>;</decl_stmt>




<decl_stmt><decl><type><name>uint8_t</name></type> <name>lumscale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lumshift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>bfraction</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>halfpq</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>respic</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>buffer_fullness</name></decl>;</decl_stmt> 






<decl_stmt><decl><type><name>uint8_t</name></type> <name>mvrange</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pquantizer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name>cbpcy_vlc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tt_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>mv_type_mb_plane</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>direct_mb_plane</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>forward_mb_plane</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mv_type_is_raw</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dmb_is_raw</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fmb_is_raw</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>skip_is_raw</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>last_luty</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <name><name>last_lutuv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>aux_luty</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <name><name>aux_lutuv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>next_luty</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <name><name>next_lutuv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name>;</decl_stmt> 
<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>curr_luty</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">256</literal></expr>]</index></expr> <operator>,</operator><expr><operator>(</operator><operator>*</operator><name>curr_lutuv</name><operator>)</operator><index>[<expr><literal type="number">256</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_use_ic</name></decl>, <modifier>*</modifier><name>curr_use_ic</name>, <name>next_use_ic</name>, <name>aux_use_ic</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cbptab</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name>rangeredfrm</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>interpfrm</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>enum</name> <name>FrameCodingMode</name></name></type> <name>fcm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>numpanscanwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>tfcntr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>rptfrm</name></decl>, <name>tff</name>, <name>rff</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>topleftx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>toplefty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bottomrightx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bottomrighty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>uvsamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>postproc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hrd_num_leaky_buckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit_rate_exponent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>buffer_size_exponent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>acpred_plane</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>acpred_is_raw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>over_flags_plane</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>overflg_is_raw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>condover</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>hrd_rate</name></decl>, <modifier>*</modifier><name>hrd_buffer</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>hrd_fullness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>range_mapy_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>range_mapuv_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>range_mapy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>range_mapuv</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name></type> <name>dmvrange</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fourmvswitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intcomp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lumscale2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lumshift2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name><modifier>*</modifier></type> <name>mbmode_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name><modifier>*</modifier></type> <name>imv_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name><modifier>*</modifier></type> <name>twomvbp_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name><modifier>*</modifier></type> <name>fourmvbp_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>twomvbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fourmvbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>fieldtx_plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fieldtx_is_raw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>zzi_8x8</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk_mv_type_base</name></decl>, <modifier>*</modifier><name>blk_mv_type</name>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mv_f_base</name></decl>, <modifier>*</modifier><name><name>mv_f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mv_f_next_base</name></decl>, <modifier>*</modifier><name><name>mv_f_next</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>field_mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fptype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>second_field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refdist</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>numref</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>reffield</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>intcompfield</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cur_field_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>ref_field_type</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>blocks_off</name></decl>, <name>mb_off</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qs_last</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bmvtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frfd</name></decl>, <name>brfd</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>first_pic_header_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pic_header_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mbmodetab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>icbptab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>imvtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>twomvbptab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fourmvbptab</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>new_sprite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>two_sprites</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>sprite_output_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_width</name></decl>, <name>output_height</name>, <name>sprite_width</name>, <name>sprite_height</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name><name>sr_rows</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>p_frame_skipped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bi_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x8_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_allocated_blks</name></decl>, <name>cur_blk_idx</name>, <name>left_blk_idx</name>, <name>topleft_blk_idx</name>, <name>top_blk_idx</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cbp_base</name></decl>, <modifier>*</modifier><name>cbp</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>is_intra_base</name></decl>, <modifier>*</modifier><name>is_intra</name>;</decl_stmt>
<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>luma_mv_base</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>luma_mv</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bfraction_lut_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>broken_link</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>closed_entry</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>end_mb_x</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>parse_only</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>resync_marker</name></decl>;</decl_stmt> 
}</block></struct></type> <name>VC1Context</name>;</typedef>








<function_decl><type><name>int</name></type> <name>ff_vc1_decode_sequence_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vc1_decode_entry_point</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vc1_parse_frame_header</name> <parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_vc1_parse_frame_header_adv</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_vc1_init_common</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vc1_decode_init_alloc_tables</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_init_transposed_scantables</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_vc1_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_decode_blocks</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vc1_i_overlap_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_p_overlap_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_i_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_p_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_p_intfr_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_b_intfi_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vc1_mc_1mv</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_mc_4mv_luma</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>avg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_mc_4mv_chroma</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_mc_4mv_chroma4</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>avg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vc1_interp_mc</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
