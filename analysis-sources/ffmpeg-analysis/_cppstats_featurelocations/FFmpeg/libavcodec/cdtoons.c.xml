<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\cdtoons.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDTOONS_HEADER_SIZE</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDTOONS_MAX_SPRITES</name></cpp:macro> <cpp:value>1200</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>CDToonsSprite</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>owner_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>start_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>end_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>alloc_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
}</block></struct></type> <name>CDToonsSprite</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CDToonsContext</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>last_pal_id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CDToonsSprite</name></type> <name><name>sprites</name><index>[<expr><name>CDTOONS_MAX_SPRITES</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CDToonsContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cdtoons_render_sprite</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>data_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dst_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CDToonsContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>next_line</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>data_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>line_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>to_skip</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_x</name> <operator>+</operator> <name>width</name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>dst_x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_y</name> <operator>+</operator> <name>height</name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>dst_y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <operator>-</operator><name>dst_x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <name>skip</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dst_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>next_line</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>data</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line_size</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>data</name> <operator>&lt;</operator> <name>line_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>next_line</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>line_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_y</name> <operator>+</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>dst_y</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dst_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>to_skip</name> <operator>=</operator> <name>skip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <name>skip</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>raw</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>raw</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>to_skip</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_skip</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>raw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>next_line</name> <operator>-</operator> <name>data</name> <operator>&lt;</operator> <name>step</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>to_skip</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>to_skip</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>raw</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>next_line</name> <operator>-</operator> <name>data</name> <operator>&lt;</operator> <name>to_skip</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>to_skip</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>to_skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>size</name> <operator>&gt;=</operator> <name>width</name> <operator>-</operator> <name>skip</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>width</name> <operator>-</operator> <name>skip</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>raw</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>next_line</name> <operator>-</operator> <name>data</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>color</name> <init>= <expr><call><name>bytestream_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cdtoons_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CDToonsContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>eod</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>frame_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>background_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sprite_count</name></decl>, <decl><type ref="prev"/><name>sprite_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>referenced_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>palette_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>palette_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saw_embedded_sprites</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>CDTOONS_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>frame_id</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>background_color</name> <operator>=</operator> <call><name>bytestream_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>sprite_count</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sprite_offset</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>referenced_count</name> <operator>=</operator> <call><name>bytestream_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>palette_id</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>palette_set</name> <operator>=</operator> <call><name>bytestream_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>sprite_offset</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>sprite_count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sprite_id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">14</literal> <operator>&gt;</operator> <name>eod</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sprite_id</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sprite_id</name> <operator>&gt;=</operator> <name>CDTOONS_MAX_SPRITES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Sprite ID %d is too high.\n"</literal></expr></argument>, <argument><expr><name>sprite_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Sprite ID %d is a duplicate.\n"</literal></expr></argument>, <argument><expr><name>sprite_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Sprite only has %d bytes of data.\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>owner_frame</name> <operator>=</operator> <name>frame_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>start_frame</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>end_frame</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>buf_size</name> <operator>||</operator> <name>buf</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name>eod</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>alloc_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>eod</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>eod</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ran (seriously) out of data for embedded sprites.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>bytestream_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>diff_count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">10</literal> <operator>&gt;</operator> <name>eod</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ran (seriously) out of data for Diff frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff_count</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>diff_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>diff_size</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name>eod</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ran (seriously) out of data for Diff frame header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>diff_size</name> <operator>=</operator> <call><name>bytestream_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>diff_size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>diff_size</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> &gt;</argument_list></name> <name>eod</name> <operator>-</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ran (seriously) out of data for Diff frame data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdtoons_render_sprite</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>diff_size</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ran beyond end of sprite while rendering.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>diff_size</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>saw_embedded_sprites</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>size</name> <operator>-</operator> <literal type="number">8</literal></expr></argument> &gt;</argument_list></name> <name>eod</name> <operator>-</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ran out of data for ignored entry (size %X, %d left).\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>eod</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>saw_embedded_sprites</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>CDTOONS_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eod</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>sprite_offset</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>referenced_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sprite_id</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">10</literal> <operator>&gt;</operator> <name>eod</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ran (seriously) out of data when rendering.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sprite_id</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sprite_id</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>background_color</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>right</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sprite_id</name> <operator>&gt;=</operator> <name>CDTOONS_MAX_SPRITES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Sprite ID %d is too high.\n"</literal></expr></argument>, <argument><expr><name>sprite_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block_data</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Sprite %d is missing.\n"</literal></expr></argument>, <argument><expr><name>sprite_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sprite %d is too small.\n"</literal></expr></argument>, <argument><expr><name>sprite_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block_data</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdtoons_render_sprite</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>block_data</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>sprite_id</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>,
<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ran beyond end of sprite while rendering.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>palette_id</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>palette_id</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>last_pal_id</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>palette_id</name> <operator>&gt;=</operator> <name>CDTOONS_MAX_SPRITES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Palette ID %d is too high.\n"</literal></expr></argument>, <argument><expr><name>palette_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>palette_id</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Palette ID %d is missing.\n"</literal></expr></argument>, <argument><expr><name>palette_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>palette_id</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>!=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Palette ID %d is wrong size (%d).\n"</literal></expr></argument>,
<argument><expr><name>palette_id</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>palette_id</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>last_pal_id</name></name> <operator>=</operator> <name>palette_id</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>palette_set</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>palette_data</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>palette_id</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>*</operator><name>palette_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>palette_data</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>palette_data</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>palette_data</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CDTOONS_MAX_SPRITES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_frame</name> <operator>&gt;</operator> <name>frame_id</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cdtoons_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CDToonsContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>last_pal_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cdtoons_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CDToonsContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>last_pal_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CDTOONS_MAX_SPRITES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cdtoons_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CDToonsContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CDTOONS_MAX_SPRITES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sprites</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_cdtoons_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"cdtoons"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"CDToons video"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_CDTOONS</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CDToonsContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>cdtoons_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>cdtoons_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>cdtoons_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>cdtoons_flush</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
