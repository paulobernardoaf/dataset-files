<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\libvpxenc.c">
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPX_DISABLE_CTRL_TYPECHECKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPX_CODEC_DISABLE_COMPAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vpx/vpx_encoder.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vpx/vp8cx.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvpx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>





<struct>struct <name>FrameListData</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sz_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>sse</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_sse</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>VPxEncoderContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vpx_codec_ctx</name></name></type> <name>encoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vpx_image</name></name></type> <name>rawimg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vpx_codec_ctx</name></name></type> <name>encoder_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vpx_image</name></name></type> <name>rawimg_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>is_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vpx_fixed_buf</name></name></type> <name>twopass_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deadline</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>sse</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_sse</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>coded_frame_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sharpness</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8F_ERROR_RESILIENT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8F_AUTO_ALT_REF</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>auto_alt_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arnr_max_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arnr_strength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arnr_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tune</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lag_in_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_resilient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>static_thresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_intra_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc_undershoot_pct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc_overshoot_pct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>vpx_ts_parameters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ts_layer_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_temporal_idx</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>lossless</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_parallel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aq_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drop_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noise_sensitivity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vpx_cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row_mt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tune_content</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>corpus_complexity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tpl_model</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>roi_warned</name></decl>;</decl_stmt>
}</block></struct></type> <name>VPxContext</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ctlidstr</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>VP8E_SET_CPUUSED</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_CPUUSED"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_ENABLEAUTOALTREF</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_ENABLEAUTOALTREF"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_NOISE_SENSITIVITY</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_NOISE_SENSITIVITY"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_STATIC_THRESHOLD</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_STATIC_THRESHOLD"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_TOKEN_PARTITIONS</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_TOKEN_PARTITIONS"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_ARNR_MAXFRAMES</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_ARNR_MAXFRAMES"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_ARNR_STRENGTH</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_ARNR_STRENGTH"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_ARNR_TYPE</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_ARNR_TYPE"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_TUNING</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_TUNING"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_CQ_LEVEL</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_CQ_LEVEL"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_MAX_INTRA_BITRATE_PCT</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_MAX_INTRA_BITRATE_PCT"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_SHARPNESS</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_SHARPNESS"</literal></expr>,
<expr><index>[<expr><name>VP8E_SET_TEMPORAL_LAYER_ID</name></expr>]</index> <operator>=</operator> <literal type="string">"VP8E_SET_TEMPORAL_LAYER_ID"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<expr><index>[<expr><name>VP9E_SET_LOSSLESS</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_LOSSLESS"</literal></expr>,
<expr><index>[<expr><name>VP9E_SET_TILE_COLUMNS</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_TILE_COLUMNS"</literal></expr>,
<expr><index>[<expr><name>VP9E_SET_TILE_ROWS</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_TILE_ROWS"</literal></expr>,
<expr><index>[<expr><name>VP9E_SET_FRAME_PARALLEL_DECODING</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_FRAME_PARALLEL_DECODING"</literal></expr>,
<expr><index>[<expr><name>VP9E_SET_AQ_MODE</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_AQ_MODE"</literal></expr>,
<expr><index>[<expr><name>VP9E_SET_COLOR_SPACE</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_COLOR_SPACE"</literal></expr>,
<expr><index>[<expr><name>VP9E_SET_SVC_LAYER_ID</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_SVC_LAYER_ID"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr></cpp:if>
<expr><index>[<expr><name>VP9E_SET_SVC_PARAMETERS</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_SVC_PARAMETERS"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><index>[<expr><name>VP9E_SET_SVC</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_SVC"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">11</literal></expr></cpp:if>
<expr><index>[<expr><name>VP9E_SET_COLOR_RANGE</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_COLOR_RANGE"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr></cpp:if>
<expr><index>[<expr><name>VP9E_SET_TARGET_LEVEL</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_TARGET_LEVEL"</literal></expr>,
<expr><index>[<expr><name>VP9E_GET_LEVEL</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_GET_LEVEL"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_ROW_MT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>VP9E_SET_ROW_MT</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_ROW_MT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_TUNE_CONTENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>VP9E_SET_TUNE_CONTENT</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_TUNE_CONTENT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_TPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>VP9E_SET_TPL</name></expr>]</index> <operator>=</operator> <literal type="string">"VP9E_SET_TPL"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>log_encoder_error</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>vpx_codec_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>detail</name> <init>= <expr><call><name>vpx_codec_error_detail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>detail</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Additional information: %s\n"</literal></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>dump_enc_cfg</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vpx_codec_enc_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>-</operator><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name>AV_LOG_DEBUG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"vpx_codec_enc_cfg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"generic settings\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n %*s%u\n %*s%u\n %*s%u\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<literal type="string">" %*s%u\n %*s%u\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">" %*s{%u/%u}\n %*s%u\n %*s%d\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_usage:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_usage</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_threads:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_threads</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_profile:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_profile</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_w:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_w</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_h:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_h</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_bit_depth:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_input_bit_depth:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_input_bit_depth</name></name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_timebase:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_timebase</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_timebase</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_error_resilient:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_error_resilient</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_pass:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_pass</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_lag_in_frames:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_lag_in_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"rate control settings\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n %*s%u\n %*s%u\n"</literal>
<literal type="string">" %*s%d\n %*s%p(%"</literal><name>SIZE_SPECIFIER</name><literal type="string">")\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_dropframe_thresh:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_dropframe_thresh</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_resize_allowed:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_resize_allowed</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_resize_up_thresh:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_resize_up_thresh</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_resize_down_thresh:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_resize_down_thresh</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_end_usage:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_end_usage</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_twopass_stats_in:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_twopass_stats_in</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_twopass_stats_in</name><operator>.</operator><name>sz</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_target_bitrate:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_target_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"quantizer settings\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_min_quantizer:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_min_quantizer</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_max_quantizer:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_max_quantizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"bitrate tolerance\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_undershoot_pct:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_undershoot_pct</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_overshoot_pct:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_overshoot_pct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"temporal layering settings\n"</literal>
<literal type="string">" %*s%u\n"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"ts_number_layers:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_number_layers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,
<argument><expr><literal type="string">"\n %*s"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"ts_target_bitrate:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VPX_TS_MAX_LAYERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,
<argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_target_bitrate</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,
<argument><expr><literal type="string">"\n %*s"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"layer_target_bitrate:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VPX_TS_MAX_LAYERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,
<argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>layer_target_bitrate</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,
<argument><expr><literal type="string">"\n %*s"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"ts_rate_decimator:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VPX_TS_MAX_LAYERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_rate_decimator</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,
<argument><expr><literal type="string">"\n %*s%u\n"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"ts_periodicity:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_periodicity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>,
<argument><expr><literal type="string">"\n %*s"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"ts_layer_id:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VPX_TS_MAX_PERIODICITY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_layer_id</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"decoder buffer model\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_buf_sz:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_buf_sz</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_buf_initial_sz:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_buf_initial_sz</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_buf_optimal_sz:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_buf_optimal_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"2 pass rate control settings\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_2pass_vbr_bias_pct:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_2pass_vbr_bias_pct</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_2pass_vbr_minsection_pct:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_2pass_vbr_minsection_pct</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_2pass_vbr_maxsection_pct:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_2pass_vbr_maxsection_pct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr></cpp:if>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">" %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_2pass_vbr_corpus_complexity:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_2pass_vbr_corpus_complexity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"keyframing settings\n"</literal>
<literal type="string">" %*s%d\n %*s%u\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"kf_mode:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>kf_mode</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"kf_min_dist:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>kf_min_dist</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"kf_max_dist:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>kf_max_dist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>coded_frame_add</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>cx_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><name>list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>cx_frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>free_coded_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>cx_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cx_frame</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cx_frame</name><operator>-&gt;</operator><name>buf_alpha</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cx_frame</name><operator>-&gt;</operator><name>buf_alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>free_frame_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_coded_frame</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>codecctl_int</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vp8e_enc_control_id</name></name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>-</operator><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:"</literal></expr></argument>, <argument><expr><name><name>ctlidstr</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %*s%d\n"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vpx_codec_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>VPX_CODEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Failed to set %s codec control"</literal></expr></argument>,
<argument><expr><name><name>ctlidstr</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>res</name> <operator>==</operator> <name>VPX_CODEC_OK</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>codecctl_intp</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>vp8e_enc_control_id</name></name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>-</operator><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:"</literal></expr></argument>, <argument><expr><name><name>ctlidstr</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %*s%d\n"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vpx_codec_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>VPX_CODEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Failed to set %s codec control"</literal></expr></argument>,
<argument><expr><name><name>ctlidstr</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>res</name> <operator>==</operator> <name>VPX_CODEC_OK</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vpx_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>codecctl_intp</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_GET_LEVEL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level_out</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Encoded level %.1f\n"</literal></expr></argument>, <argument><expr><name>level_out</name> <operator>*</operator> <literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ts_layer_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vpx_codec_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vpx_codec_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder_alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rawimg_alpha</name><operator>.</operator><name>planes</name><index>[<expr><name>VPX_PLANE_U</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rawimg_alpha</name><operator>.</operator><name>planes</name><index>[<expr><name>VPX_PLANE_V</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_frame_list</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp8_ts_parse_int_array</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>value_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dest_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saveptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>av_strtok</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>token</name> <operator>&amp;&amp;</operator> <name>dest_idx</name> <operator>&lt;</operator> <name>max_entries</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>dest_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_temporal_layer_pattern</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>layering_mode</name></decl></parameter>, <parameter><decl><type><name>vpx_codec_enc_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>layer_flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flag_periodicity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>layering_mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ids</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_periodicity</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flag_periodicity</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_number_layers</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_rate_decimator</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_rate_decimator</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_layer_id</name></name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layer_flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name>VP8_EFLAG_NO_REF_GF</name> <operator>|</operator> <name>VP8_EFLAG_NO_REF_ARF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_GF</name> <operator>|</operator> <name>VP8_EFLAG_NO_UPD_ARF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer_flags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name>VP8_EFLAG_NO_UPD_ARF</name> <operator>|</operator> <name>VP8_EFLAG_NO_UPD_GF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_LAST</name> <operator>|</operator>
<name>VP8_EFLAG_NO_REF_ARF</name> <operator>|</operator> <name>VP8_EFLAG_NO_REF_GF</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">3</literal></expr>:</case> <block>{<block_content>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ids</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_periodicity</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flag_periodicity</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_number_layers</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_rate_decimator</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_rate_decimator</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_rate_decimator</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_layer_id</name></name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>layer_flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name>VP8_EFLAG_NO_REF_GF</name> <operator>|</operator> <name>VP8_EFLAG_NO_REF_ARF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_GF</name> <operator>|</operator> <name>VP8_EFLAG_NO_UPD_ARF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer_flags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name>VP8_EFLAG_NO_REF_GF</name> <operator>|</operator> <name>VP8_EFLAG_NO_REF_ARF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_LAST</name> <operator>|</operator> <name>VP8_EFLAG_NO_UPD_GF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_ARF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer_flags</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<name>VP8_EFLAG_NO_REF_GF</name> <operator>|</operator> <name>VP8_EFLAG_NO_REF_ARF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_ARF</name> <operator>|</operator> <name>VP8_EFLAG_NO_UPD_LAST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer_flags</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>
<name>VP8_EFLAG_NO_REF_LAST</name> <operator>|</operator> <name>VP8_EFLAG_NO_REF_ARF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_LAST</name> <operator>|</operator> <name>VP8_EFLAG_NO_UPD_GF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_ARF</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">4</literal></expr>:</case> <block>{<block_content>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ids</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_periodicity</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flag_periodicity</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_number_layers</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_rate_decimator</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_rate_decimator</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_rate_decimator</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>ts_layer_id</name></name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>layer_flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name>VP8_EFLAG_NO_REF_GF</name> <operator>|</operator> <name>VP8_EFLAG_NO_REF_ARF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_GF</name> <operator>|</operator> <name>VP8_EFLAG_NO_UPD_ARF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer_flags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name>VP8_EFLAG_NO_REF_GF</name> <operator>|</operator> <name>VP8_EFLAG_NO_REF_ARF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_LAST</name> <operator>|</operator> <name>VP8_EFLAG_NO_UPD_GF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer_flags</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<name>VP8_EFLAG_NO_REF_GF</name> <operator>|</operator> <name>VP8_EFLAG_NO_REF_ARF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_ARF</name> <operator>|</operator> <name>VP8_EFLAG_NO_UPD_LAST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer_flags</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>
<name>VP8_EFLAG_NO_REF_LAST</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_LAST</name> <operator>|</operator> <name>VP8_EFLAG_NO_UPD_GF</name> <operator>|</operator>
<name>VP8_EFLAG_NO_UPD_ARF</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default>




<break>break;</break>

</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vpx_ts_param_parse</name><parameter_list>(<parameter><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vpx_codec_enc_cfg</name></name> <modifier>*</modifier></type><name>enccfg</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>value_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ts_layering_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value_len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ts_number_layers"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>ts_number_layers</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ts_target_bitrate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vp8_ts_parse_int_array</name><argument_list>(<argument><expr><name><name>enccfg</name><operator>-&gt;</operator><name>ts_target_bitrate</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>, <argument><expr><name>VPX_TS_MAX_LAYERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vp8_ts_parse_int_array</name><argument_list>(<argument><expr><name><name>enccfg</name><operator>-&gt;</operator><name>layer_target_bitrate</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>, <argument><expr><name>VPX_TS_MAX_LAYERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ts_rate_decimator"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vp8_ts_parse_int_array</name><argument_list>(<argument><expr><name><name>enccfg</name><operator>-&gt;</operator><name>ts_rate_decimator</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>, <argument><expr><name>VPX_TS_MAX_LAYERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ts_periodicity"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>ts_periodicity</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ts_layer_id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vp8_ts_parse_int_array</name><argument_list>(<argument><expr><name><name>enccfg</name><operator>-&gt;</operator><name>ts_layer_id</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>, <argument><expr><name>VPX_TS_MAX_PERIODICITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ts_layering_mode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ts_layering_mode</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>temporal_layering_mode</name></name> <operator>=</operator> <name>VP9E_TEMPORAL_LAYERING_MODE_BYPASS</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>ss_number_layers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>ts_layering_mode</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ts_layer_flags</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>VPX_TS_MAX_PERIODICITY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>ts_layer_flags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_temporal_layer_pattern</name><argument_list>(<argument><expr><name>ts_layering_mode</name></expr></argument>, <argument><expr><name>enccfg</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ts_layer_flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>enccfg</name><operator>-&gt;</operator><name>ts_periodicity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>set_pix_fmt</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>vpx_codec_caps_t</name></type> <name>codec_caps</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vpx_codec_enc_cfg</name></name> <modifier>*</modifier></type><name>enccfg</name></decl></parameter>, <parameter><decl><type><name>vpx_codec_flags_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>,
<parameter><decl><type><name>vpx_img_fmt_t</name> <modifier>*</modifier></type><name>img_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <name>av_unused</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name> <operator>=</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>g_input_bit_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P</name></expr>:</case>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>VPX_IMG_FMT_I420</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>VPX_IMG_FMT_I422</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_YUV440P</name></expr>:</case>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>VPX_IMG_FMT_I440</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vpx_cs</name></name> <operator>=</operator> <name>VPX_CS_SRGB</name></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>VPX_IMG_FMT_I444</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_YUV420P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P12</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>codec_caps</name> <operator>&amp;</operator> <name>VPX_CODEC_CAP_HIGHBITDEPTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name> <operator>=</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>g_input_bit_depth</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P10</name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>VPX_IMG_FMT_I42016</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>VPX_CODEC_USE_HIGHBITDEPTH</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV422P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P12</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>codec_caps</name> <operator>&amp;</operator> <name>VPX_CODEC_CAP_HIGHBITDEPTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name> <operator>=</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>g_input_bit_depth</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P10</name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>VPX_IMG_FMT_I42216</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>VPX_CODEC_USE_HIGHBITDEPTH</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV440P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P12</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>codec_caps</name> <operator>&amp;</operator> <name>VPX_CODEC_CAP_HIGHBITDEPTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name> <operator>=</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>g_input_bit_depth</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV440P10</name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>VPX_IMG_FMT_I44016</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>VPX_CODEC_USE_HIGHBITDEPTH</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRP10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12</name></expr>:</case>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vpx_cs</name></name> <operator>=</operator> <name>VPX_CS_SRGB</name></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_YUV444P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P12</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>codec_caps</name> <operator>&amp;</operator> <name>VPX_CODEC_CAP_HIGHBITDEPTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name> <operator>=</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>g_input_bit_depth</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P10</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBRP10</name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>VPX_IMG_FMT_I44416</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>VPX_CODEC_USE_HIGHBITDEPTH</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_colorspace</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>vpx_color_space</name></name></type> <name>vpx_cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>vpx_cs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vpx_cs</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>vpx_cs</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_SPC_RGB</name></expr>:</case> <expr_stmt><expr><name>vpx_cs</name> <operator>=</operator> <name>VPX_CS_SRGB</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_SPC_BT709</name></expr>:</case> <expr_stmt><expr><name>vpx_cs</name> <operator>=</operator> <name>VPX_CS_BT_709</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_SPC_UNSPECIFIED</name></expr>:</case> <expr_stmt><expr><name>vpx_cs</name> <operator>=</operator> <name>VPX_CS_UNKNOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_SPC_RESERVED</name></expr>:</case> <expr_stmt><expr><name>vpx_cs</name> <operator>=</operator> <name>VPX_CS_RESERVED</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_SPC_BT470BG</name></expr>:</case> <expr_stmt><expr><name>vpx_cs</name> <operator>=</operator> <name>VPX_CS_BT_601</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_SPC_SMPTE170M</name></expr>:</case> <expr_stmt><expr><name>vpx_cs</name> <operator>=</operator> <name>VPX_CS_SMPTE_170</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_SPC_SMPTE240M</name></expr>:</case> <expr_stmt><expr><name>vpx_cs</name> <operator>=</operator> <name>VPX_CS_SMPTE_240</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_SPC_BT2020_NCL</name></expr>:</case> <expr_stmt><expr><name>vpx_cs</name> <operator>=</operator> <name>VPX_CS_BT_2020</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported colorspace (%d)\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_COLOR_SPACE</name></expr></argument>, <argument><expr><name>vpx_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">11</literal></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_color_range</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>vpx_color_range</name></name></type> <name>vpx_cr</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_RANGE_UNSPECIFIED</name></expr>:</case>
<case>case <expr><name>AVCOL_RANGE_MPEG</name></expr>:</case> <expr_stmt><expr><name>vpx_cr</name> <operator>=</operator> <name>VPX_CR_STUDIO_RANGE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_RANGE_JPEG</name></expr>:</case> <expr_stmt><expr><name>vpx_cr</name> <operator>=</operator> <name>VPX_CR_FULL_RANGE</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported color range (%d)\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_COLOR_RANGE</name></expr></argument>, <argument><expr><name>vpx_cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type> <name>set_vp8_defaults</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vpx_codec_enc_cfg</name></name> <modifier>*</modifier></type><name>enccfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>rc_target_bitrate</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enccfg</name><operator>-&gt;</operator><name>rc_end_usage</name></name> <operator>==</operator> <name>VPX_CQ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Bitrate not specified for constrained quality mode, using default of %dkbit/sec\n"</literal></expr></argument>,
<argument><expr><name><name>enccfg</name><operator>-&gt;</operator><name>rc_target_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>rc_end_usage</name></name> <operator>=</operator> <name>VPX_CQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Neither bitrate nor constrained quality specified, using default CRF of %d and bitrate of %dkbit/sec\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name></expr></argument>, <argument><expr><name><name>enccfg</name><operator>-&gt;</operator><name>rc_target_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type> <name>set_vp9_defaults</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vpx_codec_enc_cfg</name></name> <modifier>*</modifier></type><name>enccfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enccfg</name><operator>-&gt;</operator><name>rc_end_usage</name></name> <operator>!=</operator> <name>VPX_Q</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lossless</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>rc_end_usage</name></name> <operator>=</operator> <name>VPX_Q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Neither bitrate nor constrained quality specified, using default CRF of %d\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type> <name>set_vpx_defaults</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>vpx_codec_enc_cfg</name></name> <modifier>*</modifier></type><name>enccfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_vp9_defaults</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>set_vp8_defaults</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vpx_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vpx_codec_iface</name></name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vpx_codec_enc_cfg</name></name></type> <name>enccfg</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vpx_codec_enc_cfg</name></name></type> <name>enccfg_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vpx_codec_flags_t</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PSNR</name><operator>)</operator></expr> ?</condition><then> <expr><name>VPX_CODEC_USE_PSNR</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>cpb_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vpx_img_fmt_t</name></type> <name>img_fmt</name> <init>= <expr><name>VPX_IMG_FMT_I420</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>vpx_codec_caps_t</name></type> <name>codec_caps</name> <init>= <expr><call><name>vpx_codec_get_caps</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vpx_svc_extra_cfg_t</name></type> <name>svc_params</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>AVDictionaryEntry</name><modifier>*</modifier></type> <name>en</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>vpx_codec_version_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>vpx_codec_build_config</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_alpha</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>vpx_codec_enc_config_default</name><argument_list>(<argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>VPX_CODEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get config: %s\n"</literal></expr></argument>,
<argument><expr><call><name>vpx_codec_err_to_string</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>set_pix_fmt</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>codec_caps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>img_fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>( <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Rate control parameters set without a bitrate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dump_enc_cfg</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_w</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_h</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_timebase</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_timebase</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_threads</name></name> <operator>=</operator>
<call><name>FFMIN</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr> </then><else>: <expr><call><name>av_cpu_count</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_lag_in_frames</name></name><operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lag_in_frames</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>=</operator> <name>VPX_RC_FIRST_PASS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>=</operator> <name>VPX_RC_LAST_PASS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>=</operator> <name>VPX_RC_ONE_PASS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>=</operator> <name>VPX_CBR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>=</operator> <name>VPX_CQ</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>=</operator> <name>VPX_Q</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_target_bitrate</name></name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>,
<argument><expr><name>AV_ROUND_NEAR_INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>ss_target_bitrate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>enccfg</name><operator>.</operator><name>rc_target_bitrate</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_vpx_defaults</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lossless</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_min_quantizer</name></name> <operator>=</operator>
<name><name>enccfg</name><operator>.</operator><name>rc_max_quantizer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_min_quantizer</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_max_quantizer</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>==</operator> <name>VPX_CQ</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<operator>||</operator> <name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>==</operator> <name>VPX_Q</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name> <operator>&lt;</operator> <name><name>enccfg</name><operator>.</operator><name>rc_min_quantizer</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name> <operator>&gt;</operator> <name><name>enccfg</name><operator>.</operator><name>rc_max_quantizer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"CQ level %d must be between minimum and maximum quantizer value (%d-%d)\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name></expr></argument>, <argument><expr><name><name>enccfg</name><operator>.</operator><name>rc_min_quantizer</name></name></expr></argument>, <argument><expr><name><name>enccfg</name><operator>.</operator><name>rc_max_quantizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_skip_threshold</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>drop_threshold</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_skip_threshold</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>enccfg</name><operator>.</operator><name>rc_dropframe_thresh</name></name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>drop_threshold</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_2pass_vbr_bias_pct</name></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>qcompress</name></name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_2pass_vbr_minsection_pct</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>*</operator> <literal type="number">100LL</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_2pass_vbr_maxsection_pct</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>*</operator> <literal type="number">100LL</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>corpus_complexity</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_2pass_vbr_corpus_complexity</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>corpus_complexity</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_buf_sz</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>*</operator> <literal type="number">1000LL</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_buf_initial_sz</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>*</operator> <literal type="number">1000LL</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_buf_optimal_sz</name></name> <operator>=</operator> <name><name>enccfg</name><operator>.</operator><name>rc_buf_sz</name></name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_undershoot_pct</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_undershoot_pct</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc_undershoot_pct</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_overshoot_pct</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_overshoot_pct</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc_overshoot_pct</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>kf_min_dist</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>kf_max_dist</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>==</operator> <name>VPX_RC_FIRST_PASS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_lag_in_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>==</operator> <name>VPX_RC_LAST_PASS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>decode_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No stats file for second pass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Stat buffer alloc (%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" bytes) failed\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>decode_size</name> <operator>=</operator> <call><name>av_base64_decode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>decode_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stat buffer decode failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name> <operator>=</operator> <name>decode_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_twopass_stats_in</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_profile</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_error_resilient</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>error_resilient</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VP8F_ERROR_RESILIENT</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>en</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vpx_ts_parameters</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>en</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vpx_ts_param_parse</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Error parsing option '%s = %s'.\n"</literal></expr></argument>,
<argument><expr><name><name>en</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>dump_enc_cfg</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vpx_codec_enc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>VPX_CODEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize encoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name> <operator>&amp;&amp;</operator> <name><name>enccfg</name><operator>.</operator><name>ts_number_layers</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>svc_params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svc_params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>enccfg</name><operator>.</operator><name>ts_number_layers</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>svc_params</name><operator>.</operator><name>max_quantizers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>enccfg</name><operator>.</operator><name>rc_max_quantizer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>svc_params</name><operator>.</operator><name>min_quantizers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>enccfg</name><operator>.</operator><name>rc_min_quantizer</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>svc_params</name><operator>.</operator><name>scaling_factor_num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>enccfg</name><operator>.</operator><name>g_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>svc_params</name><operator>.</operator><name>scaling_factor_den</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>enccfg</name><operator>.</operator><name>g_h</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr></cpp:if>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_SVC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>codecctl_intp</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_SVC_PARAMETERS</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>svc_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enccfg_alpha</name> <operator>=</operator> <name>enccfg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vpx_codec_enc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder_alpha</name></name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg_alpha</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>VPX_CODEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize alpha encoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"vpx_codec_control\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_CPUUSED</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpu_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VP8F_AUTO_ALT_REF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>auto_alt_ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>auto_alt_ref</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_ENABLEAUTOALTREF</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr> ?</condition><then> <expr><operator>!</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>auto_alt_ref</name></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>auto_alt_ref</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>arnr_max_frames</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_ARNR_MAXFRAMES</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>arnr_max_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>arnr_strength</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_ARNR_STRENGTH</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>arnr_strength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>arnr_type</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_ARNR_TYPE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>arnr_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tune</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_TUNING</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tune</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>auto_alt_ref</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_alpha</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Transparency encoding with auto_alt_ref does not work\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sharpness</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_SHARPNESS</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sharpness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_LIBVPX_VP8_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>noise_sensitivity</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_NOISE_SENSITIVITY</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>noise_sensitivity</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_TOKEN_PARTITIONS</name></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_STATIC_THRESHOLD</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>static_thresh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_CQ_LEVEL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>max_intra_rate</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_MAX_INTRA_BITRATE_PCT</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_intra_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>lossless</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_LOSSLESS</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lossless</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_columns</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_TILE_COLUMNS</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_TILE_ROWS</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_parallel</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_FRAME_PARALLEL_DECODING</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_parallel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>aq_mode</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_AQ_MODE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>aq_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_colorspace</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">11</literal></expr></cpp:if>
<expr_stmt><expr><call><name>set_color_range</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr></cpp:if>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_TARGET_LEVEL</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><call><name>lrint</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_ROW_MT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>row_mt</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_ROW_MT</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>row_mt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_TUNE_CONTENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tune_content</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_TUNE_CONTENT</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tune_content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_TPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tpl_model</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_TPL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tpl_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using deadline: %d\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>deadline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vpx_img_wrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rawimg</name></name></expr></argument>, <argument><expr><name>img_fmt</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>codec_caps</name> <operator>&amp;</operator> <name>VPX_CODEC_CAP_HIGHBITDEPTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rawimg</name><operator>.</operator><name>bit_depth</name></name> <operator>=</operator> <name><name>enccfg</name><operator>.</operator><name>g_bit_depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>cpb_props</name> <operator>=</operator> <call><name>ff_add_cpb_side_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpb_props</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>==</operator> <name>VPX_CBR</name> <operator>||</operator>
<name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>!=</operator> <name>VPX_RC_ONE_PASS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>max_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>min_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>avg_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cx_pktcpy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vpx_codec_cx_pkt</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vpx_codec_cx_pkt</name></name> <modifier>*</modifier></type><name>src_alpha</name></decl></parameter>,
<parameter><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>duration</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sz</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>sz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>have_sse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VPX_FRAME_IS_INVISIBLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>=</operator> <operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>have_sse</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>have_sse</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>have_sse</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>sse</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sse</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>sse</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>have_sse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>src_alpha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>buf_alpha</name></name> <operator>=</operator> <name><name>src_alpha</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sz_alpha</name></name> <operator>=</operator> <name><name>src_alpha</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>sz</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>buf_alpha</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sz_alpha</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>storeframe</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>cx_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pict_type</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>cx_frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pts</name></name> <init>= <expr><name><name>cx_frame</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>cx_frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VPX_FRAME_IS_KEY</name><operator>)</operator></expr>;</expr_stmt>
<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>cx_frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VPX_FRAME_IS_KEY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>pict_type</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>pict_type</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_side_data_set_encoder_stats</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sse</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>have_sse</name></name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>pict_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cx_frame</name><operator>-&gt;</operator><name>have_sse</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <init>= <expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>error</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cx_frame</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>error</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cx_frame</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>error</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>error</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>cx_frame</name><operator>-&gt;</operator><name>sse</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>have_sse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz_alpha</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL</name></expr></argument>,
<argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz_alpha</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>side_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name>side_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>side_data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>buf_alpha</name></name></expr></argument>, <argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz_alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>queue_frames</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vpx_codec_cx_pkt</name></name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vpx_codec_cx_pkt</name></name> <modifier>*</modifier></type><name>pkt_alpha</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter_alpha</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>cx_frame</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>storeframe</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>cx_frame</name></expr></argument>, <argument><expr><name>pkt_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name> <operator>=</operator> <name><name>cx_frame</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_coded_frame</name><argument_list>(<argument><expr><name>cx_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><operator>(</operator><name>pkt</name> <operator>=</operator> <call><name>vpx_codec_get_cx_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_alpha</name></name> <operator>||</operator>
<operator>(</operator><name>pkt_alpha</name> <operator>=</operator> <call><name>vpx_codec_get_cx_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder_alpha</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter_alpha</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VPX_CODEC_CX_FRAME_PKT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name></type> <name>cx_frame</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cx_pktcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx_frame</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>pkt_alpha</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>storeframe</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx_frame</name></expr></argument>, <argument><expr><name>pkt_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>cx_frame</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cx_frame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cx_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Frame queue element alloc failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cx_pktcpy</name><argument_list>(<argument><expr><name>cx_frame</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>pkt_alpha</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cx_frame</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Data buffer alloc (%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" bytes) failed\n"</literal></expr></argument>,
<argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>buf_alpha</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz_alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cx_frame</name><operator>-&gt;</operator><name>buf_alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Data buffer alloc (%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" bytes) failed\n"</literal></expr></argument>,
<argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz_alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>cx_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>buf_alpha</name></name></expr></argument>, <argument><expr><name><name>pkt_alpha</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pkt_alpha</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>coded_frame_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name></expr></argument>, <argument><expr><name>cx_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>VPX_CODEC_STATS_PKT</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vpx_fixed_buf</name></name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>sz</name></name> <operator>+</operator>
<name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stat buffer realloc failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>stats</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>stats</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>twopass_stats</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>sz</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>VPX_CODEC_PSNR_PKT</name></expr>:</case>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>have_sse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>psnr</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>psnr</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>psnr</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>psnr</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>have_sse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VPX_CODEC_CUSTOM_PKT</name></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_roi_map</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_height</name></decl></parameter>,
<parameter><decl><type><name>vpx_roi_map_t</name> <modifier>*</modifier></type><name>roi_map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segment_cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DELTA_Q</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVRegionOfInterest</name> <modifier>*</modifier></type><name>roi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_rois</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>self_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>segment_id</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>int</name></type> <name><name>segment_mapping</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MAX_DELTA_Q</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>roi_map</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>roi_map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>segment_mapping</name><index>[<expr><name>MAX_DELTA_Q</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>segment_id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>roi</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVRegionOfInterest</name><operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>self_size</name> <operator>=</operator> <name><name>roi</name><operator>-&gt;</operator><name>self_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>self_size</name> <operator>||</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>%</operator> <name>self_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid AVRegionOfInterest.self_size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nb_rois</name> <operator>=</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name>self_size</name></expr>;</expr_stmt>





<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_rois</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta_q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mapping_index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>roi</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVRegionOfInterest</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>self_size</name> <operator>*</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>roi</name><operator>-&gt;</operator><name>qoffset</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AVRegionOfInterest.qoffset.den must not be zero.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta_q</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>roi</name><operator>-&gt;</operator><name>qoffset</name><operator>.</operator><name>num</name></name> <operator>*</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name><name>roi</name><operator>-&gt;</operator><name>qoffset</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name>MAX_DELTA_Q</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>delta_q</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>delta_q</name></expr></argument>, <argument><expr><operator>-</operator><name>MAX_DELTA_Q</name></expr></argument>, <argument><expr><name>MAX_DELTA_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mapping_index</name> <operator>=</operator> <name>delta_q</name> <operator>+</operator> <name>MAX_DELTA_Q</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>segment_mapping</name><index>[<expr><name>mapping_index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>segment_id</name> <operator>==</operator> <name>segment_cnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"ROI only supports %d segments (and segment 0 is reserved for non-ROIs), skipping the left ones.\n"</literal></expr></argument>,
<argument><expr><name>segment_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>segment_mapping</name><index>[<expr><name>mapping_index</name></expr>]</index></name> <operator>=</operator> <name>segment_id</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>roi_map</name><operator>-&gt;</operator><name>delta_q</name><index>[<expr><name>segment_id</name></expr>]</index></name> <operator>=</operator> <name>delta_q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>segment_id</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>roi_map</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <operator>(</operator><name>frame_height</name> <operator>+</operator> <name>block_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>block_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>roi_map</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <operator>(</operator><name>frame_width</name> <operator>+</operator> <name>block_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>block_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>roi_map</name><operator>-&gt;</operator><name>roi_map</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>roi_map</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <name><name>roi_map</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>roi_map</name><operator>-&gt;</operator><name>roi_map</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>roi_map</name><operator>-&gt;</operator><name>roi_map</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"roi_map alloc failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>nb_rois</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta_q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mapping_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>starty</name></decl>, <decl><type ref="prev"/><name>endy</name></decl>, <decl><type ref="prev"/><name>startx</name></decl>, <decl><type ref="prev"/><name>endx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>roi</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVRegionOfInterest</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>self_size</name> <operator>*</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>starty</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>roi</name><operator>-&gt;</operator><name>top</name></name> <operator>/</operator> <name>block_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>roi_map</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>endy</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>roi</name><operator>-&gt;</operator><name>bottom</name></name> <operator>+</operator> <name>block_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>block_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>roi_map</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>startx</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>roi</name><operator>-&gt;</operator><name>left</name></name> <operator>/</operator> <name>block_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>roi_map</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>endx</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>roi</name><operator>-&gt;</operator><name>right</name></name> <operator>+</operator> <name>block_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>block_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>roi_map</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta_q</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>roi</name><operator>-&gt;</operator><name>qoffset</name><operator>.</operator><name>num</name></name> <operator>*</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name><name>roi</name><operator>-&gt;</operator><name>qoffset</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name>MAX_DELTA_Q</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>delta_q</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>delta_q</name></expr></argument>, <argument><expr><operator>-</operator><name>MAX_DELTA_Q</name></expr></argument>, <argument><expr><name>MAX_DELTA_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mapping_value</name> <operator>=</operator> <name><name>segment_mapping</name><index>[<expr><name>delta_q</name> <operator>+</operator> <name>MAX_DELTA_Q</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mapping_value</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>starty</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>endy</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>startx</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>endx</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>roi_map</name><operator>-&gt;</operator><name>roi_map</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>roi_map</name><operator>-&gt;</operator><name>cols</name></name></expr>]</index></name> <operator>=</operator> <name>mapping_value</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp9_encode_set_roi</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_ROI_MAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name>vpx_codec_version</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name> <init>= <expr><call><name>VPX_VERSION_MAJOR</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name> <init>= <expr><call><name>VPX_VERSION_MINOR</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>patch</name> <init>= <expr><call><name>VPX_VERSION_PATCH</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>major</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>patch</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>vpx_roi_map_t</name></type> <name>roi_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>segment_cnt</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>aq_mode</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cpu_used</name></name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>deadline</name></name> <operator>!=</operator> <name>VPX_DL_REALTIME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>roi_warned</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_warned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ROI is only enabled when aq_mode is 0, cpu_used &gt;= 5 "</literal>
<literal type="string">"and deadline is REALTIME, so skipping ROI.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_roi_map</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sd</name></expr></argument>, <argument><expr><name>frame_width</name></expr></argument>, <argument><expr><name>frame_height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>roi_map</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>segment_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Failed to set_roi_map.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>roi_map</name><operator>.</operator><name>ref_frame</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>roi_map</name><operator>.</operator><name>ref_frame</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vpx_codec_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>VP9E_SET_ROI_MAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>roi_map</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Failed to set VP9E_SET_ROI_MAP codec control.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>roi_map</name><operator>.</operator><name>roi_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>roi_warned</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_warned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ROI is not supported, please upgrade libvpx to version &gt;= 1.8.1. "</literal>
<literal type="string">"You may need to rebuild ffmpeg.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp8_encode_set_roi</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vpx_roi_map_t</name></type> <name>roi_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>segment_cnt</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>set_roi_map</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sd</name></expr></argument>, <argument><expr><name>frame_width</name></expr></argument>, <argument><expr><name>frame_height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>roi_map</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>segment_cnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Failed to set_roi_map.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vpx_codec_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>VP8E_SET_ROI_MAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>roi_map</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Failed to set VP8E_SET_ROI_MAP codec control.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>roi_map</name><operator>.</operator><name>roi_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>realloc_alpha_uv</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vpx_image</name></name> <modifier>*</modifier></type><name>rawimg_alpha</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rawimg_alpha</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>planes</name> <init>= <expr><name><name>rawimg_alpha</name><operator>-&gt;</operator><name>planes</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>stride</name> <init>= <expr><name><name>rawimg_alpha</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>planes</name><index>[<expr><name>VPX_PLANE_U</name></expr>]</index></name> <operator>||</operator>
<operator>!</operator><name><name>planes</name><index>[<expr><name>VPX_PLANE_V</name></expr>]</index></name> <operator>||</operator>
<name>width</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>rawimg_alpha</name><operator>-&gt;</operator><name>d_w</name></name> <operator>||</operator>
<name>height</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>rawimg_alpha</name><operator>-&gt;</operator><name>d_h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>planes</name><index>[<expr><name>VPX_PLANE_U</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>planes</name><index>[<expr><name>VPX_PLANE_V</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vpx_img_wrap</name><argument_list>(<argument><expr><name>rawimg_alpha</name></expr></argument>, <argument><expr><name>VPX_IMG_FMT_I420</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planes</name><index>[<expr><name>VPX_PLANE_U</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>stride</name><index>[<expr><name>VPX_PLANE_U</name></expr>]</index></name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>planes</name><index>[<expr><name>VPX_PLANE_V</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>stride</name><index>[<expr><name>VPX_PLANE_V</name></expr>]</index></name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>planes</name><index>[<expr><name>VPX_PLANE_U</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>planes</name><index>[<expr><name>VPX_PLANE_V</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>planes</name><index>[<expr><name>VPX_PLANE_U</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>stride</name><index>[<expr><name>VPX_PLANE_U</name></expr>]</index></name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>planes</name><index>[<expr><name>VPX_PLANE_V</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>stride</name><index>[<expr><name>VPX_PLANE_V</name></expr>]</index></name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vpx_encode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vpx_image</name></name> <modifier>*</modifier></type><name>rawimg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vpx_image</name></name> <modifier>*</modifier></type><name>rawimg_alpha</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>coded_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vpx_enc_frame_flags_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vpx_codec_enc_cfg</name></name> <modifier>*</modifier></type><name>enccfg</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name><operator>.</operator><name>config</name><operator>.</operator><name>enc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vpx_svc_layer_id_t</name></type> <name>layer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>layer_id_valid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_REGIONS_OF_INTEREST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rawimg</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rawimg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>VPX_PLANE_Y</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>VPX_PLANE_U</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>VPX_PLANE_V</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>VPX_PLANE_Y</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>VPX_PLANE_U</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>VPX_PLANE_V</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rawimg_alpha</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rawimg_alpha</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>realloc_alpha_uv</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rawimg_alpha</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>VPX_PLANE_Y</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg_alpha</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>VPX_PLANE_Y</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_IMAGE_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>
<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_RANGE_MPEG</name></expr>:</case>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>VPX_CR_STUDIO_RANGE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_RANGE_JPEG</name></expr>:</case>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>VPX_CR_FULL_RANGE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>VPX_EFLAG_FORCE_KF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name><modifier>*</modifier></type> <name>en</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"vp8-flags"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>en</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>layer_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>layer_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>en</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"temporal_id"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>en</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>layer_id</name><operator>.</operator><name>temporal_layer_id</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_MAX_INTER_BITRATE_PCT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>layer_id</name><operator>.</operator><name>temporal_layer_id_per_spatial</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>layer_id</name><operator>.</operator><name>temporal_layer_id</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>layer_id_valid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vp8_encode_set_roi</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>vp9_encode_set_roi</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>enccfg</name><operator>-&gt;</operator><name>ts_number_layers</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ts_layer_flags</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VPX_EFLAG_FORCE_KF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_temporal_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>VPX_EFLAG_FORCE_KF</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ts_layer_flags</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_temporal_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>layer_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>layer_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr></cpp:if>
<expr_stmt><expr><name><name>layer_id</name><operator>.</operator><name>spatial_layer_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>layer_id</name><operator>.</operator><name>temporal_layer_id</name></name> <operator>=</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>ts_layer_id</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_temporal_idx</name></name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_MAX_INTER_BITRATE_PCT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>layer_id</name><operator>.</operator><name>temporal_layer_id_per_spatial</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>layer_id</name><operator>.</operator><name>temporal_layer_id</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>layer_id_valid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>layer_id_valid</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP8E_SET_TEMPORAL_LAYER_ID</name></expr></argument>, <argument><expr><name><name>layer_id</name><operator>.</operator><name>temporal_layer_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name> <operator>&amp;&amp;</operator> <name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>codecctl_intp</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VP9E_SET_SVC_LAYER_ID</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>layer_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vpx_codec_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>rawimg</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>deadline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>VPX_CODEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Error encoding frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vpx_codec_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder_alpha</name></name></expr></argument>, <argument><expr><name>rawimg_alpha</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>deadline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>VPX_CODEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Error encoding alpha frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>coded_size</name> <operator>=</operator> <call><name>queue_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b64_size</name> <init>= <expr><call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>b64_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stat buffer alloc (%d bytes) failed\n"</literal></expr></argument>,
<argument><expr><name>b64_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_base64_encode</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>, <argument><expr><name>b64_size</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>enccfg</name><operator>-&gt;</operator><name>ts_number_layers</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ts_layer_flags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_temporal_idx</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>current_temporal_idx</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>ts_periodicity</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>coded_size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(VPxContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_OPTIONS</name></cpp:macro> <cpp:value>{ "lag-in-frames", "Number of frames to look ahead for " "alternate reference frame selection", OFFSET(lag_in_frames), AV_OPT_TYPE_INT, {.i64 = -1}, -1, INT_MAX, VE}, { "arnr-maxframes", "altref noise reduction max frame count", OFFSET(arnr_max_frames), AV_OPT_TYPE_INT, {.i64 = -1}, -1, INT_MAX, VE}, { "arnr-strength", "altref noise reduction filter strength", OFFSET(arnr_strength), AV_OPT_TYPE_INT, {.i64 = -1}, -1, INT_MAX, VE}, { "arnr-type", "altref noise reduction filter type", OFFSET(arnr_type), AV_OPT_TYPE_INT, {.i64 = -1}, -1, INT_MAX, VE, "arnr_type"}, { "backward", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = 1}, 0, 0, VE, "arnr_type" }, { "forward", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = 2}, 0, 0, VE, "arnr_type" }, { "centered", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = 3}, 0, 0, VE, "arnr_type" }, { "tune", "Tune the encoding to a specific scenario", OFFSET(tune), AV_OPT_TYPE_INT, {.i64 = -1}, -1, INT_MAX, VE, "tune"}, { "psnr", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = VP8_TUNE_PSNR}, 0, 0, VE, "tune"}, { "ssim", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = VP8_TUNE_SSIM}, 0, 0, VE, "tune"}, { "deadline", "Time to spend encoding, in microseconds.", OFFSET(deadline), AV_OPT_TYPE_INT, {.i64 = VPX_DL_GOOD_QUALITY}, INT_MIN, INT_MAX, VE, "quality"}, { "best", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = VPX_DL_BEST_QUALITY}, 0, 0, VE, "quality"}, { "good", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = VPX_DL_GOOD_QUALITY}, 0, 0, VE, "quality"}, { "realtime", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = VPX_DL_REALTIME}, 0, 0, VE, "quality"}, { "error-resilient", "Error resilience configuration", OFFSET(error_resilient), AV_OPT_TYPE_FLAGS, {.i64 = 0}, INT_MIN, INT_MAX, VE, "er"}, { "max-intra-rate", "Maximum I-frame bitrate (pct) 0=unlimited", OFFSET(max_intra_rate), AV_OPT_TYPE_INT, {.i64 = -1}, -1, INT_MAX, VE}, { "default", "Improve resiliency against losses of whole frames", 0, AV_OPT_TYPE_CONST, {.i64 = VPX_ERROR_RESILIENT_DEFAULT}, 0, 0, VE, "er"}, { "partitions", "The frame partitions are independently decodable " "by the bool decoder, meaning that partitions can be decoded even " "though earlier partitions have been lost. Note that intra prediction" " is still done over the partition boundary.", 0, AV_OPT_TYPE_CONST, {.i64 = VPX_ERROR_RESILIENT_PARTITIONS}, 0, 0, VE, "er"}, { "crf", "Select the quality for constant quality mode", offsetof(VPxContext, crf), AV_OPT_TYPE_INT, {.i64 = -1}, -1, 63, VE }, { "static-thresh", "A change threshold on blocks below which they will be skipped by the encoder", OFFSET(static_thresh), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, VE }, { "drop-threshold", "Frame drop threshold", offsetof(VPxContext, drop_threshold), AV_OPT_TYPE_INT, {.i64 = 0 }, INT_MIN, INT_MAX, VE }, { "noise-sensitivity", "Noise sensitivity", OFFSET(noise_sensitivity), AV_OPT_TYPE_INT, {.i64 = 0 }, 0, 4, VE}, { "undershoot-pct", "Datarate undershoot (min) target (%)", OFFSET(rc_undershoot_pct), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, 100, VE }, { "overshoot-pct", "Datarate overshoot (max) target (%)", OFFSET(rc_overshoot_pct), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, 1000, VE }, { "ts-parameters", "Temporal scaling configuration using a :-separated list of key=value parameters", OFFSET(vpx_ts_parameters), AV_OPT_TYPE_DICT, {.str=NULL}, 0, 0, VE},</cpp:value></cpp:define> 






























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEGACY_OPTIONS</name></cpp:macro> <cpp:value>{"speed", "", offsetof(VPxContext, cpu_used), AV_OPT_TYPE_INT, {.i64 = 1}, -16, 16, VE}, {"quality", "", offsetof(VPxContext, deadline), AV_OPT_TYPE_INT, {.i64 = VPX_DL_GOOD_QUALITY}, INT_MIN, INT_MAX, VE, "quality"}, {"vp8flags", "", offsetof(VPxContext, flags), AV_OPT_TYPE_FLAGS, {.i64 = 0}, 0, UINT_MAX, VE, "flags"}, {"error_resilient", "enable error resilience", 0, AV_OPT_TYPE_CONST, {.i64 = VP8F_ERROR_RESILIENT}, INT_MIN, INT_MAX, VE, "flags"}, {"altref", "enable use of alternate reference frames (VP8/2-pass only)", 0, AV_OPT_TYPE_CONST, {.i64 = VP8F_AUTO_ALT_REF}, INT_MIN, INT_MAX, VE, "flags"}, {"arnr_max_frames", "altref noise reduction max frame count", offsetof(VPxContext, arnr_max_frames), AV_OPT_TYPE_INT, {.i64 = 0}, 0, 15, VE}, {"arnr_strength", "altref noise reduction filter strength", offsetof(VPxContext, arnr_strength), AV_OPT_TYPE_INT, {.i64 = 3}, 0, 6, VE}, {"arnr_type", "altref noise reduction filter type", offsetof(VPxContext, arnr_type), AV_OPT_TYPE_INT, {.i64 = 3}, 1, 3, VE}, {"rc_lookahead", "Number of frames to look ahead for alternate reference frame selection", offsetof(VPxContext, lag_in_frames), AV_OPT_TYPE_INT, {.i64 = 25}, 0, 25, VE}, {"sharpness", "Increase sharpness at the expense of lower PSNR", offsetof(VPxContext, sharpness), AV_OPT_TYPE_INT, {.i64 = -1}, -1, 7, VE},</cpp:value></cpp:define>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP8_ENCODER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>vp8_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>COMMON_OPTIONS</name>
<block>{ <expr><literal type="string">"auto-alt-ref"</literal></expr>, <expr><literal type="string">"Enable use of alternate reference "</literal>
<literal type="string">"frames (2-pass only)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>auto_alt_ref</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cpu-used"</literal></expr>, <expr><literal type="string">"Quality/Speed ratio modifier"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cpu_used</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><name>LEGACY_OPTIONS</name>
<block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>vp9_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>COMMON_OPTIONS</name>
<block>{ <expr><literal type="string">"auto-alt-ref"</literal></expr>, <expr><literal type="string">"Enable use of alternate reference "</literal>
<literal type="string">"frames (2-pass only)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>auto_alt_ref</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cpu-used"</literal></expr>, <expr><literal type="string">"Quality/Speed ratio modifier"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cpu_used</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lossless"</literal></expr>, <expr><literal type="string">"Lossless mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lossless</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tile-columns"</literal></expr>, <expr><literal type="string">"Number of tile columns to use, log2"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tile_columns</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tile-rows"</literal></expr>, <expr><literal type="string">"Number of tile rows to use, log2"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tile_rows</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"frame-parallel"</literal></expr>, <expr><literal type="string">"Enable frame parallel decodability features"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_parallel</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"aq-mode"</literal></expr>, <expr><literal type="string">"adaptive quantization mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aq_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><literal type="string">"aq-mode"</literal></expr>, <expr><literal type="string">"adaptive quantization mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aq_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"Aq not used"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"variance"</literal></expr>, <expr><literal type="string">"Variance based Aq"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"complexity"</literal></expr>, <expr><literal type="string">"Complexity based Aq"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cyclic"</literal></expr>, <expr><literal type="string">"Cyclic Refresh Aq"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"equator360"</literal></expr>, <expr><literal type="string">"360 video Aq"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"Specify level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6.2</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_ROW_MT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"row-mt"</literal></expr>, <expr><literal type="string">"Row based multi-threading"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>row_mt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_TUNE_CONTENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"tune-content"</literal></expr>, <expr><literal type="string">"Tune content type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tune_content</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"tune_content"</literal></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><literal type="string">"tune-content"</literal></expr>, <expr><literal type="string">"Tune content type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tune_content</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"tune_content"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><literal type="string">"Regular video content"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"tune_content"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"screen"</literal></expr>, <expr><literal type="string">"Screen capture content"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"tune_content"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"film"</literal></expr>, <expr><literal type="string">"Film content; improves grain retention"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"tune_content"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VPX_ENCODER_ABI_VERSION</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"corpus-complexity"</literal></expr>, <expr><literal type="string">"corpus vbr complexity midpoint"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>corpus_complexity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VPX_CTRL_VP9E_SET_TPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"enable-tpl"</literal></expr>, <expr><literal type="string">"Enable temporal dependency model"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tpl_model</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>LEGACY_OPTIONS</name>
<block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMMON_OPTIONS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEGACY_OPTIONS</name></cpp:undef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>defaults</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qmin"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qmax"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"keyint_min"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP8_ENCODER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vp8_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vpx_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><call><name>vpx_codec_vp8_cx</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class_vp8</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libvpx-vp8 encoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>vp8_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libvpx_vp8_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libvpx"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libvpx VP8"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP8</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VPxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vp8_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>vpx_encode</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>vpx_free</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>class_vp8</name></expr>,
<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>defaults</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libvpx"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vp9_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vpx_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><call><name>vpx_codec_vp9_cx</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class_vp9</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libvpx-vp9 encoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>vp9_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libvpx_vp9_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libvpx-vp9"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libvpx VP9"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP9</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VPxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vp9_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>vpx_encode</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>vpx_free</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name></expr>,
<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_vp9_profiles</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>class_vp9</name></expr>,
<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>defaults</name></expr>,
<expr><operator>.</operator><name>init_static_data</name> <operator>=</operator> <name>ff_vp9_init_static</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libvpx"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
