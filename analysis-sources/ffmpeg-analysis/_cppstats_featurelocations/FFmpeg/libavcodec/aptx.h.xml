<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aptx.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_APTX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_APTX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_frame_queue.h"</cpp:file></cpp:include>


<enum>enum <name>channels</name> <block>{
<decl><name>LEFT</name></decl>,
<decl><name>RIGHT</name></decl>,
<decl><name>NB_CHANNELS</name></decl>
}</block>;</enum>

<enum>enum <name>subbands</name> <block>{
<decl><name>LF</name></decl>, 
<decl><name>MLF</name></decl>, 
<decl><name>MHF</name></decl>, 
<decl><name>HF</name></decl>, 
<decl><name>NB_SUBBANDS</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_FILTERS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_TAPS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>FILTER_TAPS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>FilterSignal</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>FilterSignal</name></type> <name><name>outer_filter_signal</name><index>[<expr><name>NB_FILTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FilterSignal</name></type> <name><name>inner_filter_signal</name><index>[<expr><name>NB_FILTERS</name></expr>]</index><index>[<expr><name>NB_FILTERS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>QMFAnalysis</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>quantized_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>quantized_sample_parity_change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>error</name></decl>;</decl_stmt>
}</block></struct></type> <name>Quantize</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>quantization_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>factor_select</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>reconstructed_difference</name></decl>;</decl_stmt>
}</block></struct></type> <name>InvertQuantize</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>prev_sign</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>s_weight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>d_weight</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>reconstructed_differences</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>previous_reconstructed_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>predicted_difference</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>predicted_sample</name></decl>;</decl_stmt>
}</block></struct></type> <name>Prediction</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>codeword_history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>dither_parity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>dither</name><index>[<expr><name>NB_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QMFAnalysis</name></type> <name>qmf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Quantize</name></type> <name><name>quantize</name><index>[<expr><name>NB_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>InvertQuantize</name></type> <name><name>invert_quantize</name><index>[<expr><name>NB_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Prediction</name></type> <name><name>prediction</name><index>[<expr><name>NB_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>Channel</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sync_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Channel</name></type> <name><name>channels</name><index>[<expr><name>NB_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioFrameQueue</name></type> <name>afq</name></decl>;</decl_stmt>
}</block></struct></type> <name>AptXContext</name>;</typedef>

<typedef>typedef <type><struct><specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>quantize_intervals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>invert_quantize_dither_factors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>quantize_dither_factors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>quantize_factor_select_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tables_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>factor_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>prediction_order</name></decl>;</decl_stmt>
}</block></struct></type> <name>ConstTables</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ConstTables</name></type> <name><name>ff_aptx_quant_tables</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>NB_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSHIFT_SIZE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_always_inline static int##size##_t rshift##size(int##size##_t value, int shift) { int##size##_t rounding = (int##size##_t)1 &lt;&lt; (shift - 1); int##size##_t mask = ((int##size##_t)1 &lt;&lt; (shift + 1)) - 1; return ((value + rounding) &gt;&gt; shift) - ((value &amp; mask) == rounding); } av_always_inline static int##size##_t rshift##size##_clip24(int##size##_t value, int shift) { return av_clip_intp2(rshift##size(value, shift), 23); }</cpp:value></cpp:define>












<macro><name>RSHIFT_SIZE</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>
<macro><name>RSHIFT_SIZE</name><argument_list>(<argument><literal type="number">64</literal></argument>)</argument_list></macro>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name><name>aptx_qmf_outer_coeffs</name><index>[<expr><name>NB_FILTERS</name></expr>]</index><index>[<expr><name>FILTER_TAPS</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><literal type="number">730</literal></expr>, <expr><operator>-</operator><literal type="number">413</literal></expr>, <expr><operator>-</operator><literal type="number">9611</literal></expr>, <expr><literal type="number">43626</literal></expr>, <expr><operator>-</operator><literal type="number">121026</literal></expr>, <expr><literal type="number">269973</literal></expr>, <expr><operator>-</operator><literal type="number">585547</literal></expr>, <expr><literal type="number">2801966</literal></expr>,
<expr><literal type="number">697128</literal></expr>, <expr><operator>-</operator><literal type="number">160481</literal></expr>, <expr><literal type="number">27611</literal></expr>, <expr><literal type="number">8478</literal></expr>, <expr><operator>-</operator><literal type="number">10043</literal></expr>, <expr><literal type="number">3511</literal></expr>, <expr><literal type="number">688</literal></expr>, <expr><operator>-</operator><literal type="number">897</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>-</operator><literal type="number">897</literal></expr>, <expr><literal type="number">688</literal></expr>, <expr><literal type="number">3511</literal></expr>, <expr><operator>-</operator><literal type="number">10043</literal></expr>, <expr><literal type="number">8478</literal></expr>, <expr><literal type="number">27611</literal></expr>, <expr><operator>-</operator><literal type="number">160481</literal></expr>, <expr><literal type="number">697128</literal></expr>,
<expr><literal type="number">2801966</literal></expr>, <expr><operator>-</operator><literal type="number">585547</literal></expr>, <expr><literal type="number">269973</literal></expr>, <expr><operator>-</operator><literal type="number">121026</literal></expr>, <expr><literal type="number">43626</literal></expr>, <expr><operator>-</operator><literal type="number">9611</literal></expr>, <expr><operator>-</operator><literal type="number">413</literal></expr>, <expr><literal type="number">730</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name><name>aptx_qmf_inner_coeffs</name><index>[<expr><name>NB_FILTERS</name></expr>]</index><index>[<expr><name>FILTER_TAPS</name></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><literal type="number">1033</literal></expr>, <expr><operator>-</operator><literal type="number">584</literal></expr>, <expr><operator>-</operator><literal type="number">13592</literal></expr>, <expr><literal type="number">61697</literal></expr>, <expr><operator>-</operator><literal type="number">171156</literal></expr>, <expr><literal type="number">381799</literal></expr>, <expr><operator>-</operator><literal type="number">828088</literal></expr>, <expr><literal type="number">3962579</literal></expr>,
<expr><literal type="number">985888</literal></expr>, <expr><operator>-</operator><literal type="number">226954</literal></expr>, <expr><literal type="number">39048</literal></expr>, <expr><literal type="number">11990</literal></expr>, <expr><operator>-</operator><literal type="number">14203</literal></expr>, <expr><literal type="number">4966</literal></expr>, <expr><literal type="number">973</literal></expr>, <expr><operator>-</operator><literal type="number">1268</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>-</operator><literal type="number">1268</literal></expr>, <expr><literal type="number">973</literal></expr>, <expr><literal type="number">4966</literal></expr>, <expr><operator>-</operator><literal type="number">14203</literal></expr>, <expr><literal type="number">11990</literal></expr>, <expr><literal type="number">39048</literal></expr>, <expr><operator>-</operator><literal type="number">226954</literal></expr>, <expr><literal type="number">985888</literal></expr>,
<expr><literal type="number">3962579</literal></expr>, <expr><operator>-</operator><literal type="number">828088</literal></expr>, <expr><literal type="number">381799</literal></expr>, <expr><operator>-</operator><literal type="number">171156</literal></expr>, <expr><literal type="number">61697</literal></expr>, <expr><operator>-</operator><literal type="number">13592</literal></expr>, <expr><operator>-</operator><literal type="number">584</literal></expr>, <expr><literal type="number">1033</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><name>av_always_inline</name>
<specifier>static</specifier> <name>void</name></type> <name>aptx_qmf_filter_signal_push</name><parameter_list>(<parameter><decl><type><name>FilterSignal</name> <modifier>*</modifier></type><name>signal</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sample</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>signal</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>signal</name><operator>-&gt;</operator><name>pos</name></name></expr> ]</index></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>signal</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>signal</name><operator>-&gt;</operator><name>pos</name></name><operator>+</operator><name>FILTER_TAPS</name></expr>]</index></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>signal</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name><name>signal</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>FILTER_TAPS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>av_always_inline</name>
<specifier>static</specifier> <name>int32_t</name></type> <name>aptx_qmf_convolution</name><parameter_list>(<parameter><decl><type><name>FilterSignal</name> <modifier>*</modifier></type><name>signal</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name><name>coeffs</name><index>[<expr><name>FILTER_TAPS</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><operator>&amp;</operator><name><name>signal</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>signal</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FILTER_TAPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>+=</operator> <call><name>MUL64</name><argument_list>(<argument><expr><name><name>sig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>coeffs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name>rshift64_clip24</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>aptx_quantized_parity</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>parity</name> <init>= <expr><name><name>channel</name><operator>-&gt;</operator><name>dither_parity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subband</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>subband</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>subband</name> <operator>&lt;</operator> <name>NB_SUBBANDS</name></expr>;</condition> <incr><expr><name>subband</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>parity</name> <operator>^=</operator> <name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><name>subband</name></expr>]</index></name><operator>.</operator><name>quantized_sample</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>parity</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>aptx_check_parity</name><parameter_list>(<parameter><decl><type><name>Channel</name></type> <name><name>channels</name><index>[<expr><name>NB_CHANNELS</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>parity</name> <init>= <expr><call><name>aptx_quantized_parity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channels</name><index>[<expr><name>LEFT</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>^</operator> <call><name>aptx_quantized_parity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channels</name><index>[<expr><name>RIGHT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eighth</name> <init>= <expr><operator>*</operator><name>idx</name> <operator>==</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<return>return <expr><name>parity</name> <operator>^</operator> <name>eighth</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>ff_aptx_invert_quantize_and_prediction</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_aptx_generate_dither</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_aptx_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
