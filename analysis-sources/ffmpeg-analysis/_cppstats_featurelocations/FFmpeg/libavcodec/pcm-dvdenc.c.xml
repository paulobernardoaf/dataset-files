<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\pcm-dvdenc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>PCMDVDContext</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>block_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>samples_per_block</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>groups_per_block</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extra_samples</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>extra_sample_count</name></decl>;</decl_stmt> 
}</block></struct></type> <name>PCMDVDContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pcm_dvd_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PCMDVDContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant</name></decl>, <decl><type ref="prev"/><name>freq</name></decl>, <decl><type ref="prev"/><name>frame_size</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">48000</literal></expr>:</case>
<expr_stmt><expr><name>freq</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">96000</literal></expr>:</case>
<expr_stmt><expr><name>freq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>quant</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>quant</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <name>quant</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>*</operator> <literal type="number">8LL</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">9800000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too big bitrate: reduce sample rate, bitdepth or channels.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_block</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <literal type="number">2008</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_block</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>groups_per_block</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_block</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>groups_per_block</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_block</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>groups_per_block</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><literal type="number">2008</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0c</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>quant</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>freq</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>frame_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pcm_dvd_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PCMDVDContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pkt_size</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_per_block</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocks</name> <init>= <expr><operator>(</operator><name>pkt_size</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>pkt_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src16</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src32</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>*</operator><name>src16</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>samples</name></expr>)</condition>;</do>
<break>break;</break>
<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>src32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>src32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>src32</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>src32</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>blocks</name></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<do>do <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>groups_per_block</name></name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>src32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>src32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>src32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>src32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>src32</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>src32</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>src32</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>src32</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>blocks</name></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>pkt_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>ff_samples_to_time_base</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pcm_dvd_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_pcm_dvd_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pcm_dvd"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"PCM signed 16|20|24-bit big-endian for DVD media"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_DVD</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PCMDVDContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>pcm_dvd_encode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>pcm_dvd_encode_close</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>pcm_dvd_encode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>,
<expr><operator>.</operator><name>supported_samplerates</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>int</name><index>[]</index></name><operator>)</operator> <block>{ <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">96000</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint64_t</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_CH_LAYOUT_MONO</name></expr>,
<expr><name>AV_CH_LAYOUT_STEREO</name></expr>,
<expr><name>AV_CH_LAYOUT_5POINT1</name></expr>,
<expr><name>AV_CH_LAYOUT_7POINT1</name></expr>,
<expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_S32</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
