<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\hevcpred.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcpred.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcpred_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcpred_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcpred_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcpred_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<function><type><name>void</name></type> <name>ff_hevc_pred_init</name><parameter_list>(<parameter><decl><type><name>HEVCPredContext</name> <modifier>*</modifier></type><name>hpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_ ##depth</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_PRED</name><parameter_list>(<parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>hpc-&gt;intra_pred[0] = FUNC(intra_pred_2, depth); hpc-&gt;intra_pred[1] = FUNC(intra_pred_3, depth); hpc-&gt;intra_pred[2] = FUNC(intra_pred_4, depth); hpc-&gt;intra_pred[3] = FUNC(intra_pred_5, depth); hpc-&gt;pred_planar[0] = FUNC(pred_planar_0, depth); hpc-&gt;pred_planar[1] = FUNC(pred_planar_1, depth); hpc-&gt;pred_planar[2] = FUNC(pred_planar_2, depth); hpc-&gt;pred_planar[3] = FUNC(pred_planar_3, depth); hpc-&gt;pred_dc = FUNC(pred_dc, depth); hpc-&gt;pred_angular[0] = FUNC(pred_angular_0, depth); hpc-&gt;pred_angular[1] = FUNC(pred_angular_1, depth); hpc-&gt;pred_angular[2] = FUNC(pred_angular_2, depth); hpc-&gt;pred_angular[3] = FUNC(pred_angular_3, depth);</cpp:value></cpp:define>














<switch>switch <condition>(<expr><name>bit_depth</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>HEVC_PRED</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><call><name>HEVC_PRED</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><call><name>HEVC_PRED</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>HEVC_PRED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_hevc_pred_init_mips</name><argument_list>(<argument><expr><name>hpc</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
