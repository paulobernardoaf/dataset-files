<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\decode.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ICONV</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iconv.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_param_change</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_PARAM_CHANGE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_PARAM_CHANGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"This decoder does not support parameter "</literal>
<literal type="string">"changes, but PARAM_CHANGE side data was sent to it.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail2</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>val</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail2</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>bytestream_get_le64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>val</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail2</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PARAM_CHANGE side data too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<label><name>fail2</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error applying parameter changes.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>extract_packet_props</name><parameter_list>(<parameter><decl><type><name>AVCodecInternal</name> <modifier>*</modifier></type><name>avci</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>last_pkt_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_copy_props</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>last_pkt_props</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>last_pkt_props</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unrefcount_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecInternal</name> <modifier>*</modifier></type><name>avci</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>to_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>to_free</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>avci</name><operator>-&gt;</operator><name>to_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>!=</operator> <name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>planes</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>avci</name><operator>-&gt;</operator><name>to_free</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_decode_bsfs_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecInternal</name> <modifier>*</modifier></type><name>avci</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DecodeFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>avci</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bsfs_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bsfs_str</name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>bsfs</name></name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>bsfs</name></name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr>;</expr_stmt>
<while>while <condition>(<expr><name>bsfs_str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>bsfs_str</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bsf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bsf_options_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bsf_name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bsf</name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsfs_str</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bsf_name</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsf_options_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsf_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>av_bsf_get_by_name</name><argument_list>(<argument><expr><name>bsf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A non-existing bitstream filter %s "</literal>
<literal type="string">"requested by a decoder. This is a bug, please report it.\n"</literal></expr></argument>,
<argument><expr><name>bsf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_BUG</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>bsfs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_alloc</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base_in</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">90000</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_from_context</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>par_in</name></expr></argument>,
<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base_in</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>par_in</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>par_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bsf_options_str</name> <operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>av_opt_next</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>shorthand</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shorthand</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_set_from_string</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></argument>, <argument><expr><name>bsf_options_str</name></expr></argument>, <argument><expr><name>shorthand</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid options for bitstream filter %s "</literal>
<literal type="string">"requested by the decoder. This is a bug, please report it.\n"</literal></expr></argument>,
<argument><expr><name>bsf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_BUG</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bsfs_str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bsfs_str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_decode_bsfs_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>bsfs_poll</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DecodeFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_receive_packet</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_send_packet</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>pkt</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error pre-processing a packet before decoding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_decode_get_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecInternal</name> <modifier>*</modifier></type><name>avci</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avci</name><operator>-&gt;</operator><name>draining</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bsfs_poll</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>draining</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>extract_packet_props</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>apply_param_change</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>receive_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_consumed</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>finish</name>:</label>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>guess_correct_pts</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>reordered_pts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>dts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts_correction_num_faulty_dts</name></name> <operator>+=</operator> <name>dts</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pts_correction_last_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts_correction_last_dts</name></name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reordered_pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts_correction_last_dts</name></name> <operator>=</operator> <name>reordered_pts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reordered_pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts_correction_num_faulty_pts</name></name> <operator>+=</operator> <name>reordered_pts</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pts_correction_last_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts_correction_last_pts</name></name> <operator>=</operator> <name>reordered_pts</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>dts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts_correction_last_pts</name></name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pts_correction_num_faulty_pts</name></name><operator>&lt;=</operator><name><name>ctx</name><operator>-&gt;</operator><name>pts_correction_num_faulty_dts</name></name> <operator>||</operator> <name>dts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>reordered_pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <name>reordered_pts</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>pts</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_simple_internal</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecInternal</name> <modifier>*</modifier></type><name>avci</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DecodeSimpleContext</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><operator>&amp;</operator><name><name>avci</name><operator>-&gt;</operator><name>ds</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name><name>ds</name><operator>-&gt;</operator><name>in_pkt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_frame</name></decl>, <decl><type ref="prev"/><name>actual_got_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>draining</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_decode_get_packet</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>avci</name><operator>-&gt;</operator><name>draining_done</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_decode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_frame</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_frame</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>caps_internal</name></name> <operator>&amp;</operator> <name>FF_CODEC_CAP_SETS_PKT_DTS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_pos</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DR1</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>actual_got_frame</name> <operator>=</operator> <name>got_frame</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_FRAME_FLAG_DISCARD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>got_frame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>best_effort_timestamp</name></name> <operator>=</operator> <call><name>guess_correct_pts</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>side_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>discard_padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>skip_reason</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>discard_reason</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>got_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>best_effort_timestamp</name></name> <operator>=</operator> <call><name>guess_correct_pts</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>side</name><operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>last_pkt_props</name></name></expr></argument>, <argument><expr><name>AV_PKT_DATA_SKIP_SAMPLES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>side_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>side</name> <operator>&amp;&amp;</operator> <name>side_size</name><operator>&gt;=</operator><literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>side</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>avci</name><operator>-&gt;</operator><name>skip_samples_multiplier</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>discard_padding</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>side</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"skip %d / discard %d samples due to side data\n"</literal></expr></argument>,
<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>discard_padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skip_reason</name> <operator>=</operator> <call><name>AV_RL8</name><argument_list>(<argument><expr><name>side</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>discard_reason</name> <operator>=</operator> <call><name>AV_RL8</name><argument_list>(<argument><expr><name>side</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_FRAME_FLAG_DISCARD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>got_frame</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_SKIP_MANUAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name> <operator>-</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>got_frame</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_SKIP_MANUAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&lt;=</operator> <name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"skip whole frame, skip left: %d\n"</literal></expr></argument>,
<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_samples_copy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>diff_ts</name> <init>= <macro><name>av_rescale_q</name><argument_list>(<argument>avci-&gt;skip_samples</argument>,
<argument>(AVRational){<literal type="number">1</literal></argument>, <argument>avctx-&gt;sample_rate}</argument>,
<argument>avctx-&gt;pkt_timebase</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name><operator>!=</operator><name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name>diff_ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PKT_PTS</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<if_stmt><if>if<condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_pts</name></name><operator>!=</operator><name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_pts</name></name> <operator>+=</operator> <name>diff_ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_dts</name></name><operator>!=</operator><name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_dts</name></name> <operator>+=</operator> <name>diff_ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_duration</name></name> <operator>&gt;=</operator> <name>diff_ts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_duration</name></name> <operator>-=</operator> <name>diff_ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not update timestamps for skipped samples.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"skip %d/%d samples\n"</literal></expr></argument>,
<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-=</operator> <name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>discard_padding</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>discard_padding</name> <operator>&lt;=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&amp;&amp;</operator> <name>got_frame</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_SKIP_MANUAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>discard_padding</name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>diff_ts</name> <init>= <macro><name>av_rescale_q</name><argument_list>(<argument>frame-&gt;nb_samples - discard_padding</argument>,
<argument>(AVRational){<literal type="number">1</literal></argument>, <argument>avctx-&gt;sample_rate}</argument>,
<argument>avctx-&gt;pkt_timebase</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_duration</name></name> <operator>=</operator> <name>diff_ts</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not update timestamps for discarded samples.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"discard %d/%d samples\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>discard_padding</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-=</operator> <name>discard_padding</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_SKIP_MANUAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>got_frame</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>fside</name> <init>= <expr><call><name>av_frame_new_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_SKIP_SAMPLES</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fside</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>fside</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>fside</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>discard_padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL8</name><argument_list>(<argument><expr><name><name>fside</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>skip_reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL8</name><argument_list>(<argument><expr><name><name>fside</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>discard_reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>skip_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>showed_multi_packet_warning</name></name> <operator>&amp;&amp;</operator>
<name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_SUBFRAMES</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Multiple frames in a packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>showed_multi_packet_warning</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_frame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_TRUNCATED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVCTX_TIMEBASE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <macro><name>av_inv_q</name><argument_list>(<argument>av_mul_q(avctx-&gt;framerate, (AVRational){avctx-&gt;ticks_per_frame, <literal type="number">1</literal>})</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name><name>avci</name><operator>-&gt;</operator><name>draining</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>actual_got_frame</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>nb_errors_max</name> <init>= <expr><literal type="number">20</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name></expr> ?</condition><then>
<expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avci</name><operator>-&gt;</operator><name>nb_draining_errors</name></name><operator>++</operator> <operator>&gt;=</operator> <name>nb_errors_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many errors when draining, this is a bug. "</literal>
<literal type="string">"Stop draining and force EOF.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>draining_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_BUG</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>draining_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_consumed</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>consumed</name> <init>= <expr><name>ret</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+=</operator> <name>consumed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>consumed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>last_pkt_props</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>consumed</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>last_pkt_props</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>last_pkt_props</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_frame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_simple_receive_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_simple_internal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_receive_frame_internal</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecInternal</name> <modifier>*</modifier></type><name>avci</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>receive_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>receive_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_simple_receive_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>draining_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>private_ref</name></name> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>private_ref</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FrameDecodeData</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DR1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>private_ref</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FrameDecodeData</name> <modifier>*</modifier></type><name>fdd</name> <init>= <expr><operator>(</operator><name>FrameDecodeData</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>private_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fdd</name><operator>-&gt;</operator><name>post_process</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>fdd</name><operator>-&gt;</operator><name>post_process</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>private_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>attribute_align_arg</name></type> <name>avcodec_send_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecInternal</name> <modifier>*</modifier></type><name>avci</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>avcodec_is_open</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>av_codec_is_decoder</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>draining</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>avpkt</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avpkt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>side_data_elems</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_ref</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_send_packet</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>bsfs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>buffer_frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_receive_frame_internal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_cropping</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name><name>frame</name><operator>-&gt;</operator><name>crop_right</name></name> <operator>||</operator>
<name><name>frame</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name><name>frame</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>||</operator>
<operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>crop_right</name></name><operator>)</operator> <operator>&gt;=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
<operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>crop_bottom</name></name><operator>)</operator> <operator>&gt;=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Invalid cropping information set by a decoder: "</literal>
<literal type="string">"%"</literal><name>SIZE_SPECIFIER</name><literal type="string">"/%"</literal><name>SIZE_SPECIFIER</name><literal type="string">"/%"</literal><name>SIZE_SPECIFIER</name><literal type="string">"/%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" "</literal>
<literal type="string">"(frame size %dx%d). This is a bug, please report it\n"</literal></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_left</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_right</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_top</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_bottom</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>apply_cropping</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>av_frame_apply_cropping</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_UNALIGNED</name></expr> ?</condition><then>
<expr><name>AV_FRAME_CROP_UNALIGNED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>attribute_align_arg</name></type> <name>avcodec_receive_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecInternal</name> <modifier>*</modifier></type><name>avci</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>changed</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>avcodec_is_open</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>av_codec_is_decoder</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_receive_frame_internal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>apply_cropping</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_DROPCHANGED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>initial_format</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>initial_width</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>initial_height</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>initial_sample_rate</name></name> <operator>=</operator> <ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr> ?</condition><then> <expr><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr> </then><else>:
<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>initial_channels</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>initial_channel_layout</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <name><name>avci</name><operator>-&gt;</operator><name>initial_format</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name>changed</name> <operator>|=</operator> <name><name>avci</name><operator>-&gt;</operator><name>initial_width</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>
<name><name>avci</name><operator>-&gt;</operator><name>initial_height</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name>changed</name> <operator>|=</operator> <name><name>avci</name><operator>-&gt;</operator><name>initial_sample_rate</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>||</operator>
<name><name>avci</name><operator>-&gt;</operator><name>initial_sample_rate</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>||</operator>
<name><name>avci</name><operator>-&gt;</operator><name>initial_channels</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name> <operator>||</operator>
<name><name>avci</name><operator>-&gt;</operator><name>initial_channel_layout</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>changed_frames_dropped</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"dropped changed frame #%d pts %"</literal><name>PRId64</name>
<literal type="string">" drop count: %d \n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,
<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>changed_frames_dropped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INPUT_CHANGED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compat_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecInternal</name> <modifier>*</modifier></type><name>avci</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_consumed</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avci</name><operator>-&gt;</operator><name>draining_done</name></name> <operator>&amp;&amp;</operator> <name>pkt</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Got unexpected packet after EOF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_flush_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>compat_decode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_partial_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>avci</name><operator>-&gt;</operator><name>compat_decode_partial_size</name></name> <operator>!=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Got unexpected packet size after a partial decode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_partial_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_send_packet</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_BUG</name></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>!=</operator> <name><name>avci</name><operator>-&gt;</operator><name>compat_decode_frame</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>refcounted_frames</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>unrefcount_frame</name><argument_list>(<argument><expr><name>avci</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>avci</name><operator>-&gt;</operator><name>compat_decode_frame</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_warned</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The deprecated avcodec_decode_* "</literal>
<literal type="string">"API cannot return all the frames for this decoder. "</literal>
<literal type="string">"Some frames will be dropped. Update your code to the "</literal>
<literal type="string">"new decoding API to fix this.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_warned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avci</name><operator>-&gt;</operator><name>draining</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>bsfs</name></name> <operator>&amp;&amp;</operator> <name><name>avci</name><operator>-&gt;</operator><name>compat_decode_consumed</name></name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<label><name>finish</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>bsfs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_consumed</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_consumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_partial_size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>ret</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>attribute_align_arg</name></type> <name>avcodec_decode_video2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_picture_ptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>compat_decode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>, <argument><expr><name>got_picture_ptr</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>attribute_align_arg</name></type> <name>avcodec_decode_audio4</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>compat_decode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>got_frame_ptr</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_subtitle_defaults</name><parameter_list>(<parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sub</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8_MAX_BYTES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<function><type><specifier>static</specifier> <name>int</name></type> <name>recode_subtitle</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>outpkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>inpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ICONV</name></expr></cpp:if>
<decl_stmt><decl><type><name>iconv_t</name></type> <name>cd</name> <init>= <expr><operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>inl</name></decl>, <decl><type ref="prev"/><name>outl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>tmp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_charenc_mode</name></name> <operator>!=</operator> <name>FF_SUB_CHARENC_MODE_PRE_DECODER</name> <operator>||</operator> <name><name>inpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ICONV</name></expr></cpp:if>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_charenc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>cd</name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inb</name> <operator>=</operator> <name><name>inpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inl</name> <operator>=</operator> <name><name>inpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inl</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <name>UTF8_MAX_BYTES</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Subtitles packet is too big for recoding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>inl</name> <operator>*</operator> <name>UTF8_MAX_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>outpkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>outb</name> <operator>=</operator> <name><name>outpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>outl</name> <operator>=</operator> <name><name>outpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iconv</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outl</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name>iconv</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outl</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name>outl</name> <operator>&gt;=</operator> <name><name>outpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>inl</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to recode subtitle event \"%s\" "</literal>
<literal type="string">"from %s to UTF-8\n"</literal></expr></argument>, <argument><expr><name><name>inpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_charenc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>outpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>outl</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>outpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>outpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>cd</name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"requesting subtitles recoding without iconv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>utf8_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>codepoint</name></decl>, <decl><type ref="prev"/><name>min</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<macro><name>GET_UTF8</name><argument_list>(<argument>codepoint</argument>, <argument>*(byte++)</argument>, <argument>return <literal type="number">0</literal>;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <ternary><condition><expr><name>byte</name> <operator>-</operator> <name>str</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><name>byte</name> <operator>-</operator> <name>str</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>:
<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name>byte</name> <operator>-</operator> <name>str</name><operator>)</operator> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>&lt;</operator> <name>min</name> <operator>||</operator> <name>codepoint</name> <operator>&gt;=</operator> <literal type="number">0x110000</literal> <operator>||</operator>
<name>codepoint</name> <operator>==</operator> <literal type="number">0xFFFE</literal> <operator>||</operator>
<name>codepoint</name> <operator>&gt;=</operator> <literal type="number">0xD800</literal> <operator>&amp;&amp;</operator> <name>codepoint</name> <operator>&lt;=</operator> <literal type="number">0xDFFF</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_ASS_TIMING</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_ts</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"9:59:59.99,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>ts</name><operator>/</operator><literal type="number">360000</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ts</name> <operator>-=</operator> <literal type="number">360000</literal><operator>*</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>ts</name><operator>/</operator> <literal type="number">6000</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ts</name> <operator>-=</operator> <literal type="number">6000</literal><operator>*</operator><name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>ts</name><operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ts</name> <operator>-=</operator> <literal type="number">100</literal><operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d:%02d:%02d.%02d,"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_sub_to_old_ass_form</name><parameter_list>(<parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>tb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>final_dialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>rect</name> <init>= <expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ts_start</name></decl>, <decl><type ref="prev"/><name>ts_duration</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>layer</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rect</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SUBTITLE_ASS</name> <operator>||</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>rect</name><operator>-&gt;</operator><name>ass</name></name></expr></argument>, <argument><expr><literal type="string">"Dialogue: "</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>rect</name><operator>-&gt;</operator><name>ass</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dialog</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dialog</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>layer</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dialog</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dialog</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dialog</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>ts_start</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ts_duration</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>ts_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Dialogue: %ld,"</literal></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_ts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>ts_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_ts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ts_duration</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>ts_start</name> <operator>+</operator> <name>ts_duration</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>final_dialog</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>final_dialog</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>final_dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect</name><operator>-&gt;</operator><name>ass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>ass</name></name> <operator>=</operator> <name>final_dialog</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>avcodec_decode_subtitle2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_sub_ptr</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid packet: NULL data, size != 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid media type for subtitles\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_sub_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_subtitle_defaults</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DELAY</name><operator>)</operator> <operator>||</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt_recoded</name> <init>= <expr><operator>*</operator><name>avpkt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recode_subtitle</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_recoded</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>got_sub_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>extract_packet_props</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_recoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>got_sub_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_recoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>(</operator><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&gt;=</operator> <operator>!</operator><operator>!</operator><operator>*</operator><name>got_sub_ptr</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>!</operator><operator>*</operator><name>got_sub_ptr</name> <operator>&gt;=</operator> <operator>!</operator><operator>!</operator><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_ASS_TIMING</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_text_format</name></name> <operator>==</operator> <name>FF_SUB_TEXT_FMT_ASS_WITH_TIMINGS</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>got_sub_ptr</name> <operator>&amp;&amp;</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVRational</name></type> <name>tb</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name><operator>.</operator><name>num</name></name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name></name></expr>
</then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>convert_sub_to_old_ass_form</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>&amp;&amp;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>ms</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name></name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_descriptor</name><operator>-&gt;</operator><name>props</name></name> <operator>&amp;</operator> <name>AV_CODEC_PROP_BITMAP_SUB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_descriptor</name><operator>-&gt;</operator><name>props</name></name> <operator>&amp;</operator> <name>AV_CODEC_PROP_TEXT_SUB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sub_charenc_mode</name></name> <operator>!=</operator> <name>FF_SUB_CHARENC_MODE_IGNORE</name> <operator>&amp;&amp;</operator>
<name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ass</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>utf8_check</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid UTF-8 in decoded subtitles text; "</literal>
<literal type="string">"maybe missing -sub_charenc option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avsubtitle_free</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name><name>pkt_recoded</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>pkt_recoded</name><operator>.</operator><name>side_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt_recoded</name><operator>.</operator><name>side_data_elems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt_recoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>got_sub_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>avcodec_default_get_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecHWConfig</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>hw_configs</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device_ctx</name> <init>=
<expr><operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>hw_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>public</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>methods</name></name> <operator>&amp;</operator>
<name>AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>config</name><operator>-&gt;</operator><name>device_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fmt</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name><name>fmt</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>fmt</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fmt</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>fmt</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>fmt</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>




<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fmt</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>avcodec_get_hw_config</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name><name>fmt</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition> <block>{<block_content>


<return>return <expr><name><name>fmt</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>methods</name></name> <operator>&amp;</operator> <name>AV_CODEC_HW_CONFIG_METHOD_INTERNAL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>fmt</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_decode_get_hw_frames_ctx</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>dev_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A hardware frames or device context is "</literal>
<literal type="string">"required for hardware accelerated decoding.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>device_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWDeviceContext</name> <operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>dev_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Device type %s expected for hardware "</literal>
<literal type="string">"decoding, but got %s.\n"</literal></expr></argument>, <argument><expr><call><name>av_hwdevice_get_type_name</name><argument_list>(<argument><expr><name>dev_type</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_hwdevice_get_type_name</name><argument_list>(<argument><expr><name><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_get_hw_frames_parameters</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avcodec_get_hw_frames_parameters</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ref</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>hw_pix_fmt</name></decl></parameter>,
<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_frames_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>frames_ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecHWConfigInternal</name> <modifier>*</modifier></type><name>hw_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name> <modifier>*</modifier></type><name>hwa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hw_config</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>hw_configs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hw_config</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hw_config</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>pix_fmt</name></name> <operator>==</operator> <name>hw_pix_fmt</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>hwa</name> <operator>=</operator> <name><name>hw_config</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwa</name> <operator>||</operator> <operator>!</operator><name><name>hwa</name><operator>-&gt;</operator><name>frame_params</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frames_ref</name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name>device_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frames_ref</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>hwa</name><operator>-&gt;</operator><name>frame_params</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extra_hw_frames</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extra_hw_frames</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out_frames_ref</name> <operator>=</operator> <name>frames_ref</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hwaccel_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVCodecHWConfigInternal</name> <modifier>*</modifier></type><name>hw_config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name> <modifier>*</modifier></type><name>hwaccel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hwaccel</name> <operator>=</operator> <name><name>hw_config</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hwaccel</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_HWACCEL_CODEC_CAP_EXPERIMENTAL</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ignoring experimental hwaccel: %s\n"</literal></expr></argument>,
<argument><expr><name><name>hwaccel</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwaccel</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name> <operator>=</operator>
<call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>hwaccel</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>=</operator> <name>hwaccel</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hwaccel</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>hwaccel</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed setup for format %s: "</literal>
<literal type="string">"hwaccel initialisation returned error.\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>hw_config</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hwaccel_uninit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>uninit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>uninit</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_get_format</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>choices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>user_choice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecHWConfigInternal</name> <modifier>*</modifier></type><name>hw_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecHWConfig</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fmt</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>fmt</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name> <operator>=</operator> <name><name>fmt</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>choices</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>choices</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>choices</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>choices</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>choices</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>hwaccel_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>user_choice</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>get_format</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>choices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>user_choice</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>user_choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid format returned by "</literal>
<literal type="string">"get_format() callback.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Format %s chosen by get_format().\n"</literal></expr></argument>,
<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>user_choice</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid return from get_format(): "</literal>
<literal type="string">"%s not in possible list.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>hw_configs</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hw_config</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>hw_configs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hw_config</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hw_config</name><operator>-&gt;</operator><name>public</name><operator>.</operator><name>pix_fmt</name></name> <operator>==</operator> <name>user_choice</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>hw_config</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hw_config</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>user_choice</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>config</name> <operator>=</operator> <operator>&amp;</operator><name><name>hw_config</name><operator>-&gt;</operator><name>public</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>methods</name></name> <operator>&amp;</operator>
<name>AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>=
<expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>user_choice</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid setup for format %s: "</literal>
<literal type="string">"does not match the format of the provided frames "</literal>
<literal type="string">"context.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>try_again</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>methods</name></name> <operator>&amp;</operator>
<name>AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device_ctx</name> <init>=
<expr><operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>config</name><operator>-&gt;</operator><name>device_type</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid setup for format %s: "</literal>
<literal type="string">"does not match the type of the provided device "</literal>
<literal type="string">"context.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>try_again</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>methods</name></name> <operator>&amp;</operator>
<name>AV_CODEC_HW_CONFIG_METHOD_INTERNAL</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>methods</name></name> <operator>&amp;</operator>
<name>AV_CODEC_HW_CONFIG_METHOD_AD_HOC</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid setup for format %s: "</literal>
<literal type="string">"missing configuration.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>try_again</name>;</goto>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hw_config</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Format %s requires hwaccel "</literal>
<literal type="string">"initialisation.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>hwaccel_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>hw_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>try_again</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>user_choice</name></expr>;</expr_stmt>
<break>break;</break>

<label><name>try_again</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Format %s not usable, retrying "</literal>
<literal type="string">"get_format() without it.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>user_choice</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>choices</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>choices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_frame_pool</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FramePool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmpsize</name></decl>, <decl><type ref="prev"/><name>unaligned</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>&amp;&amp;</operator>
<name><name>pool</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>pool</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avcodec_align_dimensions2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>stride_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_fill_linesizes</name><argument_list>(<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>+=</operator> <name>w</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>unaligned</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>unaligned</name> <operator>|=</operator> <name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name><name>pool</name><operator>-&gt;</operator><name>stride_align</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block> while <condition>(<expr><name>unaligned</name></expr>)</condition>;</do>

<expr_stmt><expr><name>tmpsize</name> <operator>=</operator> <call><name>av_image_fill_pointers</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tmpsize</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmpsize</name> <operator>-</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_init</name><argument_list>(<argument><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>STRIDE_ALIGN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>CONFIG_MEMORY_POISONING</name></expr> ?</condition><then>
<expr><name>NULL</name></expr> </then><else>:
<expr><name>av_buffer_allocz</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>planar</name> <init>= <expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><name>ch</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>&amp;&amp;</operator> <name><name>pool</name><operator>-&gt;</operator><name>planes</name></name> <operator>==</operator> <name>planes</name> <operator>&amp;&amp;</operator>
<name><name>pool</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>samples</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_samples_get_buffer_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_init</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <name>planes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>audio_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FramePool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>planes</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>planes</name> <operator>&gt;</operator> <name>AV_NUM_DATA_POINTERS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>planes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_extended_buf</name></name> <operator>=</operator> <name>planes</name> <operator>-</operator> <name>AV_NUM_DATA_POINTERS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_buf</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_extended_buf</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>||</operator> <operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_extended_buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>planes</name></expr></argument>, <argument><expr><name>AV_NUM_DATA_POINTERS</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_extended_buf</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>i</name> <operator>+</operator> <name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>extended_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_BUFFERS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"default_get_buffer called on frame %p"</literal></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>video_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FramePool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pic-&gt;data[*]!=NULL in avcodec_default_get_buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unable to get pixel format descriptor for format %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV_NUM_DATA_POINTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_PSEUDOPAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_set_systematic_pal2</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_BUFFERS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"default_get_buffer called on pic %p\n"</literal></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avcodec_default_get_buffer2</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_get_buffer</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>update_frame_pool</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<return>return <expr><call><name>video_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<return>return <expr><call><name>audio_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_metadata_from_side_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>side_metadata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>frame_md</name> <init>= <expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>side_metadata</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>,
<argument><expr><name>AV_PKT_DATA_STRINGS_METADATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>av_packet_unpack_dictionary</name><argument_list>(<argument><expr><name>side_metadata</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>frame_md</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_decode_frame_props</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>last_pkt_props</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>AVPacketSideDataType</name></name></type> <name>packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVFrameSideDataType</name></name></type> <name>frame</name></decl>;</decl_stmt>
}</block> <decl><name><name>sd</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AV_PKT_DATA_REPLAYGAIN</name></expr> , <expr><name>AV_FRAME_DATA_REPLAYGAIN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PKT_DATA_DISPLAYMATRIX</name></expr>, <expr><name>AV_FRAME_DATA_DISPLAYMATRIX</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PKT_DATA_SPHERICAL</name></expr>, <expr><name>AV_FRAME_DATA_SPHERICAL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PKT_DATA_STEREO3D</name></expr>, <expr><name>AV_FRAME_DATA_STEREO3D</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PKT_DATA_AUDIO_SERVICE_TYPE</name></expr>, <expr><name>AV_FRAME_DATA_AUDIO_SERVICE_TYPE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PKT_DATA_MASTERING_DISPLAY_METADATA</name></expr>, <expr><name>AV_FRAME_DATA_MASTERING_DISPLAY_METADATA</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PKT_DATA_CONTENT_LIGHT_LEVEL</name></expr>, <expr><name>AV_FRAME_DATA_CONTENT_LIGHT_LEVEL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PKT_DATA_A53_CC</name></expr>, <expr><name>AV_FRAME_DATA_A53_CC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PKT_DATA_ICC_PROFILE</name></expr>, <expr><name>AV_FRAME_DATA_ICC_PROFILE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PKT_PTS</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>frame</name><operator>-&gt;</operator><name>pkt_pts</name></name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>frame</name><operator>-&gt;</operator><name>pkt_pos</name></name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_duration</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>packet_sd</name> <init>= <expr><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>sd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>packet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>packet_sd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>frame_sd</name> <init>= <expr><call><name>av_frame_new_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>,
<argument><expr><name><name>sd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_sd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame_sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>packet_sd</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>add_metadata_from_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_DISCARD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_FRAME_FLAG_DISCARD</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>AV_FRAME_FLAG_DISCARD</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>==</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>==</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>==</operator> <name>AVCHROMA_LOC_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator>
<call><name>av_image_check_sar</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ignoring invalid SAR: %u/%u\n"</literal></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Inconsistent channel "</literal>
<literal type="string">"configuration.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>FF_SANE_NB_CHANNELS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many channels: %d.\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>validate_avframe_allocation</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>desc</name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num_planes</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_planes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FF_PSEUDOPAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_planes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>num_planes</name></expr>;</init> <condition><expr><name>num_planes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffer returned by get_buffer2() did not zero unused plane pointers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_data_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FrameDecodeData</name> <modifier>*</modifier></type><name>fdd</name> <init>= <expr><operator>(</operator><name>FrameDecodeData</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fdd</name><operator>-&gt;</operator><name>post_process_opaque_free</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>fdd</name><operator>-&gt;</operator><name>post_process_opaque_free</name></name><argument_list>(<argument><expr><name><name>fdd</name><operator>-&gt;</operator><name>post_process_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fdd</name><operator>-&gt;</operator><name>hwaccel_priv_free</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>fdd</name><operator>-&gt;</operator><name>hwaccel_priv_free</name></name><argument_list>(<argument><expr><name><name>fdd</name><operator>-&gt;</operator><name>hwaccel_priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_attach_decode_data</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>fdd_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FrameDecodeData</name> <modifier>*</modifier></type><name>fdd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>private_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>private_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fdd</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fdd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fdd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fdd_buf</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>fdd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fdd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>decode_data_free</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_BUFFER_FLAG_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fdd_buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>private_ref</name></name> <operator>=</operator> <name>fdd_buf</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_buffer_internal</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name> <modifier>*</modifier></type><name>hwaccel</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>override_dimensions</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_check_size2</name><argument_list>(<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>STRIDE_ALIGN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_pixels</name></name></expr></argument>, <argument><expr><name>AV_PIX_FMT_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"video_get_buffer: image parameters invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>override_dimensions</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pic-&gt;data[*]!=NULL in get_buffer_internal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_samples</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"samples per frame %d, exceeds max_samples %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_decode_frame_props</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hwaccel</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hwaccel</name><operator>-&gt;</operator><name>alloc_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>hwaccel</name><operator>-&gt;</operator><name>alloc_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>get_buffer2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>validate_avframe_allocation</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_attach_decode_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>override_dimensions</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>caps_internal</name></name> <operator>&amp;</operator> <name>FF_CODEC_CAP_EXPORTS_CROPPING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>get_buffer_internal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reget_buffer_internal</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Picture changed from size:%dx%d fmt:%s to size:%dx%d fmt:%s in reget buffer()\n"</literal></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FF_REGET_BUFFER_FLAG_READONLY</name><operator>)</operator> <operator>||</operator> <call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_decode_frame_props</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_reget_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>reget_buffer_internal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"reget_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bsfs_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DecodeFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bsf_flush</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avcodec_flush_buffers</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecInternal</name> <modifier>*</modifier></type><name>avci</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>draining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>draining_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>nb_draining_errors</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>compat_decode_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avci</name><operator>-&gt;</operator><name>buffer_pkt_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>ds</name><operator>.</operator><name>in_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_flush</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>flush</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pts_correction_last_pts</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>pts_correction_last_dts</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bsfs_flush</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>refcounted_frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>avci</name><operator>-&gt;</operator><name>to_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_decode_bsfs_uninit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DecodeFilterContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bsf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bsfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
