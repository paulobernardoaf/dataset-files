<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mp3_header_decompress_bsf.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodecheader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodata.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mp3_header_decompress</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name><init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate_index</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lsf</name></decl>, <decl><type ref="prev"/><name>mpeg25</name></decl>, <decl><type ref="prev"/><name>bitrate_index</name></decl>, <decl><type ref="prev"/><name>frame_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_bsf_get_packet</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ff_mpa_check_header</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <literal type="number">15</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><literal type="string">"FFCMP3 0.0"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extradata invalid %d\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>header</name><operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata</name></name><operator>+</operator><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>MP3_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lsf</name> <operator>=</operator> <name>sample_rate</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">24000</literal><operator>+</operator><literal type="number">32000</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mpeg25</name> <operator>=</operator> <name>sample_rate</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">12000</literal><operator>+</operator><literal type="number">16000</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_rate_index</name><operator>=</operator> <operator>(</operator><name>header</name><operator>&gt;&gt;</operator><literal type="number">10</literal><operator>)</operator><operator>&amp;</operator><literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sample_rate_index</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sample_rate</name><operator>=</operator> <name><name>avpriv_mpa_freq_tab</name><index>[<expr><name>sample_rate_index</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>lsf</name> <operator>+</operator> <name>mpeg25</name><operator>)</operator></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>bitrate_index</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>bitrate_index</name><operator>&lt;</operator><literal type="number">30</literal></expr>;</condition> <incr><expr><name>bitrate_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name><name>avpriv_mpa_bitrate_tab</name><index>[<expr><name>lsf</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>bitrate_index</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <operator>(</operator><name>frame_size</name> <operator>*</operator> <literal type="number">144000</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>sample_rate</name> <operator>&lt;&lt;</operator> <name>lsf</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bitrate_index</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>frame_size</name> <operator>==</operator> <name>buf_size</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>frame_size</name> <operator>==</operator> <name>buf_size</name> <operator>+</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>bitrate_index</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not find bitrate_index.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>header</name> <operator>|=</operator> <operator>(</operator><name>bitrate_index</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>header</name> <operator>|=</operator> <operator>(</operator><name>bitrate_index</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>header</name> <operator>|=</operator> <operator>(</operator><name>frame_size</name> <operator>==</operator> <name>buf_size</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>frame_size</name> <operator>-</operator> <name>buf_size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>channels</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name><init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>frame_size</name> <operator>-</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>lsf</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>header</name> <operator>|=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>header</name> <operator>|=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xCF</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name><name>codec_ids</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_CODEC_ID_MP3</name></expr>, <expr><name>AV_CODEC_ID_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name></type> <name>ff_mp3_header_decompress_bsf</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mp3decomp"</literal></expr>,
<expr><operator>.</operator><name>filter</name> <operator>=</operator> <name>mp3_header_decompress</name></expr>,
<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <name>codec_ids</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
