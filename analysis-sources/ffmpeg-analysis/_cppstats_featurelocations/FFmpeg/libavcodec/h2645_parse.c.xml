<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\h2645_parse.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2645_parse.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_h2645_extract_rbsp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>H2645RBSP</name> <modifier>*</modifier></type><name>rbsp</name></decl></parameter>, <parameter><decl><type><name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>small_padding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>si</name></decl>, <decl><type ref="prev"/><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STARTCODE_TEST</name></cpp:macro> <cpp:value>if (i + 2 &lt; length &amp;&amp; src[i + 1] == 0 &amp;&amp; src[i + 2] &lt;= 3) { if (src[i + 2] != 3 &amp;&amp; src[i + 2] != 0) { length = i; } break; }</cpp:value></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_UNALIGNED</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_FIRST_ZERO</name></cpp:macro> <cpp:value>if (i &gt; 0 &amp;&amp; !src[i]) i--; while (src[i]) i++</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_64BIT</name></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">9</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>~</operator><call><name>AV_RN64</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>&amp;</operator>
<operator>(</operator><call><name>AV_RN64</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x0100010001000101ULL</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator>
<literal type="number">0x8000800080008080ULL</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>FIND_FIRST_ZERO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>STARTCODE_TEST</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">5</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>~</operator><call><name>AV_RN32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>&amp;</operator>
<operator>(</operator><call><name>AV_RN32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x01000101U</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator>
<literal type="number">0x80008080U</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>FIND_FIRST_ZERO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>STARTCODE_TEST</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>STARTCODE_TEST</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>length</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>small_padding</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator>
<name><name>nal</name><operator>-&gt;</operator><name>raw_data</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator>
<name><name>nal</name><operator>-&gt;</operator><name>raw_size</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<return>return <expr><name>length</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>rbsp_buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer</name><index>[<expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_size</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>nal</name><operator>-&gt;</operator><name>rbsp_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>si</name> <operator>=</operator> <name>di</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>si</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>si</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>di</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>si</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>di</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>si</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><name>si</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>si</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>si</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>si</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>di</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>di</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>si</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos_size</name></name> <operator>&lt;</operator> <name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos_size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos_size</name></name> <operator>&gt;=</operator> <name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos</name></name></expr></argument>,
<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos_size</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos</name><index>[<expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>di</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 
<goto>goto <name>nsc</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>di</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>si</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>si</name> <operator>&lt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>di</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>si</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<label><name>nsc</name>:</label>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>di</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>di</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>raw_data</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>raw_size</name></name> <operator>=</operator> <name>si</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_size</name></name> <operator>+=</operator> <name>si</name></expr>;</expr_stmt>

<return>return <expr><name>si</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>hevc_nal_type_name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"TRAIL_N"</literal></expr>, 
<expr><literal type="string">"TRAIL_R"</literal></expr>, 
<expr><literal type="string">"TSA_N"</literal></expr>, 
<expr><literal type="string">"TSA_R"</literal></expr>, 
<expr><literal type="string">"STSA_N"</literal></expr>, 
<expr><literal type="string">"STSA_R"</literal></expr>, 
<expr><literal type="string">"RADL_N"</literal></expr>, 
<expr><literal type="string">"RADL_R"</literal></expr>, 
<expr><literal type="string">"RASL_N"</literal></expr>, 
<expr><literal type="string">"RASL_R"</literal></expr>, 
<expr><literal type="string">"RSV_VCL_N10"</literal></expr>, 
<expr><literal type="string">"RSV_VCL_R11"</literal></expr>, 
<expr><literal type="string">"RSV_VCL_N12"</literal></expr>, 
<expr><literal type="string">"RSV_VLC_R13"</literal></expr>, 
<expr><literal type="string">"RSV_VCL_N14"</literal></expr>, 
<expr><literal type="string">"RSV_VCL_R15"</literal></expr>, 
<expr><literal type="string">"BLA_W_LP"</literal></expr>, 
<expr><literal type="string">"BLA_W_RADL"</literal></expr>, 
<expr><literal type="string">"BLA_N_LP"</literal></expr>, 
<expr><literal type="string">"IDR_W_RADL"</literal></expr>, 
<expr><literal type="string">"IDR_N_LP"</literal></expr>, 
<expr><literal type="string">"CRA_NUT"</literal></expr>, 
<expr><literal type="string">"RSV_IRAP_VCL22"</literal></expr>, 
<expr><literal type="string">"RSV_IRAP_VCL23"</literal></expr>, 
<expr><literal type="string">"RSV_VCL24"</literal></expr>, 
<expr><literal type="string">"RSV_VCL25"</literal></expr>, 
<expr><literal type="string">"RSV_VCL26"</literal></expr>, 
<expr><literal type="string">"RSV_VCL27"</literal></expr>, 
<expr><literal type="string">"RSV_VCL28"</literal></expr>, 
<expr><literal type="string">"RSV_VCL29"</literal></expr>, 
<expr><literal type="string">"RSV_VCL30"</literal></expr>, 
<expr><literal type="string">"RSV_VCL31"</literal></expr>, 
<expr><literal type="string">"VPS"</literal></expr>, 
<expr><literal type="string">"SPS"</literal></expr>, 
<expr><literal type="string">"PPS"</literal></expr>, 
<expr><literal type="string">"AUD"</literal></expr>, 
<expr><literal type="string">"EOS_NUT"</literal></expr>, 
<expr><literal type="string">"EOB_NUT"</literal></expr>, 
<expr><literal type="string">"FD_NUT"</literal></expr>, 
<expr><literal type="string">"SEI_PREFIX"</literal></expr>, 
<expr><literal type="string">"SEI_SUFFIX"</literal></expr>, 
<expr><literal type="string">"RSV_NVCL41"</literal></expr>, 
<expr><literal type="string">"RSV_NVCL42"</literal></expr>, 
<expr><literal type="string">"RSV_NVCL43"</literal></expr>, 
<expr><literal type="string">"RSV_NVCL44"</literal></expr>, 
<expr><literal type="string">"RSV_NVCL45"</literal></expr>, 
<expr><literal type="string">"RSV_NVCL46"</literal></expr>, 
<expr><literal type="string">"RSV_NVCL47"</literal></expr>, 
<expr><literal type="string">"UNSPEC48"</literal></expr>, 
<expr><literal type="string">"UNSPEC49"</literal></expr>, 
<expr><literal type="string">"UNSPEC50"</literal></expr>, 
<expr><literal type="string">"UNSPEC51"</literal></expr>, 
<expr><literal type="string">"UNSPEC52"</literal></expr>, 
<expr><literal type="string">"UNSPEC53"</literal></expr>, 
<expr><literal type="string">"UNSPEC54"</literal></expr>, 
<expr><literal type="string">"UNSPEC55"</literal></expr>, 
<expr><literal type="string">"UNSPEC56"</literal></expr>, 
<expr><literal type="string">"UNSPEC57"</literal></expr>, 
<expr><literal type="string">"UNSPEC58"</literal></expr>, 
<expr><literal type="string">"UNSPEC59"</literal></expr>, 
<expr><literal type="string">"UNSPEC60"</literal></expr>, 
<expr><literal type="string">"UNSPEC61"</literal></expr>, 
<expr><literal type="string">"UNSPEC62"</literal></expr>, 
<expr><literal type="string">"UNSPEC63"</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hevc_nal_unit_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nal_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>nal_type</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nal_type</name> <operator>&lt;</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>hevc_nal_type_name</name><index>[<expr><name>nal_type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>h264_nal_type_name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Unspecified 0"</literal></expr>, 
<expr><literal type="string">"Coded slice of a non-IDR picture"</literal></expr>, 
<expr><literal type="string">"Coded slice data partition A"</literal></expr>, 
<expr><literal type="string">"Coded slice data partition B"</literal></expr>, 
<expr><literal type="string">"Coded slice data partition C"</literal></expr>, 
<expr><literal type="string">"IDR"</literal></expr>, 
<expr><literal type="string">"SEI"</literal></expr>, 
<expr><literal type="string">"SPS"</literal></expr>, 
<expr><literal type="string">"PPS"</literal></expr>, 
<expr><literal type="string">"AUD"</literal></expr>, 
<expr><literal type="string">"End of sequence"</literal></expr>, 
<expr><literal type="string">"End of stream"</literal></expr>, 
<expr><literal type="string">"Filler data"</literal></expr>, 
<expr><literal type="string">"SPS extension"</literal></expr>, 
<expr><literal type="string">"Prefix"</literal></expr>, 
<expr><literal type="string">"Subset SPS"</literal></expr>, 
<expr><literal type="string">"Depth parameter set"</literal></expr>, 
<expr><literal type="string">"Reserved 17"</literal></expr>, 
<expr><literal type="string">"Reserved 18"</literal></expr>, 
<expr><literal type="string">"Auxiliary coded picture without partitioning"</literal></expr>, 
<expr><literal type="string">"Slice extension"</literal></expr>, 
<expr><literal type="string">"Slice extension for a depth view or a 3D-AVC texture view"</literal></expr>, 
<expr><literal type="string">"Reserved 22"</literal></expr>, 
<expr><literal type="string">"Reserved 23"</literal></expr>, 
<expr><literal type="string">"Unspecified 24"</literal></expr>, 
<expr><literal type="string">"Unspecified 25"</literal></expr>, 
<expr><literal type="string">"Unspecified 26"</literal></expr>, 
<expr><literal type="string">"Unspecified 27"</literal></expr>, 
<expr><literal type="string">"Unspecified 28"</literal></expr>, 
<expr><literal type="string">"Unspecified 29"</literal></expr>, 
<expr><literal type="string">"Unspecified 30"</literal></expr>, 
<expr><literal type="string">"Unspecified 31"</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>h264_nal_unit_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nal_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>nal_type</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nal_type</name> <operator>&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>h264_nal_type_name</name><index>[<expr><name>nal_type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_bit_length</name><parameter_list>(<parameter><decl><type><name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip_trailing_zeros</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>nal</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>skip_trailing_zeros</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>nal</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>nal</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>*=</operator> <literal type="number">8</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <call><name>ff_ctz</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>hevc_parse_nal_header</name><parameter_list>(<parameter><decl><type><name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>nal</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>nuh_layer_id</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>temporal_id</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>temporal_id</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"nal_unit_type: %d(%s), nuh_layer_id: %d, temporal_id: %d\n"</literal></expr></argument>,
<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><call><name>hevc_nal_unit_name</name><argument_list>(<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>nuh_layer_id</name></name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>temporal_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_parse_nal_header</name><parameter_list>(<parameter><decl><type><name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>nal</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>ref_idc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"nal_unit_type: %d(%s), nal_ref_idc: %d\n"</literal></expr></argument>,
<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><call><name>h264_nal_unit_name</name><argument_list>(<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>ref_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_next_start_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>next_avc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name>next_avc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>next_avc</name> <operator>-</operator> <name>buf</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>next_avc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>alloc_rbsp_buffer</name><parameter_list>(<parameter><decl><type><name>H2645RBSP</name> <modifier>*</modifier></type><name>rbsp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>min_size</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_alloc_size</name></name> <operator>&gt;=</operator> <name>size</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_ref</name></name> <operator>||</operator> <call><name>av_buffer_is_writable</name><argument_list>(<argument><expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_ref</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer</name></name> <operator>+</operator> <name>min_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>size</name> <operator>/</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_alloc_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_ref</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_ref</name></name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_alloc_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbsp</name><operator>-&gt;</operator><name>rbsp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h2645_packet_split</name><parameter_list>(<parameter><decl><type><name>H2645Packet</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_nalff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nal_length_size</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>small_padding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>bc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>consumed</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_avc</name> <init>= <expr><ternary><condition><expr><name>is_nalff</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>length</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>padding</name> <init>= <expr><ternary><condition><expr><name>small_padding</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>MAX_MBPAIR_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alloc_rbsp_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>rbsp</name></name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <name>padding</name></expr></argument>, <argument><expr><name>use_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>rbsp</name><operator>.</operator><name>rbsp_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>rbsp</name><operator>.</operator><name>rbsp_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>nb_nals</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extract_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_trailing_zeros</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>next_avc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>extract_length</name> <operator>=</operator> <call><name>get_nalsize</name><argument_list>(<argument><expr><name>nal_length_size</name></expr></argument>,
<argument><expr><name><name>bc</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>extract_length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>extract_length</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>, <argument><expr><name>nal_length_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_avc</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>extract_length</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buf_index</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>next_avc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Exceeded next NALFF position, re-syncing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>buf_index</name> <operator>=</operator> <call><name>find_next_start_code</name><argument_list>(<argument><expr><name><name>bc</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>next_avc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>, <argument><expr><name>buf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>nb_nals</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No start code is found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extract_length</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>next_avc</name> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>next_avc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>, <argument><expr><name>next_avc</name> <operator>-</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>nals_allocated</name></name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>nb_nals</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>nals_allocated</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pkt</name><operator>-&gt;</operator><name>nals</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>nals</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>nal_buffer_size</name></name></expr></argument>, <argument><expr><name>new_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pkt</name><operator>-&gt;</operator><name>nals</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>nals</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>nals</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>nals_allocated</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pkt</name><operator>-&gt;</operator><name>nals</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nal</name> <operator>=</operator> <operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>nals</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>nb_nals</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos_size</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nal</name><operator>-&gt;</operator><name>skipped_bytes_pos</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>nals_allocated</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nal</name> <operator>=</operator> <operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>nals</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>nb_nals</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>ff_h2645_extract_rbsp</name><argument_list>(<argument><expr><name><name>bc</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>extract_length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>rbsp</name></name></expr></argument>, <argument><expr><name>nal</name></expr></argument>, <argument><expr><name>small_padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>consumed</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_nalff</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>extract_length</name> <operator>!=</operator> <name>consumed</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>extract_length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"NALFF: Consumed only %d bytes instead of %d\n"</literal></expr></argument>,
<argument><expr><name>consumed</name></expr></argument>, <argument><expr><name>extract_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>nb_nals</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<call><name>bytestream2_peek_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x000001E0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>skip_trailing_zeros</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nal</name><operator>-&gt;</operator><name>size_bits</name></name> <operator>=</operator> <call><name>get_bit_length</name><argument_list>(<argument><expr><name>nal</name></expr></argument>, <argument><expr><name>skip_trailing_zeros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nal</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>size_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hevc_parse_nal_header</name><argument_list>(<argument><expr><name>nal</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>h264_parse_nal_header</name><argument_list>(<argument><expr><name>nal</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>nal</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>nal</name><operator>-&gt;</operator><name>size_bits</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid NAL unit %d, skipping.\n"</literal></expr></argument>,
<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>nb_nals</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h2645_packet_uninit</name><parameter_list>(<parameter><decl><type><name>H2645Packet</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>nals_allocated</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>nals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skipped_bytes_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>nals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>nals_allocated</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>nal_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>rbsp</name><operator>.</operator><name>rbsp_buffer_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>rbsp</name><operator>.</operator><name>rbsp_buffer_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>rbsp</name><operator>.</operator><name>rbsp_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>rbsp</name><operator>.</operator><name>rbsp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>rbsp</name><operator>.</operator><name>rbsp_buffer_alloc_size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>rbsp</name><operator>.</operator><name>rbsp_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
