<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vc1_loopfilter.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1dsp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vc1_h_overlap_filter</name><argument_list>(<argument><expr><name>VC1Context</name> <operator>*</operator><name>v</name></expr></argument>, <argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>left_block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>right_block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>left_fieldtx</name></expr></argument>,
<argument><expr><name>int</name> <name>right_fieldtx</name></expr></argument>, <argument><expr><name>int</name> <name>block_num</name></expr></argument>)</argument_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>block_num</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_s_overlap</name></name><argument_list>(<argument><expr><name><name>left_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>right_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>left_fieldtx</name> <operator>^</operator> <name>right_fieldtx</name></expr> ?</condition><then> <expr><literal type="number">16</literal> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>left_fieldtx</name></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>left_fieldtx</name> <operator>^</operator> <name>right_fieldtx</name></expr> ?</condition><then> <expr><literal type="number">16</literal> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>right_fieldtx</name></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>left_fieldtx</name> <operator>||</operator> <name>right_fieldtx</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_s_overlap</name></name><argument_list>(<argument><expr><name><name>right_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>right_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>right_fieldtx</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_s_overlap</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><name>left_fieldtx</name> <operator>&amp;&amp;</operator> <name>right_fieldtx</name></expr> ?</condition><then> <expr><name><name>left_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name><name>left_block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>left_fieldtx</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>right_fieldtx</name></expr> ?</condition><then> <expr><name><name>right_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name><name>right_block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>left_fieldtx</name> <operator>^</operator> <name>right_fieldtx</name></expr> ?</condition><then> <expr><literal type="number">16</literal> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>left_fieldtx</name></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>left_fieldtx</name> <operator>^</operator> <name>right_fieldtx</name></expr> ?</condition><then> <expr><literal type="number">16</literal> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>right_fieldtx</name></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>left_fieldtx</name> <operator>||</operator> <name>right_fieldtx</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_s_overlap</name></name><argument_list>(<argument><expr><name><name>right_block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>right_block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>right_fieldtx</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_s_overlap</name></name><argument_list>(<argument><expr><name><name>left_block</name><index>[<expr><name>block_num</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>right_block</name><index>[<expr><name>block_num</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vc1_v_overlap_filter</name><argument_list>(<argument><expr><name>VC1Context</name> <operator>*</operator><name>v</name></expr></argument>, <argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>top_block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>bottom_block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>block_num</name></expr></argument>)</argument_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>block_num</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_s_overlap</name></name><argument_list>(<argument><expr><name><name>top_block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bottom_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_s_overlap</name></name><argument_list>(<argument><expr><name><name>top_block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bottom_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_s_overlap</name></name><argument_list>(<argument><expr><name><name>bottom_block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bottom_block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_s_overlap</name></name><argument_list>(<argument><expr><name><name>bottom_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bottom_block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_s_overlap</name></name><argument_list>(<argument><expr><name><name>top_block</name><index>[<expr><name>block_num</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bottom_block</name><index>[<expr><name>block_num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>ff_vc1_i_overlap_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>topleft_blk</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>top_blk</name><operator>)</operator><index>[<expr><literal type="number">64</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>left_blk</name><operator>)</operator><index>[<expr><literal type="number">64</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>cur_blk</name><operator>)</operator><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_count</name> <init>= <expr><ternary><condition><expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>topleft_blk</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>topleft_blk_idx</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>top_blk</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>top_blk_idx</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>left_blk</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>left_blk_idx</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_blk</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cur_blk_idx</name></name></expr>]</index></name></expr>;</expr_stmt>









<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">5</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>||</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>condover</name></name> <operator>==</operator> <name>CONDOVER_ALL</name> <operator>||</operator>
<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>over_flags_plane</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>over_flags_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_h_overlap_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr> ?</condition><then> <expr><name>left_blk</name></expr> </then><else>: <expr><name>cur_blk</name></expr></else></ternary></expr></argument>, <argument><expr><name>cur_blk</name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>!=</operator> <name>ILACE_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>||</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>condover</name></name> <operator>==</operator> <name>CONDOVER_ALL</name> <operator>||</operator>
<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>over_flags_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>over_flags_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_v_overlap_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr> ?</condition><then> <expr><name>left_blk</name></expr> </then><else>: <expr><name>topleft_blk</name></expr></else></ternary></expr></argument>, <argument><expr><name>left_blk</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>||</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>condover</name></name> <operator>==</operator> <name>CONDOVER_ALL</name> <operator>||</operator>
<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>over_flags_plane</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>over_flags_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_v_overlap_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr> ?</condition><then> <expr><name>cur_blk</name></expr> </then><else>: <expr><name>top_blk</name></expr></else></ternary></expr></argument>, <argument><expr><name>cur_blk</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_p_overlap_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>topleft_blk</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>top_blk</name><operator>)</operator><index>[<expr><literal type="number">64</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>left_blk</name><operator>)</operator><index>[<expr><literal type="number">64</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>cur_blk</name><operator>)</operator><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_count</name> <init>= <expr><ternary><condition><expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>topleft_blk</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>topleft_blk_idx</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>top_blk</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>top_blk_idx</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>left_blk</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>left_blk_idx</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_blk</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>cur_blk_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">5</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_h_overlap_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr> ?</condition><then> <expr><name>left_blk</name></expr> </then><else>: <expr><name>cur_blk</name></expr></else></ternary></expr></argument>, <argument><expr><name>cur_blk</name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>!=</operator> <name>ILACE_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_v_overlap_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr> ?</condition><then> <expr><name>left_blk</name></expr> </then><else>: <expr><name>topleft_blk</name></expr></else></ternary></expr></argument>, <argument><expr><name>left_blk</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>v</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_v_overlap_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr> ?</condition><then> <expr><name>cur_blk</name></expr> </then><else>: <expr><name>top_blk</name></expr></else></ternary></expr></argument>, <argument><expr><name>cur_blk</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT_EDGE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHT_EDGE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_EDGE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOTTOM_EDGE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vc1_i_h_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pq</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LEFT_EDGE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter16</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vc1_i_v_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>fieldtx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pq</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TOP_EDGE</name><operator>)</operator> <operator>||</operator> <name>block_num</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>block_num</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><name>fieldtx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter16</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter16</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else
if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter16</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_i_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_count</name> <init>= <expr><ternary><condition><expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl>, <decl><type ref="prev"/><name>fieldtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>









<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TOP_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_i_v_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fieldtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>end_mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_i_v_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fieldtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr> ?</condition><then> <expr><name>TOP_EDGE</name> <operator>|</operator> <name>BOTTOM_EDGE</name></expr> </then><else>: <expr><name>BOTTOM_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_i_v_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fieldtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>end_mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_i_v_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fieldtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_i_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>end_mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name> <operator>|</operator> <name>RIGHT_EDGE</name></expr> </then><else>: <expr><name>RIGHT_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_i_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_i_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>end_mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name> <operator>|</operator> <name>RIGHT_EDGE</name></expr> </then><else>: <expr><name>RIGHT_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_i_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_i_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>end_mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name> <operator>|</operator> <name>RIGHT_EDGE</name></expr> </then><else>: <expr><name>RIGHT_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_i_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vc1_p_h_loop_filter</name><argument_list>(<argument><expr><name>VC1Context</name> <operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest</name></expr></argument>, <argument><expr><name>uint32_t</name> <operator>*</operator><name>cbp</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>is_intra</name></expr></argument>, <argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>mv_f</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>ttblk</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>flags</name></expr></argument>, <argument><expr><name>int</name> <name>block_num</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pq</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>left_cbp</name> <init>= <expr><name><name>cbp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>right_cbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>left_is_intra</name></decl>, <decl><type ref="prev"/><name>right_is_intra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>linesize</name> <init>= <expr><ternary><condition><expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RIGHT_EDGE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>left_is_intra</name> <operator>=</operator> <name><name>is_intra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>block_num</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>right_is_intra</name> <operator>=</operator> <name><name>is_intra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>block_num</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>right_cbp</name> <operator>=</operator> <name><name>cbp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>block_num</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>right_is_intra</name> <operator>=</operator> <name><name>is_intra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>block_num</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>right_cbp</name> <operator>=</operator> <name><name>cbp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>block_num</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>right_is_intra</name> <operator>=</operator> <name><name>is_intra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>block_num</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>right_cbp</name> <operator>=</operator> <name><name>cbp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>block_num</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left_is_intra</name> <operator>||</operator> <name>right_is_intra</name> <operator>||</operator>
<name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>
<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name> <operator>&amp;&amp;</operator> <name><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>mv_f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>left_cbp</name> <operator>|</operator> <operator>(</operator><name>right_cbp</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tt</name> <operator>=</operator> <name><name>ttblk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_4X8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>left_cbp</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>left_cbp</name> <operator>&amp;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vc1_p_v_loop_filter</name><argument_list>(<argument><expr><name>VC1Context</name> <operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest</name></expr></argument>, <argument><expr><name>uint32_t</name> <operator>*</operator><name>cbp</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>is_intra</name></expr></argument>, <argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>mv_f</name></expr></argument>,
<argument><expr><name>int</name> <operator>*</operator><name>ttblk</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>flags</name></expr></argument>, <argument><expr><name>int</name> <name>block_num</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pq</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>top_cbp</name> <init>= <expr><name><name>cbp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>bottom_cbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>top_is_intra</name></decl>, <decl><type ref="prev"/><name>bottom_is_intra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>linesize</name> <init>= <expr><ternary><condition><expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BOTTOM_EDGE</name><operator>)</operator> <operator>||</operator> <name>block_num</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>top_is_intra</name> <operator>=</operator> <name><name>is_intra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>block_num</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bottom_is_intra</name> <operator>=</operator> <name><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>block_num</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bottom_cbp</name> <operator>=</operator> <name><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>block_num</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bottom_is_intra</name> <operator>=</operator> <name><name>is_intra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>block_num</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bottom_cbp</name> <operator>=</operator> <name><name>cbp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>block_num</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bottom_is_intra</name> <operator>=</operator> <name><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>block_num</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bottom_cbp</name> <operator>=</operator> <name><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>block_num</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>top_is_intra</name> <operator>||</operator> <name>bottom_is_intra</name> <operator>||</operator>
<name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>mv</name><index>[<expr><ternary><condition><expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></else></ternary></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>
<name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>mv</name><index>[<expr><ternary><condition><expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></else></ternary></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>
<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name> <operator>&amp;&amp;</operator> <name><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>mv_f</name><index>[<expr><ternary><condition><expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></else></ternary></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>top_cbp</name> <operator>|</operator> <operator>(</operator><name>bottom_cbp</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tt</name> <operator>=</operator> <name><name>ttblk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_8X4</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>top_cbp</name> <operator>&amp;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>top_cbp</name> <operator>&amp;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>ff_vc1_p_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_count</name> <init>= <expr><ternary><condition><expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>is_intra</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>uvmv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ttblk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>TOP_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_v_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>TOP_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_v_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TOP_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_v_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name></expr> ?</condition><then> <expr><name>TOP_EDGE</name> <operator>|</operator> <name>BOTTOM_EDGE</name></expr> </then><else>: <expr><name>BOTTOM_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_v_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TOP_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_v_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name></expr> ?</condition><then> <expr><name>TOP_EDGE</name> <operator>|</operator> <name>BOTTOM_EDGE</name></expr> </then><else>: <expr><name>BOTTOM_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_v_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr> ?</condition><then> <expr><name>RIGHT_EDGE</name></expr> </then><else>: <expr><name>LEFT_EDGE</name> <operator>|</operator> <name>RIGHT_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr> ?</condition><then> <expr><name>RIGHT_EDGE</name></expr> </then><else>: <expr><name>LEFT_EDGE</name> <operator>|</operator> <name>RIGHT_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_intra</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>is_intra</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvmv</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>luma_mv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr> ?</condition><then> <expr><name>RIGHT_EDGE</name></expr> </then><else>: <expr><name>LEFT_EDGE</name> <operator>|</operator> <name>RIGHT_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>cbp</name></expr></argument>,
<argument><expr><name>is_intra</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>uvmv</name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>mb_off</name></name></expr>]</index></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>mv_f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>blocks_off</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vc1_p_h_intfr_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ttblk</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>fieldtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pq</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><ternary><condition><expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>tt</name> <operator>=</operator> <name><name>ttblk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fieldtx</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_4X8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RIGHT_EDGE</name><operator>)</operator> <operator>||</operator> <name>block_num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_4X8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <literal type="number">7</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RIGHT_EDGE</name><operator>)</operator> <operator>||</operator> <name>block_num</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <literal type="number">7</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_4X8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>linesize</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RIGHT_EDGE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>linesize</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_4X8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>linesize</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RIGHT_EDGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>linesize</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vc1_p_v_intfr_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ttblk</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>fieldtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pq</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><ternary><condition><expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>tt</name> <operator>=</operator> <name><name>ttblk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fieldtx</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_8X4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BOTTOM_EDGE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_8X4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BOTTOM_EDGE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TOP_EDGE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_8X4</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BOTTOM_EDGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_8X4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BOTTOM_EDGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TOP_EDGE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_8X4</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_p_intfr_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_count</name> <init>= <expr><ternary><condition><expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ttblk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fieldtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>









<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TOP_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_v_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TOP_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_v_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name></expr> ?</condition><then> <expr><name>TOP_EDGE</name> <operator>|</operator> <name>BOTTOM_EDGE</name></expr> </then><else>: <expr><name>BOTTOM_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_v_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name></expr> ?</condition><then> <expr><name>TOP_EDGE</name> <operator>|</operator> <name>BOTTOM_EDGE</name></expr> </then><else>: <expr><name>BOTTOM_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_v_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr> ?</condition><then> <expr><name>RIGHT_EDGE</name></expr> </then><else>: <expr><name>LEFT_EDGE</name> <operator>|</operator> <name>RIGHT_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr> ?</condition><then> <expr><name>RIGHT_EDGE</name></expr> </then><else>: <expr><name>LEFT_EDGE</name> <operator>|</operator> <name>RIGHT_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr> ?</condition><then> <expr><name>RIGHT_EDGE</name></expr> </then><else>: <expr><name>LEFT_EDGE</name> <operator>|</operator> <name>RIGHT_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>fieldtx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_p_h_intfr_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ttblk</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>fieldtx</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vc1_b_h_intfi_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cbp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ttblk</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pq</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>block_cbp</name> <init>= <expr><name><name>cbp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>linesize</name> <init>= <expr><ternary><condition><expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RIGHT_EDGE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tt</name> <operator>=</operator> <name><name>ttblk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_4X8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>block_cbp</name> <operator>|</operator> <operator>(</operator><name>block_cbp</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_h_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vc1_b_v_intfi_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cbp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ttblk</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pq</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>block_cbp</name> <init>= <expr><name><name>cbp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>linesize</name> <init>= <expr><ternary><condition><expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block_num</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <operator>(</operator><name>block_num</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BOTTOM_EDGE</name><operator>)</operator> <operator>||</operator> <name>block_num</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter8</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tt</name> <operator>=</operator> <name><name>ttblk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>block_num</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tt</name> <operator>==</operator> <name>TT_4X4</name> <operator>||</operator> <name>tt</name> <operator>==</operator> <name>TT_8X4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>block_cbp</name> <operator>|</operator> <operator>(</operator><name>block_cbp</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>v</name><operator>-&gt;</operator><name>vc1dsp</name><operator>.</operator><name>vc1_v_loop_filter4</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_b_intfi_loop_filter</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_count</name> <init>= <expr><ternary><condition><expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cbp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ttblk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TOP_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_b_v_intfi_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><name>ttblk</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr> ?</condition><then> <expr><name>TOP_EDGE</name> <operator>|</operator> <name>BOTTOM_EDGE</name></expr> </then><else>: <expr><name>BOTTOM_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_b_v_intfi_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><name>ttblk</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_b_h_intfi_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><name>ttblk</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name> <operator>|</operator> <name>RIGHT_EDGE</name></expr> </then><else>: <expr><name>RIGHT_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_b_h_intfi_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><name>ttblk</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cbp</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ttblk</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_b_h_intfi_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><name>ttblk</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ttblk</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>LEFT_EDGE</name> <operator>|</operator> <name>RIGHT_EDGE</name></expr> </then><else>: <expr><name>RIGHT_EDGE</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vc1_b_h_intfi_loop_filter</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name>dest</name></expr></else></ternary></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><name>ttblk</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
