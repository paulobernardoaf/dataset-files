<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\rectangle.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_RECTANGLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_RECTANGLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>







<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>fill_rectangle</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>vp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>size</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>size</name><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name>size</name><operator>==</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>w</name><operator>&lt;=</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>*=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stride</name> <operator>*=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name>vp</name><operator>)</operator><operator>&amp;</operator><operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>&lt;&lt;</operator><operator>(</operator><name>HAVE_NEON</name><operator>|</operator><name>ARCH_PPC</name><operator>|</operator><name>HAVE_MMX</name><operator>)</operator></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>stride</name><operator>&amp;</operator><operator>(</operator><name>w</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>w</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>v</name><init>= <expr><ternary><condition><expr><name>size</name><operator>==</operator><literal type="number">4</literal></expr> ?</condition><then> <expr><name>val</name></expr> </then><else>: <expr><name>val</name><operator>*</operator><literal type="number">0x0101</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>w</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>v</name><init>= <expr><ternary><condition><expr><name>size</name><operator>==</operator><literal type="number">4</literal></expr> ?</condition><then> <expr><name>val</name></expr> </then><else>: <expr><ternary><condition><expr><name>size</name><operator>==</operator><literal type="number">2</literal></expr> ?</condition><then> <expr><name>val</name><operator>*</operator><literal type="number">0x00010001</literal></expr> </then><else>: <expr><name>val</name><operator>*</operator><literal type="number">0x01010101</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>w</name><operator>==</operator><literal type="number">8</literal></expr>)</condition><block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_64BIT</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>v</name><init>= <expr><ternary><condition><expr><name>size</name><operator>==</operator><literal type="number">2</literal></expr> ?</condition><then> <expr><name>val</name><operator>*</operator><literal type="number">0x0001000100010001ULL</literal></expr> </then><else>: <expr><name>val</name><operator>*</operator><literal type="number">0x0100000001ULL</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>w</name><operator>==</operator><literal type="number">16</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>v</name><init>= <expr><name>val</name><operator>*</operator><literal type="number">0x0100000001ULL</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">8</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">8</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">8</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">8</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>v</name><init>= <expr><ternary><condition><expr><name>size</name><operator>==</operator><literal type="number">2</literal></expr> ?</condition><then> <expr><name>val</name><operator>*</operator><literal type="number">0x00010001</literal></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>w</name><operator>==</operator><literal type="number">16</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">8</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator><literal type="number">12</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">8</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator><literal type="number">12</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">8</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator><literal type="number">12</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">8</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator><literal type="number">12</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name><operator>)</operator><operator>=</operator> <name>val</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>h</name><operator>==</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
