<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dcadsp.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcadsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcamath.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_hf_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>vq_index</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int8_t</name></type> <name><name>hf_vq</name><index>[<expr><literal type="number">1024</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name><name>scale_factors</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>sb_start</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>sb_end</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>sb_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sb_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>coeff</name> <init>= <expr><name><name>hf_vq</name><index>[<expr><name><name>vq_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>scale</name> <init>= <expr><name><name>scale_factors</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>ofs</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><name><name>coeff</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>scale</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_joint_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>scale_factors</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>sb_start</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>sb_end</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>sb_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sb_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>scale</name> <init>= <expr><name><name>scale_factors</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>ofs</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><call><name>mul17</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name>ofs</name></expr>]</index></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lfe_fir_float_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pcm_samples</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lfe_samples</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter_coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>npcmblocks</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dec_select</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>factor</name> <init>= <expr><literal type="number">64</literal> <operator>&lt;&lt;</operator> <name>dec_select</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncoeffs</name> <init>= <expr><literal type="number">8</literal> <operator>&gt;&gt;</operator> <name>dec_select</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nlfesamples</name> <init>= <expr><name>npcmblocks</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>dec_select</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlfesamples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>factor</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ncoeffs</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>filter_coeff</name><index>[ <expr><name>j</name> <operator>*</operator> <name>ncoeffs</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>*</operator> <name><name>lfe_samples</name><index>[<expr><operator>-</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>filter_coeff</name><index>[<expr><literal type="number">255</literal> <operator>-</operator> <name>j</name> <operator>*</operator> <name>ncoeffs</name> <operator>-</operator> <name>k</name></expr>]</index></name> <operator>*</operator> <name><name>lfe_samples</name><index>[<expr><operator>-</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>pcm_samples</name><index>[ <expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcm_samples</name><index>[<expr><name>factor</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>lfe_samples</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pcm_samples</name> <operator>+=</operator> <name>factor</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lfe_fir0_float_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pcm_samples</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lfe_samples</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter_coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>npcmblocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lfe_fir_float_c</name><argument_list>(<argument><expr><name>pcm_samples</name></expr></argument>, <argument><expr><name>lfe_samples</name></expr></argument>, <argument><expr><name>filter_coeff</name></expr></argument>, <argument><expr><name>npcmblocks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lfe_fir1_float_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pcm_samples</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lfe_samples</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter_coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>npcmblocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>lfe_fir_float_c</name><argument_list>(<argument><expr><name>pcm_samples</name></expr></argument>, <argument><expr><name>lfe_samples</name></expr></argument>, <argument><expr><name>filter_coeff</name></expr></argument>, <argument><expr><name>npcmblocks</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lfe_x96_float_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hist</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>prev</name> <init>= <expr><operator>*</operator><name>hist</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.75f</literal> <operator>*</operator> <name>prev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><literal type="number">0.75f</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.25f</literal> <operator>*</operator> <name>prev</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>hist</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sub_qmf32_float_c</name><parameter_list>(<parameter><decl><type><name>SynthFilterContext</name> <modifier>*</modifier></type><name>synth</name></decl></parameter>,
<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>imdct</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pcm_samples</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>subband_samples_lo</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>subband_samples_hi</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hist1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hist2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter_coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>npcmblocks</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>npcmblocks</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>subband_samples_lo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>subband_samples_lo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name><name>synth</name><operator>-&gt;</operator><name>synth_filter_float</name></name><argument_list>(<argument><expr><name>imdct</name></expr></argument>, <argument><expr><name>hist1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>hist2</name></expr></argument>, <argument><expr><name>filter_coeff</name></expr></argument>,
<argument><expr><name>pcm_samples</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pcm_samples</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sub_qmf64_float_c</name><parameter_list>(<parameter><decl><type><name>SynthFilterContext</name> <modifier>*</modifier></type><name>synth</name></decl></parameter>,
<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>imdct</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pcm_samples</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>subband_samples_lo</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>subband_samples_hi</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hist1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hist2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>filter_coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>npcmblocks</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subband_samples_hi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>npcmblocks</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>subband_samples_hi</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>subband_samples_lo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>subband_samples_hi</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>subband_samples_lo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>subband_samples_hi</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>subband_samples_hi</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>subband_samples_hi</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>subband_samples_lo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>subband_samples_lo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name><name>synth</name><operator>-&gt;</operator><name>synth_filter_float_64</name></name><argument_list>(<argument><expr><name>imdct</name></expr></argument>, <argument><expr><name>hist1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>hist2</name></expr></argument>, <argument><expr><name>filter_coeff</name></expr></argument>,
<argument><expr><name>pcm_samples</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pcm_samples</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lfe_fir_fixed_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pcm_samples</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lfe_samples</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filter_coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>npcmblocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nlfesamples</name> <init>= <expr><name>npcmblocks</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlfesamples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>filter_coeff</name><index>[ <expr><name>j</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>*</operator> <name><name>lfe_samples</name><index>[<expr><operator>-</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>filter_coeff</name><index>[<expr><literal type="number">255</literal> <operator>-</operator> <name>j</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>k</name></expr>]</index></name> <operator>*</operator> <name><name>lfe_samples</name><index>[<expr><operator>-</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>pcm_samples</name><index>[ <expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><call><name>norm23</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcm_samples</name><index>[<expr><literal type="number">32</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><call><name>norm23</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>lfe_samples</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pcm_samples</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lfe_x96_fixed_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>hist</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>prev</name> <init>= <expr><operator>*</operator><name>hist</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>a</name> <init>= <expr><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">2097471</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">6291137</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>prev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>b</name> <init>= <expr><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">6291137</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">2097471</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>prev</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><call><name>norm23</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><call><name>norm23</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>hist</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sub_qmf32_fixed_c</name><parameter_list>(<parameter><decl><type><name>SynthFilterContext</name> <modifier>*</modifier></type><name>synth</name></decl></parameter>,
<parameter><decl><type><name>DCADCTContext</name> <modifier>*</modifier></type><name>imdct</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pcm_samples</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>subband_samples_lo</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>subband_samples_hi</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>hist1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>hist2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filter_coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>npcmblocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>npcmblocks</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>subband_samples_lo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name><name>synth</name><operator>-&gt;</operator><name>synth_filter_fixed</name></name><argument_list>(<argument><expr><name>imdct</name></expr></argument>, <argument><expr><name>hist1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>hist2</name></expr></argument>, <argument><expr><name>filter_coeff</name></expr></argument>,
<argument><expr><name>pcm_samples</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pcm_samples</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sub_qmf64_fixed_c</name><parameter_list>(<parameter><decl><type><name>SynthFilterContext</name> <modifier>*</modifier></type><name>synth</name></decl></parameter>,
<parameter><decl><type><name>DCADCTContext</name> <modifier>*</modifier></type><name>imdct</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pcm_samples</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>subband_samples_lo</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>subband_samples_hi</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>hist1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>hist2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filter_coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>npcmblocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subband_samples_hi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>npcmblocks</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>subband_samples_hi</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>subband_samples_lo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>subband_samples_hi</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>subband_samples_hi</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>subband_samples_lo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name><name>synth</name><operator>-&gt;</operator><name>synth_filter_fixed_64</name></name><argument_list>(<argument><expr><name>imdct</name></expr></argument>, <argument><expr><name>hist1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>hist2</name></expr></argument>, <argument><expr><name>filter_coeff</name></expr></argument>,
<argument><expr><name>pcm_samples</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pcm_samples</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decor_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name>coeff</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmix_sub_xch_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cs</name> <init>= <expr><call><name>mul23</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5931520</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>cs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>cs</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmix_sub_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>mul15</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmix_add_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>mul15</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmix_scale_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul15</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmix_scale_inv_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_inv</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul16</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>scale_inv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter0</name><parameter_list>(<parameter><decl><type><name>SUINT32</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <call><name>mul22</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter1</name><parameter_list>(<parameter><decl><type><name>SUINT32</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <call><name>mul23</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>assemble_freq_bands_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>filter0</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter0</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter0</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter0</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>coeff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>src0</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>filter1</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name><name>coeff</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>coeff</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter1</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name><name>coeff</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>++</operator><name>src0</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lbr_bank_c</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name><name>output</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coeff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>SW0</name> <init>= <expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>SW1</name> <init>= <expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>SW2</name> <init>= <expr><name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>SW3</name> <init>= <expr><name><name>coeff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>C1</name> <init>= <expr><name><name>coeff</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>C2</name> <init>= <expr><name><name>coeff</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>C3</name> <init>= <expr><name><name>coeff</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>C4</name> <init>= <expr><name><name>coeff</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>AL1</name> <init>= <expr><name><name>coeff</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>AL2</name> <init>= <expr><name><name>coeff</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>ofs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name>SW0</name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>SW3</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>SW1</name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>SW2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>SW1</name> <operator>+</operator> <name><name>src</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>SW2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>SW0</name> <operator>+</operator> <name><name>src</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>SW3</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>C1</name> <operator>*</operator> <name>b</name> <operator>-</operator> <name>C2</name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>C4</name> <operator>*</operator> <name>a</name> <operator>-</operator> <name>C3</name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>C1</name> <operator>*</operator> <name>d</name> <operator>-</operator> <name>C2</name> <operator>*</operator> <name>a</name> <operator>-</operator> <name>C4</name> <operator>*</operator> <name>b</name> <operator>-</operator> <name>C3</name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>C3</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>C2</name> <operator>*</operator> <name>d</name> <operator>-</operator> <name>C4</name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>C1</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>C3</name> <operator>*</operator> <name>a</name> <operator>-</operator> <name>C2</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>C4</name> <operator>*</operator> <name>d</name> <operator>-</operator> <name>C1</name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">12</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name><name>output</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>AL1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><name><name>output</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>AL1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>b</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>b</name> <operator>+</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>output</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>AL2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>output</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>AL2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>b</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>b</name> <operator>+</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lfe_iir_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>iir</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>hist</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>*</operator><name>input</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>factor</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>hist</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>iir</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>hist</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>iir</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>hist</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>iir</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>hist</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>iir</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hist</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hist</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hist</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_dcadsp_init</name><parameter_list>(<parameter><decl><type><name>DCADSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_hf</name></name> <operator>=</operator> <name>decode_hf_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_joint</name></name> <operator>=</operator> <name>decode_joint_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_fir_float</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>lfe_fir0_float_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_fir_float</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lfe_fir1_float_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_x96_float</name></name> <operator>=</operator> <name>lfe_x96_float_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sub_qmf_float</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sub_qmf32_float_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sub_qmf_float</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sub_qmf64_float_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_fir_fixed</name></name> <operator>=</operator> <name>lfe_fir_fixed_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_x96_fixed</name></name> <operator>=</operator> <name>lfe_x96_fixed_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sub_qmf_fixed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sub_qmf32_fixed_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sub_qmf_fixed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sub_qmf64_fixed_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decor</name></name> <operator>=</operator> <name>decor_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dmix_sub_xch</name></name> <operator>=</operator> <name>dmix_sub_xch_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dmix_sub</name></name> <operator>=</operator> <name>dmix_sub_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dmix_add</name></name> <operator>=</operator> <name>dmix_add_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dmix_scale</name></name> <operator>=</operator> <name>dmix_scale_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dmix_scale_inv</name></name> <operator>=</operator> <name>dmix_scale_inv_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>assemble_freq_bands</name></name> <operator>=</operator> <name>assemble_freq_bands_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lbr_bank</name></name> <operator>=</operator> <name>lbr_bank_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_iir</name></name> <operator>=</operator> <name>lfe_iir_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dcadsp_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
