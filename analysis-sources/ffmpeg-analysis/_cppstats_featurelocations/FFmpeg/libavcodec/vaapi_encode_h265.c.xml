<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vaapi_encode_h265.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_enc_hevc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mastering_display_metadata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_h265.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h265_profile_level.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_sei.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_encode.h"</cpp:file></cpp:include>

<enum>enum <block>{
<decl><name>SEI_MASTERING_DISPLAY</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>SEI_CONTENT_LIGHT_LEVEL</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeH265Picture</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pic_order_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_idr_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_nal_unit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pic_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIEncodeH265Picture</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeH265Context</name> <block>{
<decl_stmt><decl><type><name>VAAPIEncodeContext</name></type> <name>common</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sei</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>fixed_qp_idr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fixed_qp_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fixed_qp_b</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>H265RawAUD</name></type> <name>raw_aud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawVPS</name></type> <name>raw_vps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawSPS</name></type> <name>raw_sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawPPS</name></type> <name>raw_pps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawSEI</name></type> <name>raw_sei</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawSlice</name></type> <name>raw_slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H265RawSEIMasteringDisplayColourVolume</name></type> <name>sei_mastering_display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawSEIContentLightLevelInfo</name></type> <name>sei_content_light_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>cbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodedBitstreamFragment</name></type> <name>current_access_unit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aud_needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sei_needed</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIEncodeH265Context</name>;</typedef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h265_write_access_unit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH265Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_fragment_data</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write packed header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data_len</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>au</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name><name>au</name><operator>-&gt;</operator><name>data_bit_padding</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Access unit too large: "</literal>
<literal type="string">"%zu &lt; %zu.\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>data_len</name></expr></argument>,
<argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>au</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name><name>au</name><operator>-&gt;</operator><name>data_bit_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>au</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>au</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>au</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name><name>au</name><operator>-&gt;</operator><name>data_bit_padding</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h265_add_nal</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>nal_unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH265Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawNALUnitHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><name>nal_unit</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nal_unit_type</name></name></expr></argument>, <argument><expr><name>nal_unit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to add NAL unit: "</literal>
<literal type="string">"type = %d.\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>nal_unit_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h265_write_sequence_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH265Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_access_unit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h265_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_aud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h265_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_vps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h265_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_sps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h265_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_pps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h265_write_access_unit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h265_write_slice_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH265Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_access_unit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h265_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_aud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h265_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h265_write_access_unit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h265_write_extra_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH265Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_access_unit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H265RawSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_sei</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h265_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>aud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sei</name> <operator>=</operator> <operator>(</operator><name>H265RawSEI</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>nal_unit_header</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>nal_unit_type</name> <operator>=</operator> <name>HEVC_NAL_SEI_PREFIX</name></expr>,
<expr><operator>.</operator><name>nuh_layer_id</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>nuh_temporal_id_plus1</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>&amp;</operator> <name>SEI_MASTERING_DISPLAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>payload_type</name> <operator>=</operator> <name>HEVC_SEI_TYPE_MASTERING_DISPLAY_INFO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>payload</name><operator>.</operator><name>mastering_display</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>sei_mastering_display</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>&amp;</operator> <name>SEI_CONTENT_LIGHT_LEVEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>payload_type</name> <operator>=</operator> <name>HEVC_SEI_TYPE_CONTENT_LIGHT_LEVEL_INFO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>payload</name><operator>.</operator><name>content_light_level</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>sei_content_light_level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h265_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h265_write_access_unit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>VAEncPackedHeaderRawData</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h265_init_sequence_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH265Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawVPS</name> <modifier>*</modifier></type><name>vps</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_vps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_sps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_pps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawProfileTierLevel</name> <modifier>*</modifier></type><name>ptl</name> <init>= <expr><operator>&amp;</operator><name><name>vps</name><operator>-&gt;</operator><name>profile_tier_level</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawVUI</name> <modifier>*</modifier></type><name>vui</name> <init>= <expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncSequenceParameterBufferHEVC</name> <modifier>*</modifier></type><name>vseq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_sequence_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncPictureParameterBufferHEVC</name> <modifier>*</modifier></type><name>vpic</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chroma_format</name></decl>, <decl><type ref="prev"/><name>bit_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chroma_format</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chroma_format</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chroma_format</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chroma_format</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Chroma format of input pixel format "</literal>
<literal type="string">"%s is not supported.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>bit_depth</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>nal_unit_header</name></name> <operator>=</operator> <operator>(</operator><name>H265RawNALUnitHeader</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>nal_unit_type</name> <operator>=</operator> <name>HEVC_NAL_VPS</name></expr>,
<expr><operator>.</operator><name>nuh_layer_id</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>nuh_temporal_id_plus1</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_video_parameter_set_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_base_layer_internal_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_base_layer_available_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_layers_minus1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_temporal_id_nesting_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_profile_space</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_profile_idc</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_tier_flag</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>tier</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_format</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_profile_compatibility_flag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>bit_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_profile_compatibility_flag</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bit_depth</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_profile_compatibility_flag</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_progressive_source_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_interlaced_source_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_non_packed_constraint_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_frame_only_constraint_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_max_12bit_constraint_flag</name></name> <operator>=</operator> <name>bit_depth</name> <operator>&lt;=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_max_10bit_constraint_flag</name></name> <operator>=</operator> <name>bit_depth</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_max_8bit_constraint_flag</name></name> <operator>=</operator> <name>bit_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_max_422chroma_constraint_flag</name></name> <operator>=</operator> <name>chroma_format</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_max_420chroma_constraint_flag</name></name> <operator>=</operator> <name>chroma_format</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_max_monochrome_constraint_flag</name></name> <operator>=</operator> <name>chroma_format</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_intra_constraint_flag</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_lower_bit_rate_constraint_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>!=</operator> <name>FF_LEVEL_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_level_idc</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265LevelDescriptor</name> <modifier>*</modifier></type><name>level</name></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>ff_h265_guess_level</name><argument_list>(<argument><expr><name>ptl</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using level %s.\n"</literal></expr></argument>, <argument><expr><name><name>level</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_level_idc</name></name> <operator>=</operator> <name><name>level</name><operator>-&gt;</operator><name>level_idc</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Stream will not conform to "</literal>
<literal type="string">"any normal level; using level 8.5.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_level_idc</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_tier_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_sub_layer_ordering_info_present_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_dec_pic_buffering_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_b_depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_num_reorder_pics</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_b_depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_latency_increase_plus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_layer_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_layer_sets_minus1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>layer_id_included_flag</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_timing_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_units_in_tick</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_time_scale</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_poc_proportional_to_timing_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_ticks_poc_diff_one_minus1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_units_in_tick</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_time_scale</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_poc_proportional_to_timing_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_hrd_parameters</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>nal_unit_header</name></name> <operator>=</operator> <operator>(</operator><name>H265RawNALUnitHeader</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>nal_unit_type</name> <operator>=</operator> <name>HEVC_NAL_SPS</name></expr>,
<expr><operator>.</operator><name>nuh_layer_id</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>nuh_temporal_id_plus1</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_video_parameter_set_id</name></name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_video_parameter_set_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_max_sub_layers_minus1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_temporal_id_nesting_flag</name></name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_temporal_id_nesting_flag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>profile_tier_level</name></name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>profile_tier_level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_seq_parameter_set_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>=</operator> <name>chroma_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>conformance_window_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>conf_win_left_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>conf_win_right_offset</name></name> <operator>=</operator>
<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>conf_win_top_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>conf_win_bottom_offset</name></name> <operator>=</operator>
<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>conformance_window_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>=</operator> <name>bit_depth</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>=</operator> <name>bit_depth</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_sub_layer_ordering_info_present_flag</name></name> <operator>=</operator>
<name><name>vps</name><operator>-&gt;</operator><name>vps_sub_layer_ordering_info_present_flag</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sps_max_sub_layers_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_max_dec_pic_buffering_minus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name><name>vps</name><operator>-&gt;</operator><name>vps_max_dec_pic_buffering_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_max_num_reorder_pics</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name><name>vps</name><operator>-&gt;</operator><name>vps_max_num_reorder_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_max_latency_increase_plus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name><name>vps</name><operator>-&gt;</operator><name>vps_max_latency_increase_plus1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>





<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_min_luma_coding_block_size_minus3</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_coding_block_size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_min_luma_transform_block_size_minus2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_transform_block_size</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>amp_enabled_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sample_adaptive_offset_enabled_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_temporal_mvp_enabled_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name><name>sar_idc</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">160</literal></expr>, <expr><literal type="number">99</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sar_idc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name><name>sar_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>&amp;&amp;</operator>
<name>den</name> <operator>==</operator> <name><name>sar_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>den</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>aspect_ratio_idc</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sar_idc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>aspect_ratio_idc</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>sar_width</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>sar_height</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>aspect_ratio_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>!=</operator> <name>AVCOL_RANGE_UNSPECIFIED</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name>AVCOL_PRI_UNSPECIFIED</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>video_signal_type_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>video_format</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>video_full_range_flag</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name>AVCOL_PRI_UNSPECIFIED</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colour_description_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colour_primaries</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>video_format</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>video_full_range_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colour_primaries</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>!=</operator> <name>AVCHROMA_LOC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>chroma_loc_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>chroma_sample_loc_type_top_field</name></name> <operator>=</operator>
<name><name>vui</name><operator>-&gt;</operator><name>chroma_sample_loc_type_bottom_field</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_timing_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_num_units_in_tick</name></name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_num_units_in_tick</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_time_scale</name></name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_time_scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_poc_proportional_to_timing_flag</name></name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_poc_proportional_to_timing_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_num_ticks_poc_diff_one_minus1</name></name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_num_ticks_poc_diff_one_minus1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_hrd_parameters_present_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>motion_vectors_over_pic_boundaries_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>restricted_ref_pic_lists_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>max_bytes_per_pic_denom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>max_bits_per_min_cu_denom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>log2_max_mv_length_horizontal</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>log2_max_mv_length_vertical</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>nal_unit_header</name></name> <operator>=</operator> <operator>(</operator><name>H265RawNALUnitHeader</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>nal_unit_type</name> <operator>=</operator> <name>HEVC_NAL_PPS</name></expr>,
<expr><operator>.</operator><name>nuh_layer_id</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>nuh_temporal_id_plus1</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>pps_pic_parameter_set_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>pps_seq_parameter_set_id</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sps_seq_parameter_set_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active_minus1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active_minus1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>init_qp_minus26</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name> <operator>-</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_rc_mode</name></name> <operator>!=</operator> <name>VA_RC_CQP</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>pps_loop_filter_across_slices_enabled_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<expr_stmt><expr><operator>*</operator><name>vseq</name> <operator>=</operator> <operator>(</operator><name>VAEncSequenceParameterBufferHEVC</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>general_profile_idc</name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general_profile_idc</name></name></expr>,
<expr><operator>.</operator><name>general_level_idc</name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general_level_idc</name></name></expr>,
<expr><operator>.</operator><name>general_tier_flag</name> <operator>=</operator> <name><name>vps</name><operator>-&gt;</operator><name>profile_tier_level</name><operator>.</operator><name>general_tier_flag</name></name></expr>,

<expr><operator>.</operator><name>intra_period</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>,
<expr><operator>.</operator><name>intra_idr_period</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>,
<expr><operator>.</operator><name>ip_period</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name> <operator>+</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>bits_per_second</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>va_bit_rate</name></name></expr>,

<expr><operator>.</operator><name>pic_width_in_luma_samples</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pic_width_in_luma_samples</name></name></expr>,
<expr><operator>.</operator><name>pic_height_in_luma_samples</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pic_height_in_luma_samples</name></name></expr>,

<expr><operator>.</operator><name><name>seq_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>chroma_format_idc</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>,
<expr><operator>.</operator><name>separate_colour_plane_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name></expr>,
<expr><operator>.</operator><name>bit_depth_luma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name></expr>,
<expr><operator>.</operator><name>bit_depth_chroma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name></expr>,
<expr><operator>.</operator><name>scaling_list_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>scaling_list_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>strong_intra_smoothing_enabled_flag</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>strong_intra_smoothing_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>amp_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>amp_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>sample_adaptive_offset_enabled_flag</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>sample_adaptive_offset_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>pcm_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>pcm_loop_filter_disabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm_loop_filter_disabled_flag</name></name></expr>,
<expr><operator>.</operator><name>sps_temporal_mvp_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sps_temporal_mvp_enabled_flag</name></name></expr>,
}</block></expr>,

<expr><operator>.</operator><name>log2_min_luma_coding_block_size_minus3</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>log2_min_luma_coding_block_size_minus3</name></name></expr>,
<expr><operator>.</operator><name>log2_diff_max_min_luma_coding_block_size</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_coding_block_size</name></name></expr>,
<expr><operator>.</operator><name>log2_min_transform_block_size_minus2</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>log2_min_luma_transform_block_size_minus2</name></name></expr>,
<expr><operator>.</operator><name>log2_diff_max_min_transform_block_size</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_transform_block_size</name></name></expr>,
<expr><operator>.</operator><name>max_transform_hierarchy_depth_inter</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name></expr>,
<expr><operator>.</operator><name>max_transform_hierarchy_depth_intra</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name></expr>,

<expr><operator>.</operator><name>pcm_sample_bit_depth_luma_minus1</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>pcm_sample_bit_depth_luma_minus1</name></name></expr>,
<expr><operator>.</operator><name>pcm_sample_bit_depth_chroma_minus1</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>pcm_sample_bit_depth_chroma_minus1</name></name></expr>,
<expr><operator>.</operator><name>log2_min_pcm_luma_coding_block_size_minus3</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>log2_min_pcm_luma_coding_block_size_minus3</name></name></expr>,
<expr><operator>.</operator><name>log2_max_pcm_luma_coding_block_size_minus3</name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>log2_min_pcm_luma_coding_block_size_minus3</name></name> <operator>+</operator>
<name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_pcm_luma_coding_block_size</name></name></expr>,

<expr><operator>.</operator><name>vui_parameters_present_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vpic</name> <operator>=</operator> <operator>(</operator><name>VAEncPictureParameterBufferHEVC</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>decoded_curr_pic</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>picture_id</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_PICTURE_HEVC_INVALID</name></expr>,
}</block></expr>,

<expr><operator>.</operator><name>coded_buf</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,

<expr><operator>.</operator><name>collocated_ref_pic_index</name> <operator>=</operator> <literal type="number">0xff</literal></expr>,

<expr><operator>.</operator><name>last_picture</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>pic_init_qp</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>init_qp_minus26</name></name> <operator>+</operator> <literal type="number">26</literal></expr>,
<expr><operator>.</operator><name>diff_cu_qp_delta_depth</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name></expr>,
<expr><operator>.</operator><name>pps_cb_qp_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pps_cb_qp_offset</name></name></expr>,
<expr><operator>.</operator><name>pps_cr_qp_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pps_cr_qp_offset</name></name></expr>,

<expr><operator>.</operator><name>num_tile_columns_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns_minus1</name></name></expr>,
<expr><operator>.</operator><name>num_tile_rows_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows_minus1</name></name></expr>,

<expr><operator>.</operator><name>log2_parallel_merge_level_minus2</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_parallel_merge_level_minus2</name></name></expr>,
<expr><operator>.</operator><name>ctu_max_bitsize_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>num_ref_idx_l0_default_active_minus1</name> <operator>=</operator>
<name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active_minus1</name></name></expr>,
<expr><operator>.</operator><name>num_ref_idx_l1_default_active_minus1</name> <operator>=</operator>
<name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active_minus1</name></name></expr>,

<expr><operator>.</operator><name>slice_pic_parameter_set_id</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pps_pic_parameter_set_id</name></name></expr>,

<expr><operator>.</operator><name><name>pic_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>sign_data_hiding_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>sign_data_hiding_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>constrained_intra_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name></expr>,
<expr><operator>.</operator><name>transform_skip_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transform_skip_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>cu_qp_delta_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>weighted_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name></expr>,
<expr><operator>.</operator><name>weighted_bipred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_flag</name></name></expr>,
<expr><operator>.</operator><name>transquant_bypass_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transquant_bypass_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>tiles_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>entropy_coding_sync_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>loop_filter_across_tiles_enabled_flag</name> <operator>=</operator>
<name><name>pps</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>scaling_list_data_present_flag</name> <operator>=</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>sps_scaling_list_data_present_flag</name></name> <operator>|</operator>
<name><name>pps</name><operator>-&gt;</operator><name>pps_scaling_list_data_present_flag</name></name><operator>)</operator></expr>,
<expr><operator>.</operator><name>screen_content_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>enable_gpu_weighted_prediction</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>no_output_of_prior_pics_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr>,
}</block></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h265_init_picture_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH265Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH265Picture</name> <modifier>*</modifier></type><name>hpic</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH265Picture</name> <modifier>*</modifier></type><name>hprev</name> <init>= <expr><ternary><condition><expr><name>prev</name></expr> ?</condition><then> <expr><name><name>prev</name><operator>-&gt;</operator><name>priv_data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncPictureParameterBufferHEVC</name> <modifier>*</modifier></type><name>vpic</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>last_idr_frame</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_nal_unit</name></name> <operator>=</operator> <name>HEVC_NAL_IDR_W_RADL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <name>HEVC_SLICE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>pic_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>last_idr_frame</name></name> <operator>=</operator> <name><name>hprev</name><operator>-&gt;</operator><name>last_idr_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_nal_unit</name></name> <operator>=</operator> <name>HEVC_NAL_CRA_NUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <name>HEVC_SLICE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>pic_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_nal_unit</name></name> <operator>=</operator> <name>HEVC_NAL_TRAIL_R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <name>HEVC_SLICE_P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>pic_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>irap_ref</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>irap_ref</name> <operator>=</operator> <name>pic</name></expr>;</init> <condition><expr><name>irap_ref</name></expr>;</condition> <incr><expr><name>irap_ref</name> <operator>=</operator> <name><name>irap_ref</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>irap_ref</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>b_depth</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_b_depth</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_nal_unit</name></name> <operator>=</operator> <ternary><condition><expr><name>irap_ref</name></expr> ?</condition><then> <expr><name>HEVC_NAL_RASL_N</name></expr>
</then><else>: <expr><name>HEVC_NAL_TRAIL_N</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_nal_unit</name></name> <operator>=</operator> <ternary><condition><expr><name>irap_ref</name></expr> ?</condition><then> <expr><name>HEVC_NAL_RASL_R</name></expr>
</then><else>: <expr><name>HEVC_NAL_TRAIL_R</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <name>HEVC_SLICE_B</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>pic_type</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name> <operator>-</operator> <name><name>hpic</name><operator>-&gt;</operator><name>last_idr_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>aud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>raw_aud</name></name> <operator>=</operator> <operator>(</operator><name>H265RawAUD</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>nal_unit_header</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>nal_unit_type</name> <operator>=</operator> <name>HEVC_NAL_AUD</name></expr>,
<expr><operator>.</operator><name>nuh_layer_id</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>nuh_temporal_id_plus1</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>,
<expr><operator>.</operator><name>pic_type</name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_type</name></name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><operator>-&gt;</operator><name>sei</name></name> <operator>&amp;</operator> <name>SEI_MASTERING_DISPLAY</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_I</name> <operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name> <init>=
<expr><call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>input_image</name></name></expr></argument>,
<argument><expr><name>AV_FRAME_DATA_MASTERING_DISPLAY_METADATA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVMasteringDisplayMetadata</name> <modifier>*</modifier></type><name>mdm</name> <init>=
<expr><operator>(</operator><name>AVMasteringDisplayMetadata</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mdm</name><operator>-&gt;</operator><name>has_primaries</name></name> <operator>&amp;&amp;</operator> <name><name>mdm</name><operator>-&gt;</operator><name>has_luminance</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H265RawSEIMasteringDisplayColourVolume</name> <modifier>*</modifier></type><name>mdcv</name> <init>=
<expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sei_mastering_display</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>mapping</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_den</name> <init>= <expr><literal type="number">50000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>luma_den</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mdcv</name><operator>-&gt;</operator><name>display_primaries_x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>FFMIN</name><argument_list>(<argument><expr><call><name>lrint</name><argument_list>(<argument><expr><name>chroma_den</name> <operator>*</operator>
<call><name>av_q2d</name><argument_list>(<argument><expr><name><name>mdm</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>chroma_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mdcv</name><operator>-&gt;</operator><name>display_primaries_y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>FFMIN</name><argument_list>(<argument><expr><call><name>lrint</name><argument_list>(<argument><expr><name>chroma_den</name> <operator>*</operator>
<call><name>av_q2d</name><argument_list>(<argument><expr><name><name>mdm</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>chroma_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>mdcv</name><operator>-&gt;</operator><name>white_point_x</name></name> <operator>=</operator>
<call><name>FFMIN</name><argument_list>(<argument><expr><call><name>lrint</name><argument_list>(<argument><expr><name>chroma_den</name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>mdm</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>chroma_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mdcv</name><operator>-&gt;</operator><name>white_point_y</name></name> <operator>=</operator>
<call><name>FFMIN</name><argument_list>(<argument><expr><call><name>lrint</name><argument_list>(<argument><expr><name>chroma_den</name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>mdm</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>chroma_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mdcv</name><operator>-&gt;</operator><name>max_display_mastering_luminance</name></name> <operator>=</operator>
<call><name>lrint</name><argument_list>(<argument><expr><name>luma_den</name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>mdm</name><operator>-&gt;</operator><name>max_luminance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mdcv</name><operator>-&gt;</operator><name>min_display_mastering_luminance</name></name> <operator>=</operator>
<call><name>FFMIN</name><argument_list>(<argument><expr><call><name>lrint</name><argument_list>(<argument><expr><name>luma_den</name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>mdm</name><operator>-&gt;</operator><name>min_luminance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mdcv</name><operator>-&gt;</operator><name>max_display_mastering_luminance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>|=</operator> <name>SEI_MASTERING_DISPLAY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><operator>-&gt;</operator><name>sei</name></name> <operator>&amp;</operator> <name>SEI_CONTENT_LIGHT_LEVEL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_I</name> <operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name> <init>=
<expr><call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>input_image</name></name></expr></argument>,
<argument><expr><name>AV_FRAME_DATA_CONTENT_LIGHT_LEVEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVContentLightMetadata</name> <modifier>*</modifier></type><name>clm</name> <init>=
<expr><operator>(</operator><name>AVContentLightMetadata</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawSEIContentLightLevelInfo</name> <modifier>*</modifier></type><name>clli</name> <init>=
<expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sei_content_light_level</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>clli</name><operator>-&gt;</operator><name>max_content_light_level</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>clm</name><operator>-&gt;</operator><name>MaxCLL</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clli</name><operator>-&gt;</operator><name>max_pic_average_light_level</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>clm</name><operator>-&gt;</operator><name>MaxFALL</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>|=</operator> <name>SEI_CONTENT_LIGHT_LEVEL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>decoded_curr_pic</name></name> <operator>=</operator> <operator>(</operator><name>VAPictureHEVC</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>picture_id</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>recon_surface</name></name></expr>,
<expr><operator>.</operator><name>pic_order_cnt</name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH265Picture</name> <modifier>*</modifier></type><name>href</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ref</name> <operator>&amp;&amp;</operator> <name><name>ref</name><operator>-&gt;</operator><name>encode_order</name></name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>href</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>reference_frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VAPictureHEVC</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>picture_id</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>recon_surface</name></name></expr>,
<expr><operator>.</operator><name>pic_order_cnt</name> <operator>=</operator> <name><name>href</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>display_order</name></name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name> <operator>?</operator>
<name>VA_PICTURE_HEVC_RPS_ST_CURR_BEFORE</name> <operator>:</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>display_order</name></name> <operator>&gt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name> <operator>?</operator>
<name>VA_PICTURE_HEVC_RPS_ST_CURR_AFTER</name> <operator>:</operator> <literal type="number">0</literal><operator>)</operator></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>vpic</name><operator>-&gt;</operator><name>reference_frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>reference_frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VAPictureHEVC</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>picture_id</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_PICTURE_HEVC_INVALID</name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>coded_buf</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>nal_unit_type</name></name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>slice_nal_unit</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PICTURE_TYPE_IDR</name></expr>:</case>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>idr_pic_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>coding_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>reference_pic_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PICTURE_TYPE_I</name></expr>:</case>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>idr_pic_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>coding_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>reference_pic_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PICTURE_TYPE_P</name></expr>:</case>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>idr_pic_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>coding_type</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>reference_pic_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PICTURE_TYPE_B</name></expr>:</case>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>idr_pic_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>coding_type</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>reference_pic_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"invalid picture type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h265_init_slice_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH265Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH265Picture</name> <modifier>*</modifier></type><name>hpic</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_sps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_pps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H265RawSliceHeader</name> <modifier>*</modifier></type><name>sh</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_slice</name><operator>.</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncPictureParameterBufferHEVC</name> <modifier>*</modifier></type><name>vpic</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncSliceParameterBufferHEVC</name> <modifier>*</modifier></type><name>vslice</name> <init>= <expr><name><name>slice</name><operator>-&gt;</operator><name>codec_slice_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>nal_unit_header</name></name> <operator>=</operator> <operator>(</operator><name>H265RawNALUnitHeader</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>nal_unit_type</name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>slice_nal_unit</name></name></expr>,
<expr><operator>.</operator><name>nuh_layer_id</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>nuh_temporal_id_plus1</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_pic_parameter_set_id</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pps_pic_parameter_set_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>first_slice_segment_in_pic_flag</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_segment_address</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>block_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>slice_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_pic_order_cnt_lsb</name></name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&amp;</operator>
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PICTURE_TYPE_IDR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H265RawSTRefPicSet</name> <modifier>*</modifier></type><name>rps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIEncodeH265Picture</name> <modifier>*</modifier></type><name>strp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rps_poc</name><index>[<expr><name>MAX_DPB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rps_used</name><index>[<expr><name>MAX_DPB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>poc</name></decl>, <decl><type ref="prev"/><name>rps_pics</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>short_term_ref_pic_set_sps_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rps</name> <operator>=</operator> <operator>&amp;</operator><name><name>sh</name><operator>-&gt;</operator><name>short_term_ref_pic_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rps_pics</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>strp</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rps_poc</name><index>[<expr><name>rps_pics</name></expr>]</index></name> <operator>=</operator> <name><name>strp</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rps_used</name><index>[<expr><name>rps_pics</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>rps_pics</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_dpb_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>pic</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>strp</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rps_poc</name><index>[<expr><name>rps_pics</name></expr>]</index></name> <operator>=</operator> <name><name>strp</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rps_used</name><index>[<expr><name>rps_pics</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>rps_pics</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rps_pics</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rps_poc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name><name>rps_poc</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>rps_poc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>rps_poc</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>rps_poc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rps_poc</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>rps_used</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rps_used</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"RPS for POC %d:"</literal></expr></argument>,
<argument><expr><name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rps_pics</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" (%d,%d)"</literal></expr></argument>,
<argument><expr><name><name>rps_poc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rps_used</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rps_pics</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>rps_poc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rps_poc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>poc</name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>delta_poc_s0_minus1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>poc</name> <operator>-</operator> <name><name>rps_poc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>used_by_curr_pic_s0_flag</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>rps_used</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>poc</name> <operator>=</operator> <name><name>rps_poc</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>num_positive_pics</name></name> <operator>=</operator> <name>rps_pics</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>poc</name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rps_pics</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>delta_poc_s1_minus1</name><index>[<expr><name>j</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rps_poc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>poc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>used_by_curr_pic_s1_flag</name><index>[<expr><name>j</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rps_used</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>poc</name> <operator>=</operator> <name><name>rps_poc</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>num_long_term_sps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>num_long_term_pics</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_temporal_mvp_enabled_flag</name></name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>sps_temporal_mvp_enabled_flag</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>slice_temporal_mvp_enabled_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>collocated_from_l0_flag</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>collocated_ref_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>num_ref_idx_active_override_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active_minus1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active_minus1</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_sao_luma_flag</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_sao_chroma_flag</name></name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>sample_adaptive_offset_enabled_flag</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_qp_delta</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_b</name></name> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>init_qp_minus26</name></name> <operator>+</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_qp_delta</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>init_qp_minus26</name></name> <operator>+</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_qp_delta</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>init_qp_minus26</name></name> <operator>+</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><operator>*</operator><name>vslice</name> <operator>=</operator> <operator>(</operator><name>VAEncSliceParameterBufferHEVC</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>slice_segment_address</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_segment_address</name></name></expr>,
<expr><operator>.</operator><name>num_ctu_in_slice</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>block_size</name></name></expr>,

<expr><operator>.</operator><name>slice_type</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name></expr>,
<expr><operator>.</operator><name>slice_pic_parameter_set_id</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_pic_parameter_set_id</name></name></expr>,

<expr><operator>.</operator><name>num_ref_idx_l0_active_minus1</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name></expr>,
<expr><operator>.</operator><name>num_ref_idx_l1_active_minus1</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name></expr>,

<expr><operator>.</operator><name>luma_log2_weight_denom</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name></expr>,
<expr><operator>.</operator><name>delta_chroma_log2_weight_denom</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>delta_chroma_log2_weight_denom</name></name></expr>,

<expr><operator>.</operator><name>max_num_merge_cand</name> <operator>=</operator> <literal type="number">5</literal> <operator>-</operator> <name><name>sh</name><operator>-&gt;</operator><name>five_minus_max_num_merge_cand</name></name></expr>,

<expr><operator>.</operator><name>slice_qp_delta</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_qp_delta</name></name></expr>,
<expr><operator>.</operator><name>slice_cb_qp_offset</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_cb_qp_offset</name></name></expr>,
<expr><operator>.</operator><name>slice_cr_qp_offset</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_cr_qp_offset</name></name></expr>,

<expr><operator>.</operator><name>slice_beta_offset_div2</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_beta_offset_div2</name></name></expr>,
<expr><operator>.</operator><name>slice_tc_offset_div2</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_tc_offset_div2</name></name></expr>,

<expr><operator>.</operator><name><name>slice_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>last_slice_of_pic_flag</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>dependent_slice_segment_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>dependent_slice_segment_flag</name></name></expr>,
<expr><operator>.</operator><name>colour_plane_id</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>colour_plane_id</name></name></expr>,
<expr><operator>.</operator><name>slice_temporal_mvp_enabled_flag</name> <operator>=</operator>
<name><name>sh</name><operator>-&gt;</operator><name>slice_temporal_mvp_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>slice_sao_luma_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_sao_luma_flag</name></name></expr>,
<expr><operator>.</operator><name>slice_sao_chroma_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_sao_chroma_flag</name></name></expr>,
<expr><operator>.</operator><name>num_ref_idx_active_override_flag</name> <operator>=</operator>
<name><name>sh</name><operator>-&gt;</operator><name>num_ref_idx_active_override_flag</name></name></expr>,
<expr><operator>.</operator><name>mvd_l1_zero_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>mvd_l1_zero_flag</name></name></expr>,
<expr><operator>.</operator><name>cabac_init_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>cabac_init_flag</name></name></expr>,
<expr><operator>.</operator><name>slice_deblocking_filter_disabled_flag</name> <operator>=</operator>
<name><name>sh</name><operator>-&gt;</operator><name>slice_deblocking_filter_disabled_flag</name></name></expr>,
<expr><operator>.</operator><name>slice_loop_filter_across_slices_enabled_flag</name> <operator>=</operator>
<name><name>sh</name><operator>-&gt;</operator><name>slice_loop_filter_across_slices_enabled_flag</name></name></expr>,
<expr><operator>.</operator><name>collocated_from_l0_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>collocated_from_l0_flag</name></name></expr>,
}</block></expr>,
}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>vslice</name><operator>-&gt;</operator><name>ref_pic_list0</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>ref_pic_list0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picture_id</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>ref_pic_list0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_PICTURE_HEVC_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>ref_pic_list1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picture_id</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>ref_pic_list1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_PICTURE_HEVC_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name> <operator>||</operator>
<name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>ref_pic_list0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vpic</name><operator>-&gt;</operator><name>reference_frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>ref_pic_list1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vpic</name><operator>-&gt;</operator><name>reference_frames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_h265_configure</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH265Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_HEVC</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_rc_mode</name></name> <operator>==</operator> <name>VA_RC_CQP</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_quality</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name> <operator>=</operator>
<call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name> <operator>+</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>i_quant_offset</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_b</name></name> <operator>=</operator>
<call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name> <operator>+</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>b_quant_offset</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_b</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using fixed QP = "</literal>
<literal type="string">"%d / %d / %d for IDR- / P- / B-frames.\n"</literal></expr></argument>,
<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_b</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_quant_range</name></name> <operator>=</operator> <literal type="number">51</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>profile</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeProfile</name></type> <name><name>vaapi_encode_h265_profiles</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>FF_PROFILE_HEVC_MAIN</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VAProfileHEVCMain</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_HEVC_REXT</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VAProfileHEVCMain</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">37</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>FF_PROFILE_HEVC_MAIN_10</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VAProfileHEVCMain10</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_HEVC_REXT</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VAProfileHEVCMain10</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>FF_PROFILE_UNKNOWN</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeType</name></type> <name>vaapi_encode_type_h265</name> <init>= <expr><block>{
<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <name>vaapi_encode_h265_profiles</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAG_SLICE_CONTROL</name> <operator>|</operator>
<name>FLAG_B_PICTURES</name> <operator>|</operator>
<name>FLAG_B_PICTURE_REFERENCES</name> <operator>|</operator>
<name>FLAG_NON_IDR_KEY_PICTURES</name></expr>,

<expr><operator>.</operator><name>default_quality</name> <operator>=</operator> <literal type="number">25</literal></expr>,

<expr><operator>.</operator><name>configure</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h265_configure</name></expr>,

<expr><operator>.</operator><name>picture_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIEncodeH265Picture</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>sequence_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncSequenceParameterBufferHEVC</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init_sequence_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h265_init_sequence_params</name></expr>,

<expr><operator>.</operator><name>picture_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncPictureParameterBufferHEVC</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init_picture_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h265_init_picture_params</name></expr>,

<expr><operator>.</operator><name>slice_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncSliceParameterBufferHEVC</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init_slice_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h265_init_slice_params</name></expr>,

<expr><operator>.</operator><name>sequence_header_type</name> <operator>=</operator> <name>VAEncPackedHeaderSequence</name></expr>,
<expr><operator>.</operator><name>write_sequence_header</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h265_write_sequence_header</name></expr>,

<expr><operator>.</operator><name>slice_header_type</name> <operator>=</operator> <name>VAEncPackedHeaderHEVC_Slice</name></expr>,
<expr><operator>.</operator><name>write_slice_header</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h265_write_slice_header</name></expr>,

<expr><operator>.</operator><name>write_extra_header</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h265_write_extra_header</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_h265_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH265Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_type_h265</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>FF_LEVEL_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>!=</operator> <name>FF_LEVEL_UNKNOWN</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid level %d: must fit "</literal>
<literal type="string">"in 8-bit unsigned integer.\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name> <operator>=</operator>
<name>VA_ENC_PACKED_HEADER_SEQUENCE</name> <operator>|</operator> 
<name>VA_ENC_PACKED_HEADER_SLICE</name> <operator>|</operator> 
<name>VA_ENC_PACKED_HEADER_MISC</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_block_width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_height</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>qp</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>explicit_qp</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>qp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_vaapi_encode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_h265_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH265Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_access_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_cbs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vaapi_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(VAAPIEncodeH265Context, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>vaapi_encode_h265_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VAAPI_ENCODE_COMMON_OPTIONS</name></expr>,
<expr><name>VAAPI_ENCODE_RC_OPTIONS</name></expr>,

<expr><block>{ <expr><literal type="string">"qp"</literal></expr>, <expr><literal type="string">"Constant QP (for P-frames; scaled by qfactor/qoffset for I/B)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aud"</literal></expr>, <expr><literal type="string">"Include AUD"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aud</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"Set profile (general_profile_idc)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_PROFILE_UNKNOWN</name></expr> }</block></expr>, <expr><name>FF_PROFILE_UNKNOWN</name></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name, NULL, 0, AV_OPT_TYPE_CONST, { .i64 = value }, 0, 0, FLAGS, "profile"</cpp:value></cpp:define>

<expr><block>{ <macro><name>PROFILE</name><argument_list>(<argument><literal type="string">"main"</literal></argument>, <argument>FF_PROFILE_HEVC_MAIN</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>PROFILE</name><argument_list>(<argument><literal type="string">"main10"</literal></argument>, <argument>FF_PROFILE_HEVC_MAIN_10</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>PROFILE</name><argument_list>(<argument><literal type="string">"rext"</literal></argument>, <argument>FF_PROFILE_HEVC_REXT</argument>)</argument_list></macro> }</block></expr>,
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROFILE</name></cpp:undef>

<expr><block>{ <expr><literal type="string">"tier"</literal></expr>, <expr><literal type="string">"Set tier (general_tier_flag)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tier</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tier"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"main"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tier"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"high"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tier"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"Set level (general_level_idc)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_LEVEL_UNKNOWN</name></expr> }</block></expr>, <expr><name>FF_LEVEL_UNKNOWN</name></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name, NULL, 0, AV_OPT_TYPE_CONST, { .i64 = value }, 0, 0, FLAGS, "level"</cpp:value></cpp:define>

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"1"</literal></argument>, <argument><literal type="number">30</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"2"</literal></argument>, <argument><literal type="number">60</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"2.1"</literal></argument>, <argument><literal type="number">63</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"3"</literal></argument>, <argument><literal type="number">90</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"3.1"</literal></argument>, <argument><literal type="number">93</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"4"</literal></argument>, <argument><literal type="number">120</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"4.1"</literal></argument>, <argument><literal type="number">123</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5"</literal></argument>, <argument><literal type="number">150</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5.1"</literal></argument>, <argument><literal type="number">153</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5.2"</literal></argument>, <argument><literal type="number">156</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6"</literal></argument>, <argument><literal type="number">180</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6.1"</literal></argument>, <argument><literal type="number">183</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6.2"</literal></argument>, <argument><literal type="number">186</literal></argument>)</argument_list></macro> }</block></expr>,
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEVEL</name></cpp:undef>

<expr><block>{ <expr><literal type="string">"sei"</literal></expr>, <expr><literal type="string">"Set SEI to include"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SEI_MASTERING_DISPLAY</name> <operator>|</operator> <name>SEI_CONTENT_LIGHT_LEVEL</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"sei"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hdr"</literal></expr>,
<expr><literal type="string">"Include HDR metadata for mastering display colour volume "</literal>
<literal type="string">"and content light level information"</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SEI_MASTERING_DISPLAY</name> <operator>|</operator> <name>SEI_CONTENT_LIGHT_LEVEL</name></expr> }</block></expr>,
<expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"sei"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>vaapi_encode_h265_defaults</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"120"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"i_qfactor"</literal></expr>, <expr><literal type="string">"1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"i_qoffset"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"b_qfactor"</literal></expr>, <expr><literal type="string">"6/5"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"b_qoffset"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qmin"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qmax"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>vaapi_encode_h265_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"h265_vaapi"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>vaapi_encode_h265_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_hevc_vaapi_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_vaapi"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"H.265/HEVC (VAAPI)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIEncodeH265Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h265_init</name></expr>,
<expr><operator>.</operator><name>send_frame</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_encode_send_frame</name></expr>,
<expr><operator>.</operator><name>receive_packet</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_encode_receive_packet</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h265_close</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h265_class</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_HARDWARE</name></expr>,
<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>vaapi_encode_h265_defaults</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_VAAPI</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"vaapi"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
