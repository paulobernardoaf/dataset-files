<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dirac_dwt.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dirac_dwt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_8bit</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dirac_dwt_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_10bit</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dirac_dwt_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_12bit</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dirac_dwt_template.c"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_spatial_idwt_init</name><parameter_list>(<parameter><decl><type><name>DWTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>DWTPlane</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dwt_type</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>decomposition_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>temp</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>tmp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>decomposition_count</name></name> <operator>=</operator> <name>decomposition_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_spatial_idwt_init_8bit</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_spatial_idwt_init_10bit</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_spatial_idwt_init_12bit</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported bit depth = %i\n"</literal></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown wavelet type %d\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name> <operator>&amp;&amp;</operator> <name>bit_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_spatial_idwt_init_x86</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_spatial_idwt_slice2</name><parameter_list>(<parameter><decl><type><name>DWTContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>support</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>support</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>level</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>decomposition_count</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>level</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wl</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name>level</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hl</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name>level</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stride_l</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>stride</name></name> <operator>&lt;&lt;</operator> <name>level</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>cs</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><name>level</name><operator>)</operator><operator>+</operator><name>support</name></expr></argument>, <argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>spatial_compose</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>wl</name></expr></argument>, <argument><expr><name>hl</name></expr></argument>, <argument><expr><name>stride_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
