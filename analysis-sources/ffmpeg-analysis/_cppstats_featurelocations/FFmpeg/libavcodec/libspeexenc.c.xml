<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\libspeexenc.c">


















































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;speex/speex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;speex/speex_header.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;speex/speex_stereo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_frame_queue.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>LibSpeexEncContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>SpeexBits</name></type> <name>bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>SpeexHeader</name></type> <name>header</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>enc_state</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frames_per_packet</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>vbr_quality</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cbr_quality</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>abr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>vad</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dtx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pkt_frame_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AudioFrameQueue</name></type> <name>afq</name></decl>;</decl_stmt> 
}</block></struct></type> <name>LibSpeexEncContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>print_enc_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>LibSpeexEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode_str</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"channels: %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SPEEX_MODEID_NB</name></expr>:</case> <expr_stmt><expr><name>mode_str</name> <operator>=</operator> <literal type="string">"narrowband"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SPEEX_MODEID_WB</name></expr>:</case> <expr_stmt><expr><name>mode_str</name> <operator>=</operator> <literal type="string">"wideband"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>SPEEX_MODEID_UWB</name></expr>:</case> <expr_stmt><expr><name>mode_str</name> <operator>=</operator> <literal type="string">"ultra-wideband"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"mode: %s\n"</literal></expr></argument>, <argument><expr><name>mode_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vbr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"rate control: VBR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" quality: %f\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vbr_quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>abr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"rate control: ABR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" bitrate: %"</literal><name>PRId64</name><literal type="string">" bps\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"rate control: CBR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" bitrate: %"</literal><name>PRId64</name><literal type="string">" bps\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"complexity: %d\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"frame size: %d samples\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"frames per packet: %d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames_per_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"packet size: %d\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frames_per_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"voice activity detection: %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"discontinuous transmission: %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LibSpeexEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SpeexMode</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>header_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>complexity</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channels (%d). Only stereo and "</literal>
<literal type="string">"mono are supported\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8000</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>speex_lib_get_mode</name><argument_list>(<argument><expr><name>SPEEX_MODEID_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">16000</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>speex_lib_get_mode</name><argument_list>(<argument><expr><name>SPEEX_MODEID_WB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">32000</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>speex_lib_get_mode</name><argument_list>(<argument><expr><name>SPEEX_MODEID_UWB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sample rate of %d Hz is not supported. "</literal>
<literal type="string">"Resample to 8, 16, or 32 kHz.\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name> <operator>=</operator> <call><name>speex_encoder_init</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing libspeex\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>speex_init_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vbr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vad</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_SET_VBR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vbr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vbr_quality</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>FF_QP2LAMBDA</name></expr></argument>,
<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">10.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_SET_VBR_QUALITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vbr_quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>abr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_SET_ABR</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_GET_ABR</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_SET_BITRATE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_GET_BITRATE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_SET_QUALITY</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cbr_quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_GET_BITRATE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>bitrate</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">800</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>vad</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_SET_VAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dtx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_SET_DTX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>abr</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>vad</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vbr</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DTX is not much of use without ABR, VAD or VBR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;</operator> <name>FF_COMPRESSION_DEFAULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>complexity</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_SET_COMPLEXITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>complexity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_GET_COMPLEXITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>complexity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>=</operator> <name>complexity</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>frame_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>frames_per_packet</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frames_per_packet</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>speex_encoder_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>SPEEX_GET_LOOKAHEAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_af_queue_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>header_data</name> <operator>=</operator> <call><name>speex_header_to_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>header_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>speex_header_free</name><argument_list>(<argument><expr><name>header_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>speex_encoder_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"memory allocation error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>header_data</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>header_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>speex_header_free</name><argument_list>(<argument><expr><name>header_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>speex_bits_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_enc_params</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LibSpeexEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samples</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>speex_encode_stereo_int</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>speex_encode_int</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pkt_frame_count</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_af_queue_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pkt_frame_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pkt_frame_count</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frames_per_packet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>speex_bits_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pkt_frame_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pkt_frame_count</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>frames_per_packet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pkt_frame_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><call><name>speex_bits_nbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>speex_bits_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>speex_bits_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_af_queue_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames_per_packet</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LibSpeexEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>speex_bits_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>speex_encoder_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enc_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_af_queue_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(LibSpeexEncContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"abr"</literal></expr>, <expr><literal type="string">"Use average bit rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>abr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cbr_quality"</literal></expr>, <expr><literal type="string">"Set quality value (0 to 10) for CBR"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cbr_quality</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">8</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>AE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"frames_per_packet"</literal></expr>, <expr><literal type="string">"Number of frames to encode in each packet"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frames_per_packet</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>AE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vad"</literal></expr>, <expr><literal type="string">"Voice Activity Detection"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>vad</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dtx"</literal></expr>, <expr><literal type="string">"Discontinuous Transmission"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dtx</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>speex_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libspeex"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>defaults</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"compression_level"</literal></expr>, <expr><literal type="string">"3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libspeex_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libspeex"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libspeex Speex"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SPEEX</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LibSpeexEncContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>encode_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>encode_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint64_t</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_CH_LAYOUT_MONO</name></expr>,
<expr><name>AV_CH_LAYOUT_STEREO</name></expr>,
<expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>supported_samplerates</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>int</name><index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">8000</literal></expr>, <expr><literal type="number">16000</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>speex_class</name></expr>,
<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>defaults</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libspeex"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
