<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\libaomenc.c">
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOM_DISABLE_CTRL_TYPECHECKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aom/aom_encoder.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aom/aomcx.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"av1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>





<struct>struct <name>FrameListData</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>sse</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_sse</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>AOMEncoderContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>aom_codec_ctx</name></name></type> <name>encoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>aom_image</name></name></type> <name>rawimg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>aom_fixed_buf</name></name></type> <name>twopass_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>coded_frame_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>auto_alt_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arnr_max_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arnr_strength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aq_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lag_in_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_resilient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>static_thresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drop_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>denoise_noise_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>denoise_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>sse</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_sse</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc_undershoot_pct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc_overshoot_pct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minsection_pct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxsection_pct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_parallel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_cols</name></decl>, <name>tile_rows</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_cols_log2</name></decl>, <name>tile_rows_log2</name>;</decl_stmt>
<decl_stmt><decl><type><name>aom_superblock_size_t</name></type> <name>superblock_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uniform_tiles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row_mt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enable_cdef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enable_global_motion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enable_intrabc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enable_restoration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>usage</name></decl>;</decl_stmt>
}</block></struct></type> <name>AOMContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ctlidstr</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AOME_SET_CPUUSED</name></expr>]</index> <operator>=</operator> <literal type="string">"AOME_SET_CPUUSED"</literal></expr>,
<expr><index>[<expr><name>AOME_SET_CQ_LEVEL</name></expr>]</index> <operator>=</operator> <literal type="string">"AOME_SET_CQ_LEVEL"</literal></expr>,
<expr><index>[<expr><name>AOME_SET_ENABLEAUTOALTREF</name></expr>]</index> <operator>=</operator> <literal type="string">"AOME_SET_ENABLEAUTOALTREF"</literal></expr>,
<expr><index>[<expr><name>AOME_SET_ARNR_MAXFRAMES</name></expr>]</index> <operator>=</operator> <literal type="string">"AOME_SET_ARNR_MAXFRAMES"</literal></expr>,
<expr><index>[<expr><name>AOME_SET_ARNR_STRENGTH</name></expr>]</index> <operator>=</operator> <literal type="string">"AOME_SET_ARNR_STRENGTH"</literal></expr>,
<expr><index>[<expr><name>AOME_SET_STATIC_THRESHOLD</name></expr>]</index> <operator>=</operator> <literal type="string">"AOME_SET_STATIC_THRESHOLD"</literal></expr>,
<expr><index>[<expr><name>AV1E_SET_COLOR_RANGE</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_COLOR_RANGE"</literal></expr>,
<expr><index>[<expr><name>AV1E_SET_COLOR_PRIMARIES</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_COLOR_PRIMARIES"</literal></expr>,
<expr><index>[<expr><name>AV1E_SET_MATRIX_COEFFICIENTS</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_MATRIX_COEFFICIENTS"</literal></expr>,
<expr><index>[<expr><name>AV1E_SET_TRANSFER_CHARACTERISTICS</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_TRANSFER_CHARACTERISTICS"</literal></expr>,
<expr><index>[<expr><name>AV1E_SET_AQ_MODE</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_AQ_MODE"</literal></expr>,
<expr><index>[<expr><name>AV1E_SET_FRAME_PARALLEL_DECODING</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_FRAME_PARALLEL_DECODING"</literal></expr>,
<expr><index>[<expr><name>AV1E_SET_SUPERBLOCK_SIZE</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_SUPERBLOCK_SIZE"</literal></expr>,
<expr><index>[<expr><name>AV1E_SET_TILE_COLUMNS</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_TILE_COLUMNS"</literal></expr>,
<expr><index>[<expr><name>AV1E_SET_TILE_ROWS</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_TILE_ROWS"</literal></expr>,
<expr><index>[<expr><name>AV1E_SET_ENABLE_RESTORATION</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_ENABLE_RESTORATION"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_ROW_MT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>AV1E_SET_ROW_MT</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_ROW_MT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_DENOISE_NOISE_LEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>AV1E_SET_DENOISE_NOISE_LEVEL</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_DENOISE_NOISE_LEVEL"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_DENOISE_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>AV1E_SET_DENOISE_BLOCK_SIZE</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_DENOISE_BLOCK_SIZE"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_MAX_REFERENCE_FRAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>AV1E_SET_MAX_REFERENCE_FRAMES</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_MAX_REFERENCE_FRAMES"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_ENABLE_GLOBAL_MOTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>AV1E_SET_ENABLE_GLOBAL_MOTION</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_ENABLE_GLOBAL_MOTION"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_ENABLE_INTRABC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>AV1E_SET_ENABLE_INTRABC</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_ENABLE_INTRABC"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><index>[<expr><name>AV1E_SET_ENABLE_CDEF</name></expr>]</index> <operator>=</operator> <literal type="string">"AV1E_SET_ENABLE_CDEF"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>log_encoder_error</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AOMContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>aom_codec_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>detail</name> <init>= <expr><call><name>aom_codec_error_detail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>detail</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" Additional information: %s\n"</literal></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>dump_enc_cfg</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>aom_codec_enc_cfg</name></name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>-</operator><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name>AV_LOG_DEBUG</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"aom_codec_enc_cfg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"generic settings\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n %*s%u\n %*s%u\n %*s%u\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n"</literal>
<literal type="string">" %*s{%u/%u}\n %*s%u\n %*s%d\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_usage:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_usage</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_threads:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_threads</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_profile:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_profile</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_w:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_w</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_h:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_h</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_bit_depth:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_input_bit_depth:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_input_bit_depth</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_timebase:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_timebase</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_timebase</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_error_resilient:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_error_resilient</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_pass:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_pass</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"g_lag_in_frames:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>g_lag_in_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"rate control settings\n"</literal>
<literal type="string">" %*s%u\n %*s%d\n %*s%p(%"</literal><name>SIZE_SPECIFIER</name><literal type="string">")\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_dropframe_thresh:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_dropframe_thresh</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_end_usage:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_end_usage</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_twopass_stats_in:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_twopass_stats_in</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_twopass_stats_in</name><operator>.</operator><name>sz</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_target_bitrate:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_target_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"quantizer settings\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_min_quantizer:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_min_quantizer</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_max_quantizer:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_max_quantizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"bitrate tolerance\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_undershoot_pct:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_undershoot_pct</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_overshoot_pct:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_overshoot_pct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"decoder buffer model\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_buf_sz:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_buf_sz</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_buf_initial_sz:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_buf_initial_sz</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_buf_optimal_sz:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_buf_optimal_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"2 pass rate control settings\n"</literal>
<literal type="string">" %*s%u\n %*s%u\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_2pass_vbr_bias_pct:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_2pass_vbr_bias_pct</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_2pass_vbr_minsection_pct:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_2pass_vbr_minsection_pct</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"rc_2pass_vbr_maxsection_pct:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>rc_2pass_vbr_maxsection_pct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"keyframing settings\n"</literal>
<literal type="string">" %*s%d\n %*s%u\n %*s%u\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"kf_mode:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>kf_mode</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"kf_min_dist:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>kf_min_dist</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"kf_max_dist:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>kf_max_dist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"tile settings\n"</literal>
<literal type="string">" %*s%d\n %*s%d\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"tile_width_count:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>tile_width_count</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"tile_height_count:"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>tile_height_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>coded_frame_add</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>cx_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><name>list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>cx_frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>free_coded_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>cx_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cx_frame</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>free_frame_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_coded_frame</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>codecctl_int</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UENUM1BYTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<parameter><decl><type><name>aome_enc_control_id</name></type> <name>id</name></decl></parameter>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<parameter><decl><type><name><name>enum</name> <name>aome_enc_control_id</name></name></type> <name>id</name></decl></parameter>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AOMContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>-</operator><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:"</literal></expr></argument>, <argument><expr><name><name>ctlidstr</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %*s%d\n"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>aom_codec_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>AOM_CODEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Failed to set %s codec control"</literal></expr></argument>,
<argument><expr><name><name>ctlidstr</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aom_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AOMContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aom_codec_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_frame_list</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bsf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bsf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_pix_fmt</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>aom_codec_caps_t</name></type> <name>codec_caps</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>aom_codec_enc_cfg</name></name> <modifier>*</modifier></type><name>enccfg</name></decl></parameter>, <parameter><decl><type><name>aom_codec_flags_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>,
<parameter><decl><type><name>aom_img_fmt_t</name> <modifier>*</modifier></type><name>img_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AOMContext</name> <name>av_unused</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name> <operator>=</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>g_input_bit_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_MAIN</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>AOM_IMG_FMT_I420</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_PROFESSIONAL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>AOM_IMG_FMT_I422</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_HIGH</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>AOM_IMG_FMT_I444</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_YUV420P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P12</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>codec_caps</name> <operator>&amp;</operator> <name>AOM_CODEC_CAP_HIGHBITDEPTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name> <operator>=</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>g_input_bit_depth</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P10</name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name> <operator>==</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><name>FF_PROFILE_AV1_MAIN</name></expr> </then><else>: <expr><name>FF_PROFILE_AV1_PROFESSIONAL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>AOM_IMG_FMT_I42016</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>AOM_CODEC_USE_HIGHBITDEPTH</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV422P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P12</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>codec_caps</name> <operator>&amp;</operator> <name>AOM_CODEC_CAP_HIGHBITDEPTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name> <operator>=</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>g_input_bit_depth</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P10</name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AV1_PROFESSIONAL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>AOM_IMG_FMT_I42216</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>AOM_CODEC_USE_HIGHBITDEPTH</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV444P10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P12</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>codec_caps</name> <operator>&amp;</operator> <name>AOM_CODEC_CAP_HIGHBITDEPTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name> <operator>=</operator> <name><name>enccfg</name><operator>-&gt;</operator><name>g_input_bit_depth</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P10</name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_profile</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>enccfg</name><operator>-&gt;</operator><name>g_bit_depth</name></name> <operator>==</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><name>FF_PROFILE_AV1_HIGH</name></expr> </then><else>: <expr><name>FF_PROFILE_AV1_PROFESSIONAL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img_fmt</name> <operator>=</operator> <name>AOM_IMG_FMT_I44416</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>AOM_CODEC_USE_HIGHBITDEPTH</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_color_range</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aom_color_range_t</name></type> <name>aom_cr</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_RANGE_UNSPECIFIED</name></expr>:</case>
<case>case <expr><name>AVCOL_RANGE_MPEG</name></expr>:</case> <expr_stmt><expr><name>aom_cr</name> <operator>=</operator> <name>AOM_CR_STUDIO_RANGE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_RANGE_JPEG</name></expr>:</case> <expr_stmt><expr><name>aom_cr</name> <operator>=</operator> <name>AOM_CR_FULL_RANGE</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported color range (%d)\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_COLOR_RANGE</name></expr></argument>, <argument><expr><name>aom_cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>count_uniform_tiling</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tiles_log2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sb_dim</name> <init>= <expr><operator>(</operator><name>dim</name> <operator>+</operator> <name>sb_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>sb_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_dim</name> <init>= <expr><operator>(</operator><name>sb_dim</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>tiles_log2</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>tiles_log2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>tile_dim</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>sb_dim</name> <operator>+</operator> <name>tile_dim</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>tile_dim</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>choose_tiling</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>aom_codec_enc_cfg</name></name> <modifier>*</modifier></type><name>enccfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AOMContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sb_128x128_possible</name></decl>, <decl><type ref="prev"/><name>sb_size</name></decl>, <decl><type ref="prev"/><name>sb_width</name></decl>, <decl><type ref="prev"/><name>sb_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uniform_rows</name></decl>, <decl><type ref="prev"/><name>uniform_cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uniform_64x64_possible</name></decl>, <decl><type ref="prev"/><name>uniform_128x128_possible</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_size</name></decl>, <decl><type ref="prev"/><name>rounding</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols_log2</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols_log2</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows_log2</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_rows_log2</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>AV1_MAX_TILE_WIDTH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator>
<name>AV1_MAX_TILE_WIDTH</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Automatically using %d tile "</literal>
<literal type="string">"columns to fill width.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_tile_width</name> <init>=
<expr><call><name>FFALIGN</name><argument_list>(<argument><expr><operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>=</operator>
<operator>(</operator><name>max_tile_width</name> <operator>*</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<name>AV1_MAX_TILE_AREA</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>AV1_MAX_TILE_AREA</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Automatically using %d tile "</literal>
<literal type="string">"rows to fill area.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>/</operator> <literal type="number">64</literal> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>||</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>/</operator> <literal type="number">64</literal> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid tile sizing: frame not "</literal>
<literal type="string">"large enough to fit specified tile arrangement.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>&gt;</operator> <name>AV1_MAX_TILE_COLS</name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>&gt;</operator> <name>AV1_MAX_TILE_ROWS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid tile sizing: AV1 does "</literal>
<literal type="string">"not allow more than %dx%d tiles.\n"</literal></expr></argument>,
<argument><expr><name>AV1_MAX_TILE_COLS</name></expr></argument>, <argument><expr><name>AV1_MAX_TILE_ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>&gt;</operator> <name>AV1_MAX_TILE_WIDTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid tile sizing: AV1 does "</literal>
<literal type="string">"not allow tiles of width greater than %d.\n"</literal></expr></argument>,
<argument><expr><name>AV1_MAX_TILE_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>superblock_size</name></name> <operator>=</operator> <name>AOM_SUPERBLOCK_SIZE_DYNAMIC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using a single tile.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sb_128x128_possible</name> <operator>=</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">127</literal><operator>)</operator> <operator>/</operator> <literal type="number">128</literal> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">127</literal><operator>)</operator> <operator>/</operator> <literal type="number">128</literal> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols_log2</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
<expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows_log2</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
<expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>uniform_cols</name> <operator>=</operator> <call><name>count_uniform_tiling</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols_log2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uniform_rows</name> <operator>=</operator> <call><name>count_uniform_tiling</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows_log2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Uniform with 64x64 superblocks "</literal>
<literal type="string">"-&gt; %dx%d tiles.\n"</literal></expr></argument>, <argument><expr><name>uniform_cols</name></expr></argument>, <argument><expr><name>uniform_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uniform_64x64_possible</name> <operator>=</operator> <name>uniform_cols</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>&amp;&amp;</operator>
<name>uniform_rows</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sb_128x128_possible</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uniform_cols</name> <operator>=</operator> <call><name>count_uniform_tiling</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols_log2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uniform_rows</name> <operator>=</operator> <call><name>count_uniform_tiling</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows_log2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Uniform with 128x128 superblocks "</literal>
<literal type="string">"-&gt; %dx%d tiles.\n"</literal></expr></argument>, <argument><expr><name>uniform_cols</name></expr></argument>, <argument><expr><name>uniform_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uniform_128x128_possible</name> <operator>=</operator> <name>uniform_cols</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>&amp;&amp;</operator>
<name>uniform_rows</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"128x128 superblocks not possible.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uniform_128x128_possible</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>uniform_tiles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uniform_64x64_possible</name> <operator>&amp;&amp;</operator> <name>uniform_128x128_possible</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using uniform tiling with dynamic "</literal>
<literal type="string">"superblocks (tile_cols_log2 = %d, tile_rows_log2 = %d).\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols_log2</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows_log2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uniform_64x64_possible</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sb_128x128_possible</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using uniform tiling with 64x64 "</literal>
<literal type="string">"superblocks (tile_cols_log2 = %d, tile_rows_log2 = %d).\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols_log2</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows_log2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>superblock_size</name></name> <operator>=</operator> <name>AOM_SUPERBLOCK_SIZE_64X64</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uniform_128x128_possible</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using uniform tiling with 128x128 "</literal>
<literal type="string">"superblocks (tile_cols_log2 = %d, tile_rows_log2 = %d).\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols_log2</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows_log2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>superblock_size</name></name> <operator>=</operator> <name>AOM_SUPERBLOCK_SIZE_128X128</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>uniform_tiles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sb_128x128_possible</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sb_size</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>superblock_size</name></name> <operator>=</operator> <name>AOM_SUPERBLOCK_SIZE_128X128</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sb_size</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>superblock_size</name></name> <operator>=</operator> <name>AOM_SUPERBLOCK_SIZE_64X64</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using fixed tiling with %dx%d "</literal>
<literal type="string">"superblocks (tile_cols = %d, tile_rows = %d).\n"</literal></expr></argument>,
<argument><expr><name>sb_size</name></expr></argument>, <argument><expr><name>sb_size</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>tile_width_count</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>tile_height_count</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sb_width</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>sb_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>sb_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sb_height</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name>sb_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>sb_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tile_size</name> <operator>=</operator> <name>sb_width</name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rounding</name> <operator>=</operator> <name>sb_width</name> <operator>%</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>tile_widths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tile_size</name> <operator>+</operator>
<operator>(</operator><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>rounding</name> <operator>/</operator> <literal type="number">2</literal> <operator>||</operator>
<name>i</name></expr></argument> &gt;</argument_list></name> <name><name>ctx</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>rounding</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tile_size</name> <operator>=</operator> <name>sb_height</name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rounding</name> <operator>=</operator> <name>sb_height</name> <operator>%</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>-&gt;</operator><name>tile_heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tile_size</name> <operator>+</operator>
<operator>(</operator><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>rounding</name> <operator>/</operator> <literal type="number">2</literal> <operator>||</operator>
<name>i</name></expr></argument> &gt;</argument_list></name> <name><name>ctx</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>rounding</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aom_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>aom_codec_iface</name></name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AOMContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>aom_codec_enc_cfg</name></name></type> <name>enccfg</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_FRAME_IS_INTRAONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>aom_codec_flags_t</name></type> <name>flags</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PSNR</name><operator>)</operator></expr> ?</condition><then> <expr><name>AOM_CODEC_USE_PSNR</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>aom_codec_flags_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>cpb_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aom_img_fmt_t</name></type> <name>img_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aom_codec_caps_t</name></type> <name>codec_caps</name> <init>= <expr><call><name>aom_codec_get_caps</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>aom_codec_version_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>aom_codec_build_config</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>aom_codec_enc_config_default</name><argument_list>(<argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AOM_CODEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get config: %s\n"</literal></expr></argument>,
<argument><expr><call><name>aom_codec_err_to_string</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_pix_fmt</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>codec_caps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>img_fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>( <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Rate control parameters set without a bitrate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dump_enc_cfg</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_w</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_h</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_timebase</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_timebase</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_threads</name></name> <operator>=</operator>
<call><name>FFMIN</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr> </then><else>: <expr><call><name>av_cpu_count</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_usage</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>usage</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>lag_in_frames</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_lag_in_frames</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lag_in_frames</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>=</operator> <name>AOM_RC_FIRST_PASS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>=</operator> <name>AOM_RC_LAST_PASS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>=</operator> <name>AOM_RC_ONE_PASS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>=</operator> <name>AOM_CBR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>=</operator> <name>AOM_CQ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>=</operator> <name>AOM_Q</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_target_bitrate</name></name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>,
<argument><expr><name>AV_ROUND_NEAR_INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>!=</operator> <name>AOM_Q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>=</operator> <name>AOM_Q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Neither bitrate nor constrained quality specified, using default CRF of %d\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_min_quantizer</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_max_quantizer</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>==</operator> <name>AOM_CQ</name> <operator>||</operator> <name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>==</operator> <name>AOM_Q</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name> <operator>&lt;</operator> <name><name>enccfg</name><operator>.</operator><name>rc_min_quantizer</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name> <operator>&gt;</operator> <name><name>enccfg</name><operator>.</operator><name>rc_max_quantizer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"CQ level %d must be between minimum and maximum quantizer value (%d-%d)\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name></expr></argument>, <argument><expr><name><name>enccfg</name><operator>.</operator><name>rc_min_quantizer</name></name></expr></argument>, <argument><expr><name><name>enccfg</name><operator>.</operator><name>rc_max_quantizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_dropframe_thresh</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>drop_threshold</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_2pass_vbr_bias_pct</name></name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>qcompress</name></name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>minsection_pct</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_2pass_vbr_minsection_pct</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>minsection_pct</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_2pass_vbr_minsection_pct</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>*</operator> <literal type="number">100LL</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>maxsection_pct</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_2pass_vbr_maxsection_pct</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxsection_pct</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_2pass_vbr_maxsection_pct</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>*</operator> <literal type="number">100LL</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_buf_sz</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>*</operator> <literal type="number">1000LL</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_buf_initial_sz</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>*</operator> <literal type="number">1000LL</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_buf_optimal_sz</name></name> <operator>=</operator> <name><name>enccfg</name><operator>.</operator><name>rc_buf_sz</name></name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_undershoot_pct</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_undershoot_pct</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc_undershoot_pct</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_overshoot_pct</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_overshoot_pct</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc_overshoot_pct</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>kf_min_dist</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>kf_max_dist</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>==</operator> <name>AOM_RC_FIRST_PASS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_lag_in_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>==</operator> <name>AOM_RC_LAST_PASS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>decode_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No stats file for second pass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Stat buffer alloc (%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" bytes) failed\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>decode_size</name> <operator>=</operator> <call><name>av_base64_decode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>decode_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stat buffer decode failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name> <operator>=</operator> <name>decode_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>rc_twopass_stats_in</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_profile</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_error_resilient</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>error_resilient</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>choose_tiling</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dump_enc_cfg</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>aom_codec_enc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>AOM_CODEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize encoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"aom_codec_control\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AOME_SET_CPUUSED</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpu_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>auto_alt_ref</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AOME_SET_ENABLEAUTOALTREF</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>auto_alt_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>arnr_max_frames</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AOME_SET_ARNR_MAXFRAMES</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>arnr_max_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>arnr_strength</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AOME_SET_ARNR_STRENGTH</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>arnr_strength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>enable_cdef</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_ENABLE_CDEF</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>enable_cdef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>enable_restoration</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_ENABLE_RESTORATION</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>enable_restoration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AOME_SET_STATIC_THRESHOLD</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>static_thresh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AOME_SET_CQ_LEVEL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_COLOR_PRIMARIES</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_MATRIX_COEFFICIENTS</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_TRANSFER_CHARACTERISTICS</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>aq_mode</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_AQ_MODE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>aq_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_parallel</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_FRAME_PARALLEL_DECODING</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_parallel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_color_range</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_SUPERBLOCK_SIZE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>superblock_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>uniform_tiles</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_TILE_COLUMNS</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_cols_log2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_TILE_ROWS</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tile_rows_log2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_DENOISE_NOISE_LEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>denoise_noise_level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_DENOISE_NOISE_LEVEL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>denoise_noise_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_DENOISE_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>denoise_block_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_DENOISE_BLOCK_SIZE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>denoise_block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_ENABLE_GLOBAL_MOTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>enable_global_motion</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_ENABLE_GLOBAL_MOTION</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>enable_global_motion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_MAX_REFERENCE_FRAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_MAX_REFERENCE_FRAMES</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_ROW_MT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>row_mt</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_ROW_MT</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>row_mt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_CTRL_AV1E_SET_ENABLE_INTRABC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>enable_intrabc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>codecctl_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV1E_SET_ENABLE_INTRABC</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>enable_intrabc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>aom_img_wrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rawimg</name></name></expr></argument>, <argument><expr><name>img_fmt</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_caps</name> <operator>&amp;</operator> <name>AOM_CODEC_CAP_HIGHBITDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rawimg</name><operator>.</operator><name>bit_depth</name></name> <operator>=</operator> <name><name>enccfg</name><operator>.</operator><name>g_bit_depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cpb_props</name> <operator>=</operator> <call><name>ff_add_cpb_side_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpb_props</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>av_bsf_get_by_name</name><argument_list>(<argument><expr><literal type="string">"extract_extradata"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"extract_extradata bitstream filter "</literal>
<literal type="string">"not found. This is a bug, please report it.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_alloc</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bsf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_from_context</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bsf</name><operator>-&gt;</operator><name>par_in</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bsf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enccfg</name><operator>.</operator><name>rc_end_usage</name></name> <operator>==</operator> <name>AOM_CBR</name> <operator>||</operator>
<name><name>enccfg</name><operator>.</operator><name>g_pass</name></name> <operator>!=</operator> <name>AOM_RC_ONE_PASS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>max_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>min_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>avg_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cx_pktcpy</name><parameter_list>(<parameter><decl><type><name>AOMContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>aom_codec_cx_pkt</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>duration</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sz</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>sz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_FRAME_IS_INTRAONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>have_sse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>=</operator> <operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>have_sse</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>have_sse</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>have_sse</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>sse</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sse</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>sse</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>have_sse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>storeframe</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>cx_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AOMContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>pict_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error getting output packet of size %"</literal><name>SIZE_SPECIFIER</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>cx_frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>cx_frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AOM_FRAME_IS_KEY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_FRAME_IS_INTRAONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cx_frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AOM_FRAME_IS_INTRAONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_side_data_set_encoder_stats</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sse</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>have_sse</name></name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>pict_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cx_frame</name><operator>-&gt;</operator><name>have_sse</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>error</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>cx_frame</name><operator>-&gt;</operator><name>sse</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>have_sse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_send_packet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bsf</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"extract_extradata filter "</literal>
<literal type="string">"failed to send input packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_receive_packet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bsf</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"extract_extradata filter "</literal>
<literal type="string">"failed to receive output packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>queue_frames</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AOMContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>aom_codec_cx_pkt</name></name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>cx_frame</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>storeframe</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>cx_frame</name></expr></argument>, <argument><expr><name>pkt_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name> <operator>=</operator> <name><name>cx_frame</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_coded_frame</name><argument_list>(<argument><expr><name>cx_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><operator>(</operator><name>pkt</name> <operator>=</operator> <call><name>aom_codec_get_cx_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AOM_CODEC_CX_FRAME_PKT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name></type> <name>cx_frame</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cx_pktcpy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx_frame</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>storeframe</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx_frame</name></expr></argument>, <argument><expr><name>pkt_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FrameListData</name></name> <modifier>*</modifier></type><name>cx_frame</name> <init>=
<expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>FrameListData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cx_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Frame queue element alloc failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cx_pktcpy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cx_frame</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cx_frame</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Data buffer alloc (%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" bytes) failed\n"</literal></expr></argument>,
<argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cx_frame</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>coded_frame_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>coded_frame_list</name></name></expr></argument>, <argument><expr><name>cx_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AOM_CODEC_STATS_PKT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>aom_fixed_buf</name></name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>sz</name></name> <operator>+</operator>
<name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>sz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stat buffer realloc failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>stats</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>stats</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>twopass_stats</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>sz</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AOM_FRAME_IS_INTRAONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AOM_CODEC_PSNR_PKT</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>have_sse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>psnr</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>psnr</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>psnr</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>psnr</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>have_sse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>AOM_CODEC_CUSTOM_PKT</name></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aom_encode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AOMContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>aom_image</name></name> <modifier>*</modifier></type><name>rawimg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>coded_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aom_enc_frame_flags_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rawimg</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rawimg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>AOM_PLANE_Y</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>AOM_PLANE_U</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>AOM_PLANE_V</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>AOM_PLANE_Y</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>AOM_PLANE_U</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>AOM_PLANE_V</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_RANGE_MPEG</name></expr>:</case>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>AOM_CR_STUDIO_RANGE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_RANGE_JPEG</name></expr>:</case>
<expr_stmt><expr><name><name>rawimg</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>AOM_CR_FULL_RANGE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>AOM_EFLAG_FORCE_KF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>aom_codec_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>rawimg</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>AOM_CODEC_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>log_encoder_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Error encoding frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>coded_size</name> <operator>=</operator> <call><name>queue_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>b64_size</name> <init>= <expr><call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>b64_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stat buffer alloc (%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" bytes) failed\n"</literal></expr></argument>,
<argument><expr><name>b64_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_base64_encode</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>, <argument><expr><name>b64_size</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass_stats</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>coded_size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>av1_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>av1_pix_fmts_highbd</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>av1_init_static</name><parameter_list>(<parameter><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>aom_codec_caps_t</name></type> <name>codec_caps</name> <init>= <expr><call><name>aom_codec_get_caps</name><argument_list>(<argument><expr><call><name>aom_codec_av1_cx</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>codec_caps</name> <operator>&amp;</operator> <name>AOM_CODEC_CAP_HIGHBITDEPTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name> <operator>=</operator> <name>av1_pix_fmts_highbd</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name> <operator>=</operator> <name>av1_pix_fmts</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>av1_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>aom_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><call><name>aom_codec_av1_cx</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AOMContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"cpu-used"</literal></expr>, <expr><literal type="string">"Quality/Speed ratio modifier"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cpu_used</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"auto-alt-ref"</literal></expr>, <expr><literal type="string">"Enable use of alternate reference "</literal>
<literal type="string">"frames (2-pass only)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>auto_alt_ref</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lag-in-frames"</literal></expr>, <expr><literal type="string">"Number of frames to look ahead at for "</literal>
<literal type="string">"alternate reference frame selection"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lag_in_frames</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"arnr-max-frames"</literal></expr>, <expr><literal type="string">"altref noise reduction max frame count"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>arnr_max_frames</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"arnr-strength"</literal></expr>, <expr><literal type="string">"altref noise reduction filter strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>arnr_strength</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"aq-mode"</literal></expr>, <expr><literal type="string">"adaptive quantization mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aq_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"Aq not used"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"variance"</literal></expr>, <expr><literal type="string">"Variance based Aq"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"complexity"</literal></expr>, <expr><literal type="string">"Complexity based Aq"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cyclic"</literal></expr>, <expr><literal type="string">"Cyclic Refresh Aq"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"error-resilience"</literal></expr>, <expr><literal type="string">"Error resilience configuration"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>error_resilient</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"er"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><literal type="string">"Improve resiliency against losses of whole frames"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AOM_ERROR_RESILIENT_DEFAULT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"er"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"crf"</literal></expr>, <expr><literal type="string">"Select the quality for constant quality mode"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AOMContext</name></expr></argument>, <argument><expr><name>crf</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"static-thresh"</literal></expr>, <expr><literal type="string">"A change threshold on blocks below which they will be skipped by the encoder"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>static_thresh</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"drop-threshold"</literal></expr>, <expr><literal type="string">"Frame drop threshold"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AOMContext</name></expr></argument>, <argument><expr><name>drop_threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"denoise-noise-level"</literal></expr>, <expr><literal type="string">"Amount of noise to be removed"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>denoise_noise_level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"denoise-block-size"</literal></expr>, <expr><literal type="string">"Denoise block size "</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>denoise_block_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"undershoot-pct"</literal></expr>, <expr><literal type="string">"Datarate undershoot (min) target (%)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rc_undershoot_pct</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"overshoot-pct"</literal></expr>, <expr><literal type="string">"Datarate overshoot (max) target (%)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rc_overshoot_pct</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"minsection-pct"</literal></expr>, <expr><literal type="string">"GOP min bitrate (% of target)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>minsection_pct</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"maxsection-pct"</literal></expr>, <expr><literal type="string">"GOP max bitrate (% of target)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>maxsection_pct</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">5000</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"frame-parallel"</literal></expr>, <expr><literal type="string">"Enable frame parallel decodability features"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_parallel</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tiles"</literal></expr>, <expr><literal type="string">"Tile columns x rows"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tile_cols</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tile-columns"</literal></expr>, <expr><literal type="string">"Log2 of number of tile columns to use"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tile_cols_log2</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tile-rows"</literal></expr>, <expr><literal type="string">"Log2 of number of tile rows to use"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tile_rows_log2</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"row-mt"</literal></expr>, <expr><literal type="string">"Enable row based multi-threading"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>row_mt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"enable-cdef"</literal></expr>, <expr><literal type="string">"Enable CDEF filtering"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>enable_cdef</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"enable-global-motion"</literal></expr>, <expr><literal type="string">"Enable global motion"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>enable_global_motion</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"enable-intrabc"</literal></expr>, <expr><literal type="string">"Enable intra block copy prediction mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>enable_intrabc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"enable-restoration"</literal></expr>, <expr><literal type="string">"Enable Loop Restoration filtering"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>enable_restoration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"usage"</literal></expr>, <expr><literal type="string">"Quality and compression efficiency vs speed tradeof"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"usage"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"good"</literal></expr>, <expr><literal type="string">"Good quality"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"usage"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"realtime"</literal></expr>, <expr><literal type="string">"Realtime encoding"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"usage"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>defaults</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qmin"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qmax"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"keyint_min"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class_aom</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libaom-av1 encoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libaom_av1_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libaom-av1"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libaom AV1"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AV1</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AOMContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>av1_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>aom_encode</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>aom_free</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_EXPERIMENTAL</name></expr>,
<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_av1_profiles</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>class_aom</name></expr>,
<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>defaults</name></expr>,
<expr><operator>.</operator><name>init_static_data</name> <operator>=</operator> <name>av1_init_static</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libaom"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
