<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vp9lpf.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dec.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_plane_cols</name><argument_list>(<argument><expr><name>VP9Context</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>int</name> <name>col</name></expr></argument>, <argument><expr><name>int</name> <name>ss_h</name></expr></argument>, <argument><expr><name>int</name> <name>ss_v</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>lvl</name></expr></argument>, <argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mask</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>ls</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>bytesperpixel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>ss_v</name></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <name>ls</name></expr><operator>,</operator> <expr><name>lvl</name> <operator>+=</operator> <literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>ss_v</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>dst</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name> <init>= <expr><name>lvl</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hmask1</name> <init>= <expr><name><name>mask</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hmask2</name> <init>= <expr><name><name>mask</name><index>[<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>ss_v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>hm1</name> <init>= <expr><name><name>hmask1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>hmask1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>hmask1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>hm13</name> <init>= <expr><name><name>hmask1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>hm2</name> <init>= <expr><name><name>hmask2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>hmask2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>hm23</name> <init>= <expr><name><name>hmask2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>hm</name> <init>= <expr><name>hm1</name> <operator>|</operator> <name>hm2</name> <operator>|</operator> <name>hm13</name> <operator>|</operator> <name>hm23</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>hm</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>ptr</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name>ss_h</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>||</operator> <name>x</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hm1</name> <operator>&amp;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><operator>*</operator><name>l</name></expr></init></decl>, <decl><type ref="prev"/><name>H</name> <init>= <expr><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>E</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>I</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hmask1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hmask2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>ss_v</name></expr>]</index></name> <operator>==</operator> <name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_8</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hm2</name> <operator>&amp;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <name><name>l</name><index>[<expr><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>ss_v</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>H</name> <operator>|=</operator> <operator>(</operator><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>E</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>I</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_mix2</name><index>[<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>hmask1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>x</name><operator>)</operator></expr>]</index>
<index>[<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>hmask2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>x</name><operator>)</operator></expr>]</index>
<index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_8</name><index>[<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>hmask1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>x</name><operator>)</operator></expr>]</index>
<index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hm2</name> <operator>&amp;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>ss_v</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>H</name> <init>= <expr><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>E</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>I</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_8</name><index>[<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>hmask2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>x</name><operator>)</operator></expr>]</index>
<index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>ls</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ss_h</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xAA</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hm13</name> <operator>&amp;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><operator>*</operator><name>l</name></expr></init></decl>, <decl><type ref="prev"/><name>H</name> <init>= <expr><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>E</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>I</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hm23</name> <operator>&amp;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <name><name>l</name><index>[<expr><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>ss_v</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>H</name> <operator>|=</operator> <operator>(</operator><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>E</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>I</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hm23</name> <operator>&amp;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>ss_v</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>H</name> <init>= <expr><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>E</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>I</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>ls</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_plane_rows</name><argument_list>(<argument><expr><name>VP9Context</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>int</name> <name>row</name></expr></argument>, <argument><expr><name>int</name> <name>ss_h</name></expr></argument>, <argument><expr><name>int</name> <name>ss_v</name></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>lvl</name></expr></argument>, <argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mask</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,
<argument><expr><name>uint8_t</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>ls</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>bytesperpixel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name></expr></init></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>ls</name> <operator>&gt;&gt;</operator> <name>ss_v</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>dst</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name> <init>= <expr><name>lvl</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vmask</name> <init>= <expr><name><name>mask</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>vm</name> <init>= <expr><name><name>vmask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>vmask</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>vmask</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>vm3</name> <init>= <expr><name><name>vmask</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>vm</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name> <operator>&lt;&lt;=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>ss_h</name><operator>)</operator></expr><operator>,</operator> <expr><name>ptr</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <name>bytesperpixel</name></expr><operator>,</operator> <expr><name>l</name> <operator>+=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>ss_h</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>||</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vm</name> <operator>&amp;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><operator>*</operator><name>l</name></expr></init></decl>, <decl><type ref="prev"/><name>H</name> <init>= <expr><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>E</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>I</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vmask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vmask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name></expr>]</index></name> <operator>==</operator> <name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_8</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vm</name> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <name><name>l</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>H</name> <operator>|=</operator> <operator>(</operator><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>E</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>I</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_mix2</name><index>[<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>vmask</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>x</name><operator>)</operator></expr>]</index>
<index>[<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>vmask</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>]</index>
<index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_8</name><index>[<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>vmask</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>x</name><operator>)</operator></expr>]</index>
<index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vm</name> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>H</name> <init>= <expr><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>E</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>I</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_8</name><index>[<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>vmask</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>]</index>
<index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss_v</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vm3</name> <operator>&amp;</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><operator>*</operator><name>l</name></expr></init></decl>, <decl><type ref="prev"/><name>H</name> <init>= <expr><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>E</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>I</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vm3</name> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <name><name>l</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>H</name> <operator>|=</operator> <operator>(</operator><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>E</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>I</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>ptr</name> <operator>+</operator> <name>ls</name> <operator>*</operator> <literal type="number">4</literal><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>ptr</name> <operator>+</operator> <name>ls</name> <operator>*</operator> <literal type="number">4</literal><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vm3</name> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><name><name>l</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>ss_h</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>H</name> <init>= <expr><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>E</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>I</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>L</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>loop_filter_8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>ptr</name> <operator>+</operator> <name>ls</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name>ls</name><operator>,</operator> <name>E</name><operator>,</operator> <name>I</name><operator>,</operator> <name>H</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ss_v</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lvl</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lvl</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>ff_vp9_loopfilter_sb</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VP9Filter</name> <modifier>*</modifier></type><name>lflvl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>yoff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uvoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>yoff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>ls_y</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>ls_uv</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>uv_masks</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator> <name><name>lflvl</name><operator>-&gt;</operator><name>mask</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>]</index></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>







<expr_stmt><expr><call><name>filter_plane_cols</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>lflvl</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>lflvl</name><operator>-&gt;</operator><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ls_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter_plane_rows</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>lflvl</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>lflvl</name><operator>-&gt;</operator><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ls_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>p</name></expr>]</index></name> <operator>+</operator> <name>uvoff</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter_plane_cols</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr></argument>, <argument><expr><name><name>lflvl</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>uv_masks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ls_uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter_plane_rows</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr></argument>, <argument><expr><name><name>lflvl</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>uv_masks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ls_uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
