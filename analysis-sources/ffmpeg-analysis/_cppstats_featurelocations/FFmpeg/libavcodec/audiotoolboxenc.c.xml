<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\audiotoolboxenc.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AudioToolbox/AudioToolbox.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUFQUEUE_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/bufferqueue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_frame_queue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/isom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ATDecodeContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioConverterRef</name></type> <name>converter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FFBufQueue</name></name></type> <name>frame_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FFBufQueue</name></name></type> <name>used_frame_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>pkt_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioFrameQueue</name></type> <name>afq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name><modifier>*</modifier></type> <name>encoding_frame</name></decl>;</decl_stmt>
}</block></struct></type> <name>ATDecodeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>UInt32</name></type> <name>ffat_get_format_id</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>codec</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_AAC</name></expr>:</case>
<switch>switch <condition>(<expr><name>profile</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_PROFILE_AAC_LOW</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>kAudioFormatMPEG4AAC</name></expr>;</return>
<case>case <expr><name>FF_PROFILE_AAC_HE</name></expr>:</case>
<return>return <expr><name>kAudioFormatMPEG4AAC_HE</name></expr>;</return>
<case>case <expr><name>FF_PROFILE_AAC_HE_V2</name></expr>:</case>
<return>return <expr><name>kAudioFormatMPEG4AAC_HE_V2</name></expr>;</return>
<case>case <expr><name>FF_PROFILE_AAC_LD</name></expr>:</case>
<return>return <expr><name>kAudioFormatMPEG4AAC_LD</name></expr>;</return>
<case>case <expr><name>FF_PROFILE_AAC_ELD</name></expr>:</case>
<return>return <expr><name>kAudioFormatMPEG4AAC_ELD</name></expr>;</return>
</block_content>}</block></switch>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>
<return>return <expr><name>kAudioFormatAppleIMA4</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ALAC</name></expr>:</case>
<return>return <expr><name>kAudioFormatAppleLossless</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ILBC</name></expr>:</case>
<return>return <expr><name>kAudioFormatiLBC</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_PCM_ALAW</name></expr>:</case>
<return>return <expr><name>kAudioFormatALaw</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_PCM_MULAW</name></expr>:</case>
<return>return <expr><name>kAudioFormatULaw</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Invalid codec ID!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ffat_update_ctx</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioConverterPrimeInfo</name></type> <name>prime_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>out_format</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AudioConverterGetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>,
<argument><expr><name>kAudioConverterPropertyMaximumOutputPacketSize</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>pkt_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>pkt_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>pkt_size</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>prime_info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AudioConverterGetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>,
<argument><expr><name>kAudioConverterPrimeInfo</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prime_info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name> <operator>=</operator> <name><name>prime_info</name><operator>.</operator><name>leadingFrames</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out_format</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AudioConverterGetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>,
<argument><expr><name>kAudioConverterCurrentOutputStreamDescription</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>out_format</name><operator>.</operator><name>mFramesPerPacket</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>out_format</name><operator>.</operator><name>mFramesPerPacket</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out_format</name><operator>.</operator><name>mBytesPerPacket</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ILBC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name><name>out_format</name><operator>.</operator><name>mBytesPerPacket</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_MULAW</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_ALAW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>pkt_size</name></name> <operator>*=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_descr</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_ilbc_mode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>==</operator> <literal type="number">38</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">20</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">30</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&lt;=</operator> <literal type="number">14000</literal></expr> ?</condition><then> <expr><literal type="number">30</literal></expr> </then><else>: <expr><literal type="number">20</literal></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">30</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>get_channel_label</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>map</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>channel</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name> <operator>&lt;=</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>channel</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>map</name> <operator>&lt;=</operator> <name>AV_CH_BACK_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>channel</name> <operator>+</operator> <literal type="number">29</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>map</name> <operator>&lt;=</operator> <name>AV_CH_BACK_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>channel</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>map</name> <operator>&lt;=</operator> <name>AV_CH_SIDE_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>channel</name> <operator>-</operator> <literal type="number">4</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>map</name> <operator>&lt;=</operator> <name>AV_CH_TOP_BACK_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>channel</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>map</name> <operator>&lt;=</operator> <name>AV_CH_STEREO_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>map</name> <operator>&lt;=</operator> <name>AV_CH_WIDE_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>channel</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>map</name> <operator>&lt;=</operator> <name>AV_CH_SURROUND_DIRECT_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>channel</name> <operator>-</operator> <literal type="number">23</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>map</name> <operator>==</operator> <name>AV_CH_LOW_FREQUENCY_2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>kAudioChannelLabel_LFE2</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remap_layout</name><parameter_list>(<parameter><decl><type><name>AudioChannelLayout</name> <modifier>*</modifier></type><name>layout</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>in_layout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>layout</name><operator>-&gt;</operator><name>mChannelLayoutTag</name></name> <operator>=</operator> <name>kAudioChannelLayoutTag_UseChannelDescriptions</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layout</name><operator>-&gt;</operator><name>mNumberChannelDescriptions</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>label</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>in_layout</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>c</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>get_channel_label</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layout</name><operator>-&gt;</operator><name>mChannelDescriptions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mChannelLabel</name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_aac_tag</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>in_layout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>in_layout</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CH_LAYOUT_MONO</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_Mono</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_STEREO</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_Stereo</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_QUAD</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_AAC_Quadraphonic</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_OCTAGONAL</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_AAC_Octagonal</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_SURROUND</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_AAC_3_0</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_4POINT0</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_AAC_4_0</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_5POINT0</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_AAC_5_0</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_5POINT1</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_AAC_5_1</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_6POINT0</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_AAC_6_0</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_6POINT1</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_AAC_6_1</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_7POINT0</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_AAC_7_0</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_7POINT1_WIDE_BACK</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_AAC_7_1</name></expr>;</return>
<case>case <expr><name>AV_CH_LAYOUT_7POINT1</name></expr>:</case>
<return>return <expr><name>kAudioChannelLayoutTag_MPEG_7_1_C</name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ffat_init_encoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>in_format</name> <init>= <expr><block>{
<expr><operator>.</operator><name>mSampleRate</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>,
<expr><operator>.</operator><name>mFormatID</name> <operator>=</operator> <name>kAudioFormatLinearPCM</name></expr>,
<expr><operator>.</operator><name>mFormatFlags</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_DBL</name><operator>)</operator> <operator>?</operator> <name>kAudioFormatFlagIsFloat</name>
<operator>:</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_U8</name> <operator>?</operator> <literal type="number">0</literal>
<operator>:</operator> <name>kAudioFormatFlagIsSignedInteger</name><operator>)</operator>
<operator>|</operator> <name>kAudioFormatFlagIsPacked</name></expr>,
<expr><operator>.</operator><name>mBytesPerPacket</name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>,
<expr><operator>.</operator><name>mFramesPerPacket</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>mBytesPerFrame</name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>,
<expr><operator>.</operator><name>mChannelsPerFrame</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>,
<expr><operator>.</operator><name>mBitsPerChannel</name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>out_format</name> <init>= <expr><block>{
<expr><operator>.</operator><name>mSampleRate</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>,
<expr><operator>.</operator><name>mFormatID</name> <operator>=</operator> <call><name>ffat_get_format_id</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mChannelsPerFrame</name> <operator>=</operator> <name><name>in_format</name><operator>.</operator><name>mChannelsPerFrame</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>layout_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AudioChannelLayout</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>AudioChannelDescription</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioChannelLayout</name> <modifier>*</modifier></type><name>channel_layout</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>layout_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channel_layout</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ILBC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name>get_ilbc_mode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out_format</name><operator>.</operator><name>mFramesPerPacket</name></name> <operator>=</operator> <literal type="number">8000</literal> <operator>*</operator> <name>mode</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_format</name><operator>.</operator><name>mBytesPerPacket</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>mode</name> <operator>==</operator> <literal type="number">20</literal></expr> ?</condition><then> <expr><literal type="number">38</literal></expr> </then><else>: <expr><literal type="number">50</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>AudioConverterNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AudioToolbox init error: %i\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>remap_layout</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel layout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AudioConverterSetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>kAudioConverterInputChannelLayout</name></expr></argument>,
<argument><expr><name>layout_size</name></expr></argument>, <argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input channel layout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name>get_aac_tag</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>channel_layout</name><operator>-&gt;</operator><name>mChannelLayoutTag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel_layout</name><operator>-&gt;</operator><name>mNumberChannelDescriptions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AudioConverterSetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>kAudioConverterOutputChannelLayout</name></expr></argument>,
<argument><expr><name>layout_size</name></expr></argument>, <argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported output channel layout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AudioConverterSetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>,
<argument><expr><name>kAudioConverterPropertyBitDepthHint</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr> ?</condition><then>
<expr><name>kAudioCodecBitRateControlMode_Variable</name></expr> </then><else>:
<expr><name>kAudioCodecBitRateControlMode_Constant</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AudioConverterSetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>kAudioCodecPropertyBitRateControlMode</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>kAudioCodecBitRateControlMode_Variable</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>/</operator> <name>FF_QP2LAMBDA</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>q</name></expr></argument> &gt;</argument_list></name> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"VBR quality %d out of range, should be 0-14\n"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">127</literal> <operator>-</operator> <name>q</name> <operator>*</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AudioConverterSetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>kAudioCodecPropertySoundQualityForVBR</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>rate</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>AudioConverterGetPropertyInfo</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>,
<argument><expr><name>kAudioConverterApplicableEncodeBitRates</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name> <operator>&amp;&amp;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>new_rate</name> <init>= <expr><name>rate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioValueRange</name> <modifier>*</modifier></type><name>ranges</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ranges</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>AudioConverterGetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>,
<argument><expr><name>kAudioConverterApplicableEncodeBitRates</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioValueRange</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AudioValueRange</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><operator>&amp;</operator><name><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>&gt;=</operator> <name><name>range</name><operator>-&gt;</operator><name>mMinimum</name></name> <operator>&amp;&amp;</operator> <name>rate</name> <operator>&lt;=</operator> <name><name>range</name><operator>-&gt;</operator><name>mMaximum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_rate</name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rate</name> <operator>&gt;</operator> <name><name>range</name><operator>-&gt;</operator><name>mMaximum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_rate</name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>mMaximum</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>new_rate</name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>mMinimum</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>new_rate</name> <operator>!=</operator> <name>rate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Bitrate %u not allowed; changing to %u\n"</literal></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><name>new_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rate</name> <operator>=</operator> <name>new_rate</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AudioConverterSetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>kAudioConverterEncodeBitRate</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <literal type="number">96</literal> <operator>-</operator> <name><name>at</name><operator>-&gt;</operator><name>quality</name></name> <operator>*</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AudioConverterSetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>kAudioConverterCodecQuality</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AudioConverterGetPropertyInfo</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>kAudioConverterCompressionMagicCookie</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>extradata_size</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ALAC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><literal type="number">0x24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extradata</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>extradata</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>AudioConverterGetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>,
<argument><expr><name>kAudioConverterCompressionMagicCookie</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>extradata_size</name></expr></argument>, <argument><expr><name>extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AudioToolbox cookie error: %i\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>extradata</name></expr></argument>, <argument><expr><name>extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>read_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>MP4DecConfigDescrTag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>read_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>MP4DecSpecificDescrTag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>gb</name><operator>.</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>extradata</name></expr></argument>, <argument><expr><name><name>gb</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>MP4ESDescrTag</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_ALAC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>extradata_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ffat_update_ctx</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MAC_10_9</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>kAudioCodecBitRateControlMode_Variable</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>max_size</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AudioConverterSetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>kAudioCodecPropertyPacketSizeLimitForVBR</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>max_size</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ff_af_queue_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>encoding_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>at</name><operator>-&gt;</operator><name>encoding_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>ffat_encode_callback</name><parameter_list>(<parameter><decl><type><name>AudioConverterRef</name></type> <name>converter</name></decl></parameter>, <parameter><decl><type><name>UInt32</name> <modifier>*</modifier></type><name>nb_packets</name></decl></parameter>,
<parameter><decl><type><name>AudioBufferList</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>AudioStreamPacketDescription</name> <modifier>*</modifier><modifier>*</modifier></type><name>packets</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name>inctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>at</name><operator>-&gt;</operator><name>frame_queue</name><operator>.</operator><name>available</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nb_packets</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nb_packets</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>ff_bufqueue_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mNumberBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mNumberChannels</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mDataByteSize</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator>
<call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>*</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mData</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nb_packets</name> <operator>&gt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>nb_packets</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>encoding_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>encoding_frame</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nb_packets</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_bufqueue_add</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>used_frame_queue</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ffat_encode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioBufferList</name></type> <name>out_buffers</name> <init>= <expr><block>{
<expr><operator>.</operator><name>mNumberBuffers</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>mBuffers</name> <operator>=</operator> <block>{
<expr><block>{
<expr><operator>.</operator><name>mNumberChannels</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>,
<expr><operator>.</operator><name>mDataByteSize</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>pkt_size</name></name></expr>,
}</block></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamPacketDescription</name></type> <name>out_pkt_desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in_frame</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_bufqueue_is_full</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bug: frame queue is too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_af_queue_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>in_frame</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_bufqueue_add</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>, <argument><expr><name>in_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>pkt_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>out_buffers</name><operator>.</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mData</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>/</operator> <name><name>at</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AudioConverterFillComplexBuffer</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>ffat_encode_callback</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>,
<argument><expr><name>got_packet_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_buffers</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <name><name>at</name><operator>-&gt;</operator><name>frame_size</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>out_pkt_desc</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_bufqueue_discard_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>used_frame_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>ret</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>got_packet_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>out_buffers</name><operator>.</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mDataByteSize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_af_queue_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>out_pkt_desc</name><operator>.</operator><name>mVariableFramesInPacket</name></name></expr> ?</condition><then>
<expr><name><name>out_pkt_desc</name><operator>.</operator><name>mVariableFramesInPacket</name></name></expr> </then><else>:
<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Encode error: %i\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>ffat_encode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AudioConverterReset</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_bufqueue_discard_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_bufqueue_discard_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>used_frame_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ffat_close_encoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AudioConverterDispose</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_bufqueue_discard_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>frame_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_bufqueue_discard_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>used_frame_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_af_queue_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>encoding_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVProfile</name></type> <name><name>aac_profiles</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>FF_PROFILE_AAC_LOW</name></expr>, <expr><literal type="string">"LC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_AAC_HE</name></expr>, <expr><literal type="string">"HE-AAC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_AAC_HE_V2</name></expr>, <expr><literal type="string">"HE-AACv2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_AAC_LD</name></expr>, <expr><literal type="string">"LD"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_AAC_ELD</name></expr>, <expr><literal type="string">"ELD"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_UNKNOWN</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>
<expr><block>{<expr><literal type="string">"aac_at_mode"</literal></expr>, <expr><literal type="string">"ratecontrol mode"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ATDecodeContext</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>kAudioCodecBitRateControlMode_Variable</name></expr>, <expr><name>AE</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"VBR if global quality is given; CBR otherwise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AE</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cbr"</literal></expr>, <expr><literal type="string">"constant bitrate"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>kAudioCodecBitRateControlMode_Constant</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AE</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"abr"</literal></expr>, <expr><literal type="string">"long-term average bitrate"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>kAudioCodecBitRateControlMode_LongTermAverage</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AE</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"cvbr"</literal></expr>, <expr><literal type="string">"constrained variable bitrate"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>kAudioCodecBitRateControlMode_VariableConstrained</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AE</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vbr"</literal></expr> , <expr><literal type="string">"variable bitrate"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>kAudioCodecBitRateControlMode_Variable</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AE</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">"aac_at_quality"</literal></expr>, <expr><literal type="string">"quality vs speed control"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ATDecodeContext</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>AE</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFAT_ENC_CLASS</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVClass ffat_##NAME##_enc_class = { .class_name = "at_" #NAME "_enc", .item_name = av_default_item_name, .option = options, .version = LIBAVUTIL_VERSION_INT, };</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFAT_ENC</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>ID</name></type></parameter>, <parameter><type><name>PROFILES</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FFAT_ENC_CLASS(NAME) AVCodec ff_##NAME##_at_encoder = { .name = #NAME "_at", .long_name = NULL_IF_CONFIG_SMALL(#NAME " (AudioToolbox)"), .type = AVMEDIA_TYPE_AUDIO, .id = ID, .priv_data_size = sizeof(ATDecodeContext), .init = ffat_init_encoder, .close = ffat_close_encoder, .encode2 = ffat_encode, .flush = ffat_encode_flush, .priv_class = &amp;ffat_##NAME##_enc_class, .capabilities = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_DELAY __VA_ARGS__, .sample_fmts = (const enum AVSampleFormat[]) { AV_SAMPLE_FMT_S16, AV_SAMPLE_FMT_U8, AV_SAMPLE_FMT_NONE }, .caps_internal = FF_CODEC_CAP_INIT_THREADSAFE, .profiles = PROFILES, .wrapper_name = "at", };</cpp:value></cpp:define>






















<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>aac_at_channel_layouts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_CH_LAYOUT_MONO</name></expr>,
<expr><name>AV_CH_LAYOUT_STEREO</name></expr>,
<expr><name>AV_CH_LAYOUT_SURROUND</name></expr>,
<expr><name>AV_CH_LAYOUT_4POINT0</name></expr>,
<expr><name>AV_CH_LAYOUT_5POINT0</name></expr>,
<expr><name>AV_CH_LAYOUT_5POINT1</name></expr>,
<expr><name>AV_CH_LAYOUT_6POINT0</name></expr>,
<expr><name>AV_CH_LAYOUT_6POINT1</name></expr>,
<expr><name>AV_CH_LAYOUT_7POINT0</name></expr>,
<expr><name>AV_CH_LAYOUT_7POINT1_WIDE_BACK</name></expr>,
<expr><name>AV_CH_LAYOUT_QUAD</name></expr>,
<expr><name>AV_CH_LAYOUT_OCTAGONAL</name></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>FFAT_ENC</name><argument_list>(<argument>aac</argument>, <argument>AV_CODEC_ID_AAC</argument>, <argument>aac_profiles</argument>, <argument/>, <argument>.channel_layouts = aac_at_channel_layouts</argument>)</argument_list></macro>

<macro><name>FFAT_ENC</name><argument_list>(<argument>alac</argument>, <argument>AV_CODEC_ID_ALAC</argument>, <argument>NULL</argument>, <argument>| AV_CODEC_CAP_VARIABLE_FRAME_SIZE | AV_CODEC_CAP_LOSSLESS</argument>)</argument_list></macro>
<macro><name>FFAT_ENC</name><argument_list>(<argument>ilbc</argument>, <argument>AV_CODEC_ID_ILBC</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_ENC</name><argument_list>(<argument>pcm_alaw</argument>, <argument>AV_CODEC_ID_PCM_ALAW</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_ENC</name><argument_list>(<argument>pcm_mulaw</argument>, <argument>AV_CODEC_ID_PCM_MULAW</argument>, <argument>NULL</argument>)</argument_list></macro>
</unit>
