<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dirac_parser.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRAC_PARSE_INFO_PREFIX</name></cpp:macro> <cpp:value>0x42424344</cpp:value></cpp:define>





<typedef>typedef <type><struct>struct <name>DiracParseContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_synced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sync_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_bytes_needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>overread_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirac_unit_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dirac_unit</name></decl>;</decl_stmt>
}</block></struct></type> <name>DiracParseContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_frame_end</name><parameter_list>(<parameter><decl><type><name>DiracParseContext</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name> <init>= <expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pc</name><operator>-&gt;</operator><name>is_synced</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>state</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>DIRAC_PARSE_INFO_PREFIX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>is_synced</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>header_bytes_needed</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>sync_offset</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>is_synced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>sync_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>DIRAC_PARSE_INFO_PREFIX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>&gt;=</operator> <name><name>pc</name><operator>-&gt;</operator><name>header_bytes_needed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>i</name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>header_bytes_needed</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>header_bytes_needed</name></name> <operator>=</operator> <literal type="number">9</literal> <operator>-</operator> <operator>(</operator><name>buf_size</name> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>state</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>DiracParseUnit</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>next_pu_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_pu_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pu_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>DiracParseUnit</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack_parse_unit</name><parameter_list>(<parameter><decl><type><name>DiracParseUnit</name> <modifier>*</modifier></type><name>pu</name></decl></parameter>, <parameter><decl><type><name>DiracParseContext</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>valid_pu_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>,
<expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xCB</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">13</literal> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pu</name><operator>-&gt;</operator><name>pu_type</name></name> <operator>=</operator> <name><name>start</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pu</name><operator>-&gt;</operator><name>next_pu_offset</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pu</name><operator>-&gt;</operator><name>prev_pu_offset</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>valid_pu_types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pu</name><operator>-&gt;</operator><name>pu_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pu</name><operator>-&gt;</operator><name>pu_type</name></name> <operator>==</operator> <literal type="number">0x10</literal> <operator>&amp;&amp;</operator> <name><name>pu</name><operator>-&gt;</operator><name>next_pu_offset</name></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pu</name><operator>-&gt;</operator><name>next_pu_offset</name></name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pu</name><operator>-&gt;</operator><name>next_pu_offset</name></name> <operator>&amp;&amp;</operator> <name><name>pu</name><operator>-&gt;</operator><name>next_pu_offset</name></name> <operator>&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>pu</name><operator>-&gt;</operator><name>prev_pu_offset</name></name> <operator>&amp;&amp;</operator> <name><name>pu</name><operator>-&gt;</operator><name>prev_pu_offset</name></name> <operator>&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dirac_combine_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>next</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>parse_timing_info</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DiracParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name></expr></argument>,
<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>-=</operator> <name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pc</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf_size</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_buffer</name> <init>=
<expr><call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>,
<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>buf_size</name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>sync_offset</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>new_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>buf</name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>sync_offset</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>*</operator><name>buf_size</name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>sync_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <operator>*</operator><name>buf_size</name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>sync_offset</name></name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>DiracParseUnit</name></type> <name>pu1</name></decl>, <decl><type ref="prev"/><name>pu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_buffer</name> <init>= <expr><call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>,
<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>new_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name>next</name></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>unpack_parse_unit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pu1</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>unpack_parse_unit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pu</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">13</literal> <operator>-</operator> <name><name>pu1</name><operator>.</operator><name>prev_pu_offset</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>pu</name><operator>.</operator><name>next_pu_offset</name></name> <operator>!=</operator> <name><name>pu1</name><operator>.</operator><name>prev_pu_offset</name></name> <operator>||</operator>
<name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <name><name>pc</name><operator>-&gt;</operator><name>dirac_unit_size</name></name> <operator>+</operator> <literal type="number">13LL</literal> <operator>+</operator> <name><name>pu1</name><operator>.</operator><name>prev_pu_offset</name></name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf_size</name> <operator>=</operator> <name>next</name> <operator>-</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>header_bytes_needed</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>dirac_unit</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">13</literal> <operator>-</operator>
<name><name>pu1</name><operator>.</operator><name>prev_pu_offset</name></name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>dirac_unit_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>dirac_unit_size</name></name> <operator>+=</operator> <name><name>pu</name><operator>.</operator><name>next_pu_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pu</name><operator>.</operator><name>pu_type</name></name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x08</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>header_bytes_needed</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf_size</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>parse_timing_info</name> <operator>&amp;&amp;</operator> <name><name>pu1</name><operator>.</operator><name>prev_pu_offset</name></name> <operator>&gt;=</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur_pu</name> <init>= <expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator>
<name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">13</literal> <operator>-</operator> <name><name>pu1</name><operator>.</operator><name>prev_pu_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>cur_pu</name> <operator>+</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_dts</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>pts</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_dts</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_pu</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>dts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>dirac_unit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf_size</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>dirac_unit_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>dirac_unit_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>header_bytes_needed</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>next</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dirac_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DiracParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_COMPLETE_FRAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>find_frame_end</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pc</name><operator>-&gt;</operator><name>is_synced</name></name> <operator>&amp;&amp;</operator> <name>next</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>buf_size</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dirac_combine_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>buf_size</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<return>return <expr><name>next</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dirac_parse_close</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DiracParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_dirac_parser</name> <init>= <expr><block>{
<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_DIRAC</name></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DiracParseContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>dirac_parse</name></expr>,
<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>dirac_parse_close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
