<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\libopenjpegdec.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openjpeg.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JP2_SIG_TYPE</name></cpp:macro> <cpp:value>0x6A502020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JP2_SIG_VALUE</name></cpp:macro> <cpp:value>0x0D0A870A</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB_PIXEL_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_RGB24, AV_PIX_FMT_RGBA, AV_PIX_FMT_RGB48, AV_PIX_FMT_RGBA64</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAY_PIXEL_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_GRAY8, AV_PIX_FMT_YA8, AV_PIX_FMT_GRAY10, AV_PIX_FMT_GRAY12, AV_PIX_FMT_GRAY14, AV_PIX_FMT_GRAY16, AV_PIX_FMT_YA16</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV_PIXEL_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_YUV410P, AV_PIX_FMT_YUV411P, AV_PIX_FMT_YUVA420P, AV_PIX_FMT_YUV420P, AV_PIX_FMT_YUV422P, AV_PIX_FMT_YUVA422P, AV_PIX_FMT_YUV440P, AV_PIX_FMT_YUV444P, AV_PIX_FMT_YUVA444P, AV_PIX_FMT_YUV420P9, AV_PIX_FMT_YUV422P9, AV_PIX_FMT_YUV444P9, AV_PIX_FMT_YUVA420P9, AV_PIX_FMT_YUVA422P9, AV_PIX_FMT_YUVA444P9, AV_PIX_FMT_YUV420P10, AV_PIX_FMT_YUV422P10, AV_PIX_FMT_YUV444P10, AV_PIX_FMT_YUVA420P10, AV_PIX_FMT_YUVA422P10, AV_PIX_FMT_YUVA444P10, AV_PIX_FMT_YUV420P12, AV_PIX_FMT_YUV422P12, AV_PIX_FMT_YUV444P12, AV_PIX_FMT_YUV420P14, AV_PIX_FMT_YUV422P14, AV_PIX_FMT_YUV444P14, AV_PIX_FMT_YUV420P16, AV_PIX_FMT_YUV422P16, AV_PIX_FMT_YUV444P16, AV_PIX_FMT_YUVA420P16, AV_PIX_FMT_YUVA422P16, AV_PIX_FMT_YUVA444P16</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XYZ_PIXEL_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_XYZ12</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>libopenjpeg_rgb_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>RGB_PIXEL_FORMATS</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>libopenjpeg_gray_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>GRAY_PIXEL_FORMATS</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>libopenjpeg_yuv_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>YUV_PIXEL_FORMATS</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>libopenjpeg_all_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>RGB_PIXEL_FORMATS</name></expr>, <expr><name>GRAY_PIXEL_FORMATS</name></expr>, <expr><name>YUV_PIXEL_FORMATS</name></expr>, <expr><name>XYZ_PIXEL_FORMATS</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>LibOpenJPEGContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opj_dparameters_t</name></type> <name>dec_params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lowqual</name></decl>;</decl_stmt>
}</block></struct></type> <name>LibOpenJPEGContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>error_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>warning_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>info_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>BufferReader</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
}</block></struct></type> <name>BufferReader</name>;</typedef>

<function><type><specifier>static</specifier> <name>OPJ_SIZE_T</name></type> <name>stream_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out_buffer</name></decl></parameter>, <parameter><decl><type><name>OPJ_SIZE_T</name></type> <name>nb_bytes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BufferReader</name> <modifier>*</modifier></type><name>reader</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remaining</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>reader</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>OPJ_SIZE_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name><name>reader</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>reader</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&gt;</operator> <name>remaining</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_bytes</name> <operator>=</operator> <name>remaining</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out_buffer</name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>reader</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>nb_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nb_bytes</name></expr>;</expr_stmt>
<return>return <expr><name>nb_bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OPJ_OFF_T</name></type> <name>stream_skip</name><parameter_list>(<parameter><decl><type><name>OPJ_OFF_T</name></type> <name>nb_bytes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BufferReader</name> <modifier>*</modifier></type><name>reader</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>OPJ_SIZE_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>+</operator> <name><name>reader</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_bytes</name> <operator>=</operator> <operator>-</operator><name><name>reader</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>remaining</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>reader</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>OPJ_SIZE_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name><name>reader</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>reader</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_bytes</name> <operator>&gt;</operator> <name>remaining</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_bytes</name> <operator>=</operator> <name>remaining</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nb_bytes</name></expr>;</expr_stmt>
<return>return <expr><name>nb_bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OPJ_BOOL</name></type> <name>stream_seek</name><parameter_list>(<parameter><decl><type><name>OPJ_OFF_T</name></type> <name>nb_bytes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BufferReader</name> <modifier>*</modifier></type><name>reader</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nb_bytes</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>nb_bytes</name></expr></argument> &gt;</argument_list></name> <name><name>reader</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>OPJ_FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nb_bytes</name></expr>;</expr_stmt>
<return>return <expr><name>OPJ_TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>libopenjpeg_matches_pix_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>opj_image_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>!=</operator> <name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>match</name> <operator>&amp;&amp;</operator>
<name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>prec</name> <operator>&amp;&amp;</operator>
<literal type="number">1</literal> <operator>==</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>dx</name> <operator>&amp;&amp;</operator>
<literal type="number">1</literal> <operator>==</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>dy</name></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>match</name> <operator>&amp;&amp;</operator>
<name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>prec</name> <operator>&amp;&amp;</operator>
<literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>==</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dx</name> <operator>&amp;&amp;</operator>
<literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>==</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dy</name></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>match</name> <operator>&amp;&amp;</operator>
<name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prec</name> <operator>&amp;&amp;</operator>
<literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>==</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dx</name> <operator>&amp;&amp;</operator>
<literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>==</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dy</name></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>match</name> <operator>&amp;&amp;</operator>
<name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prec</name> <operator>&amp;&amp;</operator>
<literal type="number">1</literal> <operator>==</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dx</name> <operator>&amp;&amp;</operator>
<literal type="number">1</literal> <operator>==</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dy</name></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>match</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>libopenjpeg_guess_pix_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>opj_image_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>possible_fmts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>possible_fmts_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>color_space</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OPJ_CLRSPC_SRGB</name></expr>:</case>
<expr_stmt><expr><name>possible_fmts</name> <operator>=</operator> <name>libopenjpeg_rgb_pix_fmts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>possible_fmts_nb</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>libopenjpeg_rgb_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPJ_CLRSPC_GRAY</name></expr>:</case>
<expr_stmt><expr><name>possible_fmts</name> <operator>=</operator> <name>libopenjpeg_gray_pix_fmts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>possible_fmts_nb</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>libopenjpeg_gray_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPJ_CLRSPC_SYCC</name></expr>:</case>
<expr_stmt><expr><name>possible_fmts</name> <operator>=</operator> <name>libopenjpeg_yuv_pix_fmts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>possible_fmts_nb</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>libopenjpeg_yuv_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>possible_fmts</name> <operator>=</operator> <name>libopenjpeg_all_pix_fmts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>possible_fmts_nb</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>libopenjpeg_all_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>possible_fmts_nb</name></expr>;</condition> <incr><expr><operator>++</operator><name>index</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>libopenjpeg_matches_pix_fmt</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>possible_fmts</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>possible_fmts</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>libopenjpeg_ispacked</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>component_plane</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_GRAY16</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>component_plane</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>plane</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>component_plane</name> <operator>!=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>plane</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>libopenjpeg_copy_to_packed8</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name><name>picture</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>img_ptr</name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>index</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>img_ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>sgnd</name> <operator>+</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>libopenjpeg_copy_to_packed16</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>img_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>adjust</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>adjust</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>prec</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>shift</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name><name>picture</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>img_ptr</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>index</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>img_ptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>prec</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>sgnd</name> <operator>+</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>adjust</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>libopenjpeg_copyto8</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>comp_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>comp_data</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>img_ptr</name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>img_ptr</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>sgnd</name> <operator>+</operator> <operator>*</operator><name>comp_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>img_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>comp_data</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>libopenjpeg_copyto16</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>comp_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>img_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>adjust</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>adjust</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>prec</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>shift</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>comp_data</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>img_ptr</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>img_ptr</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>prec</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>sgnd</name> <operator>+</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>comp_data</name> <operator>&lt;&lt;</operator> <name><name>adjust</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>img_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>comp_data</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>libopenjpeg_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LibOpenJPEGContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>opj_set_default_decoder_parameters</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dec_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libopenjpeg_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LibOpenJPEGContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>frame</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixel_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ispacked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opj_image_t</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BufferReader</name></type> <name>reader</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>, <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opj_codec_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opj_stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>JP2_SIG_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>JP2_SIG_VALUE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dec</name> <operator>=</operator> <call><name>opj_create_decompress</name><argument_list>(<argument><expr><name>OPJ_CODEC_JP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><literal type="string">"jp2c"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dec</name> <operator>=</operator> <call><name>opj_create_decompress</name><argument_list>(<argument><expr><name>OPJ_CODEC_J2K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing decoder.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>opj_set_error_handler</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>error_callback</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>opj_set_warning_handler</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>warning_callback</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>opj_set_info_handler</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>info_callback</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting decoder handlers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dec_params</name><operator>.</operator><name>cp_layer</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lowqual</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dec_params</name><operator>.</operator><name>cp_reduce</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>opj_setup_decoder</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dec_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>opj_stream_default_create</name><argument_list>(<argument><expr><name>OPJ_STREAM_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Codestream could not be opened for reading.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>opj_stream_set_read_function</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>stream_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_stream_set_skip_function</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>stream_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_stream_set_seek_function</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>stream_seek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_stream_set_user_data</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_stream_set_user_data_length</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><call><name>opj_read_header</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error decoding codestream header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>x1</name></name> <operator>-</operator> <name><name>image</name><operator>-&gt;</operator><name>x0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>y1</name></name> <operator>-</operator> <name><name>image</name><operator>-&gt;</operator><name>y0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>libopenjpeg_matches_pix_fmt</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <call><name>libopenjpeg_guess_pix_fmt</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to determine pixel format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prec</name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prec</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><call><name>opj_decode</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error decoding codestream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>numcomps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>image</name><operator>-&gt;</operator><name>comps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Image component %d contains no data.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel_size</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ispacked</name> <operator>=</operator> <call><name>libopenjpeg_ispacked</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>pixel_size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ispacked</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libopenjpeg_copy_to_packed8</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>libopenjpeg_copyto8</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ispacked</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libopenjpeg_copy_to_packed8</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>libopenjpeg_copyto16</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ispacked</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libopenjpeg_copy_to_packed8</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ispacked</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>libopenjpeg_copy_to_packed16</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Pixel size %d"</literal></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>opj_image_destroy</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_stream_destroy</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opj_destroy_codec</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(LibOpenJPEGContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VD</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"lowqual"</literal></expr>, <expr><literal type="string">"Limit the number of layers used for decoding"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lowqual</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VD</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>openjpeg_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libopenjpeg"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libopenjpeg_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libopenjpeg"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"OpenJPEG JPEG 2000"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_JPEG2000</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LibOpenJPEGContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>libopenjpeg_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>libopenjpeg_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
<expr><operator>.</operator><name>max_lowres</name> <operator>=</operator> <literal type="number">31</literal></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>openjpeg_class</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libopenjpeg"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
