<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vp9dsp_template.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">12</literal></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_8x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4a</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4b</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>p4a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>p4b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_16x16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4a</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4b</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4c</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4d</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>p4a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>p4b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>p4c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>p4d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_32x32_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4a</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4b</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4c</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4d</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4e</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4f</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4g</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4h</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>p4a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>p4b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>p4c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>p4d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>p4e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>p4f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>p4g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>, <argument><expr><name>p4h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hor_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hor_8x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">7</literal> <operator>-</operator> <name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hor_16x16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hor_32x32_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>pixel4</name></type> <name>p4</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">31</literal> <operator>-</operator> <name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>, <argument><expr><name>p4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>tm_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>tl</name> <init>= <expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l_m_tl</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>y</name></expr>]</index></name> <operator>-</operator> <name>tl</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tm_8x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>tl</name> <init>= <expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l_m_tl</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">7</literal> <operator>-</operator> <name>y</name></expr>]</index></name> <operator>-</operator> <name>tl</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tm_16x16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>tl</name> <init>= <expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l_m_tl</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>y</name></expr>]</index></name> <operator>-</operator> <name>tl</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tm_32x32_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>tl</name> <init>= <expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l_m_tl</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">31</literal> <operator>-</operator> <name>y</name></expr>]</index></name> <operator>-</operator> <name>tl</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>+</operator> <name>l_m_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">12</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_8x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name>
<argument_list>(<argument><expr><operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_16x16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name>
<argument_list>(<argument><expr><operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_32x32_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name>
<argument_list>(<argument><expr><operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_left_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_left_8x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name>
<argument_list>(<argument><expr><operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_left_16x16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name>
<argument_list>(<argument><expr><operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_left_32x32_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name>
<argument_list>(<argument><expr><operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_top_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_top_8x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name>
<argument_list>(<argument><expr><operator>(</operator><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_top_16x16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name>
<argument_list>(<argument><expr><operator>(</operator><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_top_32x32_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name>
<argument_list>(<argument><expr><operator>(</operator><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_128_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_128_8x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_128_16x16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_128_32x32_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_127_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_127_8x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_127_16x16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_127_32x32_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_129_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_129_8x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_129_16x16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dc_129_32x32_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel4</name></type> <name>val</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">12</literal></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memset_bpc</name></cpp:macro> <cpp:value>memset</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>memset_bpc</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst[(x) + (y) * stride]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diag_downleft_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a0</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a1</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a2</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a3</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"/><name>a4</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a5</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a6</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a7</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>a1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>+</operator> <name>a2</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>a3</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a3</name> <operator>+</operator> <name>a4</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a4</name> <operator>+</operator> <name>a5</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a5</name> <operator>+</operator> <name>a6</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a7</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>a7</name></expr>;</expr_stmt> 
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>def_diag_downleft</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void diag_downleft_##size##x##size##_c(uint8_t *_dst, ptrdiff_t stride, const uint8_t *left, const uint8_t *_top) { pixel *dst = (pixel *) _dst; const pixel *top = (const pixel *) _top; int i, j; pixel v[size - 1]; stride /= sizeof(pixel); for (i = 0; i &lt; size - 2; i++) v[i] = (top[i] + top[i + 1] * 2 + top[i + 2] + 2) &gt;&gt; 2; v[size - 2] = (top[size - 2] + top[size - 1] * 3 + 2) &gt;&gt; 2; for (j = 0; j &lt; size; j++) { memcpy(dst + j*stride, v + j, (size - 1 - j) * sizeof(pixel)); memset_bpc(dst + j*stride + size - 1 - j, top[size - 1], j + 1); } }</cpp:value></cpp:define>



















<macro><name>def_diag_downleft</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>def_diag_downleft</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>def_diag_downleft</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diag_downright_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tl</name> <init>= <expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a0</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a1</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a2</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a3</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"/><name>l0</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>l1</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>l2</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>l3</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>tl</name> <operator>+</operator> <name>l0</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <name>tl</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>tl</name> <operator>+</operator> <name>a0</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>a1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>+</operator> <name>a2</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>def_diag_downright</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void diag_downright_##size##x##size##_c(uint8_t *_dst, ptrdiff_t stride, const uint8_t *_left, const uint8_t *_top) { pixel *dst = (pixel *) _dst; const pixel *top = (const pixel *) _top; const pixel *left = (const pixel *) _left; int i, j; pixel v[size + size - 1]; stride /= sizeof(pixel); for (i = 0; i &lt; size - 2; i++) { v[i ] = (left[i] + left[i + 1] * 2 + left[i + 2] + 2) &gt;&gt; 2; v[size + 1 + i] = (top[i] + top[i + 1] * 2 + top[i + 2] + 2) &gt;&gt; 2; } v[size - 2] = (left[size - 2] + left[size - 1] * 2 + top[-1] + 2) &gt;&gt; 2; v[size - 1] = (left[size - 1] + top[-1] * 2 + top[ 0] + 2) &gt;&gt; 2; v[size ] = (top[-1] + top[0] * 2 + top[ 1] + 2) &gt;&gt; 2; for (j = 0; j &lt; size; j++) memcpy(dst + j*stride, v + size - 1 - j, size * sizeof(pixel)); }</cpp:value></cpp:define>






















<macro><name>def_diag_downright</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>def_diag_downright</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>def_diag_downright</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_right_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tl</name> <init>= <expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a0</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a1</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a2</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a3</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"/><name>l0</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>l1</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>l2</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>tl</name> <operator>+</operator> <name>l0</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>tl</name> <operator>+</operator> <name>a0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <name>tl</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>a1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>tl</name> <operator>+</operator> <name>a0</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>+</operator> <name>a2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>a1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>a3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>+</operator> <name>a2</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>def_vert_right</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void vert_right_##size##x##size##_c(uint8_t *_dst, ptrdiff_t stride, const uint8_t *_left, const uint8_t *_top) { pixel *dst = (pixel *) _dst; const pixel *top = (const pixel *) _top; const pixel *left = (const pixel *) _left; int i, j; pixel ve[size + size/2 - 1], vo[size + size/2 - 1]; stride /= sizeof(pixel); for (i = 0; i &lt; size/2 - 2; i++) { vo[i] = (left[i*2 + 3] + left[i*2 + 2] * 2 + left[i*2 + 1] + 2) &gt;&gt; 2; ve[i] = (left[i*2 + 4] + left[i*2 + 3] * 2 + left[i*2 + 2] + 2) &gt;&gt; 2; } vo[size/2 - 2] = (left[size - 1] + left[size - 2] * 2 + left[size - 3] + 2) &gt;&gt; 2; ve[size/2 - 2] = (top[-1] + left[size - 1] * 2 + left[size - 2] + 2) &gt;&gt; 2; ve[size/2 - 1] = (top[-1] + top[0] + 1) &gt;&gt; 1; vo[size/2 - 1] = (left[size - 1] + top[-1] * 2 + top[0] + 2) &gt;&gt; 2; for (i = 0; i &lt; size - 1; i++) { ve[size/2 + i] = (top[i] + top[i + 1] + 1) &gt;&gt; 1; vo[size/2 + i] = (top[i - 1] + top[i] * 2 + top[i + 1] + 2) &gt;&gt; 2; } for (j = 0; j &lt; size / 2; j++) { memcpy(dst + j*2 *stride, ve + size/2 - 1 - j, size * sizeof(pixel)); memcpy(dst + (j*2 + 1)*stride, vo + size/2 - 1 - j, size * sizeof(pixel)); } }</cpp:value></cpp:define>






























<macro><name>def_vert_right</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>def_vert_right</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>def_vert_right</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hor_down_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l0</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>l1</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>l2</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>l3</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"/><name>tl</name> <init>= <expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a0</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a1</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a2</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>tl</name> <operator>+</operator> <name>a0</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>a1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>tl</name> <operator>+</operator> <name>l0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>tl</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>tl</name> <operator>+</operator> <name>l0</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>def_hor_down</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void hor_down_##size##x##size##_c(uint8_t *_dst, ptrdiff_t stride, const uint8_t *_left, const uint8_t *_top) { pixel *dst = (pixel *) _dst; const pixel *top = (const pixel *) _top; const pixel *left = (const pixel *) _left; int i, j; pixel v[size * 3 - 2]; stride /= sizeof(pixel); for (i = 0; i &lt; size - 2; i++) { v[i*2 ] = (left[i + 1] + left[i + 0] + 1) &gt;&gt; 1; v[i*2 + 1] = (left[i + 2] + left[i + 1] * 2 + left[i + 0] + 2) &gt;&gt; 2; v[size*2 + i] = (top[i - 1] + top[i] * 2 + top[i + 1] + 2) &gt;&gt; 2; } v[size*2 - 2] = (top[-1] + left[size - 1] + 1) &gt;&gt; 1; v[size*2 - 4] = (left[size - 1] + left[size - 2] + 1) &gt;&gt; 1; v[size*2 - 1] = (top[0] + top[-1] * 2 + left[size - 1] + 2) &gt;&gt; 2; v[size*2 - 3] = (top[-1] + left[size - 1] * 2 + left[size - 2] + 2) &gt;&gt; 2; for (j = 0; j &lt; size; j++) memcpy(dst + j*stride, v + size*2 - 2 - j*2, size * sizeof(pixel)); }</cpp:value></cpp:define>
























<macro><name>def_hor_down</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>def_hor_down</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>def_hor_down</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_left_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a0</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a1</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a2</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a3</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"/><name>a4</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a5</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a6</name> <init>= <expr><name><name>top</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>a1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>a1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>+</operator> <name>a2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>+</operator> <name>a2</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>a3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>a3</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a3</name> <operator>+</operator> <name>a4</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a3</name> <operator>+</operator> <name>a4</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a4</name> <operator>+</operator> <name>a5</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>a4</name> <operator>+</operator> <name>a5</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>a6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>def_vert_left</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void vert_left_##size##x##size##_c(uint8_t *_dst, ptrdiff_t stride, const uint8_t *left, const uint8_t *_top) { pixel *dst = (pixel *) _dst; const pixel *top = (const pixel *) _top; int i, j; pixel ve[size - 1], vo[size - 1]; stride /= sizeof(pixel); for (i = 0; i &lt; size - 2; i++) { ve[i] = (top[i] + top[i + 1] + 1) &gt;&gt; 1; vo[i] = (top[i] + top[i + 1] * 2 + top[i + 2] + 2) &gt;&gt; 2; } ve[size - 2] = (top[size - 2] + top[size - 1] + 1) &gt;&gt; 1; vo[size - 2] = (top[size - 2] + top[size - 1] * 3 + 2) &gt;&gt; 2; for (j = 0; j &lt; size / 2; j++) { memcpy(dst + j*2 * stride, ve + j, (size - j - 1) * sizeof(pixel)); memset_bpc(dst + j*2 * stride + size - j - 1, top[size - 1], j + 1); memcpy(dst + (j*2 + 1) * stride, vo + j, (size - j - 1) * sizeof(pixel)); memset_bpc(dst + (j*2 + 1) * stride + size - j - 1, top[size - 1], j + 1); } }</cpp:value></cpp:define>
























<macro><name>def_vert_left</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>def_vert_left</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>def_vert_left</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hor_up_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l0</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>l1</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>l2</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>l3</name> <init>= <expr><name><name>left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>DST</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>l3</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>def_hor_up</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void hor_up_##size##x##size##_c(uint8_t *_dst, ptrdiff_t stride, const uint8_t *_left, const uint8_t *top) { pixel *dst = (pixel *) _dst; const pixel *left = (const pixel *) _left; int i, j; pixel v[size*2 - 2]; stride /= sizeof(pixel); for (i = 0; i &lt; size - 2; i++) { v[i*2 ] = (left[i] + left[i + 1] + 1) &gt;&gt; 1; v[i*2 + 1] = (left[i] + left[i + 1] * 2 + left[i + 2] + 2) &gt;&gt; 2; } v[size*2 - 4] = (left[size - 2] + left[size - 1] + 1) &gt;&gt; 1; v[size*2 - 3] = (left[size - 2] + left[size - 1] * 3 + 2) &gt;&gt; 2; for (j = 0; j &lt; size / 2; j++) memcpy(dst + j*stride, v + j*2, size * sizeof(pixel)); for (j = size / 2; j &lt; size; j++) { memcpy(dst + j*stride, v + j*2, (size*2 - 2 - j*2) * sizeof(pixel)); memset_bpc(dst + j*stride + size*2 - 2 - j*2, left[size - 1], 2 + j*2 - size); } }</cpp:value></cpp:define>

























<macro><name>def_hor_up</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>def_hor_up</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>def_hor_up</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DST</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">8</literal></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>ff_vp9dsp_intrapred_init_10</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">10</literal></expr></cpp:if>
<function><type><specifier>static</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>av_cold</name> <name>void</name> <name>FUNC</name></type>(<name>ff_vp9dsp_intrapred_init</name>)<parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_intra_pred_bd_aware</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;intra_pred[tx][TM_VP8_PRED] = tm_##sz##_c; dsp-&gt;intra_pred[tx][DC_128_PRED] = dc_128_##sz##_c; dsp-&gt;intra_pred[tx][DC_127_PRED] = dc_127_##sz##_c; dsp-&gt;intra_pred[tx][DC_129_PRED] = dc_129_##sz##_c</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>==</operator> <literal type="number">12</literal></expr></cpp:if>
<expr_stmt><expr><call><name>ff_vp9dsp_intrapred_init_10</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_intra_pred</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_intra_pred_bd_aware(tx, sz)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_intra_pred</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;intra_pred[tx][VERT_PRED] = vert_##sz##_c; dsp-&gt;intra_pred[tx][HOR_PRED] = hor_##sz##_c; dsp-&gt;intra_pred[tx][DC_PRED] = dc_##sz##_c; dsp-&gt;intra_pred[tx][DIAG_DOWN_LEFT_PRED] = diag_downleft_##sz##_c; dsp-&gt;intra_pred[tx][DIAG_DOWN_RIGHT_PRED] = diag_downright_##sz##_c; dsp-&gt;intra_pred[tx][VERT_RIGHT_PRED] = vert_right_##sz##_c; dsp-&gt;intra_pred[tx][HOR_DOWN_PRED] = hor_down_##sz##_c; dsp-&gt;intra_pred[tx][VERT_LEFT_PRED] = vert_left_##sz##_c; dsp-&gt;intra_pred[tx][HOR_UP_PRED] = hor_up_##sz##_c; dsp-&gt;intra_pred[tx][LEFT_DC_PRED] = dc_left_##sz##_c; dsp-&gt;intra_pred[tx][TOP_DC_PRED] = dc_top_##sz##_c; init_intra_pred_bd_aware(tx, sz)</cpp:value></cpp:define>












<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>init_intra_pred</name><argument_list>(<argument><expr><name>TX_4X4</name></expr></argument>, <argument><expr><literal type="number">4x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_intra_pred</name><argument_list>(<argument><expr><name>TX_8X8</name></expr></argument>, <argument><expr><literal type="number">8x8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_intra_pred</name><argument_list>(<argument><expr><name>TX_16X16</name></expr></argument>, <argument><expr><literal type="number">16x16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_intra_pred</name><argument_list>(<argument><expr><name>TX_32X32</name></expr></argument>, <argument><expr><literal type="number">32x32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_intra_pred</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_intra_pred_bd_aware</name></cpp:undef>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>itxfm_wrapper</name><parameter_list>(<parameter><type><name>type_a</name></type></parameter>, <parameter><type><name>type_b</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>has_dconly</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void type_a##_##type_b##_##sz##x##sz##_add_c(uint8_t *_dst, ptrdiff_t stride, int16_t *_block, int eob) { int i, j; pixel *dst = (pixel *) _dst; dctcoef *block = (dctcoef *) _block, tmp[sz * sz], out[sz]; stride /= sizeof(pixel); if (has_dconly &amp;&amp; eob == 1) { const int t = ((((dctint) block[0] * 11585 + (1 &lt;&lt; 13)) &gt;&gt; 14) * 11585 + (1 &lt;&lt; 13)) &gt;&gt; 14; block[0] = 0; for (i = 0; i &lt; sz; i++) { for (j = 0; j &lt; sz; j++) dst[j * stride] = av_clip_pixel(dst[j * stride] + (bits ? (t + (1 &lt;&lt; (bits - 1))) &gt;&gt; bits : t)); dst++; } return; } for (i = 0; i &lt; sz; i++) type_a##sz##_1d(block + i, sz, tmp + i * sz, 0); memset(block, 0, sz * sz * sizeof(*block)); for (i = 0; i &lt; sz; i++) { type_b##sz##_1d(tmp + i, sz, out, 1); for (j = 0; j &lt; sz; j++) dst[j * stride] = av_clip_pixel(dst[j * stride] + (bits ? (out[j] + (1 &lt;&lt; (bits - 1))) &gt;&gt; bits : out[j])); dst++; } }</cpp:value></cpp:define>






































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>itxfm_wrap</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>itxfm_wrapper(idct, idct, sz, bits, 1) itxfm_wrapper(iadst, idct, sz, bits, 0) itxfm_wrapper(idct, iadst, sz, bits, 0) itxfm_wrapper(iadst, iadst, sz, bits, 0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((dctint) in[(x) * stride])</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>idct4_1d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dctint</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6270</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t3</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>iadst4_1d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dctint</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <literal type="number">5283</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">15212</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">9929</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">9929</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">5283</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">15212</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">13377</literal> <operator>*</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">13377</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t0</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>-</operator> <name>t3</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>itxfm_wrap</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>idct8_1d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dctint</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t0a</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t1a</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t2a</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t3a</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t4a</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t5a</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t6a</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t7a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t0a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t1a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6270</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t4a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3196</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16069</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t5a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">13623</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9102</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t6a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9102</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">13623</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t7a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16069</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3196</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>t0a</name> <operator>+</operator> <name>t3a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>t1a</name> <operator>+</operator> <name>t2a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1a</name> <operator>-</operator> <name>t2a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>t0a</name> <operator>-</operator> <name>t3a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <name>t4a</name> <operator>+</operator> <name>t5a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t5a</name> <operator>=</operator> <name>t4a</name> <operator>-</operator> <name>t5a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <name>t7a</name> <operator>+</operator> <name>t6a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6a</name> <operator>=</operator> <name>t7a</name> <operator>-</operator> <name>t6a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t5</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t6a</name> <operator>-</operator> <name>t5a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t6a</name> <operator>+</operator> <name>t5a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>t5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>+</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>-</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t2</name> <operator>-</operator> <name>t5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t7</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>iadst8_1d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dctint</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t0a</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t1a</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t2a</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t3a</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t4a</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t5a</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t6a</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t7a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t0a</name> <operator>=</operator> <literal type="number">16305</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1606</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1a</name> <operator>=</operator> <literal type="number">1606</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16305</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2a</name> <operator>=</operator> <literal type="number">14449</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7723</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t3a</name> <operator>=</operator> <literal type="number">7723</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">14449</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t4a</name> <operator>=</operator> <literal type="number">10394</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">12665</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t5a</name> <operator>=</operator> <literal type="number">12665</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">10394</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t6a</name> <operator>=</operator> <literal type="number">4756</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">15679</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t7a</name> <operator>=</operator> <literal type="number">15679</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4756</literal> <operator>*</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>t0a</name> <operator>+</operator> <name>t4a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>t1a</name> <operator>+</operator> <name>t5a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>t2a</name> <operator>+</operator> <name>t6a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <operator>(</operator><name>t3a</name> <operator>+</operator> <name>t7a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>t0a</name> <operator>-</operator> <name>t4a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <operator>(</operator><name>t1a</name> <operator>-</operator> <name>t5a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <operator>(</operator><name>t2a</name> <operator>-</operator> <name>t6a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <operator>(</operator><name>t3a</name> <operator>-</operator> <name>t7a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t4a</name> <operator>=</operator> <literal type="number">15137</literal> <operator>*</operator> <name>t4</name> <operator>+</operator> <literal type="number">6270</literal> <operator>*</operator> <name>t5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t5a</name> <operator>=</operator> <literal type="number">6270</literal> <operator>*</operator> <name>t4</name> <operator>-</operator> <literal type="number">15137</literal> <operator>*</operator> <name>t5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6a</name> <operator>=</operator> <literal type="number">15137</literal> <operator>*</operator> <name>t7</name> <operator>-</operator> <literal type="number">6270</literal> <operator>*</operator> <name>t6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7a</name> <operator>=</operator> <literal type="number">6270</literal> <operator>*</operator> <name>t7</name> <operator>+</operator> <literal type="number">15137</literal> <operator>*</operator> <name>t6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t3</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>t4a</name> <operator>+</operator> <name>t6a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t5a</name> <operator>+</operator> <name>t7a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <operator>(</operator><name>t4a</name> <operator>-</operator> <name>t6a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <operator>(</operator><name>t5a</name> <operator>-</operator> <name>t7a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name>t3</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t2</name> <operator>-</operator> <name>t3</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t6</name> <operator>+</operator> <name>t7</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>t6</name> <operator>-</operator> <name>t7</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>itxfm_wrap</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>idct16_1d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dctint</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>, <decl><type ref="prev"/><name>t9</name></decl>, <decl><type ref="prev"/><name>t10</name></decl>, <decl><type ref="prev"/><name>t11</name></decl>, <decl><type ref="prev"/><name>t12</name></decl>, <decl><type ref="prev"/><name>t13</name></decl>, <decl><type ref="prev"/><name>t14</name></decl>, <decl><type ref="prev"/><name>t15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t0a</name></decl>, <decl><type ref="prev"/><name>t1a</name></decl>, <decl><type ref="prev"/><name>t2a</name></decl>, <decl><type ref="prev"/><name>t3a</name></decl>, <decl><type ref="prev"/><name>t4a</name></decl>, <decl><type ref="prev"/><name>t5a</name></decl>, <decl><type ref="prev"/><name>t6a</name></decl>, <decl><type ref="prev"/><name>t7a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t8a</name></decl>, <decl><type ref="prev"/><name>t9a</name></decl>, <decl><type ref="prev"/><name>t10a</name></decl>, <decl><type ref="prev"/><name>t11a</name></decl>, <decl><type ref="prev"/><name>t12a</name></decl>, <decl><type ref="prev"/><name>t13a</name></decl>, <decl><type ref="prev"/><name>t14a</name></decl>, <decl><type ref="prev"/><name>t15a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t0a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t1a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6270</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t4a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3196</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16069</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t7a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16069</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3196</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t5a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">13623</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9102</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t6a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9102</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">13623</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t8a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1606</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16305</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t15a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16305</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1606</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t9a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">12665</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10394</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t14a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10394</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">12665</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t10a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">7723</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14449</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t13a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14449</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">7723</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t11a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15679</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4756</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t12a</name> <operator>=</operator> <operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4756</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15679</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>t0a</name> <operator>+</operator> <name>t3a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>t1a</name> <operator>+</operator> <name>t2a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1a</name> <operator>-</operator> <name>t2a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>t0a</name> <operator>-</operator> <name>t3a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <name>t4a</name> <operator>+</operator> <name>t5a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <name>t4a</name> <operator>-</operator> <name>t5a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <name>t7a</name> <operator>-</operator> <name>t6a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <name>t7a</name> <operator>+</operator> <name>t6a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t8</name> <operator>=</operator> <name>t8a</name> <operator>+</operator> <name>t9a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t9</name> <operator>=</operator> <name>t8a</name> <operator>-</operator> <name>t9a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t10</name> <operator>=</operator> <name>t11a</name> <operator>-</operator> <name>t10a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t11</name> <operator>=</operator> <name>t11a</name> <operator>+</operator> <name>t10a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t12</name> <operator>=</operator> <name>t12a</name> <operator>+</operator> <name>t13a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t13</name> <operator>=</operator> <name>t12a</name> <operator>-</operator> <name>t13a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t14</name> <operator>=</operator> <name>t15a</name> <operator>-</operator> <name>t14a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t15</name> <operator>=</operator> <name>t15a</name> <operator>+</operator> <name>t14a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t5a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t6</name> <operator>-</operator> <name>t5</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t6a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t6</name> <operator>+</operator> <name>t5</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t9a</name> <operator>=</operator> <operator>(</operator> <name>t14</name> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <name>t9</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t14a</name> <operator>=</operator> <operator>(</operator> <name>t14</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <name>t9</name> <operator>*</operator> <literal type="number">6270</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t10a</name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>t13</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <name>t10</name> <operator>*</operator> <literal type="number">6270</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t13a</name> <operator>=</operator> <operator>(</operator> <name>t13</name> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <name>t10</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t0a</name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1a</name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t6a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2a</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>t5a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3a</name> <operator>=</operator> <name>t3</name> <operator>+</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <name>t3</name> <operator>-</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <name>t2</name> <operator>-</operator> <name>t5a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t6a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t8a</name> <operator>=</operator> <name>t8</name> <operator>+</operator> <name>t11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t9</name> <operator>=</operator> <name>t9a</name> <operator>+</operator> <name>t10a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t10</name> <operator>=</operator> <name>t9a</name> <operator>-</operator> <name>t10a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t11a</name> <operator>=</operator> <name>t8</name> <operator>-</operator> <name>t11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t12a</name> <operator>=</operator> <name>t15</name> <operator>-</operator> <name>t12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t13</name> <operator>=</operator> <name>t14a</name> <operator>-</operator> <name>t13a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t14</name> <operator>=</operator> <name>t14a</name> <operator>+</operator> <name>t13a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t15a</name> <operator>=</operator> <name>t15</name> <operator>+</operator> <name>t12</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t10a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t13</name> <operator>-</operator> <name>t10</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t13a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t13</name> <operator>+</operator> <name>t10</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t12a</name> <operator>-</operator> <name>t11a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t12</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t12a</name> <operator>+</operator> <name>t11a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0a</name> <operator>+</operator> <name>t15a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1a</name> <operator>+</operator> <name>t14</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2a</name> <operator>+</operator> <name>t13a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3a</name> <operator>+</operator> <name>t12</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name> <operator>+</operator> <name>t11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t5</name> <operator>+</operator> <name>t10a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t6</name> <operator>+</operator> <name>t9</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t7</name> <operator>+</operator> <name>t8a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>t7</name> <operator>-</operator> <name>t8a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>t6</name> <operator>-</operator> <name>t9</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>t5</name> <operator>-</operator> <name>t10a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>t4</name> <operator>-</operator> <name>t11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>t3a</name> <operator>-</operator> <name>t12</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>t2a</name> <operator>-</operator> <name>t13a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>t1a</name> <operator>-</operator> <name>t14</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>t0a</name> <operator>-</operator> <name>t15a</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>iadst16_1d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dctint</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>, <decl><type ref="prev"/><name>t9</name></decl>, <decl><type ref="prev"/><name>t10</name></decl>, <decl><type ref="prev"/><name>t11</name></decl>, <decl><type ref="prev"/><name>t12</name></decl>, <decl><type ref="prev"/><name>t13</name></decl>, <decl><type ref="prev"/><name>t14</name></decl>, <decl><type ref="prev"/><name>t15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t0a</name></decl>, <decl><type ref="prev"/><name>t1a</name></decl>, <decl><type ref="prev"/><name>t2a</name></decl>, <decl><type ref="prev"/><name>t3a</name></decl>, <decl><type ref="prev"/><name>t4a</name></decl>, <decl><type ref="prev"/><name>t5a</name></decl>, <decl><type ref="prev"/><name>t6a</name></decl>, <decl><type ref="prev"/><name>t7a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t8a</name></decl>, <decl><type ref="prev"/><name>t9a</name></decl>, <decl><type ref="prev"/><name>t10a</name></decl>, <decl><type ref="prev"/><name>t11a</name></decl>, <decl><type ref="prev"/><name>t12a</name></decl>, <decl><type ref="prev"/><name>t13a</name></decl>, <decl><type ref="prev"/><name>t14a</name></decl>, <decl><type ref="prev"/><name>t15a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16364</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">804</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">804</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16364</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15893</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3981</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3981</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15893</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14811</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">7005</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">7005</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14811</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">13160</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9760</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9760</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">13160</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t8</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">11003</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">12140</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t9</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">12140</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">11003</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t10</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8423</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14053</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t11</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14053</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8423</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t12</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">5520</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15426</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t13</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15426</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">5520</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t14</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2404</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16207</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t15</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16207</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2404</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t0a</name> <operator>=</operator> <operator>(</operator><name>t0</name> <operator>+</operator> <name>t8</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t1a</name> <operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <name>t9</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2a</name> <operator>=</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <name>t10</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3a</name> <operator>=</operator> <operator>(</operator><name>t3</name> <operator>+</operator> <name>t11</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t4a</name> <operator>=</operator> <operator>(</operator><name>t4</name> <operator>+</operator> <name>t12</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t5a</name> <operator>=</operator> <operator>(</operator><name>t5</name> <operator>+</operator> <name>t13</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t6a</name> <operator>=</operator> <operator>(</operator><name>t6</name> <operator>+</operator> <name>t14</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t7a</name> <operator>=</operator> <operator>(</operator><name>t7</name> <operator>+</operator> <name>t15</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t8a</name> <operator>=</operator> <operator>(</operator><name>t0</name> <operator>-</operator> <name>t8</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t9a</name> <operator>=</operator> <operator>(</operator><name>t1</name> <operator>-</operator> <name>t9</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t10a</name> <operator>=</operator> <operator>(</operator><name>t2</name> <operator>-</operator> <name>t10</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t11a</name> <operator>=</operator> <operator>(</operator><name>t3</name> <operator>-</operator> <name>t11</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t12a</name> <operator>=</operator> <operator>(</operator><name>t4</name> <operator>-</operator> <name>t12</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t13a</name> <operator>=</operator> <operator>(</operator><name>t5</name> <operator>-</operator> <name>t13</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t14a</name> <operator>=</operator> <operator>(</operator><name>t6</name> <operator>-</operator> <name>t14</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t15a</name> <operator>=</operator> <operator>(</operator><name>t7</name> <operator>-</operator> <name>t15</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t8</name> <operator>=</operator> <name>t8a</name> <operator>*</operator> <literal type="number">16069</literal> <operator>+</operator> <name>t9a</name> <operator>*</operator> <literal type="number">3196</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t9</name> <operator>=</operator> <name>t8a</name> <operator>*</operator> <literal type="number">3196</literal> <operator>-</operator> <name>t9a</name> <operator>*</operator> <literal type="number">16069</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t10</name> <operator>=</operator> <name>t10a</name> <operator>*</operator> <literal type="number">9102</literal> <operator>+</operator> <name>t11a</name> <operator>*</operator> <literal type="number">13623</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t11</name> <operator>=</operator> <name>t10a</name> <operator>*</operator> <literal type="number">13623</literal> <operator>-</operator> <name>t11a</name> <operator>*</operator> <literal type="number">9102</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t12</name> <operator>=</operator> <name>t13a</name> <operator>*</operator> <literal type="number">16069</literal> <operator>-</operator> <name>t12a</name> <operator>*</operator> <literal type="number">3196</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t13</name> <operator>=</operator> <name>t13a</name> <operator>*</operator> <literal type="number">3196</literal> <operator>+</operator> <name>t12a</name> <operator>*</operator> <literal type="number">16069</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t14</name> <operator>=</operator> <name>t15a</name> <operator>*</operator> <literal type="number">9102</literal> <operator>-</operator> <name>t14a</name> <operator>*</operator> <literal type="number">13623</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t15</name> <operator>=</operator> <name>t15a</name> <operator>*</operator> <literal type="number">13623</literal> <operator>+</operator> <name>t14a</name> <operator>*</operator> <literal type="number">9102</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>t0a</name> <operator>+</operator> <name>t4a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>t1a</name> <operator>+</operator> <name>t5a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t2a</name> <operator>+</operator> <name>t6a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>t3a</name> <operator>+</operator> <name>t7a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <name>t0a</name> <operator>-</operator> <name>t4a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <name>t1a</name> <operator>-</operator> <name>t5a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <name>t2a</name> <operator>-</operator> <name>t6a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <name>t3a</name> <operator>-</operator> <name>t7a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t8a</name> <operator>=</operator> <operator>(</operator><name>t8</name> <operator>+</operator> <name>t12</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t9a</name> <operator>=</operator> <operator>(</operator><name>t9</name> <operator>+</operator> <name>t13</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t10a</name> <operator>=</operator> <operator>(</operator><name>t10</name> <operator>+</operator> <name>t14</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t11a</name> <operator>=</operator> <operator>(</operator><name>t11</name> <operator>+</operator> <name>t15</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t12a</name> <operator>=</operator> <operator>(</operator><name>t8</name> <operator>-</operator> <name>t12</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t13a</name> <operator>=</operator> <operator>(</operator><name>t9</name> <operator>-</operator> <name>t13</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t14a</name> <operator>=</operator> <operator>(</operator><name>t10</name> <operator>-</operator> <name>t14</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t15a</name> <operator>=</operator> <operator>(</operator><name>t11</name> <operator>-</operator> <name>t15</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t4a</name> <operator>=</operator> <name>t4</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <name>t5</name> <operator>*</operator> <literal type="number">6270</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t5a</name> <operator>=</operator> <name>t4</name> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <name>t5</name> <operator>*</operator> <literal type="number">15137</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t6a</name> <operator>=</operator> <name>t7</name> <operator>*</operator> <literal type="number">15137</literal> <operator>-</operator> <name>t6</name> <operator>*</operator> <literal type="number">6270</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t7a</name> <operator>=</operator> <name>t7</name> <operator>*</operator> <literal type="number">6270</literal> <operator>+</operator> <name>t6</name> <operator>*</operator> <literal type="number">15137</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t12</name> <operator>=</operator> <name>t12a</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <name>t13a</name> <operator>*</operator> <literal type="number">6270</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t13</name> <operator>=</operator> <name>t12a</name> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <name>t13a</name> <operator>*</operator> <literal type="number">15137</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t14</name> <operator>=</operator> <name>t15a</name> <operator>*</operator> <literal type="number">15137</literal> <operator>-</operator> <name>t14a</name> <operator>*</operator> <literal type="number">6270</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t15</name> <operator>=</operator> <name>t15a</name> <operator>*</operator> <literal type="number">6270</literal> <operator>+</operator> <name>t14a</name> <operator>*</operator> <literal type="number">15137</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t3</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t2a</name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3a</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>t4a</name> <operator>+</operator> <name>t6a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t5a</name> <operator>+</operator> <name>t7a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <operator>(</operator><name>t4a</name> <operator>-</operator> <name>t6a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <operator>(</operator><name>t5a</name> <operator>-</operator> <name>t7a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>t8a</name> <operator>+</operator> <name>t10a</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>t9a</name> <operator>+</operator> <name>t11a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t10</name> <operator>=</operator> <name>t8a</name> <operator>-</operator> <name>t10a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t11</name> <operator>=</operator> <name>t9a</name> <operator>-</operator> <name>t11a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t12</name> <operator>+</operator> <name>t14</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>t13</name> <operator>+</operator> <name>t15</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t14a</name> <operator>=</operator> <operator>(</operator><name>t12</name> <operator>-</operator> <name>t14</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t15a</name> <operator>=</operator> <operator>(</operator><name>t13</name> <operator>-</operator> <name>t15</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t2a</name> <operator>+</operator> <name>t3a</name><operator>)</operator> <operator>*</operator> <operator>-</operator><literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t2a</name> <operator>-</operator> <name>t3a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t7</name> <operator>+</operator> <name>t6</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t7</name> <operator>-</operator> <name>t6</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t11</name> <operator>+</operator> <name>t10</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t11</name> <operator>-</operator> <name>t10</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t14a</name> <operator>+</operator> <name>t15a</name><operator>)</operator> <operator>*</operator> <operator>-</operator><literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t14a</name> <operator>-</operator> <name>t15a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>itxfm_wrap</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>idct32_1d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dctint</name></type> <name>t0a</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t1a</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t2a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t3a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6270</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t4a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3196</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16069</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t7a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16069</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3196</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t5a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">13623</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9102</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t6a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9102</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">13623</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t8a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1606</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16305</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t15a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16305</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1606</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t9a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">12665</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10394</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t14a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10394</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">12665</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t10a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">7723</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14449</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t13a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14449</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">7723</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t11a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15679</literal> <operator>-</operator> <call><name>IN</name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4756</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t12a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4756</literal> <operator>+</operator> <call><name>IN</name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15679</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t16a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">804</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16364</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t31a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16364</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">804</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t17a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">12140</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">11003</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t30a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">11003</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">12140</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t18a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">7005</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14811</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t29a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14811</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">7005</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t19a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15426</literal> <operator>-</operator> <call><name>IN</name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">5520</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t28a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">5520</literal> <operator>+</operator> <call><name>IN</name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15426</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t20a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3981</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15893</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t27a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">15893</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3981</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t21a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14053</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8423</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t26a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8423</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">14053</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t22a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9760</literal> <operator>-</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">13160</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t25a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">13160</literal> <operator>+</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9760</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t23a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16207</literal> <operator>-</operator> <call><name>IN</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2404</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t24a</name> <init>= <expr><operator>(</operator><call><name>IN</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2404</literal> <operator>+</operator> <call><name>IN</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16207</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dctint</name></type> <name>t0</name> <init>= <expr><name>t0a</name> <operator>+</operator> <name>t3a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t1</name> <init>= <expr><name>t1a</name> <operator>+</operator> <name>t2a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t2</name> <init>= <expr><name>t1a</name> <operator>-</operator> <name>t2a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t3</name> <init>= <expr><name>t0a</name> <operator>-</operator> <name>t3a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t4</name> <init>= <expr><name>t4a</name> <operator>+</operator> <name>t5a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t5</name> <init>= <expr><name>t4a</name> <operator>-</operator> <name>t5a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t6</name> <init>= <expr><name>t7a</name> <operator>-</operator> <name>t6a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t7</name> <init>= <expr><name>t7a</name> <operator>+</operator> <name>t6a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t8</name> <init>= <expr><name>t8a</name> <operator>+</operator> <name>t9a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t9</name> <init>= <expr><name>t8a</name> <operator>-</operator> <name>t9a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t10</name> <init>= <expr><name>t11a</name> <operator>-</operator> <name>t10a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t11</name> <init>= <expr><name>t11a</name> <operator>+</operator> <name>t10a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t12</name> <init>= <expr><name>t12a</name> <operator>+</operator> <name>t13a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t13</name> <init>= <expr><name>t12a</name> <operator>-</operator> <name>t13a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t14</name> <init>= <expr><name>t15a</name> <operator>-</operator> <name>t14a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t15</name> <init>= <expr><name>t15a</name> <operator>+</operator> <name>t14a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t16</name> <init>= <expr><name>t16a</name> <operator>+</operator> <name>t17a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t17</name> <init>= <expr><name>t16a</name> <operator>-</operator> <name>t17a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t18</name> <init>= <expr><name>t19a</name> <operator>-</operator> <name>t18a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t19</name> <init>= <expr><name>t19a</name> <operator>+</operator> <name>t18a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t20</name> <init>= <expr><name>t20a</name> <operator>+</operator> <name>t21a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t21</name> <init>= <expr><name>t20a</name> <operator>-</operator> <name>t21a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t22</name> <init>= <expr><name>t23a</name> <operator>-</operator> <name>t22a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t23</name> <init>= <expr><name>t23a</name> <operator>+</operator> <name>t22a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t24</name> <init>= <expr><name>t24a</name> <operator>+</operator> <name>t25a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t25</name> <init>= <expr><name>t24a</name> <operator>-</operator> <name>t25a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t26</name> <init>= <expr><name>t27a</name> <operator>-</operator> <name>t26a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t27</name> <init>= <expr><name>t27a</name> <operator>+</operator> <name>t26a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t28</name> <init>= <expr><name>t28a</name> <operator>+</operator> <name>t29a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t29</name> <init>= <expr><name>t28a</name> <operator>-</operator> <name>t29a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t30</name> <init>= <expr><name>t31a</name> <operator>-</operator> <name>t30a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dctint</name></type> <name>t31</name> <init>= <expr><name>t31a</name> <operator>+</operator> <name>t30a</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t5a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t6</name> <operator>-</operator> <name>t5</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t6a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t6</name> <operator>+</operator> <name>t5</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t9a</name> <operator>=</operator> <operator>(</operator> <name>t14</name> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <name>t9</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t14a</name> <operator>=</operator> <operator>(</operator> <name>t14</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <name>t9</name> <operator>*</operator> <literal type="number">6270</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t10a</name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>t13</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <name>t10</name> <operator>*</operator> <literal type="number">6270</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t13a</name> <operator>=</operator> <operator>(</operator> <name>t13</name> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <name>t10</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t17a</name> <operator>=</operator> <operator>(</operator> <name>t30</name> <operator>*</operator> <literal type="number">3196</literal> <operator>-</operator> <name>t17</name> <operator>*</operator> <literal type="number">16069</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t30a</name> <operator>=</operator> <operator>(</operator> <name>t30</name> <operator>*</operator> <literal type="number">16069</literal> <operator>+</operator> <name>t17</name> <operator>*</operator> <literal type="number">3196</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t18a</name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>t29</name> <operator>*</operator> <literal type="number">16069</literal> <operator>+</operator> <name>t18</name> <operator>*</operator> <literal type="number">3196</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t29a</name> <operator>=</operator> <operator>(</operator> <name>t29</name> <operator>*</operator> <literal type="number">3196</literal> <operator>-</operator> <name>t18</name> <operator>*</operator> <literal type="number">16069</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t21a</name> <operator>=</operator> <operator>(</operator> <name>t26</name> <operator>*</operator> <literal type="number">13623</literal> <operator>-</operator> <name>t21</name> <operator>*</operator> <literal type="number">9102</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t26a</name> <operator>=</operator> <operator>(</operator> <name>t26</name> <operator>*</operator> <literal type="number">9102</literal> <operator>+</operator> <name>t21</name> <operator>*</operator> <literal type="number">13623</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t22a</name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>t25</name> <operator>*</operator> <literal type="number">9102</literal> <operator>+</operator> <name>t22</name> <operator>*</operator> <literal type="number">13623</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t25a</name> <operator>=</operator> <operator>(</operator> <name>t25</name> <operator>*</operator> <literal type="number">13623</literal> <operator>-</operator> <name>t22</name> <operator>*</operator> <literal type="number">9102</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t0a</name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1a</name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t6a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2a</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>t5a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3a</name> <operator>=</operator> <name>t3</name> <operator>+</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4a</name> <operator>=</operator> <name>t3</name> <operator>-</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t5</name> <operator>=</operator> <name>t2</name> <operator>-</operator> <name>t5a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t6a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7a</name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t8a</name> <operator>=</operator> <name>t8</name> <operator>+</operator> <name>t11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t9</name> <operator>=</operator> <name>t9a</name> <operator>+</operator> <name>t10a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t10</name> <operator>=</operator> <name>t9a</name> <operator>-</operator> <name>t10a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t11a</name> <operator>=</operator> <name>t8</name> <operator>-</operator> <name>t11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t12a</name> <operator>=</operator> <name>t15</name> <operator>-</operator> <name>t12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t13</name> <operator>=</operator> <name>t14a</name> <operator>-</operator> <name>t13a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t14</name> <operator>=</operator> <name>t14a</name> <operator>+</operator> <name>t13a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t15a</name> <operator>=</operator> <name>t15</name> <operator>+</operator> <name>t12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t16a</name> <operator>=</operator> <name>t16</name> <operator>+</operator> <name>t19</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t17</name> <operator>=</operator> <name>t17a</name> <operator>+</operator> <name>t18a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t18</name> <operator>=</operator> <name>t17a</name> <operator>-</operator> <name>t18a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t19a</name> <operator>=</operator> <name>t16</name> <operator>-</operator> <name>t19</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t20a</name> <operator>=</operator> <name>t23</name> <operator>-</operator> <name>t20</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t21</name> <operator>=</operator> <name>t22a</name> <operator>-</operator> <name>t21a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t22</name> <operator>=</operator> <name>t22a</name> <operator>+</operator> <name>t21a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t23a</name> <operator>=</operator> <name>t23</name> <operator>+</operator> <name>t20</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t24a</name> <operator>=</operator> <name>t24</name> <operator>+</operator> <name>t27</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t25</name> <operator>=</operator> <name>t25a</name> <operator>+</operator> <name>t26a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t26</name> <operator>=</operator> <name>t25a</name> <operator>-</operator> <name>t26a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t27a</name> <operator>=</operator> <name>t24</name> <operator>-</operator> <name>t27</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t28a</name> <operator>=</operator> <name>t31</name> <operator>-</operator> <name>t28</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t29</name> <operator>=</operator> <name>t30a</name> <operator>-</operator> <name>t29a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t30</name> <operator>=</operator> <name>t30a</name> <operator>+</operator> <name>t29a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t31a</name> <operator>=</operator> <name>t31</name> <operator>+</operator> <name>t28</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t10a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t13</name> <operator>-</operator> <name>t10</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t13a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t13</name> <operator>+</operator> <name>t10</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t12a</name> <operator>-</operator> <name>t11a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t12</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t12a</name> <operator>+</operator> <name>t11a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t18a</name> <operator>=</operator> <operator>(</operator> <name>t29</name> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <name>t18</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t29a</name> <operator>=</operator> <operator>(</operator> <name>t29</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <name>t18</name> <operator>*</operator> <literal type="number">6270</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t19</name> <operator>=</operator> <operator>(</operator> <name>t28a</name> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <name>t19a</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t28</name> <operator>=</operator> <operator>(</operator> <name>t28a</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <name>t19a</name> <operator>*</operator> <literal type="number">6270</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t20</name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>t27a</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <name>t20a</name> <operator>*</operator> <literal type="number">6270</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t27</name> <operator>=</operator> <operator>(</operator> <name>t27a</name> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <name>t20a</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t21a</name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>t26</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <name>t21</name> <operator>*</operator> <literal type="number">6270</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t26a</name> <operator>=</operator> <operator>(</operator> <name>t26</name> <operator>*</operator> <literal type="number">6270</literal> <operator>-</operator> <name>t21</name> <operator>*</operator> <literal type="number">15137</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>t0a</name> <operator>+</operator> <name>t15a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>t1a</name> <operator>+</operator> <name>t14</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t2a</name> <operator>+</operator> <name>t13a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>t3a</name> <operator>+</operator> <name>t12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <name>t4a</name> <operator>+</operator> <name>t11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t5a</name> <operator>=</operator> <name>t5</name> <operator>+</operator> <name>t10a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6a</name> <operator>=</operator> <name>t6</name> <operator>+</operator> <name>t9</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <name>t7a</name> <operator>+</operator> <name>t8a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t8</name> <operator>=</operator> <name>t7a</name> <operator>-</operator> <name>t8a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t9a</name> <operator>=</operator> <name>t6</name> <operator>-</operator> <name>t9</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t10</name> <operator>=</operator> <name>t5</name> <operator>-</operator> <name>t10a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t11a</name> <operator>=</operator> <name>t4a</name> <operator>-</operator> <name>t11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t12a</name> <operator>=</operator> <name>t3a</name> <operator>-</operator> <name>t12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t13</name> <operator>=</operator> <name>t2a</name> <operator>-</operator> <name>t13a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t14a</name> <operator>=</operator> <name>t1a</name> <operator>-</operator> <name>t14</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t15</name> <operator>=</operator> <name>t0a</name> <operator>-</operator> <name>t15a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t16</name> <operator>=</operator> <name>t16a</name> <operator>+</operator> <name>t23a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t17a</name> <operator>=</operator> <name>t17</name> <operator>+</operator> <name>t22</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t18</name> <operator>=</operator> <name>t18a</name> <operator>+</operator> <name>t21a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t19a</name> <operator>=</operator> <name>t19</name> <operator>+</operator> <name>t20</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t20a</name> <operator>=</operator> <name>t19</name> <operator>-</operator> <name>t20</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t21</name> <operator>=</operator> <name>t18a</name> <operator>-</operator> <name>t21a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t22a</name> <operator>=</operator> <name>t17</name> <operator>-</operator> <name>t22</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t23</name> <operator>=</operator> <name>t16a</name> <operator>-</operator> <name>t23a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t24</name> <operator>=</operator> <name>t31a</name> <operator>-</operator> <name>t24a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t25a</name> <operator>=</operator> <name>t30</name> <operator>-</operator> <name>t25</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t26</name> <operator>=</operator> <name>t29a</name> <operator>-</operator> <name>t26a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t27a</name> <operator>=</operator> <name>t28</name> <operator>-</operator> <name>t27</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t28a</name> <operator>=</operator> <name>t28</name> <operator>+</operator> <name>t27</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t29</name> <operator>=</operator> <name>t29a</name> <operator>+</operator> <name>t26a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t30a</name> <operator>=</operator> <name>t30</name> <operator>+</operator> <name>t25</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t31</name> <operator>=</operator> <name>t31a</name> <operator>+</operator> <name>t24a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t20</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t27a</name> <operator>-</operator> <name>t20a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t27</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t27a</name> <operator>+</operator> <name>t20a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t21a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t26</name> <operator>-</operator> <name>t21</name> <operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t26a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t26</name> <operator>+</operator> <name>t21</name> <operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t22</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t25a</name> <operator>-</operator> <name>t22a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t25</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t25a</name> <operator>+</operator> <name>t22a</name><operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t23a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t24</name> <operator>-</operator> <name>t23</name> <operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t24a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t24</name> <operator>+</operator> <name>t23</name> <operator>)</operator> <operator>*</operator> <literal type="number">11585</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t31</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t30a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>t29</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>+</operator> <name>t28a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name> <operator>+</operator> <name>t27</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t5a</name> <operator>+</operator> <name>t26a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t6a</name> <operator>+</operator> <name>t25</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t7</name> <operator>+</operator> <name>t24a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>t8</name> <operator>+</operator> <name>t23a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>t9a</name> <operator>+</operator> <name>t22</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>t10</name> <operator>+</operator> <name>t21a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>t11a</name> <operator>+</operator> <name>t20</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>t12a</name> <operator>+</operator> <name>t19a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>t13</name> <operator>+</operator> <name>t18</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>t14a</name> <operator>+</operator> <name>t17a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>t15</name> <operator>+</operator> <name>t16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name>t15</name> <operator>-</operator> <name>t16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name>t14a</name> <operator>-</operator> <name>t17a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name>t13</name> <operator>-</operator> <name>t18</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <name>t12a</name> <operator>-</operator> <name>t19a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <name>t11a</name> <operator>-</operator> <name>t20</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <name>t10</name> <operator>-</operator> <name>t21a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <name>t9a</name> <operator>-</operator> <name>t22</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <name>t8</name> <operator>-</operator> <name>t23a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>t7</name> <operator>-</operator> <name>t24a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <name>t6a</name> <operator>-</operator> <name>t25</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <name>t5a</name> <operator>-</operator> <name>t26a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <name>t4</name> <operator>-</operator> <name>t27</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>-</operator> <name>t28a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <name>t2</name> <operator>-</operator> <name>t29</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t30a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>-</operator> <name>t31</name></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>itxfm_wrapper</name><argument_list>(<argument>idct</argument>, <argument>idct</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>iwht4_1d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>IN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>-=</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <operator>(</operator><name>t0</name> <operator>-</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>t4</name> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t4</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>-=</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>+=</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>itxfm_wrapper</name><argument_list>(<argument>iwht</argument>, <argument>iwht</argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>itxfm_wrapper</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>itxfm_wrap</name></cpp:undef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_itxfm_init</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_itxfm</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;itxfm_add[tx][DCT_DCT] = idct_idct_##sz##_add_c; dsp-&gt;itxfm_add[tx][DCT_ADST] = iadst_idct_##sz##_add_c; dsp-&gt;itxfm_add[tx][ADST_DCT] = idct_iadst_##sz##_add_c; dsp-&gt;itxfm_add[tx][ADST_ADST] = iadst_iadst_##sz##_add_c</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_idct</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>nm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;itxfm_add[tx][DCT_DCT] = dsp-&gt;itxfm_add[tx][ADST_DCT] = dsp-&gt;itxfm_add[tx][DCT_ADST] = dsp-&gt;itxfm_add[tx][ADST_ADST] = nm##_add_c</cpp:value></cpp:define>





<expr_stmt><expr><call><name>init_itxfm</name><argument_list>(<argument><expr><name>TX_4X4</name></expr></argument>, <argument><expr><literal type="number">4x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_itxfm</name><argument_list>(<argument><expr><name>TX_8X8</name></expr></argument>, <argument><expr><literal type="number">8x8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_itxfm</name><argument_list>(<argument><expr><name>TX_16X16</name></expr></argument>, <argument><expr><literal type="number">16x16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_idct</name><argument_list>(<argument><expr><name>TX_32X32</name></expr></argument>, <argument><expr><name>idct_idct_32x32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_idct</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument> , <argument><expr><name>iwht_iwht_4x4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_itxfm</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_idct</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>loop_filter</name><parameter_list>(<parameter><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>H</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stridea</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>strideb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>wd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>F</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>E</name> <operator>&lt;&lt;=</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>I</name> <operator>&lt;&lt;=</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>H</name> <operator>&lt;&lt;=</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <name>stridea</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p7</name></decl>, <decl><type ref="prev"/><name>p6</name></decl>, <decl><type ref="prev"/><name>p5</name></decl>, <decl><type ref="prev"/><name>p4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p3</name> <init>= <expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>p2</name> <init>= <expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p1</name> <init>= <expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>p0</name> <init>= <expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q0</name> <init>= <expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>q1</name> <init>= <expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q2</name> <init>= <expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>q3</name> <init>= <expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q4</name></decl>, <decl><type ref="prev"/><name>q5</name></decl>, <decl><type ref="prev"/><name>q6</name></decl>, <decl><type ref="prev"/><name>q7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fm</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>p3</name> <operator>-</operator> <name>p2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>p2</name> <operator>-</operator> <name>p1</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>q1</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name>q2</name> <operator>-</operator> <name>q1</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>q3</name> <operator>-</operator> <name>q2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>I</name> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name>p0</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>q1</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>E</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flat8out</name></decl>, <decl><type ref="prev"/><name>flat8in</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fm</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wd</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p7</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p6</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p5</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p4</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q4</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q5</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q6</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q7</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>flat8out</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>p7</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>p6</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name>p5</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>p4</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name>q4</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>q5</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name>q6</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>q7</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wd</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flat8in</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>p3</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>p2</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>q1</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name>q2</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>q3</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>F</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wd</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>flat8out</name> <operator>&amp;&amp;</operator> <name>flat8in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p6</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>p5</name> <operator>+</operator> <name>p4</name> <operator>+</operator> <name>p3</name> <operator>+</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p6</name> <operator>+</operator> <name>p5</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>p4</name> <operator>+</operator> <name>p3</name> <operator>+</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p6</name> <operator>+</operator> <name>p5</name> <operator>+</operator> <name>p4</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>p3</name> <operator>+</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p6</name> <operator>+</operator> <name>p5</name> <operator>+</operator> <name>p4</name> <operator>+</operator> <name>p3</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p6</name> <operator>+</operator> <name>p5</name> <operator>+</operator> <name>p4</name> <operator>+</operator> <name>p3</name> <operator>+</operator> <name>p2</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <name>q4</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p7</name> <operator>+</operator> <name>p7</name> <operator>+</operator> <name>p6</name> <operator>+</operator> <name>p5</name> <operator>+</operator> <name>p4</name> <operator>+</operator> <name>p3</name> <operator>+</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <name>q4</name> <operator>+</operator> <name>q5</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p7</name> <operator>+</operator> <name>p6</name> <operator>+</operator> <name>p5</name> <operator>+</operator> <name>p4</name> <operator>+</operator> <name>p3</name> <operator>+</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <name>q4</name> <operator>+</operator> <name>q5</name> <operator>+</operator> <name>q6</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p6</name> <operator>+</operator> <name>p5</name> <operator>+</operator> <name>p4</name> <operator>+</operator> <name>p3</name> <operator>+</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <name>q4</name> <operator>+</operator> <name>q5</name> <operator>+</operator> <name>q6</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p5</name> <operator>+</operator> <name>p4</name> <operator>+</operator> <name>p3</name> <operator>+</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <name>q4</name> <operator>+</operator> <name>q5</name> <operator>+</operator> <name>q6</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p4</name> <operator>+</operator> <name>p3</name> <operator>+</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>q3</name> <operator>+</operator> <name>q4</name> <operator>+</operator> <name>q5</name> <operator>+</operator> <name>q6</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p3</name> <operator>+</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>q4</name> <operator>+</operator> <name>q5</name> <operator>+</operator> <name>q6</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <name>q4</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>q5</name> <operator>+</operator> <name>q6</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <name>q4</name> <operator>+</operator> <name>q5</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>q6</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <name>q4</name> <operator>+</operator> <name>q5</name> <operator>+</operator> <name>q6</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>
<name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <name>q7</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>wd</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>flat8in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p3</name> <operator>+</operator> <name>p3</name> <operator>+</operator> <name>p3</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p3</name> <operator>+</operator> <name>p3</name> <operator>+</operator> <name>p2</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p3</name> <operator>+</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>q2</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <name>q3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hev</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>H</name> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>q1</name> <operator>-</operator> <name>q0</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>H</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hev</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>av_clip_intp2</name><argument_list>(<argument><expr><name>p1</name> <operator>-</operator> <name>q1</name></expr></argument>, <argument><expr><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator> <operator>+</operator> <name>f</name></expr></argument>, <argument><expr><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>f</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>f</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>p0</name> <operator>+</operator> <name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>q0</name> <operator>-</operator> <name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>av_clip_intp2</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator></expr></argument>, <argument><expr><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>f</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>f</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>p0</name> <operator>+</operator> <name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>q0</name> <operator>-</operator> <name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>f1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>strideb</name> <operator>*</operator> <operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name>q1</name> <operator>-</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lf_8_fn</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>stridea</name></type></parameter>, <parameter><type><name>strideb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void loop_filter_##dir##_##wd##_8_c(uint8_t *_dst, ptrdiff_t stride, int E, int I, int H) { pixel *dst = (pixel *) _dst; stride /= sizeof(pixel); loop_filter(dst, E, I, H, stridea, strideb, wd); }</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lf_8_fns</name><parameter_list>(<parameter><type><name>wd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lf_8_fn(h, wd, stride, 1) lf_8_fn(v, wd, 1, stride)</cpp:value></cpp:define>



<macro><name>lf_8_fns</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>lf_8_fns</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>lf_8_fns</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lf_8_fn</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lf_8_fns</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lf_16_fn</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>, <parameter><type><name>stridea</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void loop_filter_##dir##_16_16_c(uint8_t *dst, ptrdiff_t stride, int E, int I, int H) { loop_filter_##dir##_16_8_c(dst, stride, E, I, H); loop_filter_##dir##_16_8_c(dst + 8 * stridea, stride, E, I, H); }</cpp:value></cpp:define>








<macro><name>lf_16_fn</name><argument_list>(<argument>h</argument>, <argument>stride</argument>)</argument_list></macro>
<macro><name>lf_16_fn</name><argument_list>(<argument>v</argument>, <argument>sizeof(pixel)</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lf_16_fn</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lf_mix_fn</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>, <parameter><type><name>wd1</name></type></parameter>, <parameter><type><name>wd2</name></type></parameter>, <parameter><type><name>stridea</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void loop_filter_##dir##_##wd1##wd2##_16_c(uint8_t *dst, ptrdiff_t stride, int E, int I, int H) { loop_filter_##dir##_##wd1##_8_c(dst, stride, E &amp; 0xff, I &amp; 0xff, H &amp; 0xff); loop_filter_##dir##_##wd2##_8_c(dst + 8 * stridea, stride, E &gt;&gt; 8, I &gt;&gt; 8, H &gt;&gt; 8); }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lf_mix_fns</name><parameter_list>(<parameter><type><name>wd1</name></type></parameter>, <parameter><type><name>wd2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lf_mix_fn(h, wd1, wd2, stride) lf_mix_fn(v, wd1, wd2, sizeof(pixel))</cpp:value></cpp:define>



<macro><name>lf_mix_fns</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>lf_mix_fns</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>lf_mix_fns</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>lf_mix_fns</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lf_mix_fn</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lf_mix_fns</name></cpp:undef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_loopfilter_init</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_h_4_8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_v_4_8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_h_8_8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_v_8_8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_h_16_8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_v_16_8_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_h_16_16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_v_16_16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_h_44_16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_v_44_16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_h_48_16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_v_48_16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_h_84_16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_v_84_16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_h_88_16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_mix2</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>loop_filter_v_88_16_c</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">12</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>copy_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>avg_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>rnd_avg_pixel4</name><argument_list>(<argument><expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>AV_RN4P</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fpel_fn</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void type##sz##_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my) { type##_c(dst, dst_stride, src, src_stride, sz, h); }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copy_avg_fn</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fpel_fn(copy, sz) fpel_fn(avg, sz)</cpp:value></cpp:define>



<macro><name>copy_avg_fn</name><argument_list>(<argument><literal type="number">64</literal></argument>)</argument_list></macro>
<macro><name>copy_avg_fn</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>
<macro><name>copy_avg_fn</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>copy_avg_fn</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>copy_avg_fn</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fpel_fn</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>copy_avg_fn</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_8TAP</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>F</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_pixel((F[0] * src[x + -3 * stride] + F[1] * src[x + -2 * stride] + F[2] * src[x + -1 * stride] + F[3] * src[x + +0 * stride] + F[4] * src[x + +1 * stride] + F[5] * src[x + +2 * stride] + F[6] * src[x + +3 * stride] + F[7] * src[x + +4 * stride] + 64) &gt;&gt; 7)</cpp:value></cpp:define>









<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>do_8tap_1d_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>ds</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>avg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>avg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <call><name>FILTER_8TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_8TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_8tap_1d_fn</name><parameter_list>(<parameter><type><name>opn</name></type></parameter>, <parameter><type><name>opa</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>ds</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_noinline void opn##_8tap_1d_##dir##_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int w, int h, const int16_t *filter) { do_8tap_1d_c(dst, dst_stride, src, src_stride, w, h, ds, filter, opa); }</cpp:value></cpp:define>







<macro><name>filter_8tap_1d_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">0</literal></argument>, <argument>v</argument>, <argument>src_stride / sizeof(pixel)</argument>)</argument_list></macro>
<macro><name>filter_8tap_1d_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">0</literal></argument>, <argument>h</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>filter_8tap_1d_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">1</literal></argument>, <argument>v</argument>, <argument>src_stride / sizeof(pixel)</argument>)</argument_list></macro>
<macro><name>filter_8tap_1d_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">1</literal></argument>, <argument>h</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>filter_8tap_1d_fn</name></cpp:undef>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>do_8tap_2d_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filterx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filtery</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>avg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_h</name> <init>= <expr><name>h</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">71</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_ptr</name> <init>= <expr><name>tmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>src_stride</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp_ptr</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_8TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>filterx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp_ptr</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>tmp_h</name></expr>)</condition>;</do>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>avg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <call><name>FILTER_8TAP</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>filtery</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_8TAP</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>filtery</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp_ptr</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_8tap_2d_fn</name><parameter_list>(<parameter><type><name>opn</name></type></parameter>, <parameter><type><name>opa</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_noinline void opn##_8tap_2d_hv_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int w, int h, const int16_t *filterx, const int16_t *filtery) { do_8tap_2d_c(dst, dst_stride, src, src_stride, w, h, filterx, filtery, opa); }</cpp:value></cpp:define>








<macro><name>filter_8tap_2d_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>filter_8tap_2d_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>filter_8tap_2d_fn</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_fn_1d</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>dir_m</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>type_idx</name></type></parameter>, <parameter><type><name>avg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void avg##_8tap_##type##_##sz##dir##_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my) { avg##_8tap_1d_##dir##_c(dst, dst_stride, src, src_stride, sz, h, ff_vp9_subpel_filters[type_idx][dir_m]); }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_fn_2d</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>type_idx</name></type></parameter>, <parameter><type><name>avg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void avg##_8tap_##type##_##sz##hv_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my) { avg##_8tap_2d_hv_c(dst, dst_stride, src, src_stride, sz, h, ff_vp9_subpel_filters[type_idx][mx], ff_vp9_subpel_filters[type_idx][my]); }</cpp:value></cpp:define>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">12</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_BILIN</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>mxy</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(src[x] + ((mxy * (src[x + stride] - src[x]) + 8) &gt;&gt; 4))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>do_bilin_1d_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>ds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mxy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>avg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>avg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <call><name>FILTER_BILIN</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>mxy</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_BILIN</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>mxy</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bilin_1d_fn</name><parameter_list>(<parameter><type><name>opn</name></type></parameter>, <parameter><type><name>opa</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>ds</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_noinline void opn##_bilin_1d_##dir##_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int w, int h, int mxy) { do_bilin_1d_c(dst, dst_stride, src, src_stride, w, h, ds, mxy, opa); }</cpp:value></cpp:define>







<macro><name>bilin_1d_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">0</literal></argument>, <argument>v</argument>, <argument>src_stride / sizeof(pixel)</argument>)</argument_list></macro>
<macro><name>bilin_1d_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">0</literal></argument>, <argument>h</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>bilin_1d_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">1</literal></argument>, <argument>v</argument>, <argument>src_stride / sizeof(pixel)</argument>)</argument_list></macro>
<macro><name>bilin_1d_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">1</literal></argument>, <argument>h</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bilin_1d_fn</name></cpp:undef>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>do_bilin_2d_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>avg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">65</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_ptr</name> <init>= <expr><name>tmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_h</name> <init>= <expr><name>h</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp_ptr</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_BILIN</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp_ptr</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>tmp_h</name></expr>)</condition>;</do>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>avg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <call><name>FILTER_BILIN</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_BILIN</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><name>tmp_ptr</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bilin_2d_fn</name><parameter_list>(<parameter><type><name>opn</name></type></parameter>, <parameter><type><name>opa</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_noinline void opn##_bilin_2d_hv_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int w, int h, int mx, int my) { do_bilin_2d_c(dst, dst_stride, src, src_stride, w, h, mx, my, opa); }</cpp:value></cpp:define>







<macro><name>bilin_2d_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>bilin_2d_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bilin_2d_fn</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bilinf_fn_1d</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>dir_m</name></type></parameter>, <parameter><type><name>avg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void avg##_bilin_##sz##dir##_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my) { avg##_bilin_1d_##dir##_c(dst, dst_stride, src, src_stride, sz, h, dir_m); }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bilinf_fn_2d</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>avg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void avg##_bilin_##sz##hv_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my) { avg##_bilin_2d_hv_c(dst, dst_stride, src, src_stride, sz, h, mx, my); }</cpp:value></cpp:define>







<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bilinf_fn_1d</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bilinf_fn_2d</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_fn</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>avg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>filter_fn_1d(sz, h, mx, regular, FILTER_8TAP_REGULAR, avg) filter_fn_1d(sz, v, my, regular, FILTER_8TAP_REGULAR, avg) filter_fn_2d(sz, regular, FILTER_8TAP_REGULAR, avg) filter_fn_1d(sz, h, mx, smooth, FILTER_8TAP_SMOOTH, avg) filter_fn_1d(sz, v, my, smooth, FILTER_8TAP_SMOOTH, avg) filter_fn_2d(sz, smooth, FILTER_8TAP_SMOOTH, avg) filter_fn_1d(sz, h, mx, sharp, FILTER_8TAP_SHARP, avg) filter_fn_1d(sz, v, my, sharp, FILTER_8TAP_SHARP, avg) filter_fn_2d(sz, sharp, FILTER_8TAP_SHARP, avg) bilinf_fn_1d(sz, h, mx, avg) bilinf_fn_1d(sz, v, my, avg) bilinf_fn_2d(sz, avg)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_fn_set</name><parameter_list>(<parameter><type><name>avg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>filter_fn(64, avg) filter_fn(32, avg) filter_fn(16, avg) filter_fn(8, avg) filter_fn(4, avg)</cpp:value></cpp:define>






<macro><name>filter_fn_set</name><argument_list>(<argument>put</argument>)</argument_list></macro>
<macro><name>filter_fn_set</name><argument_list>(<argument>avg</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>filter_fn</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>filter_fn_set</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>filter_fn_1d</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>filter_fn_2d</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bilinf_fn_1d</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bilinf_fn_2d</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">8</literal></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>ff_vp9dsp_mc_init_10</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">10</literal></expr></cpp:if>
<function><type><specifier>static</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>av_cold</name> <name>void</name> <name>FUNC</name></type>(<name>ff_vp9dsp_mc_init</name>)<parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>==</operator> <literal type="number">12</literal></expr></cpp:if>
<expr_stmt><expr><call><name>ff_vp9dsp_mc_init_10</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_fpel</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;mc[idx1][FILTER_8TAP_SMOOTH ][idx2][0][0] = type##sz##_c; dsp-&gt;mc[idx1][FILTER_8TAP_REGULAR][idx2][0][0] = type##sz##_c; dsp-&gt;mc[idx1][FILTER_8TAP_SHARP ][idx2][0][0] = type##sz##_c; dsp-&gt;mc[idx1][FILTER_BILINEAR ][idx2][0][0] = type##sz##_c</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_copy_avg</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_fpel(idx, 0, sz, copy); init_fpel(idx, 1, sz, avg)</cpp:value></cpp:define>



<expr_stmt><expr><call><name>init_copy_avg</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_copy_avg</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_copy_avg</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_copy_avg</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_copy_avg</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_copy_avg</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_fpel</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel1_bd_aware</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>idxh</name></type></parameter>, <parameter><type><name>idxv</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;mc[idx1][FILTER_8TAP_SMOOTH ][idx2][idxh][idxv] = type##_8tap_smooth_##sz##dir##_c; dsp-&gt;mc[idx1][FILTER_8TAP_REGULAR][idx2][idxh][idxv] = type##_8tap_regular_##sz##dir##_c; dsp-&gt;mc[idx1][FILTER_8TAP_SHARP ][idx2][idxh][idxv] = type##_8tap_sharp_##sz##dir##_c</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>==</operator> <literal type="number">12</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel1</name></cpp:macro> <cpp:value>init_subpel1_bd_aware</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel1</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>idxh</name></type></parameter>, <parameter><type><name>idxv</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_subpel1_bd_aware(idx1, idx2, idxh, idxv, sz, dir, type); dsp-&gt;mc[idx1][FILTER_BILINEAR ][idx2][idxh][idxv] = type##_bilin_##sz##dir##_c</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel2</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>idxh</name></type></parameter>, <parameter><type><name>idxv</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_subpel1(0, idx, idxh, idxv, 64, dir, type); init_subpel1(1, idx, idxh, idxv, 32, dir, type); init_subpel1(2, idx, idxh, idxv, 16, dir, type); init_subpel1(3, idx, idxh, idxv, 8, dir, type); init_subpel1(4, idx, idxh, idxv, 4, dir, type)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel3</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_subpel2(idx, 1, 1, hv, type); init_subpel2(idx, 0, 1, v, type); init_subpel2(idx, 1, 0, h, type)</cpp:value></cpp:define>




<expr_stmt><expr><call><name>init_subpel3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_subpel3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel3</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel1_bd_aware</name></cpp:undef>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>do_scaled_8tap_c</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>_dst</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>dst_stride</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>_src</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>src_stride</name></expr></argument>,
<argument><expr><name>int</name> <name>w</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>, <argument><expr><name>int</name> <name>mx</name></expr></argument>, <argument><expr><name>int</name> <name>my</name></expr></argument>,
<argument><expr><name>int</name> <name>dx</name></expr></argument>, <argument><expr><name>int</name> <name>dy</name></expr></argument>, <argument><expr><name>int</name> <name>avg</name></expr></argument>,
<argument><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>filters</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_h</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>dy</name> <operator>+</operator> <name>my</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">135</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_ptr</name> <init>= <expr><name>tmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>src_stride</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>imx</name> <init>= <expr><name>mx</name></expr></init></decl>, <decl><type ref="prev"/><name>ioff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmp_ptr</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_8TAP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ioff</name></expr></argument>, <argument><expr><name><name>filters</name><index>[<expr><name>imx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imx</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ioff</name> <operator>+=</operator> <name>imx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>imx</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp_ptr</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>tmp_h</name></expr>)</condition>;</do>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>filters</name><index>[<expr><name>my</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>avg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <call><name>FILTER_8TAP</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_8TAP</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_ptr</name> <operator>+=</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scaled_filter_8tap_fn</name><parameter_list>(<parameter><type><name>opn</name></type></parameter>, <parameter><type><name>opa</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_noinline void opn##_scaled_8tap_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int w, int h, int mx, int my, int dx, int dy, const int16_t (*filters)[8]) { do_scaled_8tap_c(dst, dst_stride, src, src_stride, w, h, mx, my, dx, dy, opa, filters); }</cpp:value></cpp:define>









<macro><name>scaled_filter_8tap_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>scaled_filter_8tap_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>scaled_filter_8tap_fn</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FILTER_8TAP</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scaled_filter_fn</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>type_idx</name></type></parameter>, <parameter><type><name>avg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void avg##_scaled_##type##_##sz##_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my, int dx, int dy) { avg##_scaled_8tap_c(dst, dst_stride, src, src_stride, sz, h, mx, my, dx, dy, ff_vp9_subpel_filters[type_idx]); }</cpp:value></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">12</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>do_scaled_bilin_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>avg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pixel</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">129</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp_ptr</name> <init>= <expr><name>tmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_h</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>dy</name> <operator>+</operator> <name>my</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src_stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>imx</name> <init>= <expr><name>mx</name></expr></init></decl>, <decl><type ref="prev"/><name>ioff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmp_ptr</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_BILIN</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ioff</name></expr></argument>, <argument><expr><name>imx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imx</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ioff</name> <operator>+=</operator> <name>imx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>imx</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp_ptr</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>tmp_h</name></expr>)</condition>;</do>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>avg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <call><name>FILTER_BILIN</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FILTER_BILIN</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_ptr</name> <operator>+=</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scaled_bilin_fn</name><parameter_list>(<parameter><type><name>opn</name></type></parameter>, <parameter><type><name>opa</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_noinline void opn##_scaled_bilin_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int w, int h, int mx, int my, int dx, int dy) { do_scaled_bilin_c(dst, dst_stride, src, src_stride, w, h, mx, my, dx, dy, opa); }</cpp:value></cpp:define>







<macro><name>scaled_bilin_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>scaled_bilin_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>scaled_bilin_fn</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FILTER_BILIN</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scaled_bilinf_fn</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>avg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void avg##_scaled_bilin_##sz##_c(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my, int dx, int dy) { avg##_scaled_bilin_c(dst, dst_stride, src, src_stride, sz, h, mx, my, dx, dy); }</cpp:value></cpp:define>







<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scaled_bilinf_fn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scaled_filter_fns</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>avg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scaled_filter_fn(sz, regular, FILTER_8TAP_REGULAR, avg) scaled_filter_fn(sz, smooth, FILTER_8TAP_SMOOTH, avg) scaled_filter_fn(sz, sharp, FILTER_8TAP_SHARP, avg) scaled_bilinf_fn(sz, avg)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scaled_filter_fn_set</name><parameter_list>(<parameter><type><name>avg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scaled_filter_fns(64, avg) scaled_filter_fns(32, avg) scaled_filter_fns(16, avg) scaled_filter_fns(8, avg) scaled_filter_fns(4, avg)</cpp:value></cpp:define>






<macro><name>scaled_filter_fn_set</name><argument_list>(<argument>put</argument>)</argument_list></macro>
<macro><name>scaled_filter_fn_set</name><argument_list>(<argument>avg</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>scaled_filter_fns</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>scaled_filter_fn_set</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>scaled_filter_fn</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>scaled_bilinf_fn</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">8</literal></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>ff_vp9dsp_scaled_mc_init_10</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>!=</operator> <literal type="number">10</literal></expr></cpp:if>
<function><type><specifier>static</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>av_cold</name> <name>void</name> <name>FUNC</name></type>(<name>ff_vp9dsp_scaled_mc_init</name>)<parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_scaled_bd_aware</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;smc[idx1][FILTER_8TAP_SMOOTH ][idx2] = type##_scaled_smooth_##sz##_c; dsp-&gt;smc[idx1][FILTER_8TAP_REGULAR][idx2] = type##_scaled_regular_##sz##_c; dsp-&gt;smc[idx1][FILTER_8TAP_SHARP ][idx2] = type##_scaled_sharp_##sz##_c</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>==</operator> <literal type="number">12</literal></expr></cpp:if>
<expr_stmt><expr><call><name>ff_vp9dsp_scaled_mc_init_10</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_scaled</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_scaled_bd_aware(a,b,c,d)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_scaled</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_scaled_bd_aware(idx1, idx2, sz, type); dsp-&gt;smc[idx1][FILTER_BILINEAR ][idx2] = type##_scaled_bilin_##sz##_c</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_scaled_put_avg</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_scaled(idx, 0, sz, put); init_scaled(idx, 1, sz, avg)</cpp:value></cpp:define>



<expr_stmt><expr><call><name>init_scaled_put_avg</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_scaled_put_avg</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_scaled_put_avg</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_scaled_put_avg</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_scaled_put_avg</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_scaled_put_avg</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_scaled</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_scaled_bd_aware</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name> <name>FUNC</name></type>(<name>ff_vp9dsp_init</name>)<parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>FUNC</name></type>(<name>ff_vp9dsp_intrapred_init</name>)<parameter_list>(<parameter><decl><type><name>dsp</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>vp9dsp_itxfm_init</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp9dsp_loopfilter_init</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>FUNC</name></type>(<name>ff_vp9dsp_mc_init</name>)<parameter_list>(<parameter><decl><type><name>dsp</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>FUNC</name></type>(<name>ff_vp9dsp_scaled_mc_init</name>)<parameter_list>(<parameter><decl><type><name>dsp</name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></function>
</unit>
